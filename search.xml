<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>清华园日记——第二部</title>
    <url>/2022/02/20/%E9%9A%8F%E7%AC%94/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0--%E7%AC%AC%E4%BA%8C%E9%83%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>时间过得真快，我的第一部《清华园日记》已经写完了，写了 2 万多字，配图 70 余张，阅读量 300+，哈哈哈！</p>
<p>今天已经到了 2022 年 2 月 20 日，打算给新的学期开一部新的《清华园日记》，记录大二下学期的生活。由于学期中更加忙碌，所以没法日记了，偶尔写一写，图一个快乐！</p>
<p>以下是第一部的前言。</p>
<blockquote>
<p>今天翻完了季羡林老先生大三大四时写的《清华园日记》</p>
<ul>
<li><p>1932.9.11 “我的稿子还没登出，妈的。“</p>
</li>
<li><p>”1932.9.23 “早晨只是上班，坐得腚都痛了。”这天他还说，“德华有喜”，他念大三的时候妻子就怀孕了。</p>
</li>
<li><p>1932.12.21 “说实话，看女人打篮球……是在看大腿。附中女同学大腿倍儿黑，只看半场而返。</p>
</li>
<li><p>”1933.4.29 “因为女生宿舍开放，特别去看了一遍。一大半都不在屋里。</p>
</li>
<li><p>”1934.3.13 “没作什么有意义的事——妈的，这些混蛋教授，不但不知道自己泄气，还整天考，不是你考，就是我考，考他娘的什么东西？</p>
<p>然而，这些不过是季老先生两年日记里的边角余料——<del>虽然我承认这些东西最吸引我了</del>——更多的内容记载了他读的书，做的研究，平日的写作，经济状况，日常生活。</p>
<p>自己现在跟当年的他一样大，边看边觉得自己很菜……</p>
<p>其实他的很多吐槽都是有道理的，当时和现在的清华都有很多槽点。</p>
<p>关于那些似乎有损他形象的话，季老先生是这么说的：</p>
<blockquote>
<p>“这些话是不是要删掉呢？我考虑了一下，决定不删，一仍其旧，一句话也没有删。我七十年前不是圣人，今天不是圣人，将来也不会成为圣人。我不想到孔庙里去陪着吃冷猪肉。我把自己活脱脱地暴露于光天化日之下。”</p>
</blockquote>
<p>受此启发，我也写个日记记录下我的清华园生活。</p>
</li>
</ul>
</blockquote>
<h1 id="2-月-20-日"><a href="#2-月-20-日" class="headerlink" title="2 月 20 日"></a>2 月 20 日</h1><ul>
<li>上午和爸打电话，讲了讲棕榈中介的事情，感觉我爸真的比我妈理解我些，初中决定放弃直升考试去中考也是吧，好难得深入地谈了谈，前后聊了一小时。</li>
<li>现在我才知道，对我而言，中介最大的意义不是给我提供信息，而是给爸妈提供信息，消除他们的焦虑和对我的不信任。</li>
<li>中午和韩哥约饭去吃海鲜，还有一会儿就要出发了，哈哈哈。</li>
<li>下午打算写个博客纪念下《进击的巨人》——原来人类生来就是自由的，也将一生都被自由囚禁。</li>
<li>下午得给 AIR 作图了，ECCV 冲啦！！</li>
<li>中午去理发，再不理发，就要被逐出家门了，qvq</li>
</ul>
<h2 id="下午-15-25-分"><a href="#下午-15-25-分" class="headerlink" title="下午 15:25 分"></a>下午 15:25 分</h2><ul>
<li>我现在正在理发店烫头发，本准备简单理一理头发就好了，结果看了看烫发的效果，真香，遂决议烫发，理发的 tony 老师说，因为自己懒得剪头发，就烫发好了</li>
<li>貌似烫发后锻炼完，洗头就恢复了</li>
<li>很神奇，烫发居然有固定的效果，我查了查原理，居然百度百科比维基还全，那就上<a href="https://baike.baidu.com/item/%E7%83%AB%E5%8F%91/1201427">百度百科吧</a></li>
<li>破防了，明天就要开学了，我都快忘了怎么上课了</li>
<li>离谱，为什么卷头发这么痛</li>
</ul>
<h1 id="2-月-21-日"><a href="#2-月-21-日" class="headerlink" title="2 月 21 日"></a>2 月 21 日</h1><h2 id="早晨-07-49"><a href="#早晨-07-49" class="headerlink" title="早晨 07:49"></a>早晨 07:49</h2><ul>
<li><p>我终于发现了长期不放假保持工作的坏处，因为长期保持着七成的工作投入，开学后我几乎感觉不到心理上的变化，还是有些疲惫，然后日常翘课。</p>
</li>
<li><p>早晨看到<a href="https://mp.weixin.qq.com/s/1d8OxSlQ0hHIS5xaiAI0WA">一个案例</a>， 3.38 / 4.3 录了 CMU，我超，破防了</p>
</li>
<li><!--为什么 exgg CMU 全聚德？-->
</li>
<li><p>破案了，上面那个案例不是申请的 CS 专业，MSISPM：Information Security Policy and Management</p>
</li>
<li><p>上午总结下收集到的课程信息，写一写这几天的课程安排</p>
<blockquote>
<p><strong>Zcr</strong></p>
<p>软工应该会比较费时间，尤其是如果想卷的话，而且我丝毫不怀疑你要卷[Doge]，可能会和科研冲突比较大，注意平衡时间</p>
<p>数电每周都要写作业，作业内容和课上讲的很相关，所以可能没法集中到最后看录像，每周看一次录像不如直接去上课了</p>
<p>人智导我去年就是一节没听，上课都在做科研，实践证明是可行的（我去问了问他怎么做到的）</p>
<p>网原平常不算太占时间，期末比较可怕，如果你想退了的话也可以，这样下学期你就可以计网联合了</p>
<p>不过计网联合不仅实验联合，这俩放一个学期学一起期末的话比较噩梦，两个课都是考察的面特别广，期末考试恶魔难度，我反正是感觉很幸运没有在一起考这俩</p>
<p><strong>Holder</strong></p>
<p>软工有签到，虽然是随机签到，但是算分</p>
<p>网原我有点个人情绪在里面，建议早点弄掉，大三真的烦</p>
<p>数学课嘛 一般都没啥签到，thy的话是没有的 lh不知道</p>
<p><strong>Xd</strong></p>
<p>软工签到，占10分，图形学反正得听雨课堂</p>
<p>而且图形学雨课堂课堂提问还特别奇葩（我已经找到了雨课堂所有题目）</p>
<p>图形学雨课堂正确率80%是满分，0%是0分</p>
<p>不过数电得交纸质版作业，数电考前得充分留出复习时间，一道大题做崩了可以直接3.3，因为前面30分小题，基本上每个人有4-5分都拿不到，网原也类似，小题总有5分你各种复习不到吗，网原这课要背八百多页PPT</p>
<p>​    <strong>Qlp</strong></p>
<p>数电貌似是课间助教会发腾讯文档让大家签到，图形学是雨课堂答题算成绩来着</p>
<p>软工其实也签到，下课前不定期有小测，然后每周四下午还要和助教或者客户代表meet</p>
<p>如果去上课的话，基本上就是上半节课ppt上的某一个细节揪出来，课间之后问这样子</p>
<p>基本没有人去软工，而且老师和大家中间一般都隔着，5排空座</p>
<p><strong>Mk</strong></p>
<p>软工需要签到（选好队友就好，注意git使用规范），图形学好像答题有分的（我们是的），人智导考试比较容易复习</p>
<p>软工的git规范很重要</p>
<p><strong>Zcy_9</strong></p>
<p>人智导题是要做的，就 考主要考传统方法AI，所以该做还是得做的，包括作业 也不是很好做。。。</p>
</blockquote>
</li>
<li><p>打算和车队好友们负载均衡，其实也没必要负载均衡，我全程录像就好了</p>
</li>
<li><p>昨晚画 EECV 的图弄得眼睛要瞎了，烦死了</p>
</li>
<li><p>今天 AIR 没事，我就写 SRT</p>
</li>
<li><p>预约了护照了，周四上午</p>
</li>
<li><p>问了问各种上课地点</p>
</li>
</ul>
<h2 id="晚上-20-29"><a href="#晚上-20-29" class="headerlink" title="晚上 20:29"></a>晚上 20:29</h2><ul>
<li><p>上午写了写 SRT 的代码，虽然代码越来越好看了，但是成就感不强，因为没能解决很多 content 混入广告的问题</p>
</li>
<li><p>中午起床，给尹霞发了邮件，然后突然选上了能源与社会，反手把美社文退了，然后退了网原</p>
</li>
<li><p>下午和 ttn 一起赶完了 1~4 周的<a href="https://zhaochenyang20.github.io/2022/02/21/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/answer_for_mao/">慕课视频和答案</a></p>
</li>
<li><p>可惜自己的 JS 还是很差劲，否则可以直接查看源代码，在 console 里面跑 JS，而不是用学堂在线</p>
<p><img src="https://s2.loli.net/2022/02/21/UdPI1LeZ3FAjYKJ.png" alt=""></p>
</li>
<li><p>晚上和栋哥聊了聊天，哎，很有感触吧</p>
</li>
<li><p>第一是觉得，<!--一个和自己关系这么好的学长，真的要面对保不上研，然后不打算出国选择外推的命运--></p>
</li>
<li><p>第二是很多课程上的事情真的让我大受震撼</p>
<blockquote>
<p>概统老师讲课很不错，而且考试很有意思，平时学的好，考试发挥不好也能得到 A-，然而突击的效果很差。与其卷美赛，不如去好好刷习题课，每个习题滚瓜烂熟，然后大作业不做也可以 A+。</p>
<p>四大原理，阴间至极——编原和信原都还行，但是网原和计组绝对阴间，网原给分和复习程度很线性：背 1200 页 PPT 得 4.0，800 页得 3.6，600 页得 3.3，400 页得 3.0…</p>
<p>而计组，很肝，给分极其差，中位数 2.6，严禁在测试机上对拍，我想了想，这两门课果然交换的时候上很正确。</p>
<p>接下来是最重头的软工：</p>
<ul>
<li>给分可以说是目前最差的课，上学期两个班一共 36 个小组，四分之一的组顶不住课程压力最后就地解散</li>
<li>基本每年都是 7 个组得了 4.0，中位数 3.3，什么叫做中位数呢，就是你把所有的基本功能和可选功能做完，然后组会上出一两次 bug，最后给 3.3，想得 4.0 得卷非常多的额外功能</li>
<li>首先，在时间规划上需要非常清晰，大多数组都是 7 周才搞懂了该干什么，11 周写完了基本功能和可选功能，11 周到 13 周提交作业前卷一卷拓展功能。关键是，前 7 周的过程分已经垮掉了，至少被扣一半。最后几周，如果卷的厉害，可以 3.6，然后卷不起来，就得 3.3</li>
<li>有的拉胯的组，很多队友极其拖进度，导致 11 周才完成了基本的框架，11 周到交项目前只能做完基本功能，然后可选功能几乎没有，而且因为前 11 周的过程分基本被扣完了，几乎是 3.0 注定</li>
<li>有的队友非常坑，比如有的神仙电脑一直配不好环境，导致前 10 周几乎啥都做不了，直到 10 周必须补交作业了，才开始 rush</li>
<li>真的很成功的软工，大概时间线是 3 周开始写，7 周左右能把基本功能和可选功能写干净，7 ~ 11 周主要是写扩展功能，11 ~ 13 周前端极限冲刺，这样才有 4.0 的机会</li>
<li>这个策略最核心的思想是——重心前移，因为同一时期的概统和图形学工程量基本是 9 周开始飙升的，如果自己冲刺的决心不够，几个大的工程堆积在一起，几乎必死无疑</li>
<li>成功实现了重心前移的软工小组，几乎都有一个特点——软工小组不仅仅是软工小组，还会在绝大多数课程上通力合作，尽快解决其他课程，然后把尽早集中火力在软工上</li>
<li>这一点我会尽量帮助组里大家，然后大家互相帮助的</li>
<li>另外，组内一定要团结，主要是后端同学一定要及时顶住前端，我甚至觉得我们可能火力分配不太合适，是否需要改一改火力分配，比如我去写后端，让昊迪来写前端啥的</li>
</ul>
</blockquote>
</li>
</ul>
<h1 id="2-月-22-日"><a href="#2-月-22-日" class="headerlink" title="2 月 22 日"></a>2 月 22 日</h1><ul>
<li>开学第二天，总体上挺开心的</li>
<li>早晨图形学，讲的概论，啥都没听，搞到了雨课堂答案，按着答案和页码选就是了</li>
</ul>
<blockquote>
<p>总让我觉得你系大家都有往年的答案</p>
</blockquote>
<ul>
<li>下午在 AIR 干活，写了简单的 margin，接下来要读论文</li>
<li>下午雷哥发了活，统计数据，还算轻松</li>
<li>早晨软工课没听课，截图 + 做小程序的事情 + 看进击的巨人</li>
<li>晚上 HCI 课稍微做了笔记</li>
<li>毛概小组出来了，就是 3 + 4，还是挺好的，干起来</li>
<li>今天终于把中介的事情谈妥了，进入快车道了</li>
<li>DSA 复议失败了，sigh</li>
</ul>
<blockquote>
<p>人嘛，总有运气不好的时候，那就这样吧，这学期运气一定会很好，状态也会很好！</p>
</blockquote>
<ul>
<li>用 AIR 打印机打印了交换名单，周四上午去办理，别忘了</li>
</ul>
<blockquote>
<p>携带校级的交换名单（就是那个非常长的 list）+ 身份证 + 学生证（应该是那个蓝皮的小册子而不是学生卡）+ 院系证明 + 过期的护照（过期的护照需要当场销毁），穿深色衣服（西服）</p>
</blockquote>
<ul>
<li>晚上 HCI ，妈的，还是一堆计算机系的，还是到哪儿都是这帮人</li>
<li>昨天和凡凡去吃了 81ly，还挺好吃的</li>
<li>凡凡居然能理解我的想法，很感激了</li>
<li>草，我真的想象不到，什么家境能支撑一个人自费读博士</li>
</ul>
<h1 id="2-月-23-日"><a href="#2-月-23-日" class="headerlink" title="2 月 23 日"></a>2 月 23 日</h1><ul>
<li>上午起床洗头，读 JS oop，水了水雷哥的讲解视频，还是认真看看吧</li>
<li>上午概统在五教三楼，打算概统扯淡的时候后写写 DIDL</li>
<li>下午起床搞 HCI 的论文，然后科英</li>
<li>晚上搞 ECCV，然后去锻炼下！</li>
</ul>
<h1 id="2-月-24-日"><a href="#2-月-24-日" class="headerlink" title="2 月 24 日"></a>2 月 24 日</h1><ul>
<li>觉得距离上一次写 blog 过了一个世纪，然而时间告诉我，只过了一天多，只是很累了</li>
<li>昨天写完了之后去上了概统，梁衡老师讲的蛮好的，挺喜欢，可能是少数坚持去线下的课吧</li>
<li>下午睡了一觉，然后起床，起床都两点了，都快上科英了</li>
<li>感觉以后还是上完课不要再摸鱼了，直接回去睡觉</li>
<li>晚上和 xpr 去独峰，感觉全是我在讲故事，讲了讲第一次来北京的时候的记忆，又讲到现在对北京的想法</li>
<li>软工展示居然在建馆报告厅，我淦</li>
<li>昨天给棕榈把钱交了，觉得学业压力越来越大了，从学期初开始焦虑绩点，我淦</li>
<li>在组会上敲日记，好尴尬，以后概统课还是不要敲代码了，好好听课</li>
<li>妈的，文琦居然寒假把概统听完了</li>
<li>我其实没必要花那么多时间，现在已经够了，好好投入在课堂上</li>
<li>这学期希望图形学和 HCI 多被带一带吧，不然真的没时间学 DIDL 了</li>
<li>这学期的主要工作是好好学课，然后数电刷题，今晚回去得配数电实验的环境了，科研上搞 DIDL</li>
<li>昨天组好了 HCI 的队，zsn 带我们，抱到大腿了</li>
<li>上午查了查，在 B 站找到了 CMU 讲 HCI 的文章，蛮有意思，比自己读 Paper 好多了</li>
<li>蒙杰最后去英华啊，咱们系这龙争虎斗的，麻了</li>
<li>蒙杰和 517B 他们组队 HCI ，麻了，感觉就很卷</li>
<li>给棕榈交了钱，然后开始匹配了，的确是我的问题，合同都没有签好就把钱交了</li>
<li>等着那边匹配吧，希望能遂愿</li>
<li>晚上看到核桃英语推了篇文章，纯粹傻逼</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/24/lawgM2CyrNzJRbj.png" style="zoom:50%;" /></p>
<ul>
<li>毕了业就开始爱成外了，哎，其实也不是，我对清华也算是有感情吧，不过很多事情太遗憾了</li>
</ul>
<blockquote>
<p>在贵系没修过四大原理的人生是有遗憾的。</p>
<p>操你妈，人生遗憾的事情太多了，还要用造机来 PUA 我吗？</p>
</blockquote>
<ul>
<li>晚上和田哥聊天，又被 push 了，觉得我做事情太杂，而且强度不够</li>
<li>最后 ECCV 也没挂上我的名字，我觉得都可以接受</li>
<li>昨天注册了棕榈的平台，感觉还蛮高级的，不过还没给我开通权限，也没分配导师</li>
<li><p>早晨去办了护照，工作人员挺热心，态度好，就是手续麻烦，拍个照片拧脖子拧半天</p>
</li>
<li><p>办护照的地点居然在清华计生委旁边</p>
</li>
</ul>
<blockquote>
<p>然后海外学习证明需要院系教务老师签ta的名字和电话</p>
<p>最后，交换的那个清单需要自己写个表格题目(学校发那个都没题目)</p>
<p>最好去早点，排队排的厉害</p>
</blockquote>
<ul>
<li><p>和鲁睿约饭，结果他上课到 10 点</p>
</li>
<li><p>我还是第一次知道上到 10 点的 2 分课会 12 周结课，挺好的</p>
</li>
<li><p>今天俄罗斯对乌克兰开战了</p>
<p><img src="https://s2.loli.net/2022/02/24/2h46mQvPHjOBaoZ.png" style="zoom:30%;" /></p>
</li>
<li><p>这个世界总有些圣母白莲花，傻逼一帮</p>
</li>
<li><p>北约自讨苦吃，乌克兰躺枪，丑国笑了，这帮这么尊重人权的傻逼，估计都是丑国的舔狗吧</p>
</li>
<li><p>俄罗斯一个半小时就打到了基辅，乌克兰还打个锤子，一个西方买办国家，还他妈当上了欧洲子宫，纯纯傻逼一个</p>
</li>
<li><p>黄金和军工大涨，别打的世界大战了就好</p>
</li>
</ul>
<h1 id="2-月-25-日"><a href="#2-月-25-日" class="headerlink" title="2 月 25 日"></a>2 月 25 日</h1><blockquote>
<p>我看乌克兰和看笑话一样，不是我好战。领导人需要的是冰冷的智慧和理性。而乌克兰总统缺乏对局势的基本判断，只是擅长于被选举。相反普京预测对了北约不出兵，并且解除了威胁。 说起来搞笑，我读过广岛的文献，“原子弹的光晒化了眼球，嘴上有个大洞，喝的水从中流下去，极度地痛苦中死去”，我对死于原子弹的日本平民都充满了同情。但与此同时，中国正在承受巨大的伤亡。结论很简单，我不具备领导人需要的基本素质，我按不下核按钮。但我希望反战人士能同样意识到，自己并不应该成为领导人。</p>
</blockquote>
<ul>
<li>早晨起来，俄罗斯已经快推平基辅了</li>
<li><!--麻了，居然和爸妈吹牛讲了 6 级，我都说了 6 级毫无意义，估计得用陈都的成绩凑合下--></li>
<li>今天突然没事情了，减少约饭，好好学习</li>
<li>昨天和田哥谈了，周末结束前（普京平推完乌克兰之前），看完 DIDL 第四章</li>
<li>昨天睡的蛮早的，结果特么直接睡到了 8:03 ，麻了，早晨起来数电实验直接开课了，现在挂了一个腾讯会议</li>
<li>上午打算学学 Python 的几个语法糖，然后写 DIDL</li>
</ul>
<h2 id="晚上-20-08"><a href="#晚上-20-08" class="headerlink" title="晚上 20:08"></a>晚上 20:08</h2><ul>
<li><p>上午学习了语法糖，还挺好玩的，写 Python 越来越舒服了</p>
</li>
<li><p>中午和 holder 一起吃饭，然后听了他的建议，他还给我讲了讲前后端的事情</p>
</li>
<li><p>和 holder 交流完，就没睡觉了，下午的健美课，直接睡过去了</p>
</li>
<li><p>健美老师还挺好玩的，一个哥么迟到了，走进来问， 这儿是不是健美课，老师钓鱼：这是艺术体操课，然后学生转头就走。张老师直言，来都来了，那就听了呗，哈哈哈</p>
</li>
<li><p>下午和鲁睿一块吃了 81ly，吃了 270+ ，椒麻鸡 + 黄金烤肉，爆好吃！</p>
</li>
<li><p>中介那边的服务团队建好了，感觉挺好的，和主管老师聊了一小时</p>
</li>
<li><p>新买的披风到了，大红色，特别亮眼，而且衣服更大，管不得贵些，但是没第一件喜欢</p>
</li>
<li><p>总结下接下来的工作</p>
<blockquote>
<ul>
<li>[x] SRT 阶段性代码总结</li>
<li>[ ] 完成科英作业</li>
<li>[ ] 概统的课重看，然后做作业</li>
<li>[ ] 组织毛概小队</li>
<li>[ ] 软工小作业——下周二，git 骨干图</li>
<li>[ ] 数电实验的课件</li>
<li>[ ] 数电课件</li>
<li>[ ] 人智导课件</li>
<li>[ ] DIDL</li>
</ul>
</blockquote>
</li>
</ul>
<h1 id="2-月-27-日"><a href="#2-月-27-日" class="headerlink" title="2 月 27 日"></a>2 月 27 日</h1><ul>
<li>不出意料，周五定的学习计划一个都没有完成，我焯</li>
<li>周六上午学深度学习，下午写人民日报的 parser</li>
<li>感觉自己的 parser 还是很菜，还不会用 pymysql</li>
<li>昨天晚上和鲁睿一起吃的听涛的咖喱锅，真的不错，但是吃了 64，偏贵，而且咖喱比较少，下次叫师傅多放点咖喱</li>
<li>和鲁睿聊起成外，哈哈哈，还是很快乐，晚上和瑞涵姐、鲁睿一起聊，确实快乐</li>
<li>晚上在三教 1207 带着鲁睿写代码，然后甲方盯着我们写，哈哈哈</li>
<li>鲁睿的学习能力真的比我强无数倍，去年同期的我还在爬呢</li>
<li>今天给他的一些事情包括：做饼状图和柱状图，格式化 json，期待他切割出月份</li>
<li>2 月 27 日，去年这个时候，我草</li>
<li>我今天觉得很神奇，中午和钰凯吃香锅，两个人 39 元，然后买了些别的，不过他的确不太能吃辣，还讨论了一下香港和深圳的事情，貌似深圳去香港产子的还不少，确实</li>
<li>“所有在美国国土出生的人都是美国公民”，这话本来是为了解放黑人，结果真特么就“所有在美国国土出生的人都是美国公民”</li>
<li>下午看到了 DIDL 第四章，但是前三章的很多东西不太懂，然后再试试推进李宏毅吧</li>
<li>晚上写作业了，再不写就要寄了</li>
<li>看完了《民主的细节》，写的一般般，没有我期待的高</li>
<li>想和路子达老师讨论，他否决了 office hour，让我去讨论课讨论</li>
<li>我对《观念的水位》也不是很期待</li>
<li>麻了</li>
</ul>
<p><img src="https://s2.loli.net/2022/02/27/J6avyxUzT1lK8WY.png" style="zoom:50%;" /></p>
<ul>
<li>事情太多了，继续冲吧</li>
<li>为 GRE 列清单，搞清楚优先级</li>
</ul>
<h1 id="2-月-28-日"><a href="#2-月-28-日" class="headerlink" title="2 月 28 日"></a>2 月 28 日</h1><ul>
<li>难的一个睡的很正常的日子，但比起去年的作息还是阴间了，昨天一点睡，七点多起的</li>
<li>昨晚和狗子去游泳，特别好玩，游完了去桃李吃夜宵，发现用微波炉一热就好了，哈哈哈</li>
<li>原来桃李的微波炉是这么用的，不过下次记得不要在微波炉里放太多东西，一定要让盘子里的东西转起来来</li>
<li>鲁睿的工作能力确实不错，已经用正则表达式暴力搜索年月日了，写的代码也算很满意，回头给他配置下 conda</li>
<li>[ ] 概统</li>
<li>[ ] 去和王英老师讨论下 GRE 的事情</li>
<li>[ ] 为马原讨论课做准备</li>
<li>[ ] 听李宏毅的课</li>
<li>[ ] push 我的中文简历</li>
<li>[ ] 关注护照多久到手</li>
<li>[ ] 整理下 Python 内置函数</li>
</ul>
<h2 id="晚上-21-53"><a href="#晚上-21-53" class="headerlink" title="晚上 21:53"></a>晚上 21:53</h2><ul>
<li><p>这几天乌克兰闹得太厉害，居然特么快上核武器了</p>
</li>
<li><p>据悉，人类最大的飞机在冲突中寄了，我草，能载重 600 吨，属实 NB</p>
<p><img src="https://s2.loli.net/2022/02/28/8SJ4gzuxhDkcMf2.png" style="zoom:40%;" /></p>
</li>
</ul>
<p><img src="/Users/zhaochen20/Library/Application%20Support/typora-user-images/image-20220228215827982.png" style="zoom:30%;" /></p>
<p><img src="https://s2.loli.net/2022/02/28/RSvJAXk9uHO65by.png" style="zoom:40%;" /></p>
<p><img src="https://s2.loli.net/2022/02/28/PygBDtkSLb36hCG.png" style="zoom:30%;" /></p>
<ul>
<li>下午学李宏毅的课，讲的好，清楚，但是有些重复，一看就是老二次元，成天抓宝可梦</li>
<li>和张导聊了聊，挺随便的 </li>
<li>晚上 refactor 了别人的 json，写个正则表达式给我搞麻了，自己和傻逼一样，“,” 打空格害人</li>
</ul>
<h1 id="3-月-1-日"><a href="#3-月-1-日" class="headerlink" title="3 月 1 日"></a>3 月 1 日</h1><ul>
<li><p>写一写碎碎念念</p>
</li>
<li><p>昨天中午看了看巨人第四季 part 2 的第 24 集，每天中午连着吃饭 + 摸鱼 3 h</p>
</li>
<li><p>今天早晨起床上图形学，图形学貌似最后挑战大作业和 CV 扯上联系了，用 GAN 来 train 一个网络，我的评价是 GAN</p>
</li>
<li><p>早晨开始看 Python oop，自己动手写了写，感觉很遗憾，Python 没有指针和引用，但我却用不好浅拷贝啥的</p>
</li>
<li><p>写了笔记，在软工课上写的，然后当然是不打算听课的</p>
</li>
<li><p>终于学会了说不，下午田哥问我，想不想做网页，我听了听活，确实不是我能做的，终于学会了说不</p>
</li>
<li><p>这是我的问题，不敢说不，或者说，不愿去说不</p>
</li>
<li><p>除了父母之外，中介的老师也批评我了解的太多，做的太少，可能出于我的想法，这是我的优势呢？</p>
</li>
<li><p>下午去实验室，然后给统计代码写重构，真的恶心死了，写了特么一天，还没写完</p>
</li>
<li><p>走之前去打印室打印了三份《钢铁是怎样炼成的》，听思元说的，一小时讨论 + 做 PPT，那我可是有备而来</p>
</li>
<li><p>晚上人机交互也没好好听，光顾着写代码了，可恶</p>
</li>
<li><p>下午加回来了之前删掉的一同学的微信，无所谓了，我不觉得我现在能以人类看待自己</p>
</li>
<li><p>我草，我该怎么表达十多分钟前自己的心情呢？</p>
</li>
<li><!--今天写代码写到破防，觉得自己和傻逼一样，很多功能写的真的丑死了。晚上骑车在学堂路上，耳朵里听着 《glass sky》，然后，在路上遇见了她，我现在都不知道该怎么称呼她了，至少我的心里无数次渴求，彻底抛弃人类的任何情感，我淦，日，真的做到了我真的不是人了吧-->
</li>
<li><!--今天上软工课也是，不敢四处望，果然课间去洗脸还是遇见了她，沃日，其实课上遇见她还不会让我很难受，因为我有这个预料。让我觉得过意不去的是，上课的时候，偶然向周围看了看，发现一个人侧脸有几分神似，突然我的潜意识告诉我，那不是她，我太熟悉她的侧脸了。我突然蚌埠住了，我草！你他妈能不能别这么鸡巴恶心自己，为什么都他么一年了还加班这个样子，我淦-->
</li>
<li><!--然后就是今晚的事情，我骑车在学堂路上，然后觉得自己比较低落，脑袋里真的回想起以前的自己，觉得一年前自己和一个傻逼一样，觉得有些难过，结果他妈的走到广告牌前面，突然见到她穿着长裙边打电话从我旁边经过，我草，我还是发现，我很清楚那个人是她，那个声音，在这个时候跑步，那个身影，我甚至能够想见现在是 22:30 分她会在紫操的那个角落压压腿，然后回寝室-->
</li>
<li><!--沃日！！！！可是你他妈为什么要知道啊！这么久以来，让我感到最大的痛苦不就是为了一段破碎的关系和破碎的自己却要去割舍我对这个世界的热忱，成了现在这样对普遍意义的人类抱有敌意的自己，我都不觉得这样的自己，抛弃了这么多人类应该有的情感和感情的我是人类了-->
</li>
<li><p>草！！！草！</p>
</li>
<li><!--果然，她让我难受的时候都是那些我完全没有心里预期的时候，特别是当我看见她神色欢快的从我身旁跑过，可能是和她妈妈打着电话的时刻吧-->
</li>
<li><!--最让我觉得自己格外低贱的瞬间，其实是我突然发现自己的潜意识居然告诉我，很想找到她说那么几句话，叙叙旧，突然觉得，自己完全没有任何话还能和她讲起，这样的想法只让我觉得自己低贱极了-->
</li>
<li><!--然而我心头的念头还在挣扎，活在心底善良的自己希望她也会有一个很好的未来，然而现实中，大多数时候的我，心里却诅咒着为什么她还没死，这种时候我心里只觉得挣扎-->
</li>
<li><p>好了，终于缓和了，看看书，睡觉吧</p>
</li>
<li><p>这种话，就这样吧，埋在心里，然后舒服多了</p>
</li>
<li><p>明天继续重构吧</p>
</li>
</ul>
<h1 id="3-月-2-日"><a href="#3-月-2-日" class="headerlink" title="3 月 2 日"></a>3 月 2 日</h1><ul>
<li>终于写完了重构，妈的，给我搞麻了，写了活活一天，中间报告了一堆 feature</li>
<li>今天下午看 codebase，晚上去学科英然后监督乙方</li>
<li>列个列表来为自己做个准备</li>
<li>数电，听课，了解清楚刷哪些题，然后听数电实验的回放，不听要出事情的</li>
<li>​    周四上午看看英语，下午去实验室，晚上去听数电实验的回放</li>
<li>概统，补一补前两周的课，听学堂在线——去图书馆</li>
<li>图形学，调研需求，什么需要用 GAN</li>
<li>准备 HCI  的论文分享</li>
</ul>
<h1 id="3-月-3-日"><a href="#3-月-3-日" class="headerlink" title="3 月 3 日"></a>3 月 3 日</h1><ul>
<li>今天还没从昨天的工程傻子的状态解脱出来，我发现写工程真的会把人变成傻子，都过了一天了，还没弄好</li>
<li>上午早晨起来看 HCI 的论文，然后上科英，科英真的上课在摸，哎，好遗憾啊</li>
<li>回头找 xpr 问问怎么学科英</li>
<li>今天和爸妈因为经济问题吵了很久</li>
<li>哎，反正给他们叙述了我的看法</li>
<li>活着都不怕了，还怕死吗？</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6220d0c45baa1a80abe65272.jpg" style="zoom:50%;" /></p>
<ul>
<li>今天晚上处理挑战杯收尾的工作，把电脑整寄了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6220d0ea5baa1a80abe66afa.jpg" style="zoom:10%;" /></p>
<h1 id="3-月-5-日"><a href="#3-月-5-日" class="headerlink" title="3 月 5 日"></a>3 月 5 日</h1><ul>
<li>时日仓促，最近一直在摸吧</li>
<li>其实也不算纯粹摸，主要是一周写了两个工程，虽然心里很爽，但是真的很累，工程写多了会让人觉得自己越来越傻，而且精神不正常</li>
<li>在北馆三楼，旁边坐了一个<!--清华附中的杂种--></li>
<li>昨天早晨起来听了听 HCI 的论文，基本讲啥有结论了，然后开始慢慢做 PPT 了</li>
<li>昨天终于解决了中英文简历的事情，妈的，虽然很虚，大多事情感觉都是瞎勾八乱吹牛，但是真的改不下去了，再改就啥都没了</li>
<li>看了看实习的情况，MSRA 感觉好难，招的都是 PhD defer 或者 gap 的，自己还是太菜了</li>
<li>真的是，对大三暑研太晚了，对大二暑研太早了</li>
<li>旷视的话，感觉 bar 比 MSRA 低多了，但是还是很卷，主要是感觉人家基本是为了转正而服务，我只是想恰烂钱 + 一笔经历罢了</li>
<li>旷视，我看到在成都还有厂，真的蛮好的，但是最近跟爸妈的聊天，让我觉得，还是不要交流，他们不要见我的好</li>
<li>上午的毛概讨论，感觉自己做的还不错，就是讲的时候紧张了，明显感觉第一个组的那个女生有备而来，还涂了口红。ttn 说是鲲鹏的同班同学，然后人家亲口给我说，她是求是理论组的，讲的 PPT 就是她自己写的。</li>
<li>做 pre 的话，感觉抖机灵很重要，把自己没准备好的地方说成别人讲了，我们就不讲了的话，很有意思</li>
<li>然后吧，语速慢一些，慢慢拜托紧张感</li>
<li>看来这学期的思政课，我会有四次 pre 的机会，然后软工可能也要 pre</li>
<li>锻炼这种能力就完事了</li>
<li>中午和 ttn 吃完饭，我们在紫荆吃的，他非要吃四楼，我于是从二楼打饭抱上四楼和他一起吃，他说每天吃饭要花 50+，我草，我。。。</li>
<li><!--这几天和爸妈谈了很多经济的问题，真的是越谈越让我觉得----我日你妈，这个吃人的社会一分一毫我也不愿意再待下去了，为他纳的每一分税最后都成了统治阶级和既得利益者剥削我的子弹，他们还要教育我爱国，我爱的是什么？沃日，我本来是抱着布尔什维克的理想，希望自己能为人类的解放贡献力量，直到我发现，原来我为止奋斗的就是这么一个他妈的社会，当我想到我做的研究居然要服务这群混蛋和吸血鬼，我宁愿缴税建设阿美利卡，也绝不为这帮吸血鬼纳一分钱的税--></li>
<li>计算机系的奖助学金领导<!------纯粹他妈是个傻逼，妈卖批，死去吧，可恶的吸血鬼，还他妈给我阴阳怪气呢，干你妈的，狗杂种，“那可真不少”--></li>
<li>我最开始觉得，自己要好好赚钱，自己负担交换的费用。后来感觉，别这么在意钱，现在不同了，再不在意，真的要让家里倾家荡产了。</li>
<li><!--我从来没想过，父母面对着这么大的经济压力吧，我淦，这鸡巴社会，为你辛勤打拼一辈子，公务员为国家服务一辈子，到头来掏出十万让子女去交换一次都不行--></li>
<li>我爸退了我们仨的群，反正他想不通吧。</li>
<li>和共产党员谈党和国家的不当之处，无非就是对牛弹琴，鸡同鸭讲。以前还觉得每天和他们聊聊日常，能让他们觉得我还陪着他们，能让他们理解自己，现在觉得，全是徒劳，而且我真的累了，格外的累，每次吵架，我都得先和他们耗起来，还得自己精神内耗很久，我真的累了。活着，学习，已经够累了，还他妈要外耗和内耗，真的受不了了。</li>
<li>让我自私下去吧，再这么吵下去，我的心里真的只觉得有我一个人了，父母亲人都会放弃了。</li>
<li>虽然彻底不做一个人没什么不好，但是起码我还是觉得赎还父母养育我的不易是底线。</li>
<li>想象这样一种人生的结局吧，他们最后供我读书几年，其实也没几年了，最多不过四年，然后我就参加工作了，能赚钱供他们在人生最后的安宁中安然享受从没有过的完全不在乎经济负担的生活。在美国赚钱顺便躺平，不会带着另一人受苦，更不会让更多的生命诞生到这个世界上继续这样苦难的循环。等到他们去世了，我也就自由了，然后那时候我也没有什么社会羁绊，把工作辞了，拿着手头的钱去挥霍，去享受人生，一定要去墨西哥看一看我向往了无数次的太平洋，想尽办法把积蓄挥霍掉。最后告诉我的朋友们我的想法，如果还有钱实在挥霍不了，就把积蓄分给他们，然后真的去看看太平洋，看看那片没有回忆的海洋。就在那里，那时候人类的技术应该很发达，可以寻求找一种没有痛感的死法，然后就面向太平洋，在那里死去。</li>
<li>是啊，活着已经是莫大的痛苦了，上帝对人类最大的惩罚不就是让他们如同奴隶一般的在这个世界上活着吗？连活着我都能有勇气背负，还有什么能让我害怕呢？</li>
<li>昨天晚上 ztj 来找我问了问一些《生物信息学导论》的问题，真的离谱，看这个课程安排，我的评价是，不如转码。</li>
<li>总觉得每个人的人生都有诸多遗憾，基于我少数不自私的念头，还是尊重他人的隐私吧。只是真的希望她能好起来，我已经望见了人生的绝望与无助了，我不知道这是不是社会的本质，但是出于无法描述的原因，我并不想别人也如此。</li>
<li><p>趁着一个一滩破事的周五又看了一次巨人第二季<br>在没理清楚马莱之前，很难懂剧情的逻辑和尤弥尔的选择<br>现在回头来看，再次为尤弥尔而动容</p>
<blockquote>
<p>但是，当我再次睁开双眼，我看见了无边的自由<br>如果真的存在所谓的命运，我也只能对他的反复无常报以一笑了<br>而从那一刻起，我向自己发誓，再也不欺骗自己，我要为自己活着</p>
</blockquote>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6222bf565baa1a80ab08ecf2.jpg" style="zoom:50%;" /></p>
<h2 id="下午-14-31"><a href="#下午-14-31" class="headerlink" title="下午 14:31"></a>下午 14:31</h2><ul>
<li>上午和爸妈讲完我的想法就把微信退了，到了现在也没有打开，不敢看消息，觉得焦虑，却又担心错过重要的事情。</li>
<li>护照貌似到了，办了一周，还是挺麻烦的。</li>
<li>基本上签证都需要有财产证明——沃日，原来一贫如洗就不配逃走了吗？</li>
<li>好话歹话都说干净了，我已经不奢求他们能理解我一丝一毫了，我也懒得交流了。</li>
<li>上午最后看了看数电，感觉讲格雷码那一块还挺好玩的，其他的就一般般，化简逻辑比较麻烦，回头还有问题得问问。</li>
<li>接下来去找找数电作业的答案。</li>
<li>中午听了听马逆讲的《百年后新青年》，感觉讲的很好，可惜自己不确定能否用在下周的 pre 上。</li>
<li>今天先做完数电作业，然后听听概统的回放，接下来去做概统作业，然后写实习投递，最后记得给班上说交作业的事情。</li>
<li>明天写 CI/CD ，然后去实验室。</li>
<li>回头记得学习如何使用 pull request。</li>
</ul>
<h1 id="3-月-7-日"><a href="#3-月-7-日" class="headerlink" title="3 月 7 日"></a>3 月 7 日</h1><h2 id="凌晨-00-18"><a href="#凌晨-00-18" class="headerlink" title="凌晨  00:18"></a>凌晨  00:18</h2><ul>
<li>昨天上午改了改数电的作业</li>
<li>中午和鲁睿恰饭，讲了讲一些技术的事情，然后拉他入伙做小程序</li>
<li>上午抄了 zgy 的作业，ovo，还是告诉他吧</li>
<li>下午写概统，梁衡老师真的讲的不错，可惜非得要签到，以后还是上课好好听听吧</li>
<li>下午和 pc 恰饭，他转为不出国了，anyway 吧</li>
<li>找 pc 拿了一波雷系的数电资料</li>
<li>晚上做 HCI 的 PPT</li>
<li>课咨委 10 点开会，我 9 点多就出去了，看看紫操风情夜的女生节活动，结果去玩了，感觉啥都没有了</li>
<li><!--去年的女生节貌似是个周天，我那天从紫荆书咖接 ex 回寝室？--></li>
<li>时间过得很快，是的</li>
<li>文琦说他 ex 和他 ex 的 eex 复合了，让文琦舒心了很多</li>
<li>可能这绝不是我吧？</li>
<li>和爸妈关系还是没好过来，真的累了，自在一些吧</li>
<li>晚上课咨委开会，感觉除了特奖之外，就和以前的人力差不多，rls 没来，李唯可没来，lambda 还在志愿者</li>
<li>这学期的工作貌似是调研软工，挺有意思</li>
<li>自己很想锻炼自己的组织和 pre 的能力，趁着毛概锻炼下，这次还是讲秃头海豹的节目，不过和跳跳鸟有些分歧</li>
<li>感觉学习踏实了起来，真的未说说然也，当然也可能是我学业压力还不大吧</li>
<li>我给女生节的横幅“你的软工，自己写”，咱们最好平权吧，不喜欢这些基于性别意识的节日</li>
<li>明天下午去实验室，上午去写 CI/CD</li>
<li>我已经不是去年那个我了吧</li>
<li>文琦说他想出国，但是党员签证麻烦，是的吧，那就不去美帝呗，而且纯粹念书也很好啊</li>
<li>我总是觉得，只有心情很差的时候才会觉得社会非常反感，其实就是这样吧，不管如何，run 吧 run 吧</li>
<li>这几天一直在重温巨人，真的还是很喜欢吧，从小看到大</li>
<li>放几张图，然后看书，睡大觉！</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6224e19e5baa1a80ab8eea5b.jpg" style="zoom:35%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e1b85baa1a80ab8ef7d9.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e1d65baa1a80ab8f0655.jpg" style="zoom:25%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e1ea5baa1a80ab8f10a0.jpg" style="zoom:13%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e2055baa1a80ab8f1f66.jpg" style="zoom:15%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e2205baa1a80ab8f2ff9.jpg" style="zoom:25%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e2325baa1a80ab8f3aaa.jpg" style="zoom:13%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6224e2445baa1a80ab8f4490.jpg" style="zoom:13%;" /></p>
<ul>
<li>回头去学学 markdown 甘特图</li>
<li>晚安！</li>
</ul>
<h2 id="晚上-23-34"><a href="#晚上-23-34" class="headerlink" title="晚上 23:34"></a>晚上 23:34</h2><ul>
<li>早晨写 CI/CD，体验了下自动测试工具，pylint 啥的，真的很好看很方便，之后想多学学这个吧</li>
<li>本来想结合 docker 学学，结果太乱了，docker 基本意义没懂</li>
<li>中午看了睡前消息，黑岛讲香港疫情，我觉得香港完蛋了，港府官僚主义太糟糕了</li>
<li>之后看 AOT ，吵架吵了一集，没意思</li>
<li>下午起床去交数电作业，3-526，就是喻老师的办公室，哈哈哈</li>
<li>但是从五楼走下来绕了很远的路，麻了</li>
<li>下午在实验室，发现了李沐讲课的原视频，李沐好有意思，ACM 本科 + SJTU 的 MS，然后工作几年之后去 CMU 读 PhD，感觉是可以复现的人生道路，现在在亚麻搞 AI team，有娃生活。</li>
<li>学着学着，写了写 Python 处理 CSV，然后终于解决了答疑坊的统计代码，算是自己也满意了。</li>
<li>极限 debug，哈哈哈，而且 CSV 写也不麻烦，貌似读取还是学学 panda 吧</li>
<li>晚上班上团建，他妈的，班长根本不会点菜吧，快把我饿死了，淦</li>
</ul>
<blockquote>
<p>虽然我不喜欢过女生节这种明显性别主义的节日，不过和班上同学一起团建很快乐。来到班上八个月了，人虽然不太认识，感觉大家都很可爱！哈哈哈</p>
</blockquote>
<p><img src="https://pic.imgdb.cn/item/6226288d5baa1a80ab9f002c.jpg" style="zoom:10%;" /></p>
<ul>
<li>狼人杀，笑死了，zgy 自刀，然后没被女巫救活，然后 xcx 摆烂狼人，哈哈哈</li>
<li>班上一堆人大附的</li>
<li>晚上写 HCI 的稿子，写了很久，然后和钰凯去吃夜宵</li>
<li>和钰凯散步，还蛮好玩的，聊了聊天</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/622629215baa1a80ab9f6025.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6226293d5baa1a80ab9f72ed.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/622629d95baa1a80ab9fd664.jpg" style="zoom:10%;" /></p>
<ul>
<li>换了新的电脑架子，真的好玩！</li>
</ul>
<blockquote>
<p>新的电脑支架幸福感拉满。<br>这个高度刚好很合适教室的座位，而且底部是空的，恰好能在教室狭窄的桌面上架起来，下面放键盘(继续用机器键盘祸害周围同学的听课效率X)</p>
</blockquote>
<p><img src="https://pic.imgdb.cn/item/622629b05baa1a80ab9fbbb7.jpg" style="zoom:10%;" /></p>
<ul>
<li>看看书，睡觉吧，明天学习英语了，再不学考试要寄了</li>
<li>下午看论文</li>
</ul>
<h1 id="3-月-8-日"><a href="#3-月-8-日" class="headerlink" title="3 月 8 日"></a>3 月 8 日</h1><h2 id="下午-14-56"><a href="#下午-14-56" class="headerlink" title="下午 14:56"></a>下午 14:56</h2><ul>
<li>早晨图形学的时候在写日记，写了这篇文章<a href="https://zhaochenyang20.github.io/2022/03/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A6%87%E5%A5%B3%E8%8A%82/">《从疯县到华子，谈谈我们该不该过女生节》</a></li>
<li>感觉朋友们读了还挺开心</li>
<li>软工课还在写这个，还写了课咨委工作提纲</li>
<li>软工课上看了看李沐讲如何读一篇论文，感觉自己的语言能力还支撑不了自己这么玩</li>
<li>和书宁学长他们聊了聊怎么讲好论文，下午继续排练</li>
<li>中午吃个饭，处理了一些消息，睡个觉，就三点了</li>
<li>果然当我心里有所准备的时候，碰见她心里完全没有感觉</li>
<li>上学期参加的心遇新愿活动结项了，感觉还是很开心</li>
</ul>
<p><img src="https://s2.loli.net/2022/03/08/64gl2Z7JqoUCevh.png" style="zoom: 33%;" /></p>
<blockquote>
<p>上个学期有段时间心情特别不好，那时候参加了不少社工来抚平下自己心里的难受，于是偶然间和一个认识的一字班学妹一起参加了项目。</p>
<p>整体项目氛围真的很不错的，大家交流起来特别自在，而且回答问题的志愿者很多。特别是我的一些问题也有很多志愿者回答。搞了半天，感觉活动似乎在帮我适应大二生活，哈哈哈。</p>
<p>其实说实话，我上个学期的确不适应大二的生活，当时因为转系到了新的院系，然后分手，还有搬了寝室等等，一开始很没太处理好人际关系。那段时候参加了很多的社工活动，也加入了我现在所在的实验室，来填补心里的空荡感，虽然碰壁很多，最后也算是有了很不一样的大二生活。现在就太过适应，以至于过于舒适，哈哈哈。</p>
<p>回到活动上的话，我个人还是觉得很幸福，能够用自己不成熟的一些观点和过去的经验帮助比我们还不适应的一字班同学，而在和他们讲述一些经验的过程里，我自己似乎理清楚了所有过去的事情，人生也变得清晰了很多。</p>
<p>更多的来说，我在大一的时候，很依赖树洞，当时对周围人都保持有黑暗森林的想法，感觉周围人不太友善，自己为了很多信息，特别焦虑。终于，万恶的树洞寿终正寝，自己也走出了那些在黑暗森林里绝望和迷茫的日子。</p>
<p>我其实蛮希望让一字班的同学们和自己坚信，不要去相信那些可以丝毫不负责任就说出的信息，我们的周围就有乐意帮助我们的朋友。</p>
<p>最后，活动不知不觉中开始，不知不觉中，都该计算工时了，哈哈哈，还是挺不舍的。小小吐槽下，感觉这个打卡方式比较麻烦，那就多麻烦工作人员了。</p>
<p>说不定学完软工了我可以写一个程序专门来为以后的活动添加打卡功能。</p>
</blockquote>
<h1 id="3-月-10-日"><a href="#3-月-10-日" class="headerlink" title="3 月 10 日"></a>3 月 10 日</h1><h2 id="3-月-8-日记忆碎片"><a href="#3-月-8-日记忆碎片" class="headerlink" title="3 月 8 日记忆碎片"></a>3 月 8 日记忆碎片</h2><ul>
<li><p>记忆碎片断掉了，貌似 3 月 8 日是周二</p>
</li>
<li><p>那天下午在准备 pre，然后五点和张书宁学长一块儿去锻炼了</p>
</li>
<li>那个锻炼计划真的牛逼，可惜没有人说明清楚动作规范，搞的人很麻</li>
<li>最后是一个百米间歇跑，真的很致命，我明显感觉到了自己完全无法全力冲刺 100 米</li>
<li>最后坚持了 1.5 圈就放弃了</li>
<li>然后晚上是 pre，那天 pre 的效果挺好的，我发现自己的 pre 风格就基本是幽默 / 说理，周五的毛概可能主要是说理吧</li>
<li>跳跳鸟这个德行我早就料到了，不过这也是对我的提醒吧</li>
<li>当你批评一个人时，你得先说出自己如何能做的更好，否则就不要瞎批评一个人，这很掉价</li>
<li>HCI 的 pre 挺好，但是喻老师批评这篇文章太水了，我草，我也觉得，纯粹的缝合怪就能投 CHI</li>
<li>那天的 HCI 课挺有意思，讲了 Fitt’s Law，还蛮喜欢的，好好听课，做了笔记</li>
<li>晚上小组下课后讨论了一会儿项目，现在还在想办法解决生活不方便</li>
<li>回紫荆的路上没有遇到她，可能我已经随时做好了警惕吧</li>
<li>其实也没有那么容易破防，只要我心里有戒备</li>
</ul>
<h2 id="3-月-9-日记忆碎片"><a href="#3-月-9-日记忆碎片" class="headerlink" title="3 月 9 日记忆碎片"></a>3 月 9 日记忆碎片</h2><ul>
<li>早晨起来在干嘛，忘了</li>
<li>上午概统课，算是好好上了吧，但是还是有很多时间在投实习</li>
<li>一开始还把简历上的邮箱写错了，我超</li>
<li>zhaoke20@gmail.com 这个邮箱，感觉是小时候自己用过的吗，忘了</li>
<li>自己都没有好好检查简历，哎，做事情太粗心了</li>
<li>上午投了 MSRA 和旷视，坐等所有算法岗被全聚德吧</li>
<li>旷场给个前端不行吗！！！</li>
<li>上午泊松分布的原理没太懂，感觉就是个近似，而不是某种带有物理意义的分布</li>
<li>回头填这个坑</li>
<li>下午起床后听了听数电实验第一周回放，我草，傻逼课</li>
<li>找 mk 和 zcr 问了问数电实验，貌似还挺氵的</li>
<li>他们建议我去选数电实验班，我草，我机子都不造，实验班个鬼啊</li>
<li>下午最后开始学科英，哎，粗眼扫了一圈，但是啥都没记住，科英小测直接破防</li>
<li><p>下午和 wsy 讲了讲现在的状况</p>
<p><img src="https://s2.loli.net/2022/03/10/lVRoJx7YKQchmqi.png" style="zoom:33%;" /></p>
</li>
<li><p>虽然这个想法很好，不过总觉得对人说出来不是好事情，那还是该收敛起来，日记也该少谈政治观点</p>
</li>
<li><p>谈事实，不谈观点</p>
</li>
<li><p>最近想了想，总觉得自己摆烂的过头了，什么都想得到，专精下来却又觉得功利主义</p>
</li>
<li><p>那么什么才是最适合自己的路呢？我又是否应该主动减少一些社工的事情呢？</p>
</li>
<li><p>感觉自己长期拆东墙补西墙不是很好的习惯，迟早坑死自己</p>
</li>
<li><p>不能再思维怠惰了</p>
</li>
<li><p>自己总是无法割舍对人类的感情吧？</p>
</li>
<li><p>晚上和 zcr 聊了聊，他不打算读 PhD 了，然后老板是茶园的 new ap</p>
</li>
<li><p>他说的，美国人在国内生活还是诸多不方便，其实可想而知，可能太多刷身份证的地方都不方便吧</p>
</li>
<li><p>香港是个好地方</p>
</li>
<li><p>双国籍，落地即籍</p>
</li>
<li><p>晚上还是抢救英语，结果也不太行</p>
</li>
<li><p>晚上本来想去 308 上那个规划课，但是结果就在宿舍上了</p>
</li>
<li><p>和规划的老师聊了聊，还行</p>
</li>
<li><p>总体上，我的想法太清晰了，清晰到没朋友</p>
</li>
<li><p>之前还在纠结暑研的问题，但是如果我不打算 PhD，那么 MITACS 还是很合适，我可以一边 MITACS 再搞个新的组，可能还不比 CSST 差呢</p>
</li>
<li><p>反正能省钱 </p>
</li>
<li><p>其实我也觉得李沐的路真的很好，都读博士了，何必在乎年龄呢</p>
</li>
</ul>
<h2 id="3-月-10-日下午-14-38"><a href="#3-月-10-日下午-14-38" class="headerlink" title="3 月 10 日下午 14:38"></a>3 月 10 日下午 14:38</h2><ul>
<li><p>大家好，我们是 Scissor Seven 队</p>
</li>
<li><p>弓调马服，摩厉以需，为了这次软件工程项目，我们组从去年 11 月开始筹备工作，先期确定了人员架构与工作安排，寒假确定了人员分工与框架结构。</p>
<blockquote>
<p>（赵晨阳几乎还没等同学把话说完，就做双手作揖状、十分无奈表示）“哎哟，谢天谢地了，谢天谢地，你像这样的队伍本身就没有打好基础，你能跟我保证在春季或者秋季这样关键的学期小组能赢啊！</p>
<p>务实一点，我劝你们，把JS这个理念先搞懂，秦若愚带的蛮好的，你把他去换了干什么，你在软工搞得集体退课，你倒告诉我怎么解释，脸都不要了。”</p>
</blockquote>
</li>
<li><p>我草，他么的，下午突然 pd 说要做 PPT，然后我特么 20 分钟写了个 PPT，然后尬死了</p>
</li>
<li><p>上午科英小测基本寄了，麻死了</p>
</li>
<li><p>确实摆烂太厉害了，好好剪枝学英语</p>
</li>
<li><p>下午投了 Apple 的实习，继续海投呗</p>
</li>
<li><p>改变作息，少玩 B 站</p>
</li>
<li><p>现在在开软工组会，我觉得我们能逼的其他组退课</p>
</li>
<li><p>两周一次 Springt，最好每次例会都有所准备</p>
</li>
<li><p>去找 C7W 把绥靖的问题谈好，然后。。。</p>
</li>
<li><p>我相信能够干的 4B 的其他组退课</p>
</li>
<li><p>静下心来好好读读文档</p>
</li>
</ul>
<h2 id="下午-17-58"><a href="#下午-17-58" class="headerlink" title="下午 17:58"></a>下午 17:58</h2><ul>
<li>最近完全处于 everthing is out of control 的状态，主要是时间管理失败吧</li>
<li>回想了下，主要是最近自己还在畏难怠惰吧</li>
<li>现在欠下的工作，按照 DDL 次序</li>
</ul>
<blockquote>
<ol>
<li>软工大作业说明文档</li>
<li>背英语（周五）</li>
<li>软工组会（周五）</li>
<li>软工分锅 + 第一次工作</li>
<li>数电 PPT + 作业（下周一）</li>
<li>软工小作业（下周一）</li>
<li>人智导的回放看前三周</li>
<li>数电实验的预习报告</li>
<li>图形学小作业</li>
</ol>
</blockquote>
<ul>
<li>实习投递的进度</li>
</ul>
<blockquote>
<p>已投递</p>
<p>MSRA，旷视，Apple，微软(SE)，滴滴</p>
<p>目标</p>
<p>字节，快手，腾讯，谷歌，爱彼迎，阿里</p>
<p>年级不够</p>
<p>网易</p>
</blockquote>
<ul>
<li>感觉从寒假开始，摆烂的心越来越严重</li>
<li>每天躺在床上，最多两集 b 站</li>
<li>抓紧干活</li>
</ul>
<blockquote>
<p>滴滴的实习：</p>
<p>【北京】滴滴 海外事业部<br>title： Business analyst<br>要求：<br>职位详情<br>一、岗位职责 </p>
<ol>
<li>承担业务数据指标建设和数据可视化相关工作，并期望发现指标异动，定位原因。</li>
<li>参与业务专项分析（包括用户/商家/财务/服务体验等分析专项），通过量化分析等方式输出分析结论。 </li>
</ol>
<p>二、岗位要求 </p>
<ol>
<li>在校本硕博学生，至少能稳定实习4个月，每周不少于4天。 </li>
<li>掌握量化分析技能及工具：包括不限于常用的统计分析方法、数据挖掘工具语言。 </li>
<li>能快速学习，思维敏捷，对数据敏感，并能够清晰的表达自己的观点。 </li>
<li>计算机、数学、统计学、信管、经济等教育背景 或知名互联网公司实习经验者优先。 </li>
<li>熟悉Tableau者优先；对hadoop/hive/spark熟悉者优先。</li>
<li>基础英语能力，能看懂英文文档<br>联系方式：<br><strong>lizongbin@didiglobal.com</strong></li>
</ol>
<p>尊敬的滴滴海外事业部人力资源部门：</p>
<p>您好，我是清华大学计算机系的大二学生赵晨阳，对贵公司发布的 Business analyst 岗位十分感兴趣。</p>
<p>我大一学年年级排名第二名，荣获综合优秀奖学金。主修了程序设计，数据结构，微积分，线性代数，概率论与统计等主干课程，能够熟练地使用 Python 语言进行数据分析，已独立完成了多份数据分析相关的课程报告与论文。我在深度学习与数据挖掘方面广有涉猎，同时对商务分析与计量经济学兴趣浓厚。另外，我的英语功底扎实，读写交流能力强，四级考试得分 649 分，可以灵活使用英语作为工作语言。</p>
<p>我希望通过这份工作，可以将自己学到的计算机科学与数据分析方面的知识进行更广泛的应用，锻炼自己的实践能力，在将来的团队合作中进一步推动项目进度，在滴滴这样一个实力雄厚、充满机遇和调整的大平台做出更多的贡献。</p>
<p>我在今年夏天 6 月至 10 月初有充足的时间进行全职实习，我的计算机专业基础强，做事认真，从不敷行，对大数据有浓厚的兴趣，热爱我的专业，也希望未来能从事数据分析工作。<br>如果能够得到这次实习机会，一定会努力完成交给我的每一份工作，不断学习，不析进步。</p>
<p>顺颂</p>
<pre><code>    时祺
</code></pre><p>赵晨阳</p>
<p>清华大学计算机系</p>
<p>2022 年 3 月 11 日</p>
</blockquote>
<h1 id="3-月-11-日"><a href="#3-月-11-日" class="headerlink" title="3 月 11 日"></a>3 月 11 日</h1><h2 id="下午-16-38"><a href="#下午-16-38" class="headerlink" title="下午 16:38"></a>下午 16:38</h2><ul>
<li>微软的 SE 投了，不过居然是苏州，我草</li>
<li>海投了一波，希望能有活干吧</li>
<li>好累啊，我草，健美课人都要没了</li>
<li>出了综体遇见了 jxw，第一次和她说人话，很奇怪</li>
<li>晚上看软工的说明文档和 Django 小作业</li>
<li>给计 06 的 Vue 录个屏幕</li>
<li>晚上 10 点讨论软工</li>
</ul>
<h1 id="3-月-12-日"><a href="#3-月-12-日" class="headerlink" title="3 月 12 日"></a>3 月 12 日</h1><h2 id="昨天的记忆碎片"><a href="#昨天的记忆碎片" class="headerlink" title="昨天的记忆碎片"></a>昨天的记忆碎片</h2><ul>
<li>早晨起来写django，感觉明显 python 的感觉好多了，但是还是没太写好 django</li>
<li>说实话，自己也不想学</li>
<li>听说 vue 的助教是个傻逼，我也觉得</li>
<li>晚上软工开会，zgy 说了一句，三个等于什么意思，当时就给我搞麻了</li>
</ul>
<blockquote>
<p>我劝你们，先把 JS 的这个理念搞懂！</p>
</blockquote>
<ul>
<li><p>下午健美课，过的很快，也比较快乐</p>
</li>
<li><p>和我搭伙的那个哥么人是个西班牙人，温州的。挺有意思，我知道这个口音不是马莱人，但是居然是西班牙人，雷系的</p>
</li>
<li><p>上午路子达的讨论，摆烂到某种极限了，五个小组里四个小组和我们商量好了，最后一个小组跳跳鸟给了 5 分</p>
</li>
<li><p>昨天感觉自己讲的不好，全组都在按照我的意志行事</p>
</li>
<li><p>当一个领导者，真的只是让别人按照自己的意志行事吗？</p>
</li>
<li><p>感觉自己的 leadership 还是差了一些</p>
</li>
<li><p>happy 连答辩都要摆烂，我服了，没这个能力就别干活。。。</p>
</li>
<li><p>倒也不是他能力差，我只能说，根本支撑不了智班的 30+ 学分 + 谈恋爱 + 班长 + 参合高中竞赛吧，他似乎还没意识到，我也不想给他直说</p>
</li>
<li><p>给鲁睿说了，让他和诗棋去利用这次答辩机会锻炼下吧</p>
<blockquote>
<p> 就算摆烂也没人怪你们，拿去练习如何答辩，这是很好的机会。</p>
</blockquote>
</li>
<li><p>联系下 yyj 和鲁睿吧，让他俩一块儿写写高代</p>
</li>
<li><p>本来想叫上 zgy 的，后来觉得算了</p>
</li>
<li><!--可能是觉得人家太摆了，而且还是无法接受任何一个清华附中的人吧，任何一个，一丝不可-->
</li>
<li><p>还是没和家里联系，你看吧，我一直觉得，斩断自己和某个人的联系，无论如何对我都是很痛苦的</p>
</li>
<li><p>昨晚软工开会，昊迪真的很 holder，我听的傻了</p>
</li>
<li><p>czr 也在唐老板那儿打工，唐老板可是冉冉升起的新星啊</p>
</li>
<li><!--真的对人类的感情完全无法救药吗？为什么总是无法避免呢？ -->
</li>
<li><p>突然间聊到了，czr 居然是在去年的离散二课堂上认识的我。完全无法面对，也无法回忆。太痛苦了，太痛苦了。</p>
</li>
<li><p>特别不能绷得住</p>
<p><img src="https://s2.loli.net/2022/03/12/heyn2HlcIdf8PXA.png" style="zoom:33%;" /></p>
</li>
<li><p>答辩的活解决了，鲁睿和 lsq 去，我来带着一起</p>
</li>
<li>早晨起来，北京下雨了，挺想成都的</li>
<li>骏博哥给我说，我去投后端的实习，更加容易过</li>
<li>晚上听到室友讨论软工，感觉没和他们组队还是明智吧？至少感觉他们的确摆烂了一些</li>
</ul>
<h2 id="上午-08-05"><a href="#上午-08-05" class="headerlink" title="上午 08:05"></a>上午 08:05</h2><ul>
<li>最近几天没好好读书，倒作息，但是又没有很强的意志倒起来</li>
<li>今天上午背英语，看软工，写 django</li>
<li>下午看数电，然后写作业</li>
<li>晚上干概统或者图形学吧</li>
</ul>
<h2 id="下午-14-38"><a href="#下午-14-38" class="headerlink" title="下午 14:38"></a>下午 14:38</h2><ul>
<li><p>成功限制了 B 站的使用</p>
</li>
<li><p>写完了 django 就去了图书馆</p>
</li>
<li><p>去图书馆的路上想在西操打卡，还挺麻烦的</p>
</li>
<li><p>下午记得去合照</p>
</li>
<li><!-- 每周六都很想去图书馆，来图书馆的理由无非是想换个环境？能在图书馆看到 ex 的自行车。很熟悉了，我甚至能够猜出此时此刻的她正坐在二楼，可能就在我作为的正下方，我习惯性的走上三楼。走到她自行车面前，我竟然感到几分模糊，我根本就不认识这辆车吧，或许，直到我发现，原来自己真的已经快忘了吧，我已经感到陌生了，而销毁那车上的一切痕迹或许是之前很久的心愿吧，终于能够陌生起来了吗？嗯，会很开心吧。 -->
</li>
<li><p>上午背英语，就这样吧，那么我的时间都去哪儿了呢，我也不知道，就这样一天天消失了吧</p>
</li>
<li><p>图书馆里坐在我旁边那个人貌似是探微的吧，隐约觉得自己认识，直到后来，可能是已经删除了好友和那段记忆，挺好的</p>
<blockquote>
<p>回忆是一条没有尽头的路，过往的一切春天都不复存在，就连最坚贞浪漫的爱情也不过是过往云烟…</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>Anyway</tag>
        <tag>你清</tag>
        <tag>清华园日记</tag>
      </tags>
  </entry>
  <entry>
    <title>Night Voyager</title>
    <url>/2022/02/03/%E5%87%BA%E5%9B%BD/Night%20Voyager/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="dba1f300cc71fd7562fb968be53b445933493cec48a72ec9972b51dd2dd0b99c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
        <tag>申请</tag>
      </tags>
  </entry>
  <entry>
    <title>Photo of 2022</title>
    <url>/2022/01/27/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/photo_2022/</url>
    <content><![CDATA[<p><img src="https://pic.imgdb.cn/item/61f2b2892ab3f51d91051bb2.jpg" alt=""><br><img src="https://pic.imgdb.cn/item/61f2b2892ab3f51d91051bb8.jpg" alt=""><br><img src="https://pic.imgdb.cn/item/61f106b42ab3f51d917b5214.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b42ab3f51d917b5210.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b02ab3f51d917b4c8a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b02ab3f51d917b4c7f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b02ab3f51d917b4c71.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b02ab3f51d917b4c66.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106ac2ab3f51d917b48d0.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106ac2ab3f51d917b48c7.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106ac2ab3f51d917b48c0.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106ac2ab3f51d917b48b6.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a72ab3f51d917b439f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a72ab3f51d917b4399.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a72ab3f51d917b4393.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a52ab3f51d917b40b9.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a52ab3f51d917b40b1.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a52ab3f51d917b40a2.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a52ab3f51d917b409b.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a22ab3f51d917b3dd2.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a22ab3f51d917b3dca.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a22ab3f51d917b3dc3.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106a22ab3f51d917b3dc0.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069d2ab3f51d917b3786.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069d2ab3f51d917b377e.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069d2ab3f51d917b377a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069d2ab3f51d917b376e.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069a2ab3f51d917b3405.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069a2ab3f51d917b33fd.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069a2ab3f51d917b33f3.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1069a2ab3f51d917b33ef.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106962ab3f51d917b3042.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106962ab3f51d917b3037.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106962ab3f51d917b302e.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106962ab3f51d917b3029.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106922ab3f51d917b2b9f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106922ab3f51d917b2b92.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106922ab3f51d917b2b8c.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106922ab3f51d917b2b87.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1068c2ab3f51d917b24db.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1068c2ab3f51d917b24d2.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1068c2ab3f51d917b24cb.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f1068c2ab3f51d917b24c5.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106862ab3f51d917b202b.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106842ab3f51d917b1e77.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106842ab3f51d917b1e6e.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106842ab3f51d917b1e67.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106842ab3f51d917b1e63.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2022/03/08/jPxmqXH5YvbsgOu.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/03/08/AwFITP17Dgceb2L.png" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/620a7c122ab3f51d9109df33.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270e7a5baa1a80ab37912d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270e975baa1a80ab37e520.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270ea65baa1a80ab3811dd.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270ee55baa1a80ab38d86d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270ef75baa1a80ab39048b.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270f075baa1a80ab393529.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270f075baa1a80ab393529.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270f345baa1a80ab39c24c.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270f465baa1a80ab39ff74.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/62270f5c5baa1a80ab3a4417.jpg" alt=""></p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>照片墙</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 Spring 课咨委特别调研小组</title>
    <url>/2022/03/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E7%89%B9%E5%88%AB%E8%B0%83%E7%A0%94%E5%B0%8F%E7%BB%84/</url>
    <content><![CDATA[<h1 id="2022-Spring-课咨委特别调研小组"><a href="#2022-Spring-课咨委特别调研小组" class="headerlink" title="2022 Spring 课咨委特别调研小组"></a>2022 Spring 课咨委特别调研小组</h1><h2 id="工作概述"><a href="#工作概述" class="headerlink" title="工作概述"></a>工作概述</h2><p>这学期还会安排一个调研，是去调研上过一些课程（或者已经就过业的人）希望在一些课程中能够学到，但课程中没有出现的知识点的列表。</p>
<p>然后将一个清单提供给老师，建议老师提供对应的一些参考资料或在课程中加入对应成分。</p>
<p>应该是于剑会去做，他主要会去搞编译原理和编译原理专题训练的相关调研。</p>
<p>你可以考虑去配合他一起做，或者找一门感兴趣的课程做这样的事情。</p>
<p>做哪门课程的调研可以自己选，自由度比较高，这学期内做完，然后最终用课咨委名义去找老师聊之前，跟大家一起讨论一下就行。</p>
<h2 id="工作思路"><a href="#工作思路" class="headerlink" title="工作思路"></a>工作思路</h2><h3 id="课题选择"><a href="#课题选择" class="headerlink" title="课题选择"></a>课题选择</h3><p>我最想调研的是软工课，因为我自己经验不足，<del>而且软工课跟本不听，</del>打算找找就业了的学长聊一聊。</p>
<p>我个人认为，并不是单单面向软工课程，而是面向整个计算机系的工程培养体系。</p>
<p>整个工程体系，起码我目前认识到的课程就有——大一小学期，软工，数据库专题训练(数据库系统概论)</p>
<h3 id="预计采访对象"><a href="#预计采访对象" class="headerlink" title="预计采访对象"></a>预计采访对象</h3><div class="table-container">
<table>
<thead>
<tr>
<th>孙骏博学长</th>
<th>计算机系 7 字班，供职于网易互娱</th>
</tr>
</thead>
<tbody>
<tr>
<td>饶淙元学长</td>
<td>计算机系 8 字班</td>
</tr>
<tr>
<td>刘一芃学长</td>
<td>计算机系 8 字班</td>
</tr>
<tr>
<td>雷梓阳学长</td>
<td>计辅 8 字班，毕业后供职于某互联网初创公司</td>
</tr>
</tbody>
</table>
</div>
<h3 id="采访时间"><a href="#采访时间" class="headerlink" title="采访时间"></a>采访时间</h3><p>每两周采访一位学长，软工大作业结束后采访裴丹老师与李丹老师</p>
<h1 id="问题清单"><a href="#问题清单" class="headerlink" title="问题清单"></a>问题清单</h1><ol>
<li><p>请简单介绍下自己，比如年级，目前的工作或者学业情况，之前是否参加过实习与其他工程项目</p>
</li>
<li><p>请问您对计算机软件工程这个领域的看法是什么，您认为这个领域吸引人的地方和可能引起程序员不适的地方</p>
</li>
<li><p>您是否认为计算机系的培养方案太过以计算机科学为主，而忽略了计算机技术的培养？如果有的话，您认为这种情况的原因是什么，危害是什么，有什么弥补的渠道？</p>
</li>
<li><p>请问您认为咱们系的工程能力培养有什么漏洞，这是否对选择就业的同学影响非常大，以及选择就业的同学应该如何更好的利用计算机系的培养方案，提升自己的职业竞争力呢？</p>
</li>
<li><p>诸多同学反应计算机系的工程类课程普遍存在打击学生自信心的情况，让他们认为自身的工程能力不够优秀，以至于先决性否定了就业这一选项，请问您如何看待这些想法，以及有什么建议给这样的同学？</p>
</li>
<li><p>您是否有参加过业界的实习？如果有，请问是什么时候，通过什么渠道获得的这份实习？对于想要去往业界实习却苦于没有途径且认为自身工程能力还不够优秀的同学，您有什么建议？</p>
</li>
<li><p>您认为业界所更加认可的能力有哪些？这些能力在我们系的培养方案上是否得到培养？如果没有，您认为我们在本科学习过程中应该如何培养这些能力？</p>
</li>
<li><p>谈到知识点层面，您认为有哪些知识点在业界反复的使用，然而我们的课程却并未涉及？您认为这些知识点应该如何学习？</p>
</li>
</ol>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>人类社会观察</tag>
        <tag>课咨委</tag>
      </tags>
  </entry>
  <entry>
    <title>Fully Convolutional Networks for Semantic Segmentation 阅读笔记</title>
    <url>/2022/03/08/%E7%A3%95%E7%9B%90/Fully%20Convolutional%20Networks%20for%20Semantic%20Segmentation/</url>
    <content><![CDATA[<h1 id="pass-1"><a href="#pass-1" class="headerlink" title="pass 1"></a>pass 1</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><ul>
<li>通过卷积神经网络接受任意大小的输入，得到相应大小具有推理意义的输出</li>
<li>结合了不少当代的分类网络，AlexNet,<br>the VGG net, and GoogLeNet</li>
<li><p>A skip architecture that combines semantic information from a deep, coarse layer with appearance information from a shallow, fine layer to produce accurate and detailed segmentations.</p>
</li>
<li><p>刷了一堆 SOTA</p>
</li>
</ul>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul>
<li>前人的方法会给每个 pixel 一个标注</li>
</ul>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022春季</tag>
      </tags>
  </entry>
  <entry>
    <title>从疯县到华子，谈谈我们该不该过女生节</title>
    <url>/2022/03/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A6%87%E5%A5%B3%E8%8A%82/</url>
    <content><![CDATA[<h1 id="历史传统"><a href="#历史传统" class="headerlink" title="历史传统"></a>历史传统</h1><blockquote>
<p>这已经是清华第30个女生节了。1993年，时任清华学生会副主席的1989级本科生宋蔷发起了清华第一个女生节。在宋蔷看来，当时社会对女性的看法，仍然是贤妻良母式的传统女性定位。宋蔷想让女生们更多地考虑自己的社会角色，并帮助大家提升个人修养和学习工作能力。</p>
<p>如今，虽然女生节有了更多的解读，但节日的初衷仍在每一次庆祝中传承。而如今在清华园中，我们也自然而然能够看到女孩子们活跃在方方面面，成为校园中的重要力量。</p>
<p>无论是东京奥运会斩获两金的杨倩，当选2021感动中国年度人物的江梦南，还是在清华学习训练的10名女飞行学员，清华年龄最大的冬奥志愿者张军英，清华的女生们，都在用自己的方式展现自己的风采，去定义和书写自己的灿烂篇章！</p>
<p>希望不管是为学业而焦虑、为社工而秃头还是为事业而烦心的你，都能在这一天获得属于自己的快乐。</p>
</blockquote>
<p>上文摘自<a href="https://mp.weixin.qq.com/s/HK7X42-jOLkm-2rIBvygNA">小五爷园的推送</a>，从上文来看，女生节的初衷是：</p>
<blockquote>
<p>宋蔷想让女生们更多地考虑自己的社会角色，并帮助大家提升个人修养和学习工作能力。</p>
</blockquote>
<p>而维基百科言：</p>
<blockquote>
<p>节日，是指生活中值得纪念的重要日子。 是世界人民为适应生产和生活的需要而共同创造的一种民俗文化，是世界民俗文化的重要组成部分。 各民族和地区都有自己的节日。 一些节日源于传统习俗，如中国的春节、中秋节、清明节、重阳节等。</p>
</blockquote>
<p>我个人认为在 30 年前定义的女生节尚且有所纪念价值，然而到了现在，我很难认同华子现在的女生节具有”帮助女性考虑社会角色，提升个人修养和学习工作能力”的意义。</p>
<h1 id="2022-年的女生节"><a href="#2022-年的女生节" class="headerlink" title="2022 年的女生节"></a>2022 年的女生节</h1><p>我们现在的女生节，要么沦陷在无脑跪舔，要么沦陷在刻意区别。</p>
<h2 id="无脑跪舔"><a href="#无脑跪舔" class="headerlink" title="无脑跪舔"></a>无脑跪舔</h2><p>所谓无脑跪舔，自然是学校里众多让人感到生理性不适的横幅——</p>
<blockquote>
<p>你的微积分，我来写</p>
<p>线程随叫随到，特权一生一世。灵感即为最优化，快乐全部存cache。</p>
<p>你就像root，掌管着我系统的最高权限</p>
<p>再绚丽的色彩空间，也渲染不出你的灿烂笑颜</p>
</blockquote>
<p>主要的生理性不适，完全出自于大多横幅无外乎就是对女性容貌的赞美（这我尚且能够认可），却还有部分横幅充斥着“女性特权化思想“，更有甚者上升到“女神节”这一文化高地，让我感到极度的反感。</p>
<h2 id="刻意区别"><a href="#刻意区别" class="headerlink" title="刻意区别"></a>刻意区别</h2><p>这点让我更加不理解，为什么这所谓的女生节竟然要选在 3 月 7 日，而众所周知，3 月 8 日是妇女节。首先，我们需要认知到，妇女节的全称是<a href="https://zh.wikipedia.org/wiki/%E5%9B%BD%E9%99%85%E5%A6%87%E5%A5%B3%E8%8A%82">国际劳动妇女节</a>。</p>
<blockquote>
<p>接下来的数年里，几乎每年的3月8日都有类似的抗议游行活动。其中最为引人注目的是在1908年，当时有将近15000名妇女走上纽约街头，要求缩短工作时间，增加工资和享有选举权等，并喊出了象征经济保障和生活品质的“面包加玫瑰”的口号。首次庆祝妇女节是在1909年2月28日，当时美国社会党发表了一项宣言，号召在每年2月的最后一个星期日举行纪念活动。这样每年的庆祝活动一直持续到1913年。</p>
<p>从1922年开始，每年的三八节成为国际劳动妇女的节日。苏联时期，每年都会在这天纪念“英雄的妇女工作者”。不过在民众中，节日的政治色彩逐渐减弱而演变成类似西方的母亲节和情人节之类向女性表达尊敬和爱意的机会。至今，这天仍是俄罗斯的法定假日，男性会赠送礼物给妇女以祝贺她们的节日。</p>
</blockquote>
<p>妇女节起源于纪念 20 世纪初叶”英雄的妇女劳动者在推进工人权益提升与社会进步方面的巨大贡献”。当然，文化的内涵会不断随着时间变化，我也认可妇女节的政治纪念意义的弱化，而转为向女性表达尊敬和爱意。当然，这是妇女节，而不是你清的女生节。</p>
<p>女生节选择 3 月 7 日，个人觉得纯属恶心人。其一，恶俗之人不免调侃“女生和妇女之间只差一日”，其二，这是一种恶劣的刻意营造区别，强调了女生和妇女之间并不存在的所谓区别。</p>
<blockquote>
<p>妇女，在官方辞典中，其定义是成年女子的通称。 不单纯指已婚妇女，在司法解释中定义14岁以上的女性称为妇女，未满14岁的男女称为儿童。 女者，指未婚女子。 妇者，指已婚女子，故妇女泛指女性。</p>
</blockquote>
<p>然而，清华似乎为我们营造了一种女生和妇女的鲜明区别，不免让部分清华的女性在过了多年的女生节后，对自己更为自然的妇女身份产生抗拒。</p>
<h1 id="“平权”即“女权”"><a href="#“平权”即“女权”" class="headerlink" title="“平权”即“女权”"></a>“平权”即“女权”</h1><p>谈到女生节，我想起之前寒假里和朋友讨论的“女权”命名问题。</p>
<p>我认为：</p>
<blockquote>
<p> 女权是强调现阶段应该提升妇女权益，这是过程。而平权是希望平等，这是结果。都是承认了由于前工业时代的生产力关系而产生的不平权问题的合理性，且认识到了工业时代，甚至如今的信息时代，性别不主导生产力。</p>
</blockquote>
<p>我的一位朋友指出：</p>
<blockquote>
<p>女权强调的就是要提高女性的权益以此平权，这个词语中的“女”更会将人们的注意力转移到女性身上，而且女权不仅是整个环境的努力与建构，更是女性自身的觉醒，女权这个词更能引起女性群体的共鸣与思考，从这个角度来说我认为女权这个词比平权更合适。</p>
</blockquote>
<p>出于过程性考虑，我认可了她的观点，“女权”更为合适，然而我们需要认识到，女权运动的结果是希望平等，然而女生节的横幅，多少沾点。</p>
<blockquote>
<p>真正的女权主义永远把视角放在劳动、生产与工作中。毛主席说过：“时代不同了，男女都一样。男同志能办到的事情，女同志也能办得到。<br>男性首先应该做到的是收起自身的大男子主义习气，其次应该做到的是在工作上尊重女性，在家庭上分担家务。<br>女性的解放是与全人类的解放密不可分的，在推翻父权制的过程中，每一个男女都是平等的战士。女性只有解放全人类，才能解放她们自己。</p>
</blockquote>
<h1 id="男生节"><a href="#男生节" class="headerlink" title="男生节"></a>男生节</h1><p>同样，我也不赞成男生节。不赞成男生节的原因主要是这个节日的设立甚至比女生节的设立更为草率，选在了双十一之前，寓意着“祝福男同学早日脱单”。</p>
<p>这个节日的初衷我就不认同，本质上我并不认为感情这件事情值得如此祝愿。我们从小到大接触的教育或是文化都告诫我们：</p>
<blockquote>
<p>家庭幸福美满——对男性而言的老婆孩子热炕头，或者对女性的传统期望“相夫教子”——是很重要的个人价值。</p>
</blockquote>
<p>我认为不是，恰恰相反，自由地选择自身的感情需求反而更加重要。每个人对感情的看法与需求不同，然而我们的社会传统大体认为一个人单身一辈子是一种反社会的行为，这样的人生是缺憾的。</p>
<p>基于此，我反感一切塑造“感情是必需品，没有感情人生缺憾”的社会文化。当然，我的反对有违国家利益，如果大多数人抱有我的看法，那么国家的生育率会更加惨不忍睹。</p>
<h1 id="怎么过节"><a href="#怎么过节" class="headerlink" title="怎么过节"></a>怎么过节</h1><p>最后，我想谈谈，既然庆祝男女生节多年了，我对怎么过这两个节的看法。</p>
<p>首先，我还是认可对于大多人枯燥单调的华子生活需要节日的调剂，然而不是这个形式。</p>
<p>从形式上，我们应该拒绝许多带有”女性特权“主义的横幅，男生节同理。</p>
<p>从时间上，我认为这两个节日都应该改动时间，抖机灵，男女生节都和其他节点”只差一日“，实在恶俗。</p>
<p>最后，从活动内容上，我更喜欢的是难能可贵的同学相聚。就我个人而言，来到计 06 八个月后，我并没能熟识班上的同学。很遗憾的是，因为前女友和我的三位室友都来自计 03 班，我甚至对计 03 的情况更为熟悉，再加上以往自己长期在班级活动摆烂，导致计 06 只有少数同样转系而来的同学和班长等与我较为熟识。</p>
<p>昨天计 06 的班级聚餐甚是快乐，虽然我们那一桌点餐让人觉得不好评价，但是活动本身真的让我很有认同感与归属感。</p>
<p>附带上昨天全班同学的合照，祝愿计 06 班越来越好 (bai)。</p>
<p><img src="https://pic.imgdb.cn/item/6226288d5baa1a80ab9f002c.jpg" style="zoom:10%;" /></p>
<h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>这一部分记录我与一些朋友的交流。</p>
<h2 id="与其说是跪舔，不如说是轻视"><a href="#与其说是跪舔，不如说是轻视" class="headerlink" title="与其说是跪舔，不如说是轻视"></a>与其说是跪舔，不如说是轻视</h2><blockquote>
<p>关于起源的讨论我觉得观点不错，但是条幅也不至于跪舔。</p>
<p>很多时候就是，其实一个班的男女同学都不是很熟悉，在想的时候 也只能嗯夸。</p>
<p>但是背后还是有一定的男性凝视在里面，就是默认女性是弱势的，一定是好看的。所以你会感到不适很正常，所以与其说是跪舔不如说是轻视。</p>
<p>大多数只是留于表面的夸赞，你很难说这个和我们的新年祝福有什么区别。过新年我们也会祝福恭喜发财，也默认是发财一定是一件好事，大家都想要的事情。能真正看到女性价值的条幅还是很少。</p>
</blockquote>
<p>我提到我自己写的横幅——”你的软工，自己写”</p>
<blockquote>
<p>感觉有点攻击性了，虽然我明白什么意思，但是在过节的日子一般还是送上祝福的。如果是我写我可能会写 “能写完软工的女人永不服输”</p>
</blockquote>
<p>附带上一份<a href="https://cloud.tsinghua.edu.cn/d/57e290f8b54342d091a9/">第二性书单</a>。</p>
<h2 id="Women’s-Right"><a href="#Women’s-Right" class="headerlink" title="Women’s Right"></a>Women’s Right</h2><blockquote>
<p>前天看到女神节的称呼，还在想女生节已经改名叫女神节了吗，然后才知道是妇女节。</p>
<p>避开妇女节的称呼已经成了群体行为，我总觉得怪怪的，但似乎又可以理解，因为日常用语的妇女和官方文档的妇女完全不同。如今，英语语境里，women 隐含着力量，德语语境里，Frau 传递着尊敬，但在中文日常里，妇女还是属于已婚的、传统的女性的称呼。</p>
<p>看到如图的解释，才知道为什么会叫妇女节（但我自己没考证成功)。时代在变化，词语内涵在变化，但成为习俗的节日名称不轻易变化，而且也没人想强调这个节日本身的起源和意义了。</p>
<p>联合国今年的妇女节主题是“Iam GenerationEquality: Realizing Women’s Rights. 我是平等的一代：实现女性权利。”直到2030年，性别平等都是关键词。曾经的女性是被束缚的，所以她们追求解放。而如今要实现平等，我觉得女性也得拿出相应的实力，自己要足够强大，同样地参与社会事务，做出和男性虽然因为性别差异可能有区别但等价的贡献。</p>
<p>祝所有看到这里的女性节日快乐～说妇女节快乐感觉不适用所有人，而如果说女神节快乐，我祝愿大家都是因品格而散发神性光芒的女神。</p>
</blockquote>
<h2 id="一些不同意见"><a href="#一些不同意见" class="headerlink" title="一些不同意见"></a>一些不同意见</h2><blockquote>
<p>信息时代，不被性别主导生产力的仍是少部分岗位。</p>
<p>另外，即便是脑力劳动，抛开生育，女性也有弱势，比如体力（出差 加班等）</p>
<p>光农民我国还有好几亿呢呢</p>
<p>有助于在职场中获得成功的软素质，在男性上体现得要比在女性上频率更高</p>
<p>平权运动或者女权运动的一个出发点是，劳动决定了社会地位 家庭地位。这一点从古至今如此。然而，女性系统性地在劳动中处于产出弱势地位。因此我认为从这个出发点形成完全的平等是困难的。</p>
</blockquote>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 入坟指北</title>
    <url>/2022/03/07/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/docker/</url>
    <content><![CDATA[<h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><ul>
<li>在官网安装了 M1 的 docker desktop 后，尝试如下指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name webserver nginx</span><br></pre></td></tr></table></figure>
<p>报错了，<a href="https://segmentfault.com/q/1010000005040763">解决方案</a>如此处——忘了开服务（X</p>
<ul>
<li>再试试，貌似还是错了。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">Unable to find image <span class="string">&#x27;nginx:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">279a020076a7: Pull complete</span><br><span class="line">ef0e42ecde96: Pull complete</span><br><span class="line">5b148f48f52e: Pull complete</span><br><span class="line">5596027e469a: Pull complete</span><br><span class="line">a7c9963870b9: Pull complete</span><br><span class="line">efce21e16a59: Pull complete</span><br><span class="line">Digest: sha256:1c13bc6de5dfca749c377974146ac05256791ca2fe1979fc8e8278bf0121d285</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">da73cffee7f1ee7c3f2fd1f7ac15b470e27ad5677d393c6d4995c23b419b5e06</span><br><span class="line">&gt; docker run -d -p 80:80 --name webserver nginx</span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">&quot;/webserver&quot;</span> is already <span class="keyword">in</span> use by container <span class="string">&quot;da73cffee7f1ee7c3f2fd1f7ac15b470e27ad5677d393c6d4995c23b419b5e06&quot;</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br></pre></td></tr></table></figure>
<ul>
<li>看了看，貌似是命名寄了，那就<a href="https://www.tecmint.com/name-docker-containers/">重新命名吧</a>。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; docker rename webserver nginx_web</span><br><span class="line">&gt; docker run -d -p 80:80 --name nginx_web nginx</span><br><span class="line">docker: Error response from daemon: Conflict. The container name <span class="string">&quot;/nginx_web&quot;</span> is already <span class="keyword">in</span> use by container <span class="string">&quot;da73cffee7f1ee7c3f2fd1f7ac15b470e27ad5677d393c6d4995c23b419b5e06&quot;</span>. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See <span class="string">&#x27;docker run --help&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>我焯，又寄了，那么去查吧。</p>
<p>反正四处折腾，终于好了。</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>软工</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概课讨论——以《新青年》谈社会主义现代化建设</title>
    <url>/2022/03/06/Lecture/%E7%99%BE%E5%B9%B4%E5%90%8E%E6%96%B0%E9%9D%92%E5%B9%B4%E8%AE%B2%E7%A8%BF/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h1><p><strong>改革开放和社会主义现代化取得伟大成就的基本原因有哪些？</strong></p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h1><ul>
<li>以下以 A 代表张艺茗， B 代表赵晨阳</li>
<li>B 做开场白，抖机灵</li>
<li>A 介绍经济成就（10s 左右，然后谈 3 分钟经济制度）</li>
<li>前两点总共 1 分钟，350 字</li>
<li>第三点为 PRE 的爆点，2 分钟，700 字</li>
<li>B 接着介绍政治制度原因</li>
<li>每个点 1 分钟，350 字</li>
<li>B 来致谢，介绍 PRE 的思路和致谢文献</li>
</ul>
<h2 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a><strong>开场白</strong></h2><p>各位同学大家好，2021 年恰逢建党百年与陈独秀先生的《新青年》杂志创刊 105 周年。遥慕君子，温其如玉。我们组将以百年前陈独秀先生为《新青年》杂志所写六条创刊词为分论点，在之前小组的基础上进一步结合中外对比来探讨我国改革开放和社会主义现代化取得伟大成就的经济与制度原因。</p>
<p>我们组的讲演将由张艺茗同学与我进行，首先，我们讨论经济制度原因。</p>
<h2 id="经济制度"><a href="#经济制度" class="headerlink" title="经济制度"></a><strong>经济制度</strong></h2><p>大家好，改革开放以来，中国的经济快速腾飞,通过我们组的分析，结合陈独秀先生的论断，我们认为这主要取决于经济制度的三大优点。</p>
<h3 id="进步的而非保守的"><a href="#进步的而非保守的" class="headerlink" title="进步的而非保守的"></a><strong>进步的而非保守的</strong></h3><ul>
<li>改革开放后国家放弃以计划经济为主，实施市场经济，对国有企业采取了“扩权让利“的过渡性政策，把一部分权力和利益下放给地方、企业和个人，以调动他们的积极性。</li>
</ul>
<h3 id="世界的而非锁国的"><a href="#世界的而非锁国的" class="headerlink" title="世界的而非锁国的"></a><strong>世界的而非锁国的</strong></h3><ul>
<li>2001年中国加入wto，对外开放事业进入一个新的阶段，2013年，习近平主席提出“一带一路”倡议，基本形成了“六廊六路多国多港”的互联互通架构，此外，中国不断优化开放布局，从设立深圳等经济特区，到开放大连等沿海港口城市，再到上海、海南等地成为自由贸易试验区，吸引大量外资，成为了引领中国新时代对外开放的鲜明旗帜和重要开放门户。</li>
</ul>
<h3 id="自主的而非奴隶的"><a href="#自主的而非奴隶的" class="headerlink" title="自主的而非奴隶的"></a><strong>自主的而非奴隶的</strong></h3><ul>
<li>这也是我们想要重点介绍的一点，我们以韩国和乌克兰为反例，思考中国为何能够成功进行改革而非陷入这两种困境。首先我们来看韩国财阀崛起的原因，第一，政府把超大比重的工程交给一家企业去做，助长了一家独大的情况发生，第二韩国总统选举依赖于背后财阀的支持，导致政商相互勾结，第三，韩国是典型的外生性经济体,国内市场相对狭小，严重依赖国际市场,这种先天缺陷使其形成了对财阀企业的依附。反观中国努力推动市场经济体制，让企业间自由竞争，有效防止了资本的无序扩张，另外在政治上，我国领导人的选举与资金支持无关，且中国本身的经济体量大，不会过度依赖国际市场，因而也就不会依附于财阀。</li>
<li>再来看看乌克兰的情况：苏联解体前后乌克兰处于经济危机、地区分裂和无政府状态的艰难处境，一些商人和地区官僚趁机在私有化大旗下占有国有和集体资产，逐渐变得羽翼丰满。但中国在改革开放时期社会较为安定，经济总体平稳发展，国民经济命脉受国有经济控制而非私人垄断，石油，电力，交通这样的重要行业由国企主导而不是受资本摆布。但在乌克兰，大量的寡头正是来自这样的行业。对乌克兰寡头而言，经济实力是政治斗争的物质基础，而在中国，政治稳定性是经济发展的前提。我们认同政治与经济的相互促进，然而二者必有一主导，乌克兰的政治制度沦为了经济的附庸，但我国以稳中求进的政治制度促进经济发展，因而最终取得成功。</li>
</ul>
<h2 id="政治制度"><a href="#政治制度" class="headerlink" title="政治制度"></a><strong>政治制度</strong></h2><p>非常感谢艺茗同学为我们讲解了经济制度原因，接下来由我来讲演政治制度原因。</p>
<p>首先，陈独秀先生写道：</p>
<h3 id="进取的而非隐退的"><a href="#进取的而非隐退的" class="headerlink" title="进取的而非隐退的"></a><strong>进取的而非隐退的</strong></h3><p>这一点可以理解为一国建设不好社会主义，必须用同样的逻辑处理内外事务，吸收所有文明的优秀成果，人民才有更好的未来。</p>
<p>陈独秀的原话如下：</p>
<p><strong>各国之制度文物，形式虽不必尽同，但不思驱其国于危亡者，其遵循共同原则之精神，渐趋一致，潮流所及，莫之能违。</strong></p>
<p>回到我国，从 G20 到 APEC，从“金砖五国”到上合组织，中国在改革开放后反对单边主义，为推动世界经济复苏作出了重要贡献，再次树立了中国危难之时负责任、可信赖的大国形象，获得国际社会广泛好评。</p>
<p>陈独秀进一步写道，<strong>于此而执特别历史国情之说，以冀抗此潮流，是犹有锁国之精神，而无世界之智识。</strong></p>
<p>此处陈独秀有先见之明的指出，国家的发展更应具有世界智识。去年 12 月中美达成格拉斯哥宣言，共同为限制碳排放做出努力。中国是世界排名第一的工业国，也是第一煤炭生产大国。美国是排名第二的工业国，也是煤炭生产潜力最大的国家。中美都做出了非常具体的承诺，宁可放弃能源方面的巨大优势，也要严格执行减碳计划，避免冲击全球气候。</p>
<p>换到10年，20年前，政府做出类似的承诺，有可能被人说卖国。但现在中国和美国一起自我限制，就显得很自然。因为中国已经完成了工业化，不能再强调落后的特殊国情，必须意识到中国要为整个地球的命运负责。这就是陈独秀说的<strong>“遵循共同原则之精神，渐趋一致”。</strong></p>
<h3 id="实利的而非虚文的"><a href="#实利的而非虚文的" class="headerlink" title="实利的而非虚文的"></a><strong>实利的而非虚文的</strong></h3><blockquote>
<p>改革开放以来，我国始终采取务实的政治经济政策，重“实利”，不搞或少搞虚无的意识形态斗争。</p>
</blockquote>
<p>一方面，我国坚持以经济建设为中心，<a href="https://baike.baidu.com/item/邓小平/116181">邓小平</a>在1975年主持中央日常工作期间，强调： 全党讲大局，把国民经济搞上去。</p>
<p>另一方面，以经济发展为代表的社会变革不能只有貌似进步的口号，在我国，每年两会期间，政府都要向全国人大提交年度工作报告与统计公报，汇报当年的主要经济成就和下一年的工作目标。这是政府用主动的方式，给人民代表汇报工作。社会进步的每一步都要做计算，让全体国民知道利益在哪里，普通民众因而更具参与社会变革的动力。</p>
<h3 id="科学的而非想像的"><a href="#科学的而非想像的" class="headerlink" title="科学的而非想像的"></a><strong>科学的而非想像的</strong></h3><p>这一点是基于当代中国社会已经太复杂，远远超出了原始部落几十个人的规模，所以直觉不足以处理社会科学问题，必须用事实和逻辑来做判断。</p>
<p>习近平总书记治国理政的一个鲜明特点，就是特别强调要用科学思想方法去观察、思考、分析问题——深邃的历史思维、严密的辩证思维等七种科学思想方法，贯通着习近平治国理政的全过程、各领域，具有内在联系，构成一个有机整体。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>周邦虽旧，其命维新。跨越百年，我们以陈独秀先生对新青年的六点寄语为分论点，探索了新中国改革开放与社会主义现代化建设取得伟大原因。最后，我们再次为大家强调这六点。</p>
<p><strong>进步的而非保守的</strong></p>
<p><strong>世界的而非锁国的</strong></p>
<p><strong>自主的而非奴隶的</strong></p>
<p><strong>进取的而非隐退的</strong></p>
<p><strong>实利的而非虚文的</strong> </p>
<p><strong>科学的而非想像的</strong></p>
<p>在新自由主义抬头的时代背景下，作为清华大学的学生，我们肩负着继往开来的使命，而坚守着陈独秀先生百年前的初心，我们的前途必是玉汝于成。</p>
<p>最后，我们组的参考文献如下。</p>
<p>其中第二条是中美格拉斯哥宣言，非常推荐能源背景与经济背景的同学们阅读。</p>
<p>第四点是去年的政府工作报告与统计公报，这是社会主义公民最应该阅读的两份文件。</p>
<p>最后，是马逆的睡前消息 386 期，马逆在这篇讲演中指出，希望新时代的中国青年重温百年前的初心，也推荐大家去看一看。</p>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>百年以后新青年</title>
    <url>/2022/03/06/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E7%99%BE%E5%B9%B4%E4%BB%A5%E5%90%8E%E6%96%B0%E9%9D%92%E5%B9%B4/</url>
    <content><![CDATA[<p>来自<a href="https://www.bilibili.com/video/BV1Va411k7a5?from=search&amp;seid=14284964418222565555&amp;spm_id_from=333.337.0.0">秃头海豹 2021 年的年终秀</a>，再次准备用来讲毛概。</p>
<blockquote>
<p>再下去要讲马原了，讲完马原讲毛概，再讲习思，接下来没得讲了，脸都不要了。</p>
</blockquote>
<h1 id="陈独秀与《新青年》"><a href="#陈独秀与《新青年》" class="headerlink" title="陈独秀与《新青年》"></a>陈独秀与《新青年》</h1><p>正好今年是建党百年，天天能看到“不忘初心”的口号，所以，今天我也来一个探索初心，回顾上世纪初改变整个国家的《新青年》杂志。</p>
<p>《新青年》是陈独秀创办的，对于今天的中国人来说，他最主要的身份是北大文科学长，中共第一任总书记。但早在接触马克思主义之前，陈独秀已经是重要政治人物了。他1879年出生，25岁就在上海制造军火，准备造反，26岁回到安徽，和柏文蔚一起，在关帝庙成立了一个反清组织叫岳王会，陈独秀当会长。1908年光绪皇帝和慈禧一起死了，岳王会组织1000多新军反清，规模不算小，只是运气不如3年后的武昌起义好，长江上的海军本来答应配合，关键时刻选择支持清朝，安庆起义最终被镇压。</p>
<p><img src="https://pic.imgdb.cn/item/622408395baa1a80abf17499.jpg" style="zoom:33%;" /></p>
<p>1911年辛亥革命之后，柏文蔚，就是陈独秀在岳王会的同事，当了安徽都督兼民政长，是孙中山这边兵力最强的将军。32岁的陈独秀当省政府秘书长，相当于今天的常务副省长。第二年，陈独秀讨伐袁世凯失败，暂时离开政治圈。他再出现在历史书上，就是办《新青年》杂志。</p>
<p><img src="https://pic.imgdb.cn/item/6224084d5baa1a80abf1814d.jpg" style="zoom: 33%;" /></p>
<p>1915年刚开始办杂志的时候，陈独秀和胡适曾经有一个约定，“20年不谈政治”。但是，到了1918年11月，《新青年》刊登了李大钊的文章《庶民的胜利》，直接导致毛泽东转向马克思主义。《新青年》出现了急速向政治话题转向的趋势。1919年5月，新青年出了《马克思研究专号》。“20年不谈政治”的约定，仅仅3年就被打破了。</p>
<p>站在2021年回顾历史，《新青年》杂志的3年转型非常重要，之后30年的中国革命，接下来72年的新中国社会变迁，源头都在陈独秀、李大钊、毛泽东共同参与的这次内容急转弯。但如果我们回顾《新青年》杂志的发刊词，就能发现，《新青年》杂志的转型并不偶然。陈独秀作为政治界的实战派，凭借丰富的人生阅历，从第一期开始，就下意识地选择了接近于唯物主义历史观的立场。所以他能快速接受俄国革命思想，规划新中国的解放道路。接下来，我们一起不忘初心，回顾一下《新青年》的发刊词《敬告青年》。</p>
<p>陈独秀这篇文章内容接近4000字，分成六个小标题，每一条内容在当代都有现实意义。</p>
<h1 id="自主的而非奴隶的"><a href="#自主的而非奴隶的" class="headerlink" title="自主的而非奴隶的"></a>自主的而非奴隶的</h1><p>第一条，自主的而非奴隶的，听起来似乎是废话，因为现代社会搞奴隶制的成本很高。所以我需要读一下陈独秀的原文：</p>
<p><strong>破坏君权，求政治之解放也；否认教权，求宗教之解放也；均产说兴，求经济之解放也；女子参政运动，求男权之解放也。</strong></p>
<p>陈独秀连说四个解放，后来我们就用“解放前”、“解放后”区分中国历史阶段。这段话的意思是，制度、思想和经济限制了人的自由发展，也是广义的奴隶制。然后陈独秀说，“解放”的前提是有独立人格，传统社会的贵族和奴隶道德不一样，如果你用奴隶道德评判自己过得不错，就是丧失了独立人格，不带锁链也是奴隶。陈独秀写这段话的时候，一定想起了当年的自己，想起了从考秀才到造反的思想变化。</p>
<p>2021年的世界依然有人需要打破现实的奴役，比如说缅甸和斯威士兰都有反对国王和军阀的革命运动，刚刚死掉的全斗焕让很多人想起光州事件。但是，对于大多数中国人来说，摆脱陈独秀说的“奴隶”地位，最重要的一件事是拿起唯物主义武器，发现自己身边的每一种意识形态，用利益关系分析它。</p>
<p>比如说，APP小红书刚刚拿到了新一轮投资，估值200亿美元。它在手机应用市场上的宣传词是“三亿年轻人都在分享的生活社区”，似乎三亿年轻人不分阶级，不分地域，生活方式都可以相提并论。打开小红书，欢迎界面上的介绍是“标记我的生活”，告诉你生活通过标记体现价值。第一次进入软件，小红书会主动要求导入微信好友，让你去看熟悉的人分享了哪些消费细节。</p>
<p>这些貌似很亲切的语言放到一起，潜台词是：消费并不是因为自己有需求，而是因为要和别人比较。只购买，不分享，消费就缺乏意义。</p>
<p>如果你完全接受了小红书灌输的生活定义，你就是精神和经济上的双重奴隶，但就算接受10%，20%，消费主义也可以把你的一部分精神和肉体当奴隶。只有跳出软件营造的温馨气氛，思考每一句话背后的利益关系，普通人才能避免浪费自己的劳动所得。</p>
<p>又比如说，最近几年离婚率上升很快，国家不得不造出一个离婚冷静期的概念，打算降低离婚率。这说明主流的立法者认为，稳定的婚姻是需要尽量保护的文化产品。就像古人说的：“宁拆十座庙,不毁一桩婚”。</p>
<p>但是，如果我们能跳出传统文化和人情世故，仔细思考婚姻和社会的关系，就能意识到，当代婚姻和古代婚姻是完全不同的两种东西。古代婚姻是两个家族之间的联盟，顺便指定两个婚龄男女组建一个生育单位，父母或者族长拥有决定权，甚至不需要当事人同意。</p>
<p>而当代婚姻，尤其是90年代农村女青年普遍外出打工之后的婚姻，基本上只是两个当事人自己的事情，和家族、生育都没有绝对绑定。如果不是畸形的高房价提高了离婚成本，强行拖延婚姻对社会的稳定贡献不大，对普通公民的自由损害并不小，是一个不适合用立法来做的事情。</p>
<p>所以说，陈独秀的第一个警告，对当代青年有很强的现实意义，我们在接受意识形态之前，必须冷静思考意识形态是怎么来的，让谁得好处。如果跳过具体的物质生活空谈意识形态，很容易变成不自觉的奴隶。</p>
<h1 id="进步的而非保守的"><a href="#进步的而非保守的" class="headerlink" title="进步的而非保守的"></a>进步的而非保守的</h1><p>然后我们看陈独秀的第二个提醒：<strong>进步的而非保守的</strong></p>
<p><strong>固有之伦理、法律、学术、礼俗。无一非封建制度之遗……尊重廿四朝之历史性。而不作改进之图。则驱吾民於二十世纪之世界以外。纳之奴隶牛马黑暗沟中而己。</strong></p>
<p>陈独秀再次提到奴隶问题，说明进步思想和人格独立有关联。只有看破了意识形态的神圣性，不盲目接受意识形态，才不会害怕打破现有的意识形态，才能在社会结构上进步。反过来说，因为存在物质和社会的进步可能性，看破意识形态的神圣性才有意义。要是社会长期停留在石器时代，没有任何金属工具，那就算戳破了少数长老和僧侣的宗教神话，也未必能给普通人带来幸福。</p>
<p>当代中国显然是一个快速进步的社会，我们和陈独秀面临的主要问题并不是打破意识形态的神圣性带来痛苦，而是社会变革跟不上物质条件的提升，反过来限制了物质生活。比如说，前面我提到婚姻冷静期问题，这项政策的一个主要目的是拯救生育率，解决中国每年出生人口即将跌破1000万的问题。</p>
<p>维护家庭来提高生育效率，是很自然、很传统、很保守的选择。但是，“生育”不仅仅意味着“出生”，还有“养育”。稍微有进步的眼光，就能意识到，几千年来的“养育”模式已经被彻底颠覆了。</p>
<p>自古以来，对于大多数中国农民来说，“养育”是一个风险投资。孩子生出来，有一口饭吃，基本上就是放养。自己出去玩，不小心在水塘里淹死；出去放羊，在山上摔死；生病了，被村医随便灌一副药治死，这都不是事。只要在粮食够吃的年份生的足够快就行。</p>
<p>同时，中国农民也不担心自己的子女阶级下降，因为已经是社会最底层了，还能怎么下降呢。多养几个，反而可以在底层社会多抢一点资源，或者送一两个读书经商，多一点翻身的希望。</p>
<p>这种养育习惯，到我读小学的时候还能看到，十几岁的孩子能干活之前，随便去哪玩，风险直接忽略；上学读书也完全随缘，能考中专分配工作最好，考不上打工种地也是正常人生。所以，在化肥和水泵提供粮食的年代，多生孩子是很自然的选择，只有国家强力控制生育，才能避免人口爆炸。</p>
<p>21世纪初，中国完成了工业化，社会进步消灭了这两个养育前提。一方面孩子是现代社会的公民，不能随便暴露在风险环境下放养；另一方面，父母也进入了现代社会，有资格考虑自己和子女的发展问题，不能忍受家庭成员固化在社会底层，必须尽可能多投入资源培养孩子，才能避免焦虑。</p>
<p>这两个变化导致养育成本飙升，普通家庭必须像古代贵族世家那样，对子女的风险和前途负责，但现代家庭再怎么富裕，也比不了古代世家。所以无论国家怎么鼓励，生育率还是疯狂下降。社会发展机会越多，父母收入水平越高，孩子越少。</p>
<p>进步产生的问题，不可能通过倒退来解决。过去几十年中国家庭放弃了很多貌似天经地义的任务，先是放弃在家庭内部搞纺织，然后是放弃在家庭内部做衣服，因为普通人没有能力按照新的服饰标准做出美观的衣服。最近几年，做饭的任务逐渐离开家庭，也没见有什么怨言。</p>
<p>现在我们按照新标准养不起孩子了，让社会接过养育孩子的一部分任务和权利，避免父母因为焦虑，过度投入养育资源，是一个很自然的选择，至少值得尝试。而上世纪末，单位大院和工厂家属区恰恰做过不少有益的尝试，证明社会化抚养至少比离婚冷静期更靠谱。</p>
<p>所以我赞同陈独秀的观点，当代青年必须警惕文化保守化问题。如果只是靠离婚冷静期和传统家庭美德去保障生育率，所有人的养老金都会变成废纸，因为没有足够的人搞生产，去兑现这些废纸。</p>
<h1 id="进取的而非退隐的"><a href="#进取的而非退隐的" class="headerlink" title="进取的而非退隐的"></a><strong>进取的而非退隐的</strong></h1><p>陈独秀提醒青年的第三件事是进取，不要退隐。</p>
<p>上一条讲“进步”，面向全社会意识形态；这一条讲“进取”，针对的是个人。原文是这么说的：</p>
<p><strong>自好之士，希声隐沦，食粟衣帛，无益于世。世以雅人名士目之，实与游惰无择也。人心秽浊，不以此辈而有所补救</strong></p>
<p>进取的青年才能推动社会进步，但问题是，一个人的力量不足以改变社会；反过来说，缺一个人也很难阻碍社会进步，个人没有理由必须积极进取，推进社会进步。</p>
<p>到了1920年，新青年第八卷第一篇文章，标题是<strong>《谈政治》</strong>，陈独秀解释了青年应当进取的原因。他的原文是：</p>
<p><strong>“你谈政治也罢，不谈政治也罢，除非逃在深山人迹绝对不到的地方，否则政治总会寻着你”</strong></p>
<p><img src="https://pic.imgdb.cn/item/6224093c5baa1a80abf217c2.jpg" style="zoom:33%;" /></p>
<p>这句话勉强算是从消极的一面回答了2021年的一个关键词：<strong>“躺平”</strong>。但还是缺乏积极的理由，让年轻人主动选择“进取”。后来陈独秀当了总书记，也没有完全解决问题，还是要让毛泽东用现实操作来回答。</p>
<p>毛泽东的答案是，分散状态的人，如果不是死到临头，不太可能选择进取。必须把他们组织起来，把那些从进步中受益的大多数人组织起来，让推动变革的人和享受变革的人通过组织力量挂钩，大家才有动力。否则“躺平”必然一直是普遍现象。当代新青年如果希望社会进步，就不能指望在个人主义立场下解决问题。</p>
<h1 id="世界的而非锁国的"><a href="#世界的而非锁国的" class="headerlink" title="世界的而非锁国的"></a>世界的而非锁国的</h1><p>陈独秀的第四个提醒，是要采取世界主义，不要锁国，尤其不要在精神上锁国。我读一下原文：</p>
<p><strong>各国之制度文物，形式虽不必尽同，但不思驱其国于危亡者，其遵循共同原则之精神，渐趋一致，潮流所及，莫之能违。</strong></p>
<p><strong>于此而执特别历史国情之说，以冀抗此潮流，是犹有锁国之精神，而无世界之智识。</strong></p>
<p>这一点，首先要看上个月中美达成的格拉斯哥宣言。中国是世界排名第一的工业国，也是第一煤炭生产大国。美国是排名第二的工业国，也是煤炭生产潜力最大的国家。这两个国家都做出了非常具体的承诺，宁可放弃能源方面的巨大优势，也要严格执行减碳计划，避免冲击全球气候。</p>
<p>换到10年，20年前，政府做出类似的承诺，有可能被人说卖国。但现在中国和美国一起自我限制，就显得很自然。因为中国已经完成了工业化，不能再强调落后的特殊国情，必须意识到中国要为整个地球的命运负责。这就是陈独秀说的<strong>“遵循共同原则之精神，渐趋一致”。</strong></p>
<p>在这个背景下，我认为陈独秀的提醒在今天至少有两个具体指向。</p>
<p>首先，我们自己进入工业社会之后，矛盾越来越复杂，必须想个办法释放出来，否则很快就会阻碍增长。既然中国已经完成了工业化，相对欧美日韩已经是同一层次的社会，中国的媒体就不要总是把焦点聚集在国外，不要总是操心国外人民的疾苦。批判工具是个好东西，一定先要让中国人民自己用上，否则也是另外一种锁国，把好东西锁在外面。</p>
<p>其次，对于中国年轻人来说，学英语，学翻译软件，积极利用英文互联网的信息，仍然是加强专业能力和完善世界观的重要途径，甚至可以说必经之路。最近几年，虽然英文互联网有很多问题，但相对而言，中文互联网的优质内容快速萎缩，已经不太能支撑年轻人的自我提升了。别的不说，我熟悉的媒体机构，包括我自己的媒体工作室，挖掘深度内容都高度依赖于英文互联网，就算是处理中国本身相关的信息也一样。</p>
<p>从长期来看，我们必须提供更多的创作自由和空间，激发中文互联网的优质内容原创能力，不要让睡前消息这种简陋的节目，在中国互联网上占这么大的市场。从短期来说，落实陈独秀“不锁国”的提醒，我们必须要努力和英文互联网保持联系。</p>
<h1 id="实利的而非虚文的"><a href="#实利的而非虚文的" class="headerlink" title="实利的而非虚文的"></a><strong>实利的而非虚文的</strong></h1><p>陈独秀的第五个提醒，是抛弃虚文，计算实际利益。原话是<strong>祀天神而拯水旱，诵“孝经”以退黄巾，人非童昏，知其妄也。</strong></p>
<p>祭神求雨这种事。我30年前见过，现在有人工降雨了，应该没人干了。后面这一句，“诵孝经以退黄巾”，说的是三国时代前夕，东汉官员向栩，他公开提出建议，派人在黄河边上读孝经，不用出兵就能天下太平。</p>
<p>向栩的建议，一半是讽刺，另一半也的确是传统社会的治国理念。用意识形态限制人的思考方式，就能减少不稳定因素。但是，陈独秀的第一条建议就是建立独立人格，摆脱思想奴役。就算陈独秀不提这个建议，在人民普遍受教育之后，保守的意识形态说教最多只能暂时阻碍社会进步，不可能推动社会积极地往前走。</p>
<p>意识形态和个人行动的关系，我前面分析陈独秀第三条建议的时候已经说了，是毛泽东最终用行动解决了问题，把革命的账算到每一个人，给大多数人提供进取的理由，这就是讲求“实利”。</p>
<p>比如我们平时笼统地说，解放战争胜利的原因是农民保卫胜利果实，土改之后踊跃参军。但实际上，解放区土地改革之后，解放军主要实行的还是征兵制，而不是志愿兵制，征兵的指标还是要一个村一个村的落实，完全指望农民自发性是不行的。</p>
<p>这是因为解放军人数太多了，一个农民是否去当兵，和解放战争能否最终胜利关系不大，但肯定影响自己家种地的劳动力。土改之前没有土地，还可以说无产者无畏，土改分地之后恰好有了经营自己小农场的理由，参军热情反而下降。</p>
<p>解放军能不断从解放区得到新兵，靠的是重建基层组织，公平分配土地税，选择最合适的家庭征兵，同时给军属足够的照顾。这才能压倒乱抓壮丁的国民党。后来六七十年代解放军的士兵素质高，得到全社会尊重，原因也是退伍军人的待遇好，回到公社普遍能当生产队长，当民兵队长，吸引女孩子嫁过来，所以优秀的农村青年踊跃参军。</p>
<p>到了90年代，外出打工收入明显提升，而义务兵的待遇没有同步提高，无论外部形势怎么危急，士兵的社会地位也是逐渐下降。很多家庭都是想让军队管教孩子，才会送男孩去当兵。直到21世纪，士兵待遇重新提高，到今年连配偶的医疗也全额报销了，军队又开始吸引优秀的人才。下一步，我们还要想办法让军队人才和民间更合理的结合，什么时候提前转业不再是一种需要争取的优待，军官的水平就还能进一步提高。</p>
<p>类似的例子还有女权。很多人说起保护妇女权益，就是不断给妇女加福利，延长产假，限制解雇条件。但福利不是天上掉下来的，而是各单位的人力成本。如果只是用法律规定福利，结果必然是各个机构都害怕雇佣女性，反而打击了妇女的生产力，破坏了女性权利。这就是陈独秀说的“图虚名而损实利”。我再给大家读一段原文：</p>
<p><strong>诳人之事，虽祖宗之所遗留，圣贤之所垂教，政府之所提倡，社会之所崇尚，皆一文不值也!</strong></p>
<p>这其实还是回到了第一条提醒，通过利益分析来看破意识形态，建立自主人格。</p>
<h1 id="科学的而非想象的"><a href="#科学的而非想象的" class="headerlink" title="科学的而非想象的"></a>科学的而非想象的</h1><p>陈独秀的第六条提醒，是不要用想象去压制科学，原文非常给力：</p>
<p><strong>医不知科学，既不解人身之构造，复不事药性之分析，菌毒传染，更无闻焉；惟知附会五行生克、寒热阴阳之说，袭古方以投药饵，其术殆与矢人同科。</strong></p>
<p>“矢人”是一个典故，制造弓箭的人希望受伤的人越多越好，等于直接指责中医谋财害命了。但看《新青年》发刊词全文，其实对中医并没有特别的恶意，因为陈独秀把中国的传统职业都喷了一个遍。他只是想提醒中国青年，不要用想象和直觉去替代科学实证。比如说，现在很多自媒体从日本战争电影抄来了“国运”的说法，动不动就说中国国运如何如何，这几年风气甚至开始蔓延到主流媒体。陈独秀也有非常直接的批判：</p>
<p><strong>士不知科学，故袭阴阳家符瑞五行之说，惑世诬民。</strong></p>
<p>这几年，说起房产税，总是有人对读者说，千万不能收房产税，否则房东为了缴税，就要把房产税转嫁给房客，结果还是穷人吃亏。但是没有房产税的时候，房东也不会觉得钱够花，如果能涨价不会逼走房客，他早就涨价了，没必要等到房产税再涨价。</p>
<p>从经济学角度说，房子在老化倒掉之前，供给刚性是无限大，就算收很高的房产税，房东的最佳选择还是按市场价出租房子。而租客因为工资限制，需求是有弹性的，所以房东必然承担几乎全部房产税。房东向穷人转嫁房产税的说法，是典型的用想象替代经济科学，用伪装的平民视角来支持保守主义，用小生产者的庸俗比喻去迎合民粹。</p>
<p>陈独秀对小生产者的庸俗想象也有准确描述，我来读一下：</p>
<p><strong>商不知科学，故惟识罔取近利，未来之胜算，无容心焉。</strong></p>
<p>回头看陈独秀的提醒，当代青年在大多数自然科学方面已经很尊重逻辑和证据了。但我们也要用同样的标准去衡量社会科学，不要觉得自然科学靠逻辑，社会科学就可以靠直觉。那样一定会被少数媒体用情绪引导，最后变成陈独秀所说的思想奴隶。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前面的内容介绍了《新青年》发刊词。陈独秀创办《新青年》的时候，还没有接受马克思主义，只是凭着自己几十年横跨政治界、学术界和媒体行业的经验，提出了六个期望。2021年回顾这篇文章，我们可以依托马克思的唯物主义历史观，把陈独秀提到的六个方面再简化一下。</p>
<p><strong>第一条：自主的，而非奴隶的。就是认识到意识形态依附于物质，没有神圣性。人民应该先理解意识形态，再选择是否接受。</strong></p>
<p><strong>第二条：进步的，而非保守的。就是认识到生产力会推动整个社会变革，除了颠覆物质生活条件，还要重建社会结构和文化风俗。不能为了守住所谓传统文化，阻碍生产力进步。</strong></p>
<p><strong>第三条：进取的，而非退隐的。通过毛泽东的回答，我们知道必须用革命组织把中国人组织起来，让变革的受益者参与变革，让沉默的大多数认清自己的利益，压倒吵闹但反动的少数人。</strong></p>
<p><strong>第四条：世界的，而非锁国的。可以概括为一国建设不好社会主义，必须用同样的逻辑处理内外事务，吸收所有文明的优秀成果，人民才有更好的未来。</strong></p>
<p><strong>第五条：实利的，而非虚文的。意思是革命不能只有貌似进步的口号，每一步都要做计算，让大多数人知道利益在哪里，普通人才有参与社会变革的动力。</strong></p>
<p><strong>第六条：科学的，而非想像的。这个说法的背景是社会已经太复杂，远远超出了原始部落几十个人的规模，所以直觉不足以处理社会科学问题，必须用事实和逻辑来做判断。</strong></p>
<p>自从400年前伽利略扔铁球开始，人类社会就不断打破直觉和常识，不断进步。我们设计中国乃至全世界的未来，或者仅仅是设计个人和社会的关系，只有美好的愿望是不够的。</p>
<p>从这六方面的论述来看，陈独秀转向马克思主义有必然性，中国最有脑子的一批知识分子转向马克思主义也有必然性。2021年的新青年如果想“不忘初心”，我首先推荐陈独秀的文章。</p>
<p>最后补充一下，陈独秀这六条标准集中在思想方面，而青年需要的不仅仅是思想。根据上个月江苏省教育厅的报告，2021年江苏省高中生近视率是89.6%，乡村中学生在耐力、柔韧性、爆发力方面都比城市学生强。我不得不推荐新青年第三卷第二期的文章<strong>《体育之研究》</strong></p>
<p>全文我就不通读了。“<strong>文明其精神，野蛮其体魄。</strong>”的说法，就是从这篇文章走向全中国的。希望今天的中学青年能把毛导师的说法当一回事，也算不忘初心的行动之一。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>A Letter From One of My Beloved Friends</title>
    <url>/2022/03/05/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/Letter_from_hj/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a89d2cceb4258c86b9070fc81caad9d6d23a07066db23748b9171d3add8766ca"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>人类社会观察</tag>
        <tag>Friendship</tag>
      </tags>
  </entry>
  <entry>
    <title>CI/CD</title>
    <url>/2022/03/05/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/CI_CD/</url>
    <content><![CDATA[<p>参考自<a href="https://blog.jjonline.cn/linux/238.htm">晶晶博客</a>与 <a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd">Red Hat</a> 说明文档，致谢！</p>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://www.redhat.com/zh/solutions/cloud-native-development">现代应用开发</a>的目标是让多位开发人员同时处理同一应用的不同功能。但是，如果企业安排在一天内将所有分支源代码合并在一起（称为”<a href="https://thedailywtf.com/articles/Happy_Merge_Day!">合并日</a>“），最终可能造成工作繁琐、耗时，而且需要手动完成。这是因为当一位独立工作的开发人员对应用进行更改时，有可能会与其他开发人员同时进行的更改发生冲突。如果每个开发人员都自定义自己的本地<a href="https://www.redhat.com/zh/topics/middleware/what-is-ide">集成开发环境（IDE）</a>，而不是让团队就一个基于云的 IDE 达成一致，那么就会让问题更加雪上加霜。</p>
<p>持续集成（CI）可以帮助开发人员更加频繁地（有时甚至每天）将代码更改合并到共享分支或”主干”中。一旦开发人员对应用所做的更改被合并，系统就会通过自动构建应用并运行不同级别的自动化测试（通常是单元测试和集成测试）来验证这些更改，确保这些更改没有对应用造成破坏。这意味着测试内容涵盖了从类和函数到构成整个应用的不同模块。如果自动化测试发现新代码和现有代码之间存在冲突，CI 可以更加轻松地快速修复这些错误。</p>
<h1 id="纵览"><a href="#纵览" class="headerlink" title="纵览"></a>纵览</h1><p>我们没必要纠结于这些语义，您只需记得 CI/CD 其实就是一个流程（通常形象地表述为管道），用于实现应用开发中的高度持续自动化和持续监控。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122160600.png" alt="DevOps、CI、CD的区别"></p>
<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><p>DevOps是<code>Development</code>和<code>Operations</code>的组合，是一种方法论，是一组过程、方法与系统的统称，用于促进应用开发、应用运维和质量保障（QA）部门之间的沟通、协作与整合。以期打破传统开发和运营之间的壁垒和鸿沟。</p>
<p>DevOps是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。通过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。具体来说，就是在软件交付和部署过程中提高沟通与协作的效率，旨在更快、更可靠的的发布更高质量的产品。</p>
<p>也就是说DevOps是一组过程和方法的统称，并不指代某一特定的软件工具或软件工具组合。各种工具软件或软件组合可以实现DevOps的概念方法。其本质是一整套的方法论，而不是指某种或某些工具集合，与软件开发中设计到的<code>OOP</code>、<code>AOP</code>、<code>IOC</code>（或DI）等类似，是一种理论或过程或方法的抽象或代称。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122165858.png" alt=""></p>
<h2 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h2><p>CI的英文名称是<code>Continuous Integration</code>，中文翻译为：持续集成。具体而言，是指是在源代码变更后自动检测、拉取、构建和（在大多数情况下）进行单元测试的过程。</p>
<p>持续集成的目标是快速确保开发人员新提交的变更是好的，并且适合在代码库中进一步使用。CI的流程执行和理论实践让我们可以确定新代码和原有代码能否正确地集成在一起。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122165932.png" alt=""></p>
<p>通过 CI，开发人员将会频繁地向主干提交代码，这些新提交的代码在最终合并到主干前，需要经过编译和自动化测试流进行验证。</p>
<p>成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享存储库中。该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p>
<h2 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h2><p>CD对应多个英文名称，持续交付<code>Continuous Delivery</code>和持续部署<code>Continuous Deployment</code> 。</p>
<h3 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h3><p>持续交付通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 GitHub 或容器注册表），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p>
<p>完成 CI 中构建及单元测试和集成测试的自动化流程后，持续交付可自动将已验证的代码发布到存储库。为了实现高效的持续交付流程，务必要确保 CI 已内置于开发管道。持续交付的目标是拥有一个可随时部署到生产环境的代码库。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122170128.png" style="zoom:80%;" /></p>
<p>在持续交付中，每个阶段（从代码更改的合并，到生产就绪型构建版本的交付）都涉及测试自动化和代码发布自动化。在流程结束时，运维团队可以快速、轻松地将应用部署到生产环境中或发布给最终使用的用户。</p>
<h3 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h3><p>对于一个成熟的CI/CD管道（Pipeline）来说，最后的阶段是持续部署。</p>
<p>持续部署指的是自动将开发人员的更改从存储库发布到生产环境，以供客户使用。它主要为了解决因手动流程降低应用交付速度，从而使运维团队超负荷的问题。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122170247.png" style="zoom: 50%;" /></p>
<p>持续交付意味着所有的变更都可以被部署到生产环境中，持续部署意味着所有的变更都会被自动部署到生产环境中。但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。</p>
<p>持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。</p>
<p>持续交付表示的是一种能力，而持续部署表示的则一种方式。持续部署是持续交付的最高阶段。</p>
<h2 id="Agile-Development"><a href="#Agile-Development" class="headerlink" title="Agile Development"></a>Agile Development</h2><p>也即敏捷开发，而且这个称呼似乎在国内被滥用了。敏捷开发着重于一种开发的思路，拥抱变化和快速迭代。如何实现敏捷开发，目前似乎尚没有完善的工具链，更多的是一种概念性，可能和“既想马尔跑得快，又想马儿不吃草”差不多。</p>
<p><img src="https://blog.jjonline.cn/Upload/image/201901/20190122170723.png" alt=""></p>
<h1 id="Gitlab-CI-CD"><a href="#Gitlab-CI-CD" class="headerlink" title="Gitlab CI/CD"></a>Gitlab CI/CD</h1><p><a href="https://www.secoder.net/cicd/">链接在此</a>，还有点意思</p>
<p>可惜没有讲明白 docker 的意义，还有的话，这个作业必须要在 SECode 的 Gitlab 上做。</p>
<p><img src="https://s2.loli.net/2022/03/07/xPtXTF2ceqdfnNM.png" style="zoom:15%;" /></p>
<p>本质上就是对着 Gitlab 的提示去做。</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>软工</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Digital Logic Circuit</title>
    <url>/2022/03/05/Lecture/digital_logic_circuit/</url>
    <content><![CDATA[<h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E9%9B%B7%E7%A0%81">格雷码的规则</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概课讨论——三大改造的历史意义</title>
    <url>/2022/03/03/Lecture/%E4%B8%89%E5%A4%A7%E6%94%B9%E9%80%A0%E8%AE%B2%E7%A8%BF/</url>
    <content><![CDATA[<h1 id="论题资料"><a href="#论题资料" class="headerlink" title="论题资料"></a>论题资料</h1><p><strong>社会主义革命和建设时期影响最为深远的制度建设或社会变革是什么？</strong></p>
<p>答案肯定是三大改造，是个人就能回答，接下来讨论依据。</p>
<h2 id="旧时代"><a href="#旧时代" class="headerlink" title="旧时代"></a>旧时代</h2><ul>
<li><p>双元革命包括工业革命，之前的世界经济基础是农牧业和手工业。而在没有工业的年代，农业和手工业效率都非常低，绝大多数人只能生产略微超过自己需要的产品。一旦社会稍微富裕一点，人口就会快速繁衍，降低人均土地和原材料，让剩余产品回到原来的水平上，所以农业社会的基本特征就是穷。</p>
</li>
<li><p>穷不仅仅意味着缺吃的，缺衣服，还意味着精神和战斗力的贫乏。普通人既没有时间，也交不起学费，连识字都是稀缺能力，更不要说购买文化产品，对整个社会进行深入思考。同时，穷人吃不起肉，练不出肌肉，卖了房子也换不到一套盔甲和战马，所以十个人也打不过一个专业武士。只要极少量的军事贵族加上专业知识分子，比如说僧侣和文官，就能在物质和精神上统治很多农民，把他们的剩余产品都拿过来。</p>
</li>
<li><p>反过来说，每个农民和工匠贡献的剩余产品很少，军事贵族和知识分子必须统治足够多的人口，才能养活自己优越的生活。这意味着农业社会的稳定结构一定是多数人依附于少数人，少数人统治多数人，用严格的等级制度限制每个人的生活方式。</p>
</li>
<li><p>在这样的时代，你如果是个普通农民、工匠，日子肯定不好过，吃饱穿暖就是最高目标，除非特别幸运，否则不要奢望有发展空间，更不要妄想和统治者谈平等，甚至连自由选择信仰的权利都没有。而如果你运气不错，生在一个统治者家庭，其实也没有多少生活自由度，因为社会没有什么经济增量，你分到的这一块财富已经不算少了。如果统治者不小心翼翼履行自己的职责，不认真维护自己的地位，作为一个阶层他们会被清洗，作为个人他们会被替换。如果你不理解我说的这段话，可以看看《红楼梦》的故事。</p>
</li>
<li><p>自从人类进入农业社会，尤其是金属工具普及之后，等级制社会结构就基本建立了，接下来几千年，统治者换了一茬又一茬，但内核区别不大。500年前的明朝地主，如果忽然和2000年前的汉朝地主交换身份；或者是清朝早期的军官穿越到秦国的边境要塞，虽然都会惊慌，但用不了多久就能适应。至于说普通农民，除非遇到战乱，否则很难感受到每一代人的生活有什么区别。</p>
</li>
<li><p>这种停滞、穷困，绝大多数人没有自由的社会，历代都有人想打破它。比如说农民起义，比如说宗教领袖或者贵族官僚在内部搞改良，建立一个更理想的社会。但是，农业社会的结构，是经济基础决定的。只要普通人只能生产出略多于基本生存需求的财富，等级制和一定程度的人身依附制度就不会变。暂时打破也肯定很快回到原来的状态。只有通过工业革命改变生产效率，然后通过社会革命改变社会制度，社会才能现代化，所以我强调“双元革命”的重要性。</p>
</li>
</ul>
<h2 id="无产阶级"><a href="#无产阶级" class="headerlink" title="无产阶级"></a>无产阶级</h2><h3 id="无产者和资产者"><a href="#无产者和资产者" class="headerlink" title="无产者和资产者"></a>无产者和资产者</h3><ul>
<li><p>双元革命一旦爆发，就开始影响全世界，也让最先掌握这两场革命力量的国家逐渐征服全世界。在吸收了一部分革命成果的国家，出现了一个明显的资产阶级集团。这些资产阶级有的来自传统的贵族和知识分子，有的是从底层农民工匠爬上来的，但不论出身，他们有一个共同点，就是重视经济增量，愿意把手上的财富不断投入扩大再生产，开发新科技。</p>
</li>
<li><p>这个特征在今天看起来天经地义，在农业社会末期看来，是不可思议的行为，因为农业社会的经济基础是肌肉劳动，不存在持续扩大生产这回事，持续投资早晚会赔钱。好不容易攒点钱，过去的土财主或者买耕地，或者买官，哪怕是买武器训练家丁，也算正确的思路，肯定不会像资本家那样搞扩大生产。</p>
</li>
</ul>
<h3 id="谁来取代资产阶级"><a href="#谁来取代资产阶级" class="headerlink" title="谁来取代资产阶级"></a>谁来取代资产阶级</h3><ul>
<li><p>这个时候，马克思和恩格斯出场了，合作写了一篇非常有战斗力的宣传稿，《共产党宣言》。马克思首先承认了资本主义社会过去几十年的进步，认为这体现了资产者的先进性。然后他说，以往的革命和造反，都是因为财富太少，现在资本主义社会因为生产东西太多而爆发经济危机，影响无产者的就业，最终引发了革命，这是非常荒谬的事情，说明资产阶级已经反过来要限制生产力发展了，所以人类应该超越资产阶级社会，建设一个能更能充分发挥工业力量的美好社会。</p>
</li>
<li><p>至于谁来取代资产阶级，马克思认为是无产者。尤其是当时的欧洲资产阶级喜欢仿效封建统治者的生活，摆贵族范，不允许那些来自底层，掌握技术的工人技师加入资产阶级圈子，强行要把这个技术阶层留在无产阶级。所以当时的无产阶级既对资本主义社会不满，又掌握最先进的生产技术，看起来的确适合取代资产阶级，控制工业社会。</p>
</li>
</ul>
<h2 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h2><ul>
<li>方向不是结果，但也很重要，因为它打破了社会制度本身的神秘性，让我们敢于进步。</li>
<li>在看清楚生产方式可以塑造社会制度之后，人类就不会认为社会制度是一个很神秘的东西。就会主动去改变它，设计它。工业革命给我们提供了近乎无限的物质发展前景，我们要做的就是用制度进步消除工业发展的障碍，同时也用进步的制度释放享受幸福的机会。</li>
<li>但是保尔这次革命不一样，这些年轻人学到了马克思的唯物主义历史观。在他们眼里，所有制度都是一种工具，是工具就可以随便换。追求新社会，不是因为新制度更神圣，而是因为所有制度都没有神圣光环。</li>
<li>所以，保尔的革命精神不是来自于狂热，恰恰是源于理性。他打败那些阻碍进步的旧制度，打败那些把旧制度神圣化的人，为了发展生产力，增加享受生产力的机会，同时给自己的人生提供自由，提供成就感。旧世界的苦难和新世界的希望从两面给保尔压力，把他变成了钢铁。所以书名是《钢铁是怎样炼成的》。</li>
</ul>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><ul>
<li><p>他们的共同问题是距离革命太远，享受革命成果太多，所以反而忽视了刚刚发生那次革命的重要性，忽视了解放的历史特殊性。</p>
</li>
<li><p>我理解他们立场的来源，但也必须认真批判。因为广义的解放和革命还没有结束，主动的社会变革还必须继续推进。中国年轻人必须主动拿起唯物主义武器，破除对一切社会制度的神秘主义敬畏，才能在生产力动起来的时候跟上社会进步。</p>
</li>
</ul>
<h1 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h1><ol>
<li>改造前社会是怎么样的</li>
<li>为什么要改造</li>
<li>改造是怎么进行的</li>
<li>改造的结果如何</li>
<li>改造的意义如何</li>
<li>反思</li>
</ol>
<h1 id="改造前的社会，为什么要改造"><a href="#改造前的社会，为什么要改造" class="headerlink" title="改造前的社会，为什么要改造"></a>改造前的社会，为什么要改造</h1><ul>
<li>在工业革命之前，世界经济基础是农牧业和手工业，由于没有工业，效率都非常低，这就导致旧社会的基本特征就是穷。</li>
<li>这个穷不仅意味着缺食物、缺衣服，还意味着精神和战斗力的贫乏。大多数人没有时间、也缺乏金钱。对于普通农民、工匠来说吃饱穿暖就是最高目标，所以他们往往容易被贵族及知识分子统治，所以稳定结构一定是严格的等级制度。而统治者虽然富裕，但是生活自由度低，他们需要履行自己的职责、认真维护自己的地位，否则会被清洗。</li>
<li>综上所述，等级制度是由经济基础决定的，因此想要改变旧社会，只有通过工业革命改变生产效率，然后通过社会革命改变社会制度，社会才能现代化。</li>
</ul>
<h1 id="改造如何进行"><a href="#改造如何进行" class="headerlink" title="改造如何进行"></a>改造如何进行</h1><ul>
<li><p>农业的社会主义改造又叫<a href="https://baike.baidu.com/item/农业合作化运动">农业合作化运动</a></p>
<p>从1951年12月开始，党中央颁发了一系列的决议，规定了我国的<a href="https://baike.baidu.com/item/农业社会主义改造">农业社会主义改造</a>的路线、方针和政策，按照<strong>互助小组→初级社→高级社</strong>的顺序完成了农业改造。</p>
</li>
<li><p>个体手工业是以<a href="https://baike.baidu.com/item/私有制">私有制</a>和个体劳动为基础、从事商品生产的一种<a href="https://baike.baidu.com/item/个体经济">个体经济</a>，在中国国民经济中占有一定的地位。1952年手工业产值占全国工业总产值的21%，农村需要的<a href="https://baike.baidu.com/item/生产资料/2522580">生产资料</a>和<a href="https://baike.baidu.com/item/生活资料/425772">生活资料</a>很大部分来自手工业。</p>
<p>从1953年起，采取合作化的形式和逐步过渡的步骤，从手工业生产合作小组、手工业供销合作社，再发展为手工业<a href="https://baike.baidu.com/item/生产合作社">生产合作社</a>。</p>
</li>
<li><p>资本主义工商业社会主义改造</p>
<p>消灭<a href="https://baike.baidu.com/item/资本主义私有制">资本主义私有制</a>是过渡时期的一项基本任务。资本主义工商业的社会主义改造，从1954年至1956年底全面进行。党对之采取了“<a href="https://baike.baidu.com/item/和平赎买">和平赎买</a>”的政策，通过国家资本主义形式，逐步将其改造成<a href="https://baike.baidu.com/item/社会主义公有制">社会主义公有制</a>企业，而且将所有制改造与人的改造相结合，努力使剥削者成为自食其力的劳动者。</p>
<p>中国共产党对资本主义工商业采取利用、限制、改造的政策，对资产阶级采取<a href="https://baike.baidu.com/item/赎买政策">赎买政策</a>。在经过委托加工、计划订货、统购包销、委托经销代销等一系列从初级到高级的国家资本主义过渡形式后，资产阶级作为一个阶级被基本消灭。</p>
</li>
</ul>
<h1 id="改造的结果"><a href="#改造的结果" class="headerlink" title="改造的结果"></a>改造的结果</h1><p>到1956年底，我国基本上完成了对农业、手工业和资本主义工商业的社会主义改造。</p>
<ul>
<li>农业改造成果<br>到1956年底，全国加入合作社的农户达96.3%。</li>
<li>手工业改造成果<br>至1956年底结束，全国90%以上的手工业者加入了合作社。</li>
<li>资本主义工商业改造成果<br>至1956年底，实行公私合营的工业企业已占原有资本主义工业总户数和职工人数的99%，占生产总值的99.6%。</li>
<li>至此我国建立起社会主义的基本制度，并进入<a href="https://baike.baidu.com/item/社会主义初级阶段">社会主义初级阶段</a>。</li>
</ul>
<h1 id="改造的意义"><a href="#改造的意义" class="headerlink" title="改造的意义"></a>改造的意义</h1><ul>
<li>我国对农业、手工业和资本主义工商业生产资料私有制的社会主义改造，在理论上和实践上丰富和发展了中国特色马列主义，极大地促进了工、农、商业的社会变革和整个国民经济的发展。</li>
<li>更具体来说，认识到生产方式和社会制度的相互塑造之后，中国人民就不会认为社会制度是一个很神秘的东西。就会主动去改变它，甚至设计它。工业发展给新中国提供了近乎无限的物质发展前景，我们要做的就是用制度进步消除工业发展的障碍，同时释放社会进步带来的享受幸福的机会。</li>
<li>因此，三大改造为新中国的社会主义改革确定了方向。</li>
<li>方向不是结果，但也很重要，因为它打破了社会制度本身的神秘性，让我们敢于进步。</li>
<li>三大改造打败了那些阻碍进步的旧制度，更打败那些把旧制度神圣化的人，它让中国社会意识到了所有制度不过是一种工具，是工具就可以根据社会发展的需要直接更换。追求新制度，不是因为新制度更神圣，而是恰恰是因为所有制度都不神圣。</li>
</ul>
<h1 id="对于当代的反思"><a href="#对于当代的反思" class="headerlink" title="对于当代的反思"></a>对于当代的反思</h1><ul>
<li>当代的中国青年的共同问题有一共同问题——我们距离革命太远，但享受到的革命成果太多，所以反而忽视了刚刚革命的重要性和历史特殊性。</li>
<li>另一方面，广义的革命还没有结束，我们仍将长期处于社会主义初级阶段，主动的社会变革还必须继续推进。中国年轻人必须主动拿起历史唯物主义的武器，破除对一切社会制度的神秘主义敬畏，才能在生产力动起来的时候跟上社会进步。</li>
</ul>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Tutorial Reading Note</title>
    <url>/2022/03/01/CS/%E5%85%B6%E4%BB%96/Python_oop/</url>
    <content><![CDATA[<h1 id="Python-OOP"><a href="#Python-OOP" class="headerlink" title="Python OOP"></a>Python OOP</h1><h2 id="导入全部模块"><a href="#导入全部模块" class="headerlink" title="导入全部模块"></a>导入全部模块</h2><h3 id="导入整个模块"><a href="#导入整个模块" class="headerlink" title="导入整个模块"></a>导入整个模块</h3><p>例如我要在 my_car.py 中导入 car.py 模块，可以直接导入整个模块，之后通过句点 <code>.</code> 来访问具体的某个类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> car</span><br><span class="line">my_beetle = car.Car(<span class="string">&quot;volkswangen&quot;</span>, <span class="string">&quot;bettle&quot;</span>, <span class="number">2019</span>)</span><br></pre></td></tr></table></figure>
<h3 id="导入所有的类"><a href="#导入所有的类" class="headerlink" title="导入所有的类"></a>导入所有的类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">form car <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>
<p>这个方法当然和上方有区别，直观上，你不需要再利用句点 <code>.</code>，看上去方便了，但是你必然为方便付出代价。</p>
<p>如果你只看开头的 import 语句，你并不清楚这种导入语句将使用模块中的哪些类，按照最小权限原则，这当然是很危险的。</p>
<p>其次，这个方式还会硬气名称方面的迷惑。倘若你导入的块有一个方法与当前文件同名，将引发难以诊断的错误。</p>
<p>故而第二种方法实际上是不推荐的，但是很多人会用，你还是得懂。</p>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a><code>super</code> 关键字</h2><p><code>super()</code> 是一个特殊的函数，用于调用父类方法。因为父类称为超类（superclass），故而用此关键词。</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span>(<span class="params">Car</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;电动车的独到之处&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, make, model, year</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make, model, year)</span><br></pre></td></tr></table></figure>
<p>顺带提一嘴，这里的注释使用了文档字符串方法，比起 # 插入的注释更常见，看着也更加优雅</p>
<h2 id="编写规范"><a href="#编写规范" class="headerlink" title="编写规范"></a>编写规范</h2><ul>
<li>类名必须使用<strong>驼峰命名法</strong>，每个单词的大写都要大写，而且不使用下划线。而实例名与模块名都应使用小写格式，并且在单词之间加入下划线。</li>
<li>对于每个类，都应该在类定义之后紧跟着一个文档字符串。这种文档字符串简要地描述类的功能，并遵循编写函数的文档字符串时采用的格式约定。每个模块也都应包含一个文档字符串，对其中的类可用于做什么进行描述。</li>
<li>可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中，可使用两个空行来分隔类。需要同时导入标准库中的模块和你编写的模块时，先编写导入标准库模块的 import 语句，再添加一个空行，然后编写导入你自己编写的模块的 import 语句。在包含多条 import 语句的程序中，这种做法让人更容易明白程序使用的各个模块都来自何处。</li>
</ul>
<h1 id="文件与异常"><a href="#文件与异常" class="headerlink" title="文件与异常"></a>文件与异常</h1><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a><code>with open</code></h2><p>关键字 with 在不再需要访问文件后将其关闭。在这个程序中，注意到我们调用了 <code>open()</code>， 但没有调用 <code>close()</code>。也可以调用 <code>open()</code> 和 <code>close()</code> 来打开和关闭文件，但这样做时，如果程序存在 bug 导致方法 <code>close()</code> 未执行，文件将不会关闭。这看似微不足道，但未妥善关闭文件可能导致数据丢失或受损。如果在程序中过早调用 <code>close()</code>，你会发现需要使用文件时它已关闭（无法访问）,这会导致更多的错误。</p>
<p>并非在任何情况下都能轻松确定关闭文件的恰当时机，但通过使用前面所示的结构，可让 Python 去确定：你只管打开文件，并在需要时使用它，Python 自会在合适的时候自动将其关闭。</p>
<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><ul>
<li><p>显示文件路径时，Windows 系统使用反斜杠 <code>\</code> 而不是斜杠 <code>/</code> 但在代码中依然可以使用斜杠 <code>/</code></p>
</li>
<li><p>顺带，为了解决文件路径问题， mac 不要用 <code>./</code> 表示当前路径</p>
</li>
<li>如果文件路径中存在直接用反斜杠，会导致错误，因为 <code>\</code> 会被解释为转义符，例如 <code>C:\path\to\file.txt</code> 里的 <code>\t</code> 的会被解释为制表符。如果一定要使用反斜杠，应该对路径里的每个反斜杠进行转义  <code>C:\\path\\to\\file.txt</code></li>
<li>等我学了 pathlib 来填坑</li>
</ul>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><ul>
<li>最标准的异常处理流实际上是 <code>try except else</code> 运算流，比起纯粹的 <code>try except</code>  运算流更为直白</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    answer = <span class="built_in">int</span>(first_bynber) / <span class="built_in">int</span>(second_number)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Divided failed&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure>
<h2 id="决定报告哪些信息"><a href="#决定报告哪些信息" class="headerlink" title="决定报告哪些信息"></a>决定报告哪些信息</h2><ul>
<li>在实际的工程中，将 traceback 数据暴露给用户是件非常危险的事情，可能会被恶意攻击，故而每个代码块都应该及时处理异常</li>
</ul>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><ul>
<li><p>json，即 JavaScript Object Notation，能在多个语言间传输数据</p>
</li>
<li><p>json 并不要求必须为 dict，实际上存入 list 也可以，load 出来的所思及所得</p>
</li>
</ul>
<h1 id="pathlib"><a href="#pathlib" class="headerlink" title="pathlib"></a><code>pathlib</code></h1><p>东西太多了，懒得写，就<a href="https://geek-docs.com/python/python-tutorial/python-pathlib.html">放在这儿</a>吧</p>
<h1 id="给个示例"><a href="#给个示例" class="headerlink" title="给个示例"></a>给个示例</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> typing</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter, OrderedDict</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> embed</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">order_json = <span class="string">&quot;order_.json&quot;</span></span><br><span class="line">department_list_json = <span class="string">&quot;department_list.json&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metric</span>(<span class="params">fn</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;装饰器显示函数运行的情况和运行时长&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;start executing %s&#x27;</span> % (fn.__name__))</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        t = <span class="number">1000</span> * (end_time - start_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s executed in %s ms&#x27;</span> % (fn.__name__, t))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_department_list</span>():</span></span><br><span class="line">    json_order_list = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(order_json, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            dic = json.loads(line)</span><br><span class="line">            json_order_list.append(dic)</span><br><span class="line">    department_list = []</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(json_order_list):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            department = each[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;pAuthenData&quot;</span>][<span class="string">&quot;department&quot;</span>]</span><br><span class="line">            <span class="keyword">if</span> department <span class="keyword">not</span> <span class="keyword">in</span> department_list:</span><br><span class="line">                department_list.append(department)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> department_list</span><br><span class="line"></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_list</span>(<span class="params">target</span>):</span></span><br><span class="line">    dirs = os.listdir(target)</span><br><span class="line">    file_list = []</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> dirs:</span><br><span class="line">         file_list.append(<span class="string">f&quot;./<span class="subst">&#123;target&#125;</span>/<span class="subst">&#123;file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;每个订单建立一个对象，设计如下接口&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;课程名字， 学科划分，发出时间，puid，擦亮次数，是否推送到知识库，回答时间，结束时间，auid，反馈，用户，志愿者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, order_dic</span>):</span></span><br><span class="line">        self.course = order_dic[<span class="string">&quot;courseID&quot;</span>]</span><br><span class="line">        self.subject = order_dic[<span class="string">&quot;subjectID&quot;</span>]</span><br><span class="line">        self.post_time = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;ptime&quot;</span>]</span><br><span class="line">        self.puid = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;puid&quot;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.hasPush = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;hasPush&quot;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.hasPush = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.polishCount = <span class="built_in">int</span>(order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;polishCount&quot;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.polishCount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="string">&quot;&quot;&quot;因为可能未接单，故而这一部分可能不存在&quot;&quot;&quot;</span></span><br><span class="line">            self.atime = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;atime&quot;</span>]</span><br><span class="line">            self.ftime = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;ftime&quot;</span>]</span><br><span class="line">            self.auid = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;auid&quot;</span>]</span><br><span class="line">            self.feedback_dic = order_dic[<span class="string">&quot;feedback&quot;</span>]</span><br><span class="line">            <span class="string">&quot;&quot;&quot;feedback 为一个 dict，表项如下：abilility, attitude, inspiration, period, satisfication, suggestion&quot;&quot;&quot;</span></span><br><span class="line">            self.volunteer_dic = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;aAuthenData&quot;</span>]</span><br><span class="line">            <span class="string">&quot;&quot;&quot;authentication, certificateState, department, realName, school, studentID, volunteerLevel&quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">assert</span> self.volunteer_dic[<span class="string">&quot;certificateState&quot;</span>] != <span class="string">&quot;未认证&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.atime = <span class="number">0</span></span><br><span class="line">            self.ftime = <span class="number">0</span></span><br><span class="line">            self.auid = <span class="number">0</span></span><br><span class="line">            self.feedback_dic = &#123;&#125;</span><br><span class="line">            <span class="string">&quot;&quot;&quot;feedback 为一个 dict，表项如下：abilility, attitude, inspiration, period, satisfication, suggestion&quot;&quot;&quot;</span></span><br><span class="line">            self.volunteer_dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        self.client_dic = order_dic[<span class="string">&quot;actionRec&quot;</span>][<span class="string">&quot;pAuthenData&quot;</span>]</span><br><span class="line">        <span class="string">&quot;&quot;&quot;authentication, certificateState, department, realName, school, studentID&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;每个学生建立一个对象，且存下每个学生问过的问题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;名字，院系，所有的订单，所有订单数目，提问总时长，question_list:学生所问过问题所述科目的次数排序&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, department</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.department = department</span><br><span class="line">        self.order_list = []</span><br><span class="line">        self.total_order_count = <span class="number">0</span></span><br><span class="line">        self.duration = <span class="number">0</span></span><br><span class="line">        self.question_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_order</span>(<span class="params">self, order</span>):</span></span><br><span class="line">        self.order_list.append(order)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_order_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.total_order_count = <span class="built_in">len</span>(self.order_list)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_question_list</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            question_dic = Counter()</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                question_dic[<span class="string">f&quot;<span class="subst">&#123;each.course&#125;</span>&quot;</span>] += <span class="number">1</span></span><br><span class="line">            self.question_list = question_dic.most_common()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_duration</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            total_time = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    total_time += each.feedback_dic[<span class="string">&quot;period&quot;</span>]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            self.duration = total_time</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;&quot;统计每个学生提出的问题所属的学科，提问的总时间与总次数&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.set_question_list()</span><br><span class="line">            self.set_duration()</span><br><span class="line">            self.set_total_order_count()</span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;result_student&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line"></span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line">            store_dict[<span class="string">&quot;name&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.department</span><br><span class="line">            store_dict[<span class="string">&quot;duration&quot;</span>] = self.duration</span><br><span class="line">            store_dict[<span class="string">&quot;course&quot;</span>] = self.question_list</span><br><span class="line">            store_dict[<span class="string">&quot;total_order_count&quot;</span>] = self.total_order_count</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_student</span>(<span class="params">student</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;为 department 里比较每个系最积极的学生做的比较器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    student.set_total_order_count()</span><br><span class="line">    <span class="keyword">return</span> student.total_order_count</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Volunteer</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;志愿者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, department</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.department = department</span><br><span class="line">        self.order_list = []</span><br><span class="line">        self.duration = <span class="number">0</span></span><br><span class="line">        self.total_order_count = <span class="number">0</span></span><br><span class="line">        self.average_satisfaction = <span class="number">0</span></span><br><span class="line">        self.order_count_list = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_order</span>(<span class="params">self, order</span>):</span></span><br><span class="line">        self.order_list.append(order)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate_average_satisfaction</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_satisfaction = <span class="number">0</span></span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    total_satisfaction += each.feedback_dic[<span class="string">&quot;ability&quot;</span>] + each[<span class="string">&quot;feedback&quot;</span>][<span class="string">&quot;attitude&quot;</span>] + each[<span class="string">&quot;feedback&quot;</span>][<span class="string">&quot;inspiration&quot;</span>] + each[<span class="string">&quot;feedback&quot;</span>][<span class="string">&quot;satisfaction&quot;</span>]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.average_satisfaction = total_satisfaction / <span class="built_in">len</span>(self.order_list)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_duration</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            total_duration = <span class="number">0</span></span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                total_duration += each.feedback_dic[<span class="string">&quot;period&quot;</span>]</span><br><span class="line">            self.duration = total_duration</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_order_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            order_dict = Counter()</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.total_order_count = <span class="built_in">len</span>(self.order_list)</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                order_dict[<span class="string">f&quot;<span class="subst">&#123;each.course&#125;</span>&quot;</span>] += <span class="number">1</span></span><br><span class="line">            self.order_count_list = order_dict.most_common()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.evaluate_average_satisfaction()</span><br><span class="line">            self.set_total_duration()</span><br><span class="line">            self.set_order_count()</span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;volunteer&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line"></span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line">            store_dict[<span class="string">&quot;name&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.department</span><br><span class="line">            store_dict[<span class="string">&quot;duration&quot;</span>] = self.duration</span><br><span class="line">            store_dict[<span class="string">&quot;total_order_count&quot;</span>] = self.total_order_count</span><br><span class="line">            store_dict[<span class="string">&quot;average_satisfaction&quot;</span>] = self.average_satisfaction</span><br><span class="line">            store_dict[<span class="string">&quot;order_count_list&quot;</span>] = self.order_count_list</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_volunteer</span>(<span class="params">volunteer</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;为 department 里比较每个系最积极的志愿者做的比较器&quot;&quot;&quot;</span></span><br><span class="line">    volunteer.set_total_order_count()</span><br><span class="line">    <span class="keyword">return</span> volunteer.total_order_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Department</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;每个院系，存下这个院系的所有学生&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;volunteer 为这个系的志愿者，而 helper 为帮助过这个系的学生的志愿者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, department_name, student_list, volunteer_list, helper_list, order_list</span>):</span></span><br><span class="line">        self.name = department_name</span><br><span class="line">        self.total_order_count = <span class="number">0</span></span><br><span class="line">        self.total_student_count = <span class="number">0</span></span><br><span class="line">        self.total_helper_count = <span class="number">0</span></span><br><span class="line">        self.total_volunteer_count = <span class="number">0</span></span><br><span class="line">        self.student_list = student_list</span><br><span class="line">        self.volunteer_list = volunteer_list</span><br><span class="line">        self.helper_list = helper_list</span><br><span class="line">        self.order_list = order_list</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_student</span>(<span class="params">self, student</span>):</span></span><br><span class="line">        self.student_list.append(student)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_order</span>(<span class="params">self, order</span>):</span></span><br><span class="line">        self.order_list.append(order)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_volunteer</span>(<span class="params">self, volunteer</span>):</span></span><br><span class="line">        self.volunteer_list.append(volunteer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append_helper</span>(<span class="params">self, helper</span>):</span></span><br><span class="line">        self.helper_list.append(helper)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_student_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.student_list</span><br><span class="line">            self.total_student_count = <span class="built_in">len</span>(self.student_list)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_volunteer_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.volunteer_list</span><br><span class="line">            self.total_volunteer_count = <span class="built_in">len</span>(self.volunteer_list)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot; 没有志愿者&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_order_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.total_order_count = <span class="built_in">len</span>(self.order_list)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_total_helper_count</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.helper_list</span><br><span class="line">            self.total_helper_count = <span class="built_in">len</span>(self.helper_list)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analysis_specific_department_course</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;学生问过的问题次数，集中的学科&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            course_dict = Counter()</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(self.order_list):</span><br><span class="line">                course_dict[<span class="string">f&quot;<span class="subst">&#123;each.course&#125;</span>&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            course_list = course_dict.most_common()</span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;total_student_count&quot;</span>] = self.total_student_count</span><br><span class="line">            store_dict[<span class="string">&quot;total_order_count&quot;</span>] = self.total_order_count</span><br><span class="line">            store_dict[<span class="string">&quot;all_course&quot;</span>] = course_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;result_department_course&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analysis_specific_department_student</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;学生问过的问题次数，集中的学科&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(self.student_list) != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            self.student_list.sort(key=compare_student)</span><br><span class="line">            self.student_list.reverse()</span><br><span class="line">            neo_student_list = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> self.student_list:</span><br><span class="line">                pair = (each.name, each.total_order_count)</span><br><span class="line">                neo_student_list.append(pair)</span><br><span class="line"></span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;student_list&quot;</span>] = neo_student_list</span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;result_department_student&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">            embed()</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analysis_specific_department_helper</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;帮助该系的志愿者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.helper_list</span><br><span class="line">            self.helper_list.sort(key=compare_volunteer)</span><br><span class="line">            self.helper_list.reverse()</span><br><span class="line"></span><br><span class="line">            neo_helper_list = []</span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> self.helper_list:</span><br><span class="line">                pair = (each.name, each.total_order_count)</span><br><span class="line">                neo_helper_list.append(pair)</span><br><span class="line"></span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;helper&quot;</span>] = neo_helper_list</span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;result_department_helper&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analysis_specific_department_volunteer</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;该系的志愿者&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.volunteer_list</span><br><span class="line">            self.volunteer_list.sort(key=compare_volunteer)</span><br><span class="line">            self.volunteer_list.reverse()</span><br><span class="line"></span><br><span class="line">            neo_volunteer_list = []</span><br><span class="line">            store_dict = OrderedDict()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> self.volunteer_list:</span><br><span class="line">                pair = (each.name, each.total_order_count)</span><br><span class="line">                neo_volunteer_list.append(pair)</span><br><span class="line"></span><br><span class="line">            store_dict[<span class="string">&quot;department&quot;</span>] = self.name</span><br><span class="line">            store_dict[<span class="string">&quot;volunteer&quot;</span>] = neo_volunteer_list</span><br><span class="line"></span><br><span class="line">            path = Path.cwd() / <span class="string">&#x27;result_department_volunteer&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> path.is_dir():</span><br><span class="line">                os.makedirs(path)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;self.name&#125;</span>.json&quot;</span>, <span class="string">&quot;w+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(store_dict, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @metric</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">report</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">assert</span> self.order_list</span><br><span class="line">            self.set_total_order_count()</span><br><span class="line">            <span class="keyword">assert</span> self.student_list</span><br><span class="line">            self.set_total_student_count()</span><br><span class="line">            <span class="keyword">assert</span> self.helper_list</span><br><span class="line">            self.set_total_helper_count()</span><br><span class="line">            <span class="keyword">assert</span> self.volunteer_list</span><br><span class="line">            self.set_total_volunteer_count()</span><br><span class="line"></span><br><span class="line">            self.analysis_specific_department_student()</span><br><span class="line">            self.analysis_specific_department_course()</span><br><span class="line">            self.analysis_specific_department_helper()</span><br><span class="line">            self.analysis_specific_department_volunteer()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">f&quot;<span class="subst">&#123;__name__&#125;</span> error&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;返回 student list，volunteer list， department list&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这几个 department dict 都是二级词典，一级的 key 为院系，二级的 key 为相应列表项&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    json_order_list = []</span><br><span class="line">    order_list = []</span><br><span class="line">    department_list = []</span><br><span class="line">    student_list = []</span><br><span class="line">    volunteer_list = []</span><br><span class="line">    student_dic = &#123;&#125;</span><br><span class="line">    volunteer_dic = &#123;&#125;</span><br><span class="line">    department_order_dic = &#123;&#125;</span><br><span class="line">    department_student_dic = &#123;&#125;</span><br><span class="line">    department_volunteer_dic = &#123;&#125;</span><br><span class="line">    department_helper_dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    department_name_list = get_department_list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> department_name_list:</span><br><span class="line">        department_order_dic[<span class="string">f&quot;<span class="subst">&#123;each&#125;</span>&quot;</span>] = []</span><br><span class="line">        department_helper_dic[<span class="string">f&quot;<span class="subst">&#123;each&#125;</span>&quot;</span>] = &#123;&#125;</span><br><span class="line">        department_volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;each&#125;</span>&quot;</span>] = &#123;&#125;</span><br><span class="line">        department_student_dic[<span class="string">f&quot;<span class="subst">&#123;each&#125;</span>&quot;</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(order_json, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                dic = json.loads(line)</span><br><span class="line">                json_order_list.append(dic)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(json_order_list):</span><br><span class="line">                order = Order(each)</span><br><span class="line">                order_list.append(order)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    client_name = order.client_dic[<span class="string">&quot;realName&quot;</span>]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                client_department = order.client_dic[<span class="string">&quot;department&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span> <span class="keyword">in</span> student_dic:</span><br><span class="line">                    student_dic[<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    student_dic[<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>] = Student(client_name, client_department)</span><br><span class="line">                    student_dic[<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                department_order_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>].append(order)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span> <span class="keyword">in</span> department_student_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>]:</span><br><span class="line">                    department_student_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    department_student_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>] = Student(client_name, client_department)</span><br><span class="line">                    department_student_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;client_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    volunteer_name = order.volunteer_dic[<span class="string">&quot;realName&quot;</span>]</span><br><span class="line">                    volunteer_department = order.volunteer_dic[<span class="string">&quot;department&quot;</span>]</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span> <span class="keyword">in</span> department_volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_department&#125;</span>&quot;</span>]:</span><br><span class="line">                        department_volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        department_volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>] = Volunteer(volunteer_name,</span><br><span class="line">                                                                                                             volunteer_department)</span><br><span class="line">                        department_volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span> <span class="keyword">in</span> department_helper_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>]:</span><br><span class="line">                        department_helper_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        department_helper_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>] = Volunteer(volunteer_name,</span><br><span class="line">                                                                                                       volunteer_department)</span><br><span class="line">                        department_helper_dic[<span class="string">f&quot;<span class="subst">&#123;client_department&#125;</span>&quot;</span>][<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span> <span class="keyword">in</span> volunteer_dic:</span><br><span class="line">                        volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>] = Volunteer(volunteer_name, volunteer_department)</span><br><span class="line">                        volunteer_dic[<span class="string">f&quot;<span class="subst">&#123;volunteer_name&#125;</span>&quot;</span>].append_order(order)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">            embed()</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> student_dic:</span><br><span class="line">            student_list.append(student_dic[key])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> volunteer_dic:</span><br><span class="line">            volunteer_list.append(volunteer_dic[key])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> tqdm(department_name_list):</span><br><span class="line">            neo_student_list = []</span><br><span class="line">            neo_volunteer_list = []</span><br><span class="line">            neo_helper_list = []</span><br><span class="line">            neo_order_list = department_order_dic[<span class="string">f&quot;<span class="subst">&#123;each&#125;</span>&quot;</span>]</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> department_student_dic[each]:</span><br><span class="line">                neo_student_list.append(department_student_dic[each][key])</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> department_volunteer_dic[each]:</span><br><span class="line">                neo_volunteer_list.append(department_volunteer_dic[each][key])</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> department_helper_dic[each]:</span><br><span class="line">                neo_helper_list.append(department_helper_dic[each][key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            department_list.append(Department(each, neo_student_list, neo_volunteer_list, neo_helper_list, neo_order_list))</span><br><span class="line">        <span class="keyword">return</span> student_list, volunteer_list, department_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;先读取所有的order，加入到 student 和 volunteer 的 order list 里面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;遍历所有的 student helper 和 volunteer，加入到 department 里面&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    student_list, volunteer_list, department_list = initialize()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> student_list:</span><br><span class="line">        each.report()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> volunteer_list:</span><br><span class="line">        each.report()</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> department_list:</span><br><span class="line">        each.report()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>Python</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>人生苦短，我用 Python Part 1</title>
    <url>/2022/02/25/CS/%E5%85%B6%E4%BB%96/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python/</url>
    <content><![CDATA[<p>这是 zhaochen20 的 Python 学习笔记，不定期更新，<a href="https://lead-alley-0ca.notion.site/python-e75f12727a6c478ca793034703ab519b">原链接在 notion 上</a></p>
<p>因为本文已经太长了， Notion 打开极其不方便，因此新开了一篇，<a href="https://lead-alley-0ca.notion.site/Python-Part-2-dc4ac581989c4533894bc68a83b0a8d9">链接在此</a></p>
<h1 id="人生苦短，我用python"><a href="#人生苦短，我用python" class="headerlink" title="人生苦短，我用python"></a>人生苦短，我用python</h1><h1 id="数的运算"><a href="#数的运算" class="headerlink" title="数的运算"></a>数的运算</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="number">4</span>/<span class="number">2</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2.0</span></span><br><span class="line">任何两个数相除，得到的总是浮点数</span><br><span class="line">只要操作数中有浮点数，结果总是浮点数</span><br></pre></td></tr></table></figure>
<h1 id="数字下线"><a href="#数字下线" class="headerlink" title="数字下线"></a>数字下线</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">universe_age = <span class="number">14_000_000_000</span></span><br></pre></td></tr></table></figure>
<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>在实际的程序开发中，我们通常会将一个不可变的变量声明为一个常量。在很多高级语言中都会提供常量的关键字来定义常量，如 <code>C++</code> 中的 <code>const</code> ， <code>Java</code> 中的 <code>final</code> 等，但是 <code>Python</code> 语言因为变量无类型，所以也就不存在这样的修饰符，其本身并未提供任何机制来进行常量的定义。因此我们只能通过自己定义类的方法来定义一个符合常量规则的类，使得该类定义的成员属性满足常量的属性。常量一般符合以下两条规则：</p>
<ol>
<li>常量的各个字母使用大写字母表示，中间以下划线连接：如 MAX_VALUE;</li>
<li>常量的值一旦绑定则不可以再修改。</li>
</ol>
<p><a href="https://www.cnblogs.com/ydcode/p/10996791.html">Python 定义自己的常量类</a></p>
<h1 id="list"><a href="#list" class="headerlink" title="list"></a>list</h1><h2 id="sort-sorted-reverse"><a href="#sort-sorted-reverse" class="headerlink" title="sort, sorted, reverse"></a>sort, sorted, reverse</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sort和reverse是永久排序，<span class="built_in">sorted</span>则是临时排序</span><br><span class="line">sort和<span class="built_in">sorted</span>默认按照升序排序，如果想要倒序排序，需传入参数revers=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: cars = [<span class="string">&quot;bmw&quot;</span>, <span class="string">&quot;audi&quot;</span>, <span class="string">&quot;subaru&quot;</span>, <span class="string">&quot;toyota&quot;</span>]</span><br><span class="line">In [<span class="number">3</span>]: cars.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">In [<span class="number">4</span>]: cars</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>]</span><br><span class="line">In [<span class="number">5</span>]: cars.sort()</span><br><span class="line">In [<span class="number">6</span>]: cars</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line"></span><br><span class="line">however,<span class="built_in">sorted</span>的使用与sort不同</span><br><span class="line">In [<span class="number">7</span>]: cars = [<span class="string">&quot;bmw&quot;</span>, <span class="string">&quot;audi&quot;</span>, <span class="string">&quot;subaru&quot;</span>, <span class="string">&quot;toyota&quot;</span>]</span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">print</span>(cars)</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="list添加元素"><a href="#list添加元素" class="headerlink" title="list添加元素"></a>list添加元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>添加元素需要用append，如果用加号会直接扩大<span class="built_in">list</span></span><br><span class="line">In [<span class="number">5</span>]: <span class="built_in">list</span> = []</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="built_in">list</span> += (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">list</span></span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">list</span> += [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">list</span></span><br><span class="line">Out[<span class="number">9</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<h2 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h2><p>python写循环的建议</p>
<p><a href="https://zhuanlan.zhihu.com/p/68128557">Python编写循环的两个建议 | 鹅厂实战</a></p>
<h3 id="使用函数修饰被迭代对象来优化循环"><a href="#使用函数修饰被迭代对象来优化循环" class="headerlink" title="使用函数修饰被迭代对象来优化循环"></a>使用函数修饰被迭代对象来优化循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">    <span class="built_in">print</span>(i, name)</span><br></pre></td></tr></table></figure>
<h3 id="使用-product-扁平化多层嵌套循环"><a href="#使用-product-扁平化多层嵌套循环" class="headerlink" title="使用 product 扁平化多层嵌套循环"></a>使用 product 扁平化多层嵌套循环</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_twelve_v2</span>(<span class="params">num_list1, num_list2, num_list3</span>):</span></span><br><span class="line">    <span class="keyword">for</span> num1, num2, num3 <span class="keyword">in</span> product(num_list1, num_list2, num_list3):</span><br><span class="line">        <span class="keyword">if</span> num1 + num2 + num3 == <span class="number">12</span>:</span><br><span class="line">            <span class="keyword">return</span> num1, num2, num3</span><br></pre></td></tr></table></figure>
<h3 id="使用-islice-实现循环内隔行处理"><a href="#使用-islice-实现循环内隔行处理" class="headerlink" title="使用 islice 实现循环内隔行处理"></a><strong>使用 islice 实现循环内隔行处理</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_titles_v2</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="comment"># 设置 step=2，跳过无意义的 &#x27;---&#x27; 分隔符</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> islice(fp, <span class="number">0</span>, <span class="literal">None</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">yield</span> line.strip()</span><br></pre></td></tr></table></figure>
<h3 id="使用takewhile-代替break语句"><a href="#使用takewhile-代替break语句" class="headerlink" title="使用takewhile()代替break语句"></a>使用takewhile()代替break语句</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> takewhile</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> takewhile(is_qualified, users):</span><br><span class="line">    <span class="comment"># 进行处理 ... ...</span></span><br></pre></td></tr></table></figure>
<h3 id="使用生成器编写自己的修饰函数"><a href="#使用生成器编写自己的修饰函数" class="headerlink" title="使用生成器编写自己的修饰函数"></a><strong>使用生成器编写自己的修饰函数</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_even_only</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;对 numbers 里面所有的偶数求和&quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            result += num</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">为了少用<span class="keyword">if</span>，改写为：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">even_only</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_even_only_v2</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;对 numbers 里面所有的偶数求和&quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> even_only(numbers):</span><br><span class="line">        result += num</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">然而实际上：</span><br><span class="line"><span class="built_in">sum</span>(num <span class="keyword">for</span> num <span class="keyword">in</span> numbers <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="按职责拆解循环体内复杂代码块"><a href="#按职责拆解循环体内复杂代码块" class="headerlink" title="按职责拆解循环体内复杂代码块"></a><strong>按职责拆解循环体内复杂代码块</strong></h3><p>循环是一个比较神奇的东西，每当你写下一个新的循环代码块，就好像开辟了天坑，天坑内的所有内容都会开始无休止的重复执行。</p>
<p>不过天坑除了能带来好处，<strong>它还会引诱你不断往坑里面内塞入越来越多的代码，包括过滤掉无效元素、预处理数据、打印日志等等。甚至一些原本不属于同一抽象的内容，也会被塞入到同一片黑魔法阵内。归根到底，尽量使用生成器函数解耦循环体。</strong></p>
<h1 id="numpy-array"><a href="#numpy-array" class="headerlink" title="numpy.array"></a>numpy.array</h1><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.array.html">numpy.array - NumPy v1.21 Manual</a></p>
<p><a href="https://www.cnblogs.com/massquantity/p/8908859.html">numpy.where() 用法详解</a></p>
<p><a href="https://blog.csdn.net/qq_24193303/article/details/80961646">python 中 numpy 模块的 size,shape, len的用法_墨晓白的博客-CSDN博客_numpy size</a></p>
<p><a href="https://www.cnblogs.com/traditional/p/12625998.html">numpy中的数组之间进行集合运算</a></p>
<h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">直接写就好了</span><br><span class="line"><span class="keyword">for</span> each_label <span class="keyword">in</span> target_list:</span><br><span class="line">        result_list = np.where(arr[<span class="string">&quot;label&quot;</span>]==each_label)</span><br><span class="line">        dic[each_label] = result_list</span><br></pre></td></tr></table></figure>
<p>一个很有意思的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">30</span>]: new_dic=new_dic = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">4</span></span><br><span class="line">    ...: , <span class="number">10</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">31</span>]: <span class="keyword">for</span> key <span class="keyword">in</span> new_dic:</span><br><span class="line">    ...:     <span class="keyword">try</span>:</span><br><span class="line">    ...:         new_dic[key+<span class="number">1</span>] += new_dic[key]</span><br><span class="line">    ...:     <span class="keyword">except</span>:</span><br><span class="line">    ...:         <span class="keyword">pass</span></span><br><span class="line">    ...:</span><br></pre></td></tr></table></figure>
<p>这里看上去不加try except对于new_dic[11]应该不会报错。但实际上，由于我们用了new_dic[key+1] += new_dic[key]，这一步默认new_dic[key+1]得存在才能用+=，所有会报错。</p>
<h2 id="按照key值排序"><a href="#按照key值排序" class="headerlink" title="按照key值排序"></a>按照key值排序</h2><p>注意sorted(dic)的返回值是一个list，不再是dic了</p>
<p><a href="https://www.runoob.com/python3/python-sort-dictionaries-by-key-or-value.html">Python 按键(key)或值(value)对字典进行排序</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">17</span>]: dic = &#123;<span class="number">10</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: <span class="built_in">sorted</span>(dic)</span><br><span class="line">Out[<span class="number">18</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">print</span>(dic)</span><br><span class="line">&#123;<span class="number">10</span>: <span class="number">2</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: new_dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(dic):</span><br><span class="line">    ...:     new_dic[key]=dic[key]</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: <span class="built_in">print</span>(new_dic)</span><br><span class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">3</span>, <span class="number">3</span>: <span class="number">1</span>, <span class="number">4</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">1</span>, <span class="number">8</span>: <span class="number">1</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">10</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><p><a href="https://github.com/dranjan/python-plyfile">https://github.com/dranjan/python-plyfile</a></p>
<h1 id="Robust"><a href="#Robust" class="headerlink" title="Robust"></a>Robust</h1><p><a href="https://zh.wikipedia.org/zh-hans/%E9%B2%81%E6%A3%92%E6%80%A7">鲁棒性 - 维基百科，自由的百科全书</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">写python尽量鲁棒一些，多写函数，少写文件</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    DATA_PATH = <span class="string">&#x27;/home/aidrive/tb5zhh/SpecCluster/tbw/new_results_200/clustered&#x27;</span></span><br><span class="line">    dirs = os.listdir(DATA_PATH)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> tqdm(<span class="built_in">sorted</span>(dirs)):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;raw&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> file:</span><br><span class="line">            <span class="keyword">continue</span>    </span><br><span class="line">        <span class="comment"># print(f&quot;now working file is &#123;file&#125;&quot;)</span></span><br><span class="line">        clustered_file = <span class="string">&quot;/home/aidrive/tb5zhh/SpecCluster/tbw/new_results_200/clustered/&quot;</span>+file</span><br><span class="line">        name_head = file[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">        name = <span class="string">&quot;/home/aidrive/tb5zhh/data/full_mesh/train/&quot;</span>+name_head+<span class="string">&quot;.ply&quot;</span></span><br><span class="line">        calcualte_iou(name,clustered_file)</span><br></pre></td></tr></table></figure>
<h1 id="tqdm-yyds"><a href="#tqdm-yyds" class="headerlink" title="tqdm yyds!"></a>tqdm yyds!</h1><p>tqdm既是一个module，也是一个函数，所以写的时候需要用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> tqdm(<span class="built_in">sorted</span>(dirs)):</span><br><span class="line">        target = DATA_PATH + <span class="string">f&quot;/<span class="subst">&#123;file&#125;</span>&quot;</span></span><br><span class="line">        get_full_scene_iou(get_each_scene_iou(target),dic)</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> tqdm(dic):</span><br><span class="line">        dic[key].append(dic[key][<span class="number">0</span>]/dic[key][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p><a href="https://tqdm.github.io/">tqdm documentation</a></p>
<h1 id="try-except"><a href="#try-except" class="headerlink" title="try except:"></a>try except:</h1><p>防止该报错的地方没报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">except</span>要加冒号，<span class="keyword">if</span>也要加，<span class="keyword">for</span>也要加</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">20</span>,<span class="number">100</span>]</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;iou_<span class="subst">&#123;each&#125;</span>.json&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> data:</span><br><span class="line">                <span class="built_in">print</span>(key)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="built_in">print</span>(data[key][<span class="number">2</span>])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="built_in">print</span>(data[key])</span><br></pre></td></tr></table></figure>
<p>这段代码本来用来print一个json存的dic，这个dic我理想中应该是每个value都是一个三元list，但是我忘记了最后一个key的value是个string，而python很神奇的同样将他print了出来，这件事是非常危险的，理论上应该在data[key]的地方就检测是否是一个list。</p>
<h1 id="python-json"><a href="#python-json" class="headerlink" title="python json"></a>python json</h1><p><a href="https://www.runoob.com/python/python-json.html">Python JSON</a></p>
<p>json的优点是读起来方便，但是使用的内存比较大，如果数据量比较大，推荐使用torch.save()</p>
<p><a href="https://www.cnblogs.com/qinduanyinghua/p/9311410.html">pytorch保存模型等相关参数，利用torch.save()，以及读取保存之后的文件</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;./result/<span class="subst">&#123;file&#125;</span>&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = json.load(f, strict=<span class="literal">False</span>)</span><br><span class="line">        dic[index] = data</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">这串代码debug特别久，其实最大的问题在于，os.listdir并没有确保里面所有的文件都是json格式，实际上里面混入了.sql文件，导致很多麻烦</span><br></pre></td></tr></table></figure>
<h1 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a>os.listdir()</h1><p><a href="https://www.runoob.com/python/os-listdir.html">Python os.listdir() 方法</a></p>
<h1 id="embed"><a href="#embed" class="headerlink" title="embed()"></a>embed()</h1><p><a href="https://vimsky.com/zh-tw/examples/detail/python-method-IPython.embed.html">Python IPython.embed方法代碼示例</a></p>
<h1 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h1><p><a href="https://zhuanlan.zhihu.com/p/33033288">python字典遍历的几种方法</a></p>
<h1 id="global参数危险"><a href="#global参数危险" class="headerlink" title="global参数危险"></a>global参数危险</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">global</span>参数其实比较危险，比起把某个参数设置为<span class="keyword">global</span>，不如直接把某个参数传入函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_full_scene_iou</span>(<span class="params"><span class="built_in">list</span>,dic</span>):</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dic[each[<span class="number">0</span>]][<span class="number">0</span>] += each[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            dic[each[<span class="number">0</span>]] = []</span><br><span class="line">            dic[each[<span class="number">0</span>]].append(each[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            dic[each[<span class="number">0</span>]][<span class="number">1</span>] += each[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            dic[each[<span class="number">0</span>]].append(each[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>同样是上面一串代码，虽然python的dictionary很智能，但是dic的value你也不能直接认为是一个list，只能一个一个去try</p>
<h1 id="字符串非法修改"><a href="#字符串非法修改" class="headerlink" title="字符串非法修改"></a>字符串非法修改</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python的字符串是不能修改某一位的，所以下方代码没法直接令a[<span class="number">4</span>]=xxxxx</span><br><span class="line">a = <span class="built_in">str</span>(<span class="number">100</span>*dic[key][<span class="number">0</span>]/dic[key][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> a[<span class="number">5</span>]&gt;=<span class="string">&quot;5&quot;</span>:</span><br><span class="line">            appendix = <span class="string">f&#x27;<span class="subst">&#123;(<span class="built_in">int</span>(a[<span class="number">4</span>])+<span class="number">1</span>)&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            appendix = a[<span class="number">4</span>]</span><br><span class="line">        a = a[:<span class="number">3</span>] + appendix</span><br></pre></td></tr></table></figure>
<h1 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h1><p><a href="https://blog.csdn.net/winycg/article/details/78512300">python 一个.py文件如何调用另一个.py文件中的类和函数_winycg的博客-CSDN博客_python调用另一个py文件</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">貌似文章里第一句话不靠谱，还是要写成</span><br><span class="line"><span class="keyword">from</span> A <span class="keyword">import</span> add</span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] 整理这篇文章</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/432422130">Python大神用的贼溜，9个实用技巧分享给你</a></p>
<ul>
<li>[ ] pysnooper</li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/431830963">别再用 print 调试代码了！PySnooper：一款 GitHub 热门调试工具！</a></p>
<h1 id="列表广播"><a href="#列表广播" class="headerlink" title="列表广播"></a>列表广播</h1><p>直接的广播需要用numpy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array = numpy.array([<span class="number">49</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">56</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>array - <span class="number">13</span></span><br><span class="line">array([<span class="number">36</span>, <span class="number">38</span>, <span class="number">40</span>, <span class="number">43</span>])</span><br></pre></td></tr></table></figure>
<p>原生广播需要用列表推导式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [x - <span class="number">13</span> <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: c = [<span class="number">49.7</span>, <span class="number">25.0</span>, <span class="number">22.0</span>, <span class="number">48.8</span>, <span class="number">48.7</span>]</span><br><span class="line">In [<span class="number">11</span>]: c = [x - <span class="number">54.6</span> <span class="keyword">for</span> x <span class="keyword">in</span> c]</span><br><span class="line">In [<span class="number">12</span>]: c</span><br><span class="line">Out[<span class="number">12</span>]: [-<span class="number">4.899999999999999</span>, -<span class="number">29.6</span>, -<span class="number">32.6</span>, -<span class="number">5.800000000000004</span>, -<span class="number">5.899999999999999</span>]</span><br></pre></td></tr></table></figure>
<h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><p><a href="https://learn.markteaching.com/%E3%80%90python-%E6%95%99%E5%AD%B8%E3%80%91%E9%9A%A8%E6%A9%9F%E4%BA%82%E6%95%B8-random-%E5%87%BD%E6%95%B8%E7%9A%84%E7%94%A8%E6%B3%95%E8%88%87%E7%AF%84%E4%BE%8B/">【Python 教學】隨機亂數 random 函數的用法與範例 - Mark學習筆記</a></p>
<h1 id="Conda基本操作"><a href="#Conda基本操作" class="headerlink" title="Conda基本操作"></a>Conda基本操作</h1><p><a href="https://dulunar.github.io/2019/11/21/conda%E6%93%8D%E4%BD%9C/">Conda的基本操作 - 鲁娜的博客 | Luna’s Blog</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">///一个基本的conda流程</span><br><span class="line">conda create -n env_name python=3.8</span><br><span class="line"><span class="built_in">source</span> activate env_name</span><br><span class="line">conda install whaterever</span><br><span class="line">///如果conda装不了，那就用pip</span><br><span class="line">pip install whatever</span><br><span class="line"></span><br><span class="line">//conda activate 失败</span><br><span class="line">&gt; conda activate SRT_crawler</span><br><span class="line">CommandNotFoundError: Your shell has not been properly configured to use <span class="string">&#x27;conda activate&#x27;</span>.</span><br><span class="line">&gt; <span class="built_in">source</span> activate</span><br><span class="line">&gt; conda activate SRT_crawler</span><br></pre></td></tr></table></figure>
<h1 id="pip-install遇上timeout"><a href="#pip-install遇上timeout" class="headerlink" title="pip install遇上timeout"></a>pip install遇上timeout</h1><p>在某个具体的conda环境下，使用pip就是安装到这个特定的conda环境</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">///对于单个包的安装，不管换不换国内源，都可能遇上安装超时的问题</span><br><span class="line">pip install python-moudle</span><br><span class="line"><span class="keyword">raise</span> ReadTimeoutError(self._pool, <span class="literal">None</span>, <span class="string">&quot;Read timed out.&quot;</span>)</span><br><span class="line">pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=<span class="string">&#x27;files.pythonhosted.org&#x27;</span>, port=<span class="number">443</span>): Read timed out.</span><br><span class="line"></span><br><span class="line">///解决方案</span><br><span class="line">pip --timeout=<span class="number">100</span> install python-moudle</span><br><span class="line"></span><br><span class="line">///如果是依靠某个具体的requirement.txt，则：</span><br><span class="line">pip --default-timeout=<span class="number">100</span> install -r requirements_demo.txt</span><br><span class="line"></span><br><span class="line">///ok，太慢，不如直接换源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/woai8339/article/details/91351707">解决pip.<em>vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool</em>不负如来不负卿-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/chaipp0607/article/details/107454666">pip install时timeout设置_zhangxu-CSDN博客_pip timeout</a></p>
<p><a href="https://blog.csdn.net/qingfengxd1/article/details/109334674">pip和conda 换清华源_qingfengxd1的博客-CSDN博客_conda pip 清华源</a></p>
<h1 id="Wget"><a href="#Wget" class="headerlink" title="Wget"></a>Wget</h1><p><a href="https://zh.wikipedia.org/wiki/Wget">Wget - 维基百科，自由的百科全书</a></p>
<h1 id="最简便的进制转换"><a href="#最简便的进制转换" class="headerlink" title="最简便的进制转换"></a>最简便的进制转换</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="built_in">bin</span>(<span class="number">239</span>)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;0b11101111&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="Torch"><a href="#Torch" class="headerlink" title="Torch"></a>Torch</h1><h3 id="TORCH-OPTIM"><a href="#TORCH-OPTIM" class="headerlink" title="TORCH.OPTIM"></a>TORCH.OPTIM</h3><p><strong><code>[torch.optim](https://pytorch.org/docs/stable/optim.html#module-torch.optim)</code> is a package implementing various optimization algorithms. Most commonly used methods are already supported, and the interface is general enough, so that more sophisticated ones can be also easily integrated in the future.</strong></p>
<p><a href="https://pytorch.org/docs/stable/optim.html#module-torch.optim">torch.optim - PyTorch 1.10.1 documentation</a></p>
<h1 id="typing"><a href="#typing" class="headerlink" title="typing"></a>typing</h1><p><a href="https://blog.51cto.com/u_15069487/2581783">typing库：让你的代码阅读者再也不用猜猜猜【附源码】_mb5fe94cdd5807a_51CTO博客</a></p>
<h2 id="基本类型注释"><a href="#基本类型注释" class="headerlink" title="基本类型注释"></a>基本类型注释</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: age: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">print</span>(age)</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery_combine</span>(<span class="params">a: <span class="built_in">str</span>, b: <span class="built_in">str</span>, times: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (a + b) * times</span><br></pre></td></tr></table></figure>
<p>显示地给出类型虽然不会实质性地影响函数运行(仍然可以传入其他类型，且返回值仍然不必然是个<code>str</code>)但是显著地提高了代码的可读性。</p>
<h2 id="复杂类型注释"><a href="#复杂类型注释" class="headerlink" title="复杂类型注释"></a>复杂类型注释</h2><p><code>Python</code>的<code>typing</code>库。 可以描述任何变量的任何类型（类型注释）。 它预装了多种类型注释，如<code>Dict，Tuple，List，Set</code>等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_names</span>(<span class="params">names: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> names:</span><br><span class="line"><span class="built_in">print</span>(student)</span><br><span class="line"><span class="comment">#这将告诉代码阅读者names参数应该是字符串列表，返回None。</span></span><br></pre></td></tr></table></figure>
<p>字典也以类似的方式工作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_name_and_grade</span>(<span class="params">grades: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line"><span class="keyword">for</span> student, grade <span class="keyword">in</span> grades.items():</span><br><span class="line"><span class="built_in">print</span>(student, grade)</span><br><span class="line"><span class="comment">#Dict[str，float]类型提示告诉我们，grades参数传入的应该是一个字典，其中键是字符串，值是浮点数</span></span><br></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>如果要使用自定义类型名称，可以使用类型别名（Type Aliases）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明Point类型，该Point类实际上是[x, y]元组的别名</span></span><br><span class="line">Point = <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># points参数是很多个Point类组成的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_points</span>(<span class="params">points: <span class="type">List</span>[Point]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;X:&quot;</span>, point[<span class="number">0</span>], <span class="string">&quot;  Y:&quot;</span>, point[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: <span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">get</span>() -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span></span><br><span class="line">   ...:     a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">   ...:     <span class="keyword">return</span> a,b</span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">print</span>(get())</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">print</span>(get()[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">print</span>(get()[<span class="number">1</span>])</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>上面的函数<code>get()</code>返回的形式上是两个<code>int</code>，实际上返回了一个<code>tuple</code>。通过使用<code>Tuple [int，int]</code>，我们向开发人员指出这个函数的返回类型。</p>
<h2 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h2><p>如果某个函数的参数可以是多种可选类型，则可以使用<code>typing.Optional</code>或<code>typing.Union</code>类型。</p>
<p>如果该参数可以是特定类型 ，也可以是<code>None</code> ，则使用<code>Optional</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_to_print</span>(<span class="params">some_num: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>):</span></span><br><span class="line">	<span class="keyword">if</span> some_num:</span><br><span class="line">		<span class="built_in">print</span>(some_num)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Value was None!&#x27;</span>)</span><br><span class="line"><span class="comment">#上面的函数try_to_print函数中的some_num参数可以是int也可以是None</span></span><br></pre></td></tr></table></figure>
<p>当参数采用更具体的类型提示时使用<code>Union</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_grade</span>(<span class="params">grade: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(grade, <span class="built_in">str</span>):</span><br><span class="line">        <span class="built_in">print</span>(grade + <span class="string">&#x27; percent&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(grade) + <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h1><p><a href="https://www.runoob.com/python3/python3-assert.html">Python3 assert（断言）</a></p>
<h1 id="一些爬虫问题"><a href="#一些爬虫问题" class="headerlink" title="一些爬虫问题"></a>一些爬虫问题</h1><ul>
<li>一个合适的开发流程——先测试某个文件，然后再放到整个文件夹上</li>
<li>尽量减少使用硬编码文件地址能显著提升鲁棒性</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   source_dir = &quot;./RJnews&quot;</span><br><span class="line">   result_dir = &quot;./results_summer_olympic&quot;</span><br><span class="line">   test_file_1 = &quot;./0.txt&quot;</span><br><span class="line">   test_file_2 = &quot;./test.json&quot;</span><br><span class="line">   trans_dir = &quot;./pieces&quot;</span><br><span class="line">   -------------</span><br><span class="line">   def get_list(target):</span><br><span class="line">       dirs = os.listdir(target)</span><br><span class="line">       file_list = []</span><br><span class="line">       for file in dirs:</span><br><span class="line">            file_list.append(f&quot;./&#123;target&#125;/&#123;file&#125;&quot;)</span><br><span class="line">       return file_list</span><br></pre></td></tr></table></figure>
<ul>
<li>利用 sibling 来完整的切割某个标签</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> def html_cut_emain(file_list):</span><br><span class="line">     num = 0</span><br><span class="line">     for file in tqdm(file_list):</span><br><span class="line">         with open(file, &#x27;r&#x27;, encoding = &quot;utf-8&quot;) as f:</span><br><span class="line">             html_content = f.read()</span><br><span class="line">             soup = BeautifulSoup(html_content, &quot;lxml&quot;)</span><br><span class="line">             all_emain = soup.findAll(class_ = &quot;nk-gv-bodytitlemain&quot;)</span><br><span class="line">             for emain in tqdm(all_emain):</span><br><span class="line">                 with open(f&quot;./pieces/&#123;num&#125;.txt&quot;, &#x27;w&#x27;, encoding = &quot;utf-8&quot;) as t:</span><br><span class="line">                     t.write(f&quot;&#123;emain!r&#125;&quot;)</span><br><span class="line">                     for sibling in emain.next_siblings:</span><br><span class="line">                         if sibling in all_emain:</span><br><span class="line">                             break</span><br><span class="line">                         t.write(f&quot;&#123;sibling!r&#125;&quot;)</span><br><span class="line">                 num = num + 1</span><br><span class="line"> # here we have cut all html into pieces by class tag nk-gv-bodytitlemain</span><br><span class="line"> </span><br><span class="line"> def html_cut_scorll(file_list):</span><br><span class="line">     num = 0</span><br><span class="line">     for file in tqdm(file_list):</span><br><span class="line">         with open(file, &#x27;r&#x27;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">             html_content = f.read()</span><br><span class="line">             soup = BeautifulSoup(html_content, &quot;lxml&quot;)</span><br><span class="line">             all_scroll = soup.findAll(class_=&quot;nk-gv-bodyscroll-on&quot;)</span><br><span class="line">             for scroll in tqdm(all_scroll):</span><br><span class="line">                 with open(f&quot;./pieces/&#123;num&#125;.txt&quot;, &#x27;a+&#x27;, encoding=&quot;utf-8&quot;) as t:</span><br><span class="line">                     t.write(f&quot;&#123;scroll!r&#125;&quot;)</span><br><span class="line">                     for sibling in scroll.next_siblings:</span><br><span class="line">                         if sibling in all_scroll:</span><br><span class="line">                             break</span><br><span class="line">                         t.write(f&quot;&#123;sibling!r&#125;&quot;)</span><br><span class="line">                 num = num + 1</span><br></pre></td></tr></table></figure>
<ul>
<li>注意上方代码配合读写方式实现了追加写入</li>
<li>通过重复 open 的方法实现了自动去重</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> def soup_each_piece_of_news(file_list):</span><br><span class="line">     for file_name in tqdm(file_list):</span><br><span class="line">         with open(file_name, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">             try:</span><br><span class="line">                 html_content = f.read()</span><br><span class="line">             except Exception as e:</span><br><span class="line">                 print(e)</span><br><span class="line">                 continue</span><br><span class="line">             soup = BeautifulSoup(html_content, &quot;lxml&quot;)</span><br><span class="line">             try:</span><br><span class="line">                 title = soup.find(class_ = &quot;nk-gv-bodytitle&quot;).get_text().strip()</span><br><span class="line">             except Exception as e:</span><br><span class="line">                 print(e)</span><br><span class="line">                 print(file_name)</span><br><span class="line">                 title = &quot;no title&quot;</span><br><span class="line">             try:</span><br><span class="line">                 info = soup.find(class_ = &quot;nk-gv-attribute&quot;).get_text().strip()</span><br><span class="line">             except Exception as e:</span><br><span class="line">                 print(e)</span><br><span class="line">                 print(file_name)</span><br><span class="line">                 info = &quot;no info&quot;</span><br><span class="line">             try:</span><br><span class="line">                 context_list = soup.findAll(class_ = &quot;nk-gv-bodyscroll-on&quot;)</span><br><span class="line">                 context = &quot;&quot;</span><br><span class="line">                 for sentence in context_list:</span><br><span class="line">                     context = context + sentence.get_text().strip() + &quot;\r&quot;</span><br><span class="line">             except Exception as e:</span><br><span class="line">                 print(e)</span><br><span class="line">                 print(file_name)</span><br><span class="line">                 context = &quot;no context&quot;</span><br><span class="line">             dic = &#123;&#125;</span><br><span class="line">             dic[&quot;title&quot;] = title</span><br><span class="line">             dic[&quot;info&quot;] = info</span><br><span class="line">             dic[&quot;context&quot;] = context</span><br><span class="line">             store_postion = result_dir + f&quot;/&#123;title&#125;.json&quot;</span><br><span class="line">             try:</span><br><span class="line">                 with open(store_postion, &quot;w&quot;, encoding = &quot;utf-8&quot;) as t:</span><br><span class="line">                     json.dump(dic, t, ensure_ascii = False, indent = 2)</span><br><span class="line">             except Exception as e:</span><br><span class="line">                 print(e)</span><br></pre></td></tr></table></figure>
<ul>
<li>注意上方对于异常的处理，实际上将异常输入到运行文件是个更好的选择</li>
<li>无法实现同时读取 json 又向它写入，故而连用两个 with open</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> def deduplicate_and_identify(file_list):</span><br><span class="line">     num = 0</span><br><span class="line">     for file in tqdm(file_list):</span><br><span class="line">         with open(file, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:</span><br><span class="line">             dic = json.load(f)</span><br><span class="line">             dic[&quot;identity&quot;] = num</span><br><span class="line">             num = num + 1</span><br><span class="line">         with open(file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as t:</span><br><span class="line">             json.dump(dic, t, ensure_ascii=False, indent=2)</span><br><span class="line"> # we can not read and rewrite a json file in one &quot;with open&quot; operation</span><br></pre></td></tr></table></figure>
<ul>
<li>主函数的调用非常优雅</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> html_cut_emain(get_list(source_dir))</span><br><span class="line"> html_cut_scorll(get_list(source_dir))</span><br><span class="line"> soup_each_piece_of_news(get_list(trans_dir))</span><br><span class="line"> deduplicate_and_identify(get_list(result_dir))</span><br></pre></td></tr></table></figure>
<ul>
<li>最后输出到执行目录里</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> python3 soup.py &gt; execute.txt</span><br></pre></td></tr></table></figure>
<h1 id="Iterator-生成器"><a href="#Iterator-生成器" class="headerlink" title="Iterator 生成器"></a>Iterator 生成器</h1><p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p>
<p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p>
<p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p>
<p>调用一个生成器函数，返回的是一个迭代器对象。</p>
<p>以下实例使用 yield 实现斐波那契数列：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span>(<span class="params">n</span>):</span> <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h1 id="多级词典"><a href="#多级词典" class="headerlink" title="多级词典"></a>多级词典</h1><p>少用多级词典，否则在按照 key 或者 value 来打印词典的时候会出太多问题</p>
<p>如果确实需要调用多个词典，可以把第一级词典直接割裂出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">order = []</span><br><span class="line">volunteer_dic = &#123;&#125;</span><br><span class="line">volunteer_course_dic = &#123;&#125;</span><br><span class="line">volunteer_subject_dic = &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>类似这样子</p>
<h1 id="二级词典-try-的逻辑"><a href="#二级词典-try-的逻辑" class="headerlink" title="二级词典 try 的逻辑"></a>二级词典 try 的逻辑</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    volunteer_dic[volunteer][<span class="string">&quot;each_volunteer_total_order&quot;</span>] += <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        volunteer_dic[volunteer][<span class="string">&quot;each_volunteer_total_order&quot;</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        volunteer_dic[volunteer] = &#123;&#125;</span><br><span class="line">        volunteer_dic[volunteer][<span class="string">&quot;each_volunteer_total_order&quot;</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="写入-txt"><a href="#写入-txt" class="headerlink" title="写入 txt"></a>写入 txt</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;./result_volunteer/total_volunteer.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> t:</span><br><span class="line">    t.write(<span class="string">&quot;亲爱的志愿者：&quot;</span>+<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>\r&quot;</span>)</span><br><span class="line">    each_volunteer_total_order = volunteer_dic[key][<span class="string">&quot;each_volunteer_total_order&quot;</span>]</span><br><span class="line">    t.write(<span class="string">&quot;您目前为止一共答疑过&quot;</span> + <span class="string">f&quot;<span class="subst">&#123;each_volunteer_total_order&#125;</span> 次\r&quot;</span>)</span><br><span class="line">    average_satisfaction = volunteer_dic[key][<span class="string">&quot;satisfication&quot;</span>] / each_volunteer_total_order</span><br><span class="line">    t.write(<span class="string">f&quot;您的平均答疑满意度为 <span class="subst">&#123;average_satisfaction&#125;</span>\r&quot;</span>)</span><br><span class="line">    t.write(<span class="string">f&quot;==================================\r您具体的答疑大类如下：\r&quot;</span>)</span><br><span class="line">    t.write(<span class="built_in">str</span>(volunteer_subject_dic[key]) + <span class="string">&quot;\r&quot;</span>)</span><br><span class="line">    t.write(<span class="string">f&quot;==================================\r您具体的答疑学科如下：\r&quot;</span>)</span><br><span class="line">    t.write(<span class="built_in">str</span>(volunteer_course_dic[key]) + <span class="string">&quot;\r&quot;</span>)</span><br><span class="line">    t.write(<span class="string">&quot;-------------------------------------------------------------------\r&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="读取多行-json"><a href="#读取多行-json" class="headerlink" title="读取多行 json"></a>读取多行 json</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(working_json, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    order = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        dic = json.loads(line)</span><br><span class="line">        order.append(dic)</span><br></pre></td></tr></table></figure>
<p>仔细看这串代码，之所以用 readlines，是应为我们处理的 json 文件有多个字典，如下所示</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;cd045e75615d678713743c1c54ae0090&quot;</span>,<span class="attr">&quot;abstract&quot;</span>:<span class="string">&quot;关于逻辑表达式的问题&quot;</span>,<span class="attr">&quot;actionRec&quot;</span>:&#123;<span class="attr">&quot;pAuthenData&quot;</span>:&#123;<span class="attr">&quot;authentication&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;certificateState&quot;</span>:<span class="string">&quot;已认证&quot;</span>,<span class="attr">&quot;department&quot;</span>:<span class="string">&quot;未央书院&quot;</span>,<span class="attr">&quot;realName&quot;</span>:<span class="string">&quot;王振宇&quot;</span>,<span class="attr">&quot;school&quot;</span>:<span class="string">&quot;清华大学&quot;</span>,<span class="attr">&quot;studentID&quot;</span>:<span class="number">2021012269</span>&#125;,<span class="attr">&quot;postTimeStamp&quot;</span>:<span class="string">&quot;10-6 17:08&quot;</span>,<span class="attr">&quot;ptime&quot;</span>:<span class="string">&quot;2021-10-06T09:08:23.089Z&quot;</span>,<span class="attr">&quot;puid&quot;</span>:<span class="string">&quot;cd045e75615d669b13741f9574125872&quot;</span>,<span class="attr">&quot;aAuthenData&quot;</span>:&#123;<span class="attr">&quot;authentication&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;avatarUrl&quot;</span>:<span class="string">&quot;https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKIwgibwfibAMsjgkG83Va8egVgsyUL2gsKbgxU4cPoKUP5C8BMZKDhSVukSvI5QjJo1VibQtRtN0n1g/132&quot;</span>,<span class="attr">&quot;certificateState&quot;</span>:<span class="string">&quot;已认证&quot;</span>,<span class="attr">&quot;department&quot;</span>:<span class="string">&quot;计算机系&quot;</span>,<span class="attr">&quot;realName&quot;</span>:<span class="string">&quot;王哲凡&quot;</span>,<span class="attr">&quot;school&quot;</span>:<span class="string">&quot;清华大学&quot;</span>,<span class="attr">&quot;studentID&quot;</span>:<span class="number">2019011200</span>,<span class="attr">&quot;volunteerLevel&quot;</span>:<span class="string">&quot;特级&quot;</span>&#125;,<span class="attr">&quot;atime&quot;</span>:<span class="string">&quot;2021-10-06T09:30:20.558Z&quot;</span>,<span class="attr">&quot;auid&quot;</span>:<span class="string">&quot;2d44d6c2613fe90d0c1a64441037789c&quot;</span>,<span class="attr">&quot;polishCount&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;hasPush&quot;</span>:<span class="literal">false</span>,<span class="attr">&quot;ftime&quot;</span>:<span class="string">&quot;2021-10-24T16:53:37.171Z&quot;</span>&#125;,<span class="attr">&quot;courseID&quot;</span>:<span class="string">&quot;C/C++程序设计&quot;</span>,<span class="attr">&quot;online&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;state&quot;</span>:<span class="string">&quot;已反馈&quot;</span>,<span class="attr">&quot;subjectID&quot;</span>:<span class="string">&quot;计算机&quot;</span>,<span class="attr">&quot;ordercnt&quot;</span>:<span class="number">100036</span>,<span class="attr">&quot;feedback&quot;</span>:&#123;<span class="attr">&quot;ability&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;attitude&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;inspiration&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;period&quot;</span>:<span class="number">45</span>,<span class="attr">&quot;satisfication&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;suggestion&quot;</span>:<span class="string">&quot;🤖：嘀嘀嘀！这是自动超时反馈哦！&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;_id&quot;</span>:<span class="string">&quot;14139e12615d6828115c6617590e7ba9&quot;</span>,<span class="attr">&quot;abstract&quot;</span>:<span class="string">&quot;证明题&quot;</span>,<span class="attr">&quot;actionRec&quot;</span>:&#123;<span class="attr">&quot;pAuthenData&quot;</span>:&#123;<span class="attr">&quot;authentication&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;certificateState&quot;</span>:<span class="string">&quot;已认证&quot;</span>,<span class="attr">&quot;department&quot;</span>:<span class="string">&quot;药学院&quot;</span>,<span class="attr">&quot;realName&quot;</span>:<span class="string">&quot;练峼恩&quot;</span>,<span class="attr">&quot;school&quot;</span>:<span class="string">&quot;清华大学&quot;</span>,<span class="attr">&quot;studentID&quot;</span>:<span class="number">2020080041</span>&#125;,<span class="attr">&quot;postTimeStamp&quot;</span>:<span class="string">&quot;10-6 17:11&quot;</span>,<span class="attr">&quot;ptime&quot;</span>:<span class="string">&quot;2021-10-06T09:11:04.745Z&quot;</span>,<span class="attr">&quot;puid&quot;</span>:<span class="string">&quot;8937eaa9615d67ed0fcbf2ab20afa832&quot;</span>,<span class="attr">&quot;aAuthenData&quot;</span>:&#123;<span class="attr">&quot;authentication&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;certificateState&quot;</span>:<span class="string">&quot;已认证&quot;</span>,<span class="attr">&quot;department&quot;</span>:<span class="string">&quot;电子系&quot;</span>,<span class="attr">&quot;realName&quot;</span>:<span class="string">&quot;卓寅潇&quot;</span>,<span class="attr">&quot;school&quot;</span>:<span class="string">&quot;清华大学&quot;</span>,<span class="attr">&quot;studentID&quot;</span>:<span class="number">2020310727</span>,<span class="attr">&quot;volunteerLevel&quot;</span>:<span class="string">&quot;特级&quot;</span>&#125;,<span class="attr">&quot;atime&quot;</span>:<span class="string">&quot;2021-10-06T09:54:38.959Z&quot;</span>,<span class="attr">&quot;auid&quot;</span>:<span class="string">&quot;8937eaa9615d6faf0fccaf9e1a8823db&quot;</span>,<span class="attr">&quot;ftime&quot;</span>:<span class="string">&quot;2021-10-06T11:15:14.130Z&quot;</span>,<span class="attr">&quot;polishCount&quot;</span>:<span class="number">0.0</span>,<span class="attr">&quot;hasPush&quot;</span>:<span class="literal">false</span>&#125;,<span class="attr">&quot;courseID&quot;</span>:<span class="string">&quot;离散数学&quot;</span>,<span class="attr">&quot;online&quot;</span>:<span class="literal">true</span>,<span class="attr">&quot;state&quot;</span>:<span class="string">&quot;已反馈&quot;</span>,<span class="attr">&quot;subjectID&quot;</span>:<span class="string">&quot;数学&quot;</span>,<span class="attr">&quot;ordercnt&quot;</span>:<span class="number">100043</span>,<span class="attr">&quot;feedback&quot;</span>:&#123;<span class="attr">&quot;ability&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;attitude&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;inspiration&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;period&quot;</span>:<span class="number">45</span>,<span class="attr">&quot;satisfication&quot;</span>:<span class="number">5</span>,<span class="attr">&quot;suggestion&quot;</span>:<span class="string">&quot;谢谢你耐心解答，并努力让我明白! 辛苦了!&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>后续，我又遇到了一次 json 错误，搞不懂原理，不过解决方式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> j:</span><br><span class="line">     contents = json.loads(j.read())</span><br><span class="line"><span class="comment"># contents 即是你渴望的那个 list of dict</span></span><br></pre></td></tr></table></figure>
<p><a href="https://itsmycode.com/jsondecodeerror-expecting-value-line-1-column-1-char-0/">JSONDecodeError: Expecting value: line 1 column 1 (char 0) - ItsMyCode</a></p>
<h1 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; another_list = [ x + 1 <span class="keyword">for</span> x <span class="keyword">in</span> some_list ]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; another_list</span><br><span class="line">[2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="comment"># Set Comprehensions</span></span><br><span class="line">&gt;&gt;&gt; some_list = [1, 2, 3, 4, 5, 2, 5, 1, 4, 8]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; even_set = &#123; x <span class="keyword">for</span> x <span class="keyword">in</span> some_list <span class="keyword">if</span> x % 2 == 0 &#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; even_set</span><br><span class="line"><span class="built_in">set</span>([8, 2, 4])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="comment"># Dict Comprehensions</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d = &#123; x: x % 2 == 0 <span class="keyword">for</span> x <span class="keyword">in</span> range(1, 11) &#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&#123;1: False, 2: True, 3: False, 4: True, 5: False, 6: True, 7: False, 8: True, 9: False, 10: True&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Python-解包"><a href="#Python-解包" class="headerlink" title="Python 解包"></a>Python 解包</h1><p><strong>最浅显的解包方式</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name, age, date= [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2018-1-1&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">&#x27;Bob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date</span><br><span class="line"><span class="string">&#x27;2018-1-1&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>可迭代对象解包</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= <span class="built_in">enumerate</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= (<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;.items()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c= (x+ <span class="number">1</span> <span class="keyword">for</span> xin <span class="built_in">range</span>(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>星号的使用</strong></p>
<p>比如我们要计算平均分，去除最高分和最低分，除了用切片，还可以用解包的方式获得中间的数值，用 <code>*</code> 来表示多个数值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>first, *new, last= [<span class="number">94</span>, <span class="number">85</span>, <span class="number">73</span>, <span class="number">46</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new</span><br><span class="line">[<span class="number">85</span>, <span class="number">73</span>]</span><br></pre></td></tr></table></figure>
<p><strong>压包</strong></p>
<p>注意，压包压出来的是个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i)</span><br><span class="line">...</span><br><span class="line">(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>压包和混合解包</strong></p>
<p>实现两个列表对应数值相加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b= [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(a, b):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i+j)</span><br><span class="line">...</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nfc = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>]</span><br><span class="line">afc = [<span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> teama, teamb <span class="keyword">in</span> <span class="built_in">zip</span>(nfc, afc):</span><br><span class="line">     <span class="built_in">print</span> teama + <span class="string">&quot; vs. &quot;</span> + teamb</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Packers vs. Ravens</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>49ers vs. Patriots</span><br></pre></td></tr></table></figure>
<p><strong>*的使用</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: l = [(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;1990-1-1&#x27;</span>, <span class="number">60</span>),(<span class="string">&#x27;Mary&#x27;</span>, <span class="string">&#x27;1996-1-4&#x27;</span>, <span class="number">50</span>),(<span class="string">&#x27;Nancy&#x27;</span>, <span class="string">&#x27;1993-3-</span></span><br><span class="line"><span class="string">   ...: 1&#x27;</span>, <span class="number">55</span>),]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> name, *arges <span class="keyword">in</span> l:</span><br><span class="line">   ...:     <span class="built_in">print</span>(name)</span><br><span class="line">   ...:</span><br><span class="line">Bob</span><br><span class="line">Mary</span><br><span class="line">Nancy</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> name, *args <span class="keyword">in</span> l:</span><br><span class="line">   ...:     <span class="built_in">print</span>(args)</span><br><span class="line">   ...:</span><br><span class="line">[<span class="string">&#x27;1990-1-1&#x27;</span>, <span class="number">60</span>]</span><br><span class="line">[<span class="string">&#x27;1996-1-4&#x27;</span>, <span class="number">50</span>]</span><br><span class="line">[<span class="string">&#x27;1993-3-1&#x27;</span>, <span class="number">55</span>]</span><br></pre></td></tr></table></figure>
<p><strong>_的使用</strong></p>
<p>当一些元素不用时，用 <code>_</code> 表示是更好的写法，可以让读代码的人知道这个元素是不要的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>person= (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">20</span>, <span class="number">50</span>, (<span class="number">11</span>, <span class="number">20</span>, <span class="number">2000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name,*_, (*_, year)= person</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">&#x27;Bob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>year</span><br><span class="line"><span class="number">2000</span></span><br></pre></td></tr></table></figure>
<p><strong>直观的压包</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">*a = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="comment"># 上方会报错</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: *a, _ = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: a</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: *a, = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: a</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p><strong>传参——元组（可变参数）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">11</span>]: <span class="function"><span class="keyword">def</span> <span class="title">myfun</span>(<span class="params">*num</span>):</span></span><br><span class="line">    ...:      <span class="built_in">print</span>(num)</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: myfun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p>参数用<code>*num</code>表示，<code>num</code>变量就可以当成元组调用了。</p>
<p>其实这个过程相当于<code>*num, = 1,2,5,6</code></p>
<p><strong>传参——词典（关键字参数）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;defmyfun(**kw):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(kw)</span><br><span class="line">...&gt;&gt;&gt; myfun(name= <span class="string">&quot;Bob&quot;</span>, age= <span class="number">20</span>, weight= <span class="number">50</span>)</span><br><span class="line">&#123;<span class="string">&#x27;weight&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<p>键值对传入<code>**kw</code>，<code>kw</code>就可以表示相应字典。</p>
<ul>
<li><code>*</code>的用法只在函数定义中使用，不能这样使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, ******b **=** &#123;<span class="string">&#x27;weight&#x27;</span>: <span class="number">50</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure>
<p><strong>可变参数与关键字参数的细节</strong></p>
<ol>
<li>函数传入实参时，可变参数(<code>*</code>)之前的参数不能指定参数名</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;defmyfun(a,*b):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(b)</span><br><span class="line">...&gt;&gt;&gt; myfun(a=<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>函数传入实参时，可变参数(<code>*</code>)之后的参数必须指定参数名，否则就会被归到可变参数之中</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;defmyfun(a,*b, c=<span class="literal">None</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(b)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(c)</span><br><span class="line">...&gt;&gt;&gt; myfun(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="literal">None</span>&gt;&gt;&gt; myfun(<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>,c=<span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<ol>
<li>编写函数时，指定参数名是个好习惯，因此推荐使用如下的传参形式：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;defmyfun(*, a, b):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(b)</span><br><span class="line">...&gt;&gt;&gt; myfun(a= <span class="number">1</span>,b= <span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>将所有参数都放在可变参数之后，而可变参数不用管它就可以，也不用命名</p>
<ol>
<li>关键字参数都只能作为最后一个参数，前面的参数按照位置赋值还是名称赋值都可以</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;defmyfun(a,*b, c,**d):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(b)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(d)</span><br><span class="line">...&gt;&gt;&gt; myfun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, c= <span class="number">4</span>, m= <span class="number">5</span>, n= <span class="number">6</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&#123;<span class="string">&#x27;n&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>可变参数与关键词参数共同使用以表示任意参数</li>
</ol>
<p>在修饰器里的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mydecorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="built_in">print</span>(<span class="string">&#x27;I am using a decorator.&#x27;</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@mydecorator</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">myfun</span>(<span class="params">a, b</span>):</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(<span class="number">1</span>, b = <span class="number">2</span>)</span><br><span class="line">I am using a decorator.</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>(如果有的读者不熟悉装饰器，只需要知道，使用<code>@</code>定义<code>myfun</code>相当于<code>myfun = mydecorator(myfun)</code>，定义出来的<code>myfun</code>其实是返回结果<code>wrapper</code>函数)</p>
<p><code>wrapper</code>函数使用<code>*args, **kw</code>作为参数，则被修饰的<code>myfun</code>函数需要的参数无论是什么样的，传入<code>wrapper</code>都不会报错，这保证了装饰器可以修饰各种各样函数的灵活性。毕竟我们一般在函数中传入参数时，要么所有参数名都写，要么前面几个不写，后面的会写，这样使用<code>*args, **kw</code>完全没有问题。</p>
<p><strong><strong>解包作为参数传入函数中</strong></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(a + b)</span><br><span class="line">----------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*n)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*m)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">----------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mydict = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(**mydict)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>myfun(*mydict)</span><br><span class="line">ba</span><br><span class="line"><span class="comment"># 注意这里，是应用了 a 和 b 作为参数的结果</span></span><br><span class="line"><span class="comment"># 第二行为什么是 ba 因为字典里的键不是按照输入的顺序存储的，输出来也不是按照我们代码写的顺序，不过它也不是随机的，因为你会发现每次输出都会是ba，这个顺序和python的实现有关</span></span><br><span class="line">----------------------</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bob = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&#123;name&#125;&#x27;s age is &#123;age&#125;&quot;</span>.<span class="built_in">format</span>(**bob)</span><br><span class="line"><span class="string">&quot;Bob&#x27;s age is 30&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong><strong>多返回值函数</strong></strong></p>
<p>下面过程也涉及到了解包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfun</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>, b + <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m, n = myfun(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment"># 本质上是元祖解包</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = myfun(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Counter-计数器"><a href="#Counter-计数器" class="headerlink" title="Counter 计数器"></a>Counter 计数器</h1><p>Python 的 collections 类库里有个内置的 dict 类的子类 Counter，用于统计字典：</p>
<p>Counter 是 dict 字典的子类，Counter 拥有类似字典的 key 键和 value 值，只不过 Counter 中的键为待计数的元素，而 value 值为对应元素出现的次数 count，为了方便介绍统一使用元素和 count 计数来表示。<strong>虽然 Counter 中的 count 表示的是计数，但是 Counter 允许 count 的值为 0 或者负值。</strong></p>
<h2 id="实例化-Counter-类"><a href="#实例化-Counter-类" class="headerlink" title="实例化 Counter 类"></a><strong><strong>实例化 Counter 类</strong></strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化元素为空的 Counter 对象</span></span><br><span class="line">a = Counter()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从可迭代对象中实例化 Counter 对象</span></span><br><span class="line">b = Counter(<span class="string">&#x27;chenkc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mapping 中实例化 Counter 对象</span></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从关键词参数中实例化 Counter 对象</span></span><br><span class="line">d = Counter(a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p><strong>实例化元素为空的 Counter 对象，之后可以通过为字典添加元素的方式为 Counter 对象添加元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化元素为空的 Counter</span></span><br><span class="line">a = Counter()</span><br><span class="line"><span class="comment"># 为 Counter 添加元素以及对应的 count 计数</span></span><br><span class="line">a[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="string">&#x27;b&#x27;</span>] = <span class="number">2</span></span><br><span class="line">a[<span class="string">&#x27;c&#x27;</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>从 string（字符为list列表的元素）、list 和 tuple 这些可迭代对象中获取元素</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从可迭代对象中实例化 Counter</span></span><br><span class="line">b = Counter(<span class="string">&quot;chenkc&quot;</span>) <span class="comment"># string</span></span><br><span class="line">b2 = Counter([<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]) <span class="comment"># list</span></span><br><span class="line">b3 = Counter((<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)) <span class="comment"># tuple</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b2)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(b3)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>从 mapping 中实例化 Counter 对象，mapping 类型的数据就是元素为<code>(x, y)</code>的列表，字典也属于 mapping 类型的数据</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 mapping 中实例化 Counter 对象</span></span><br><span class="line">c = Counter([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">c2 = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;) <span class="comment"># 字典</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">Counter(&#123;(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>): <span class="number">1</span>, (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>): <span class="number">1</span>, (<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>): <span class="number">1</span>, (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>): <span class="number">1</span>&#125;) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c2)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>虽然传入的 mapping 类型的数据是一样的，<strong>但是由于字典中的键是唯一的，因此如果字典中的键重复会保留最后一个</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(dic)</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>从关键词参数中实例化 Counter 对象，<strong>关键词参数中指定的关键词必须是唯一的，但是不同于字典，如果指定的关键词重复，程序会抛出SyntaxError异常</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从关键词参数中实例化 Counter 对象</span></span><br><span class="line">d = Counter(a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>)</span><br><span class="line"><span class="comment"># d2 = Counter(a = 1, b = 2, a = 3, c = 3) # SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(d)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>我们都知道在字典中查找不存在的键，程序会抛出 KyeError的异常，但是由于 Counter 用于统计计数，因此 Counter 不同于字典，**如果在 Counter 中查找一个不存在的元素，不会产生异常，而是会返回 0，这其实很好理解，Counter 计数将不存在元素的 count 值设置为 0 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c[<span class="string">&#x27;d&#x27;</span>]) <span class="comment"># 查找键值为&#x27;d&#x27;对应的计数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p><code>c[&#39;d&#39;]</code> 和在字典中查找元素没有区别，而如果使用<code>c[&#39;d&#39;] = 0</code>则表示的是为 Counter 添加元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">14</span>]: c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&quot;d&quot;</span>:<span class="number">1</span>, <span class="string">&quot;f&quot;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: c[<span class="number">1</span>]</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: c[a]</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">16</span>-25ddc78a0b0f&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> c[a]</span><br><span class="line"></span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">17</span>]: c[<span class="string">&quot;a&quot;</span>]</span><br><span class="line">Out[<span class="number">17</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>Counter 额外支持字典中没有的三个方法：<code>elements()</code>、<code>most_common([m])</code>以及<code>subtract([iterable-or-mapping])</code></p>
<p><strong>elements 方法</strong></p>
<p><code>elements()</code>方法返回一个迭代器，可以通过 list 或者其它方法将迭代器中的元素输出，输出的结果为对应出现次数的元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">c2 = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>:-<span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;) <span class="comment"># 将出现次数设置为 0 和负值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c.elements())</span><br><span class="line">&lt;itertools.chain <span class="built_in">object</span> at <span class="number">0x0000022A57509B70</span>&gt; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(c.elements()))</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c2.elements())</span><br><span class="line">&lt;itertools.chain <span class="built_in">object</span> at <span class="number">0x0000022A57509B70</span>&gt; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(c2.elements()))</span><br><span class="line">[<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>在 Counter 中是允许计数为 0 或者负值的，<strong>不过通过上面代码可以看出 elements 函数没有将 0 和负值对应的元素值打印出来</strong></p>
<p><strong>most_common 方法</strong></p>
<p><code>most_common([n])</code> 是 Counter 最常用的方法，返回一个出现次数从大到小的前 n 个元素的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c.most_common()) <span class="comment"># 默认参数</span></span><br><span class="line">[(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c.most_common(<span class="number">2</span>)) <span class="comment"># n = 2</span></span><br><span class="line"> [(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>)] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c.most_common(<span class="number">3</span>)) <span class="comment"># n = 3</span></span><br><span class="line">[(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>)] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c.most_common(-<span class="number">1</span>)) <span class="comment"># n = -1</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<p><strong>subtract 方法</strong></p>
<p><code>subtract([iterable_or_mapping])</code>方法其实就是将两个 Counter 对象中的元素对应的计数相减</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;)</span><br><span class="line">d = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line">c.subtract(d)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;c&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;b&#x27;</span>: -<span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: -<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://pic3.zhimg.com/80/v2-2f8fc96149c2e900147b1ac3e4e789b2_1440w.jpg" alt="https://pic3.zhimg.com/80/v2-2f8fc96149c2e900147b1ac3e4e789b2_1440w.jpg"></p>
<p><img src="https://pic1.zhimg.com/v2-8718e143bcd4df871f609d7ed4dc8cd4_r.jpg" alt="https://pic1.zhimg.com/v2-8718e143bcd4df871f609d7ed4dc8cd4_r.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">c = Counter(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>:-<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line">c.update(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(c)</span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>对于 Counter 中的<code>update</code> 函数简单来说，就是增加对应元素的计数</p>
<p><strong><strong>集合运算符</strong></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c + d                           <span class="comment"># add two counters together:  c[x] + d[x]</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c - d                           <span class="comment"># subtract (keeping only positive counts)</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d                           <span class="comment"># intersection:  min(c[x], d[x])</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c | d                           <span class="comment"># union:  max(c[x], d[x])</span></span><br><span class="line">Counter(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>对我而言，用了 Counter 类可以大量节省这个语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   course_total_order[course] += <span class="number">1</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">   course_total_order[course] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 Counter 类之后，只用写</span></span><br><span class="line">course_total_order[course] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">26</span>]: dic = Counter()</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: dic</span><br><span class="line">Out[<span class="number">27</span>]: Counter()</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: dic[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: dic</span><br><span class="line">Out[<span class="number">29</span>]: Counter(&#123;<span class="number">0</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<p>这对二级词典却没用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">35</span>]: dic[<span class="string">&quot;a&quot;</span>][<span class="string">&quot;b&quot;</span>] += <span class="number">1</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">35</span>-5f1b75ba9f2b&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> dic[<span class="string">&quot;a&quot;</span>][<span class="string">&quot;b&quot;</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br></pre></td></tr></table></figure>
<h2 id="除了字典之外的-Counter"><a href="#除了字典之外的-Counter" class="headerlink" title="除了字典之外的 Counter"></a>除了字典之外的 Counter</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span> Counter(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(&#123;<span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="漂亮的打印-JSON"><a href="#漂亮的打印-JSON" class="headerlink" title="漂亮的打印 JSON"></a><strong><strong>漂亮的打印 JSON</strong></strong></h1><p>JSON是一种非常好的数据序列化的形式，被如今的各种API和web service大量的使用。使用python内置的json处理，可以使JSON串具有一定的可读性，但当遇到大型数据时，它表现成一个很长的、连续的一行时，人的肉眼就很难观看了。</p>
<p>为了能让JSON数据表现的更友好，我们可以使用indent参数来输出漂亮的JSON。当在控制台交互式编程或做日志时，这尤其有用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(json.dumps(data))  <span class="comment"># No indention</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;count&quot;</span>: <span class="number">2</span>, <span class="string">&quot;results&quot;</span>: [&#123;<span class="string">&quot;age&quot;</span>: <span class="number">27</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Oz&quot;</span>, <span class="string">&quot;lactose_intolerant&quot;</span>: true&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">29</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;lactose_intolerant&quot;</span>: false&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(json.dumps(data, indent=<span class="number">2</span>))  <span class="comment"># With indention</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="string">&quot;count&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;results&quot;</span>: [</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span>: <span class="number">27</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Oz&quot;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;lactose_intolerant&quot;</span>: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Joe&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lactose_intolerant&quot;</span>: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后研究下使用内置的pprint模块，也可以让其它任何东西打印输出的更漂亮</p>
<p>还有一个库叫做 beeprint，估计也很香</p>
<p><a href="https://zhuanlan.zhihu.com/p/42504137">打印 Python 的一切 — pprint &amp; beeprint</a></p>
<h1 id="行内的-if"><a href="#行内的-if" class="headerlink" title="行内的 if"></a>行内的 if</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;Hello&quot;</span> <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">else</span> <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello</span><br></pre></td></tr></table></figure>
<h1 id="迭代对象"><a href="#迭代对象" class="headerlink" title="迭代对象"></a>迭代对象</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index, team <span class="keyword">in</span> <span class="built_in">enumerate</span>(teams):</span><br><span class="line">    <span class="built_in">print</span> index, team</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> Packers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> 49ers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> Ravens</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> Patriots</span><br></pre></td></tr></table></figure>
<h1 id="列表推字典"><a href="#列表推字典" class="headerlink" title="列表推字典"></a>列表推字典</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> &#123;key: value <span class="keyword">for</span> value, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(teams)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&#x27;49ers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Ravens&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Patriots&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;Packers&#x27;</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="列表转字符串"><a href="#列表转字符串" class="headerlink" title="列表转字符串"></a>列表转字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;, &quot;</span>.join(teams)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Packers, 49ers, Ravens, Patriots&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="读取列表的值而不创建"><a href="#读取列表的值而不创建" class="headerlink" title="读取列表的值而不创建"></a>读取列表的值而不创建</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">   is_admin = data[<span class="string">&#x27;admin&#x27;</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">   is_admin = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为</span></span><br><span class="line">data = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line">is_admin = data.get(<span class="string">&#x27;admin&#x27;</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#前3个</span></span><br><span class="line"><span class="built_in">print</span> x[:<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#中间4个</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#最后3个</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">3</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#奇数项</span></span><br><span class="line"><span class="built_in">print</span> x[::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#偶数项</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<h1 id="迭代工具"><a href="#迭代工具" class="headerlink" title="迭代工具"></a>迭代工具</h1><p>和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有的组合方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> game <span class="keyword">in</span> combinations(teams, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span> game</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;49ers&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;Ravens&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;49ers&#x27;</span>, <span class="string">&#x27;Ravens&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;49ers&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Ravens&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h1><p><a href="https://www.geeksforgeeks.org/ordereddict-in-python/">OrderedDict in Python - GeeksforGeeks</a></p>
<h1 id="pathlib"><a href="#pathlib" class="headerlink" title="pathlib"></a>pathlib</h1><p><a href="https://geek-docs.com/python/python-tutorial/python-pathlib.html">Python pathlib 教程|极客教程</a></p>
<h1 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h1><p><a href="https://www.runoob.com/python/python-func-enumerate.html">Python enumerate() 函数</a></p>
<h1 id="Argument-list-too-long-error-for-rm-cp-mv"><a href="#Argument-list-too-long-error-for-rm-cp-mv" class="headerlink" title="Argument list too long error for rm, cp, mv"></a>Argument list too long error for rm, cp, mv</h1><p><a href="https://stackoverflow.com/questions/11289551/argument-list-too-long-error-for-rm-cp-mv-commands">Argument list too long error for rm, cp, mv commands</a></p>
<h1 id="CSV-基础"><a href="#CSV-基础" class="headerlink" title="CSV 基础"></a>CSV 基础</h1><p><a href="https://geek-docs.com/python/python-tutorial/python-csv.html">https://geek-docs.com/python/python-tutorial/python-csv.html</a></p>
<h1 id="对象排序"><a href="#对象排序" class="headerlink" title="对象排序"></a>对象排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, department</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.department = department</span><br><span class="line">        self.total_order_count = <span class="number">0</span></span><br><span class="line">        self.duration = <span class="number">0</span></span><br><span class="line">        self.order_list = []</span><br><span class="line">        self.question_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare_student</span>(<span class="params">student</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;为 department 里比较每个系最积极的学生做的比较器&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    student.set_total_order_count()</span><br><span class="line">    <span class="keyword">return</span> student.total_order_count</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;调用比较器&quot;&quot;&quot;</span></span><br><span class="line">student_list.sort(key=compare_student)</span><br></pre></td></tr></table></figure>
<h1 id="数据库排序"><a href="#数据库排序" class="headerlink" title="数据库排序"></a>数据库排序</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">messages_for_user</span>(<span class="params">request</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_response</span>(<span class="params">code: <span class="built_in">int</span>, data: <span class="built_in">str</span></span>):</span></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(&#123;</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: code,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: data</span><br><span class="line">        &#125;, status=code)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> request.method == <span class="string">&quot;POST&quot;</span></span><br><span class="line">        name = request.COOKIES[<span class="string">&#x27;user&#x27;</span>]</span><br><span class="line">        user = User.objects.get(name=name)</span><br><span class="line">        messages = Message.objects.<span class="built_in">filter</span>(user=user)</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(messages) != <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> gen_response(<span class="number">200</span>, [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&#x27;title&#x27;</span>: msg.title,</span><br><span class="line">                <span class="string">&#x27;content&#x27;</span>: msg.content,</span><br><span class="line">                <span class="string">&#x27;timestamp&#x27;</span>: <span class="built_in">int</span>(msg.pub_date.timestamp())</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> msg <span class="keyword">in</span> messages.order_by(<span class="string">&#x27;-pub_date&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> gen_response(<span class="number">400</span>, <span class="string">&quot;查无此人&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>不得不说，这一段写的真的很漂亮，这样推导出了一个字典列表。以及，函数内定义函数，都很漂亮。</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Review</title>
    <url>/2022/02/23/CS/%E5%85%B6%E4%BB%96/git_review/</url>
    <content><![CDATA[<h1 id="Readme"><a href="#Readme" class="headerlink" title="Readme"></a>Readme</h1><p>小作业当然不麻烦，主要是自己长期不太能处理 .gitignore 这类问题，这次一定试试完全同步我的 CST_THU 文件夹。</p>
<h1 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h1><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a><code>git status</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/repo<span class="comment"># git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">    README.md</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>On branch master</code> 表明当前处于的分支，Git 默认为初始化的仓库创建  <code>master</code> 分支。</li>
<li><code>Untracked files</code> 列出了还没有被 Git 管理的文件。</li>
</ul>
<p>Git 不会主动管理目录下的文件，你得手动 add。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/repo<span class="comment"># git add README.md </span></span><br><span class="line">~/repo<span class="comment"># git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README.md</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Changes to be committed</code> 列出了此时进行 commit 操作将包括的变更，这里即添加了 <code>README.md</code> 文件。</li>
</ul>
<p><strong>Warning!!!</strong><br>如果不小心添加了一个文件，或者一个更改还没准备好发布为 commit，可以遵循Git的提示执行 <code>git rm --cached &lt;file&gt;</code>，如果没有 <code>--cached</code> 参数则仓库中的 <code>&lt;file&gt;</code> 文件会被删掉，而且这几乎是不可逆的。（我室友就这么删掉了他大一所有代码）</p>
<p>这个指令真的很不安全，建议采用下文所述的 <code>git restore --staged &lt;file&gt;</code> 指令</p>
<h2 id="git-branch-a"><a href="#git-branch-a" class="headerlink" title="git branch -a"></a><code>git branch -a</code></h2><p>用于查看当前的所有分支，关键问题是，我一开始遇到了这种情况：</p>
<p><img src="https://s2.loli.net/2022/02/23/RfrXewT4SlViHBh.png" alt=""></p>
<blockquote>
<p>难道是你没提交东西吗</p>
<p>我记得新仓库的话是这样的  显示不出分支（</p>
</blockquote>
<p>我在一次 commit 了之后添加了 readme.md，然后写入了东西，此时 checkout 到了另一分支。</p>
<p>另一分支的当前状态是自己的库的当前情况，而不是 commit 情况，故而另一分支也能看到 readme.md</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; .txt </span><br><span class="line">&gt;&gt; 是追加，而 &gt; 是覆盖</span><br></pre></td></tr></table></figure>
<h2 id="git-checkout-b-dev"><a href="#git-checkout-b-dev" class="headerlink" title="git checkout -b dev"></a><code>git checkout -b dev</code></h2><ul>
<li>git 对于分支的保护作用，如果你切换到另一分支后，修改的工作不 commit，然后强行切换回来，那么你的修改会被 modified 掉，所以 git 会拒绝你切换回去，要求你在该分支上 commit 了，才能切回去</li>
</ul>
<h2 id="Iterm2-的一些-bug"><a href="#Iterm2-的一些-bug" class="headerlink" title="Iterm2 的一些 bug"></a>Iterm2 的一些 bug</h2><p>我在用 iterm2 写  git commit 的时候，遇到这种情况：</p>
<p><img src="https://s2.loli.net/2022/02/23/ags7zEhjxv2ZInN.png" alt=""></p>
<p>之后查了很久，原来是 iterm2 的主题的 bug，只能换回到 terminal</p>
<h2 id="dqoute"><a href="#dqoute" class="headerlink" title="dqoute"></a><code>dqoute</code></h2><p><img src="https://s2.loli.net/2022/02/23/DrAuC4YFB8kKd3b.png" alt=""></p>
<p>这个问题的本质是，用了中文，比如上方用了中文后引号。</p>
<p>不要用中文就好了。</p>
<h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a><code>merge</code></h2><p><code>merge A into B</code> 的意义是，将 A 合入 B 中，不改变 A，但是改变 B</p>
<p>如果纯粹只用 <code>merge A into B</code> 的指令，会进入 vim 界面，然后编写理由，解释为什么这次 merge 是必要的，所以采用 <code>merge A into B -m &quot;anything&quot;</code> 的指令来 merge.</p>
<h2 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h2><p>学了这么久，这两个概念就没学清楚过。工作区就是 Working Tree，而使用了 <code>git add &lt;file&gt;</code> 之后，会把这个文件从工作区添加到暂存区 index/Stage/Cache，而<code>git commit</code> 是把暂存区提交到某个分支上的版本库上，也即 Repository/History。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/4428238-5b04868bd09cb72a.png?imageMogr2/auto-orient/strip|imageView2/2/w/546/format/webp" alt=""></p>
<h2 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a><code>git restore</code></h2><h3 id="git-restore-staged"><a href="#git-restore-staged" class="headerlink" title="git restore --staged"></a><code>git restore --staged</code></h3><p>将暂存区的文件从暂存区撤出，但不会更改文件 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; git add .</span><br><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">	modified:   readme.md</span><br><span class="line"></span><br><span class="line">&gt; git restore --staged ./readme.md</span><br><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">	modified:   readme.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="git-restore-1"><a href="#git-restore-1" class="headerlink" title="git restore"></a><code>git restore</code></h3><ul>
<li><p>将不在暂存区（也即仅仅在工作区）的文件撤销修改，回到上一次 commit。</p>
</li>
<li><p>不影响暂存区的修改，即便文件加入暂存区后再次被修改而没再加入暂存区。</p>
</li>
<li><p>如果一个不在暂存区的文件在上次 commit 中尚且没有存在，也即并未被 git 追踪，那么对其 restore 将会失败。</p>
</li>
<li><p>我们可以得出结论，暂存区和工作区只区分文件，而不区分文件内的修改。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; git add .</span><br><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">	modified:   readme.md</span><br><span class="line"></span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; test.md</span><br><span class="line">&gt; cat test.md</span><br><span class="line">git 入坟</span><br><span class="line">&gt; ls</span><br><span class="line">readme.md test.md</span><br><span class="line">&gt; git restore test.md</span><br><span class="line">error: pathspec <span class="string">&#x27;test.md&#x27;</span> did not match any file(s) known to git</span><br><span class="line">&gt; git add .</span><br><span class="line">&gt; git commit -m <span class="string">&quot;1&quot;</span></span><br><span class="line">[master d1e67d3] 1</span><br><span class="line"> 2 files changed, 3 insertions(+)</span><br><span class="line"> create mode 100644 test.md</span><br><span class="line">&gt; cat test.md</span><br><span class="line">git 入坟</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; test.md</span><br><span class="line">&gt; cat test.md</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; ls</span><br><span class="line">readme.md test.md</span><br><span class="line">&gt; git add test.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; test.md</span><br><span class="line">&gt; cat test.md</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; test.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;git 入坟&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; ls</span><br><span class="line">readme.md test.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">&gt; cat test.md</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">	modified:   test.md</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">	modified:   readme.md</span><br><span class="line">	modified:   test.md</span><br><span class="line"></span><br><span class="line">&gt; git restore --staged ./test.md</span><br><span class="line">&gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">	modified:   readme.md</span><br><span class="line">	modified:   test.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">&gt; git add test.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; git restored readme.md</span><br><span class="line">git: <span class="string">&#x27;restored&#x27;</span> is not a git <span class="built_in">command</span>. See <span class="string">&#x27;git --help&#x27;</span>.</span><br><span class="line"></span><br><span class="line">The most similar <span class="built_in">command</span> is</span><br><span class="line">	restore</span><br><span class="line">&gt; git restore readme.md</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">git 入坟</span><br><span class="line">git 入坟</span><br></pre></td></tr></table></figure>
<h2 id="git-checkout-lt-file-gt"><a href="#git-checkout-lt-file-gt" class="headerlink" title="git checkout &lt;file&gt;"></a><code>git checkout &lt;file&gt;</code></h2><p><code>git checkout -- file</code> 也可以丢弃工作区的修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换分支”。</p>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<h2 id="对文件操作的总结"><a href="#对文件操作的总结" class="headerlink" title="对文件操作的总结"></a>对文件操作的总结</h2><ol>
<li><code>git restore --staged &lt;file&gt;</code> 用于无损地将文件撤出暂存区。</li>
<li><code>git checkout -- &lt;file&gt;</code> 用于将任何文件退回到上次 <code>git add</code> 或者 <code>git commit</code> 后的状态。</li>
<li>不要用 <code>git rm --cached &lt;file&gt;</code> 与 <code>git restore &lt;file&gt;</code></li>
</ol>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a><code>git log</code></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>
<p>看着最清爽：</p>
<p><img src="https://s2.loli.net/2022/02/24/P2WUdMvn49gFIj6.png" style="zoom:40%;" /></p>
<p>分支轮廓看的一清二楚。</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a><code>git reflog</code></h2><p>这一指令显示每一步 commit 的移动关系，从上到下，每两行为一个单位。</p>
<p>每个单位的第一行是 destination，第二行是 departure。</p>
<p>比如第一个单位，从 d1e67d3 到 5ef2adf，对应着我使用了一次 <code>&gt; git reset --hard HEAD^</code></p>
<p>第二个单位，从 9e2be6a 到 5ef2adf，对应着我在 master 分支上的一次提交。注意，在上方轮廓图中，这两次提交中间还夹着 dev 分支的一次提交。实际上，9e2be 对应着我合并了 dev 到 master，然后又提交了一次 dev，产生了 5baba，之后再合并了一次，产生了 5ef2a。</p>
<p><img src="https://s2.loli.net/2022/02/24/hN51If9TycAVbaz.png" style="zoom:40%;" /></p>
<h3 id="git-reset-lt-version-id-gt"><a href="#git-reset-lt-version-id-gt" class="headerlink" title="git reset &lt;version_id&gt;"></a><code>git reset &lt;version_id&gt;</code></h3><p>我个人不太喜欢用 <code>HEAD^</code>  这种方式，感觉不详细。</p>
<p>有时候用 Git 的时候有可能 commit 提交代码后，发现这一次 commit 的内容是有错误的，那么有两种处理方法：</p>
<ol>
<li><p>修改错误内容，再次 commit 一次。第一种方法比较直接，但会多次一次commit记录。</p>
</li>
<li><p>使用<strong>git reset</strong> 命令撤销这一次错误的 commit。我个人更倾向第二种方法，错误的commit没必要保留下来。</p>
</li>
</ol>
<h3 id="三种-reset-的模式"><a href="#三种-reset-的模式" class="headerlink" title="三种 reset 的模式"></a>三种 reset 的模式</h3><p> <strong>reset —hard：重置stage区和工作目录。</strong></p>
<p><strong>reset —hard</strong> 会在重置 <strong>HEAD</strong> 和 <strong>branch</strong> 的同时，重置 stage 区和工作目录里的内容。当你在 <strong>reset</strong> 后面加了 <strong>—hard</strong> 参数时，你的 stage 区和工作目录里的内容会被完全重置为和 <strong>HEAD</strong> 的新位置相同的内容。换句话说，就是你的没有 <strong>commit</strong> 的修改会被全部擦掉。而后你再 reset 回去也无法恢复。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;check&quot;</span> &gt;&gt; readme.md</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">check</span><br><span class="line">&gt; git add .</span><br><span class="line">&gt; git reset --hard HEAD^</span><br><span class="line">HEAD is now at 9e2be6a tryfsdf</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br><span class="line">&gt; git reset --hard 5ef2</span><br><span class="line">HEAD is now at 5ef2adf fix</span><br><span class="line">&gt; cat readme.md</span><br><span class="line">fix</span><br></pre></td></tr></table></figure>
<p>在上方的例子中，我们在 5ef2adf commit 上我们将 readme.md add 到了 storage，</p>
<p>没有提交新的 commit，然后先 reset 回去一步，又再次 reset 回到 5ef2adf 上，发现之前 add 到了 storage 的 readme.md 的更改已经没了，估计是无法不可逆的（X</p>
<p>剩下两种不常用，留个<a href="https://www.jianshu.com/p/c2ec5f06cf1a">链接</a>就够了。</p>
<h1 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h1><h2 id="no-ff"><a href="#no-ff" class="headerlink" title="--no-ff"></a><code>--no-ff</code></h2><p>我们首先理解下 git log 的意义，git log 只会显示当前的分支的信息，而另一个分叉上的提交都不会显示出来。</p>
<p>如下的图是使用了 fastforward 后的 git log</p>
<p><img src="https://s2.loli.net/2022/02/24/JKcXPhuriQV2WF1.png" style="zoom:40%;" /></p>
<p>这个是使用了 —no-ff 的结果，我们发现，没有新的 commit 诞生，直接就合并了。</p>
<p><img src="https://s2.loli.net/2022/02/24/fXhL3sMzHFa6xZD.png" style="zoom:40%;" /></p>
<p>从理论上讲，我们只需要用 –no-ff 就好了。</p>
<p><img src="https://img-blog.csdnimg.cn/2021022018420353.png" style="zoom:40%;" /></p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>软工</tag>
        <tag>答疑坊</tag>
      </tags>
  </entry>
  <entry>
    <title>Advanced Word Power Lecture Note</title>
    <url>/2022/02/23/Lecture/Advanced_word_power/</url>
    <content><![CDATA[<h1 id="第一节课"><a href="#第一节课" class="headerlink" title="第一节课"></a>第一节课</h1><p>上来王老师就大量劝退，搞听写，破防。。。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>nausea</td>
<td>作呕;恶心;反胃</td>
</tr>
<tr>
<td>nautical</td>
<td></td>
</tr>
<tr>
<td>astronaut</td>
<td><em>n.</em> 宇航员, 太空人</td>
</tr>
<tr>
<td>cosmonaut</td>
<td><em>n.</em> 俄国宇航员</td>
</tr>
<tr>
<td>equanimity</td>
<td><em>n.</em> 平和,镇静</td>
</tr>
<tr>
<td>equatorial</td>
<td><em>adj.</em> 赤道的,赤道附近的 <em>adv.</em> 赤道地</td>
</tr>
<tr>
<td>equilibrist</td>
<td><em>n.</em> 走绳索者,杂技表演师; /ɪ’kwɪlɪ,brɪst/</td>
</tr>
<tr>
<td>equinox</td>
<td><em>n.</em> 昼夜平分点,春分或秋分</td>
</tr>
<tr>
<td>convivial</td>
<td><em>adj.</em> 好交际的 随和的,活跃的， 欢乐的</td>
</tr>
<tr>
<td>equanimous</td>
<td><em>adj.</em> 安静的,镇定的; /ɪ’kwænɪməs/</td>
</tr>
<tr>
<td>magnanimity</td>
<td><em>n.</em> 宽宏大量; /mægnə’nɪmɪtɪ/</td>
</tr>
<tr>
<td>viviparous</td>
<td><em>adj.</em> 胎生的,母体发芽的; /vɪ’vɪp(ə)rəs/</td>
</tr>
<tr>
<td>ovoviviparous</td>
<td><em>adj.</em> 卵胎生的</td>
</tr>
<tr>
<td>oviparous</td>
<td><em>n.</em> 卵生的</td>
</tr>
<tr>
<td>podium</td>
<td>n. 乐队指挥台；矮墙；墩座墙; /‘pəʊdɪəm/</td>
</tr>
<tr>
<td>demotic</td>
<td><em>n.</em> (古埃及)通俗文字 <em>adj.</em> 口语的, 通俗的</td>
</tr>
<tr>
<td>pandemic</td>
<td><em>adj.</em> （疾病）在全国（或世界）流行的 <em>n.</em> （全国或全球性）流行病，瘟疫</td>
</tr>
<tr>
<td>epidemic</td>
<td>adj. 流行的；传染性的 n. 流行病；传染病；风尚等的流行</td>
</tr>
<tr>
<td>endemic</td>
<td>adj. 风土的；地方性的 n. 地方病; /en’demɪk/</td>
</tr>
<tr>
<td>buck teeth</td>
<td>倒牙; 回牙齿; 翻译;</td>
</tr>
<tr>
<td>Two wrongs don’t make a right</td>
<td>别人错了，不等于你对了</td>
</tr>
<tr>
<td>misandry</td>
<td>n. 对男性之厌恶</td>
</tr>
<tr>
<td>gynandrous</td>
<td><em>adj.</em> 雌雄两蕊合生的</td>
</tr>
<tr>
<td>monogamy</td>
<td><em>n.</em> 一夫一妻制</td>
</tr>
<tr>
<td>bigamy</td>
<td>n. 重婚罪，重婚; /‘bɪgəmɪ/</td>
</tr>
<tr>
<td>polygamy</td>
<td>n. 一夫多妻，一妻多夫，多配偶</td>
</tr>
<tr>
<td>polygyny</td>
<td><em>n.</em> 一夫多妻</td>
</tr>
<tr>
<td>plyandry</td>
<td><em>n.</em> 一妻多夫(制); /‘pɒlɪændrɪ/</td>
</tr>
</tbody>
</table>
</div>
<h1 id="Week-Two"><a href="#Week-Two" class="headerlink" title="Week Two"></a>Week Two</h1><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>integral</td>
<td><em>adj.</em> 构成整体所必需的</td>
</tr>
<tr>
<td>conceit</td>
<td>n. 自负；狂妄；幻想 vt. 幻想；the height of conceit</td>
</tr>
<tr>
<td>conquest</td>
<td><em>n.</em> 攻取, 征服, 克服</td>
</tr>
<tr>
<td>amorous</td>
<td><em>adj.</em> 色情的, 多情的, 爱情的 热情的</td>
</tr>
<tr>
<td>flesh</td>
<td><em>n.</em> 肉 果肉 肉体</td>
</tr>
<tr>
<td>earthly</td>
<td><em>adj.</em> 人间的,尘世的 可能的 ( 用于强调) 毫无用处( 或道理等) 没有任何(机会或可能) <em>n.</em> 世俗,尘缘</td>
</tr>
<tr>
<td>fleshly</td>
<td>adj. 肉欲的；肉体的；耽于声色的</td>
</tr>
<tr>
<td>Appeal to</td>
<td>对某人有吸引力 向某人呼吁 求助于某人 吸引某人的兴趣</td>
</tr>
<tr>
<td>Appeal</td>
<td>vi. 呼吁，恳求；有吸引力，迎合爱好；诉诸，求助；上诉；（体育比赛中）诉诸裁判 n. 上诉；吸引力，感染力；呼吁，请求；诉诸裁判 vt. [美]将…上诉，对…上诉</td>
</tr>
<tr>
<td>allied</td>
<td><em>adj.</em> 有联系的 同盟的, 同盟国的 联姻的</td>
</tr>
<tr>
<td>Ally</td>
<td>n. 同盟国；同盟者；助手；伙伴 vt. 使联盟；使联合 vi. 结盟；联合</td>
</tr>
<tr>
<td>practitioner</td>
<td><em>n.</em> 习艺者, 实习者 从业者(尤指医师)</td>
</tr>
<tr>
<td>manipulate</td>
<td><em>vt.</em> 熟练控制[操作]</td>
</tr>
<tr>
<td>joint</td>
<td>n. 关节；接合处，接合点；接缝；（牛，羊等的腿）大块肉 adj. 联合的，合办的；共同的；连接的 vt. 连接，贴合；接合；使有接头 vi. 贴合；生节</td>
</tr>
<tr>
<td>corn</td>
<td><em>n.</em> 〈英〉谷物；谷粒 〈美〉玉蜀黍，玉米 平庸、伤感或陈腐的音乐、诗歌、戏剧等</td>
</tr>
<tr>
<td>germ</td>
<td>n. 细菌；胚芽，萌芽 vi. 萌芽；cold germ 流感病毒</td>
</tr>
<tr>
<td>fit glasses</td>
<td>配镜师会不断调整焦距最后配出你戴了不头昏眼花的眼镜</td>
</tr>
<tr>
<td>internist</td>
<td><em>n.</em> 〈美〉内科医师</td>
</tr>
<tr>
<td>apprenticeship</td>
<td><em>n.</em> 学徒身份，学徒资格 学徒期；见习期; /ə’prentɪs/</td>
</tr>
<tr>
<td>apprentice</td>
<td><em>n.</em> 学徒, 徒弟</td>
</tr>
<tr>
<td>gynecologist</td>
<td><em>n.</em> 妇科医生/ˌɡaini’kɔlədʒist/</td>
</tr>
<tr>
<td>etymological</td>
<td>/ˌetimə’lɔdʒik/ <em>adj.</em> 语源的,根据语源学的</td>
</tr>
<tr>
<td>midwife</td>
<td><em>n.</em> 接生婆, 助产士</td>
</tr>
<tr>
<td>obstetrcian</td>
<td><em>n.</em> 产科医师/ˌɒbstə’trɪʃ(ə)n/</td>
</tr>
<tr>
<td>first chair</td>
<td>首席，首个</td>
</tr>
<tr>
<td>brave</td>
<td><em>adj.</em> 勇敢的，大胆的 <em>vt.</em> 勇敢面对；不怕；不顾</td>
</tr>
<tr>
<td>contempt</td>
<td>蔑视</td>
</tr>
<tr>
<td>ridicule</td>
<td>vt. 嘲笑；愚弄；嘲弄 n. 嘲笑；愚弄；笑柄 Obstetrics has only within the last 150 years become a respectable specialty. No further back than 1834, Professor William P. Dewees assumed the frst chair of obstetrics at the University of Pennsylvania and had to brave considerable medical contempt and ridicule as a result—the delivery of children was then considered beneath the dignity of the medical profession..</td>
</tr>
<tr>
<td>dignity</td>
<td>n. 尊严；高贵；自重</td>
</tr>
<tr>
<td>pediatrician</td>
<td><em>n.</em> 儿科医师 /ˌpiːdɪə’trɪʃ(ə)n/</td>
</tr>
<tr>
<td>maturity</td>
<td>/mə’tʃʊərətɪ/   <em>n.</em> 成熟;成熟期;发育完全 (金融)到期</td>
</tr>
<tr>
<td>pedagogy</td>
<td>n. 教育学；教育；教授法 /‘pedəɡɔɡi/</td>
</tr>
<tr>
<td>pedagogue</td>
<td><em>n.</em> 教师, 卖弄学问的教师/‘pedəgɒg/</td>
</tr>
<tr>
<td>deteriorate</td>
<td><em>vi.</em> 恶化, 变坏</td>
</tr>
<tr>
<td>demagogue</td>
<td>n. 煽动者；煽动家；煽动政治家 /‘deməgɒg/</td>
</tr>
<tr>
<td>foment</td>
<td><em>vt.</em> 激起,煽动(麻烦等)/fə(ʊ)’ment/</td>
</tr>
<tr>
<td>discontent</td>
<td>不满</td>
</tr>
<tr>
<td>rouse</td>
<td><em>vt. &amp; vi.</em> 醒来；唤醒 <em>vt.</em> 使…活跃起来[产生兴趣]</td>
</tr>
<tr>
<td>fever pitch</td>
<td>n. 狂热；极度兴奋</td>
</tr>
<tr>
<td>oratory</td>
<td><em>n.</em> 演讲术 (用长词或正式词语的)词藻华丽的言辞</td>
</tr>
<tr>
<td>dermatologist</td>
<td><em>n.</em> 皮肤病学家 /‘dɝmə’tɑlədʒɪst/</td>
</tr>
<tr>
<td>hypodermic</td>
<td><em>adj.</em> (指药物、注射器等)皮下注射用的 <em>n.</em> 皮下注射,皮下注射器; /haɪpə(ʊ)’dɜːmɪk/</td>
</tr>
<tr>
<td>hippopotamus</td>
<td>/ˌhɪpə’pɒtəməs/ 🦛</td>
</tr>
<tr>
<td>rhinoceros</td>
<td><em>n.</em> 犀牛 脸皮和犀牛皮一样厚; /raɪ’nɒs(ə)rəs/</td>
</tr>
<tr>
<td><strong>inflammation</strong></td>
<td>/<em>ˌɪnfləˈmeɪʃən</em> / 炎症</td>
</tr>
<tr>
<td>irritation</td>
<td>n. 刺激；刺激物；激怒；兴奋</td>
</tr>
<tr>
<td>infection</td>
<td><em>n.</em> 〈医〉传染, 感染 传染病</td>
</tr>
<tr>
<td><strong>dermatitis</strong> / <em>ˌdɜːməˈtaɪtɪs</em> /</td>
<td><strong>Dermatitis</strong> is a medical condition which makes your skin red and painful. 皮炎</td>
</tr>
<tr>
<td><strong>ophthalmologist</strong> / <em>ˌɒfθælˈmɒlədʒɪst</em> /</td>
<td>An <strong>ophthalmologist</strong> is a medical doctor who specializes in diseases and problems affecting people’s eyes.  oculist 眼科医生</td>
</tr>
<tr>
<td><strong>optometrist</strong> / <em>ɒpˈtɒmɪtrɪst</em> /</td>
<td>An <strong>optometrist</strong> is someone whose job is to test people’s eyesight to see if they need glasses, and how strong their glasses should be. 验光师[美国英语]</td>
</tr>
</tbody>
</table>
</div>
<h1 id="quiz-1"><a href="#quiz-1" class="headerlink" title="quiz 1"></a>quiz 1</h1><h2 id="考试机经"><a href="#考试机经" class="headerlink" title="考试机经"></a>考试机经</h2><ul>
<li>鸭嘴兽一定要看</li>
<li>WPME 看词根——前 15 个看词根，后 15 个写意思</li>
<li>词根注意，末尾带s的，ogamos，这种一定带s</li>
<li>AWP 1 ~ 5 章</li>
<li>习语故事那还挺简单的，idiom3</li>
</ul>
<h2 id="鸭嘴兽"><a href="#鸭嘴兽" class="headerlink" title="鸭嘴兽"></a>鸭嘴兽</h2><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>platypus</td>
<td>n. 鸭嘴兽</td>
</tr>
<tr>
<td><strong>aquatic</strong> / <em>əˈkwætɪk</em> /</td>
<td>An <strong>aquatic</strong> animal or plant lives or grows on or in water. 水生的</td>
</tr>
<tr>
<td><strong>mammal</strong> / <em>ˈmæməl</em> /</td>
<td><strong>Mammals</strong> are animals such as humans, dogs, lions, and whales. In general, female mammals give birth to babies rather than laying eggs, and feed their young with milk. 哺乳动物</td>
</tr>
<tr>
<td><strong>endemic</strong> / <em>ɛnˈdɛmɪk</em> /</td>
<td>ADJ If a disease or illness is <strong>endemic</strong>in a place, it is frequently found among the people who live there. 常见的 [技术] If you say that a condition or problem is <strong>endemic</strong>, you mean that it is very common and strong, and cannot be dealt with easily. (情况、问题) 极为普遍的 [书面]</td>
</tr>
<tr>
<td>tasmania</td>
<td>n. 塔斯马尼亚岛（位于澳洲东南方）</td>
</tr>
<tr>
<td>sole</td>
<td>The <strong>sole</strong> thing or person of a particular type is the only one of that type. 惟一的 [ADJ n] The <strong>sole</strong> of your foot or of a shoe or sock is the underneath surface of it. 脚掌; 鞋底; 袜底</td>
</tr>
<tr>
<td>representative</td>
<td><em>n.</em> 代表 代理人 <em>adj.</em> 有代表性的, 典型的</td>
</tr>
<tr>
<td>monotypic taxon</td>
<td>单型分类群</td>
</tr>
<tr>
<td><strong>genus</strong> / <em>ˈdʒiːnəs</em> /</td>
<td>A <strong>genus</strong> is a class of similar things, especially a group of animals or plants that includes several closely related species. (尤指动植物的) 属 [技术]</td>
</tr>
<tr>
<td><strong>fossil</strong> / <em>ˈfɒsəl</em> /</td>
<td>N-COUNT A <strong>fossil</strong> is the hard remains of a prehistoric animal or plant that are found inside a rock. 化石</td>
</tr>
<tr>
<td><strong>echidna</strong> / <em>ɪˈkɪdnə</em> /</td>
<td>N any of the spine-covered monotreme mammals of the genera <strong>Tachyglossus</strong>of Australia and <strong>Zaglossus</strong> of New Guinea: family <strong>Tachyglossidae.</strong> They have a long snout and claws for hunting ants and termites 针鼹科哺乳动物 (Also called spiny anteater)</td>
</tr>
<tr>
<td><strong>extant</strong> / <em>ɛkˈstænt</em> /</td>
<td>ADJ If something is <strong>extant</strong>, it is still in existence, in spite of being very old. 现存的; 存世的 [正式]</td>
</tr>
<tr>
<td><strong>monotreme</strong> / <em>ˈmɒnəʊˌtriːm</em> /</td>
<td>any mammal of the primitive order <strong>Monotremata,</strong> of Australia and New Guinea: egg-laying toothless animals with a single opening (cloaca) for the passage of eggs or sperm, faeces, and urine. The group contains only the echidnas and the platypus (澳大利亚和新几内亚)单孔目哺乳动物</td>
</tr>
<tr>
<td><strong>prey</strong> / <em>preɪ</em> /</td>
<td>N-UNCOUNT-COLL A creature’s <strong>prey</strong>are the creatures that it hunts and eats in order to live. 猎物 V-I A creature that <strong>preys on</strong> other creatures lives by catching and eating them. 捕食  N-UNCOUNT You can refer to the people who someone tries to harm or trick as their <strong>prey</strong>. (某人的) 坑害对象   Like other monotremes, it senses prey through electrolocation.</td>
</tr>
<tr>
<td><strong>venomous</strong> / <em>ˈvɛnəməs</em> /</td>
<td>ADJ If you describe a person or their behaviour as <strong>venomous</strong>, you mean that they show great bitterness and anger toward someone. 恶毒的 ADJ A <strong>venomous</strong> snake, spider, or other creature uses poison to attack other creatures. 有毒的 venom</td>
</tr>
<tr>
<td><strong>spur</strong> / <em>spɜː</em> /</td>
<td>V-T If one thing <strong>spurs</strong> you <strong>to</strong> do another, it encourages you to do it. 鼓动; 激励 PHRASAL VERB <strong>Spur on</strong> means the same as . 鼓动; 激励 (同)(spur)  V-T If something <strong>spurs</strong> a change or event, it makes it happen faster or sooner. 使更快发生; 加速 [journalism]   n. 马刺；鼓舞，刺激；山坡 vi. 骑马疾驰；给予刺激 vt. 激励，鞭策；给…装踢马刺</td>
</tr>
<tr>
<td>hind foot</td>
<td>后足部</td>
</tr>
<tr>
<td><strong>beaver</strong> / <em>ˈbiːvə</em> /</td>
<td>N-COUNT A <strong>beaver</strong> is a furry animal with a big flat tail and large teeth. Beavers use their teeth to cut wood and build dams in rivers. 海狸   N-UNCOUNT <strong>Beaver</strong> is the fur of a beaver. 海狸毛皮 [oft N n]</td>
</tr>
<tr>
<td>egg-laying, <strong>duck</strong>-billed, <strong>beaver</strong>-tailed, <strong>otter</strong>-footed mammal</td>
<td>泰瑞</td>
</tr>
<tr>
<td><strong>baffle</strong> / <em>ˈbæfəl</em> /</td>
<td>V-T If something <strong>baffles</strong> you, you cannot understand it or explain it. 使困惑</td>
</tr>
<tr>
<td><strong>naturalist</strong> / <em>ˈnætʃrəlɪst</em> /</td>
<td>N-COUNT A <strong>naturalist</strong> is a person who studies plants, animals, insects, and other living things. 博物学家</td>
</tr>
<tr>
<td><strong>sew</strong> / <em>səʊ</em> /</td>
<td>V-T/V-I When you <strong>sew</strong> something such as clothes, you make them or repair them by joining pieces of cloth together by passing thread through them with a needle. 缝制; 缝补 swen</td>
</tr>
<tr>
<td>evolutionary biology</td>
<td>进化生物学</td>
</tr>
<tr>
<td><strong>iconic</strong> / <em>aɪˈkɒnɪk</em> /</td>
<td>ADJ An <strong>iconic</strong> image or thing is important or impressive because it seems to be a symbol of something. 偶像的; 图符的; 象征性的 [正式]</td>
</tr>
<tr>
<td><strong>Aboriginal</strong> / <em>ˌæbəˈrɪdʒɪnəl</em> /</td>
<td>An <strong>Aboriginal</strong> is an Australian Aborigine. 澳大利亚的土著人</td>
</tr>
<tr>
<td>mascot</td>
<td>N-COUNT A <strong>mascot</strong> is an animal, toy, or symbol which is associated with a particular organization or event, and which is thought to bring good luck. 吉祥物</td>
</tr>
<tr>
<td><strong>emblem</strong> / <em>ˈɛmbləm</em> /</td>
<td>N-COUNT An <strong>emblem</strong> is a design representing a country or organization. 徽章 N-COUNT An <strong>emblem</strong> is something that represents a quality or idea. 象征; 标志</td>
</tr>
<tr>
<td><strong>captive</strong> / <em>ˈkæptɪv</em> /</td>
<td>ADJ A <strong>captive</strong> person or animal is being kept imprisoned or enclosed. 被囚禁的; 被圈养的 [文学性]   Her heart had begun to pound inside her chest like a captive animal. 她心如鹿撞，怦怦跳个不停。  N-COUNT A <strong>captive</strong> is someone who is captive. 被囚禁者 ADJ A <strong>captive</strong> audience is a group of people who are not free to leave a certain place and so have to watch or listen. A <strong>captive</strong> market is a group of people who cannot choose whether or where to buy things. (观众) 不能随意离开的; (市场) 被垄断的 [ADJ n]</td>
</tr>
<tr>
<td><strong>vulnerable</strong> / <em>ˈvʌlnərəbəl</em> /</td>
<td>ADJ Someone who is <strong>vulnerable</strong> is weak and without protection, with the result that they are easily hurt physically or emotionally. 易受伤害的</td>
</tr>
<tr>
<td>as of</td>
<td>自……起；到…时候为止</td>
</tr>
<tr>
<td><strong>upgrade</strong></td>
<td>V-T If equipment or services <strong>are upgraded</strong>, they are improved or made more efficient. 使升级 [usu passive]</td>
</tr>
</tbody>
</table>
</div>
<h2 id="WPME"><a href="#WPME" class="headerlink" title="WPME"></a>WPME</h2><p>给意思就填词根，给词根就写意思</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>词根</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ego</td>
<td>self, I</td>
</tr>
<tr>
<td>alter</td>
<td>other</td>
</tr>
<tr>
<td>Intro-</td>
<td>inside</td>
</tr>
<tr>
<td>Extro-</td>
<td>outside</td>
</tr>
<tr>
<td>verto</td>
<td>turn</td>
</tr>
<tr>
<td>Ambi-</td>
<td>both</td>
</tr>
<tr>
<td>misein</td>
<td>hate</td>
</tr>
<tr>
<td>anthropos</td>
<td>mankind</td>
</tr>
<tr>
<td>gyne</td>
<td>woman</td>
</tr>
<tr>
<td>gamos</td>
<td>marriage</td>
</tr>
<tr>
<td>asketes</td>
<td>monk</td>
</tr>
<tr>
<td>centrum</td>
<td>center</td>
</tr>
<tr>
<td>mania</td>
<td>madness</td>
</tr>
<tr>
<td>dexter</td>
<td>Right hand</td>
</tr>
<tr>
<td>sinister</td>
<td>left hand</td>
</tr>
<tr>
<td>gauche</td>
<td>left hand</td>
</tr>
<tr>
<td>droit</td>
<td>right hand</td>
</tr>
<tr>
<td>monos</td>
<td>one</td>
</tr>
<tr>
<td>bi-</td>
<td>two</td>
</tr>
<tr>
<td>polys</td>
<td>many</td>
</tr>
<tr>
<td>andors</td>
<td>male</td>
</tr>
<tr>
<td>-ist</td>
<td>Person who</td>
</tr>
<tr>
<td>-y</td>
<td>practice, custom, etc</td>
</tr>
<tr>
<td>24. -ous</td>
<td>adjective sufix</td>
</tr>
<tr>
<td>25. -iy</td>
<td>quality, condition, etc. (noun sufhx)</td>
</tr>
<tr>
<td>internus, intern</td>
<td>inside</td>
</tr>
<tr>
<td>gyne</td>
<td>woman</td>
</tr>
<tr>
<td>-ician</td>
<td>expert</td>
</tr>
<tr>
<td>paidos</td>
<td>child</td>
</tr>
<tr>
<td>ped-, pedis</td>
<td>foot</td>
</tr>
<tr>
<td>agogos</td>
<td>leading</td>
</tr>
<tr>
<td>derma</td>
<td>skin</td>
</tr>
<tr>
<td>ophthalmos</td>
<td>eye</td>
</tr>
<tr>
<td>logos</td>
<td>science or study</td>
</tr>
<tr>
<td>opsis, Optikos</td>
<td>appearance, sight, view</td>
</tr>
</tbody>
</table>
</div>
<h2 id="AWP"><a href="#AWP" class="headerlink" title="AWP"></a>AWP</h2><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>brevity</td>
<td>briefness</td>
</tr>
<tr>
<td>clemency</td>
<td>mercy in judging</td>
</tr>
<tr>
<td>frivolous</td>
<td>不重要的，轻佻的</td>
</tr>
<tr>
<td>heist</td>
<td>抢劫</td>
</tr>
<tr>
<td>lampoon</td>
<td>讽刺</td>
</tr>
<tr>
<td>querulous</td>
<td>抱怨，爱发牢骚，易怒</td>
</tr>
<tr>
<td>reproach</td>
<td>责备，申斥，耻辱</td>
</tr>
<tr>
<td>respite</td>
<td>time off</td>
</tr>
<tr>
<td>torpor</td>
<td>drowsiness(睡意，困倦)</td>
</tr>
<tr>
<td>unscathed</td>
<td>未受伤的</td>
</tr>
</tbody>
</table>
</div>
<h2 id="试卷拟合"><a href="#试卷拟合" class="headerlink" title="试卷拟合"></a>试卷拟合</h2><div class="table-container">
<table>
<thead>
<tr>
<th>题目</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>monogamy</strong> / <em>mɒˈnɒɡəmɪ</em> /</td>
<td>N-UNCOUNT <strong>Monogamy</strong> is used to refer to the state or custom of having a sexual relationship with only one partner. 单一配偶制</td>
</tr>
<tr>
<td><strong>cardiology</strong> / <em>ˌkɑːdɪˈɒlədʒɪ</em> /</td>
<td>N-UNCOUNT <strong>Cardiology</strong> is the study of the heart and its diseases. 心脏病学</td>
</tr>
<tr>
<td>cardiologist</td>
<td><em>n.</em> 心脏病专家</td>
</tr>
<tr>
<td>cardiologram</td>
<td><em>n.</em> 心电图</td>
</tr>
<tr>
<td><strong>cardiograph</strong> / <em>ˈkɑːdɪəʊˌɡrɑːf, -ˌɡræf</em> /</td>
<td>N an instrument for recording the mechanical force and form of heart movements 心(动)电(流)图</td>
</tr>
<tr>
<td><strong>psychiatrist</strong> / <em>saɪˈkaɪətrɪst</em> /</td>
<td>N-COUNT A <strong>psychiatrist</strong> is a doctor who treats people suffering from mental illness. 精神病医生</td>
</tr>
<tr>
<td>obelity</td>
<td>n. 肥大，肥胖</td>
</tr>
<tr>
<td><strong>demagoguery</strong></td>
<td><em>n.</em> 群众煽动,散布谣言,煽动行为</td>
</tr>
<tr>
<td>altruism</td>
<td>N-UNCOUNT <strong>Altruism</strong> is unselfish concern for other people’s happiness and welfare. 利他主义</td>
</tr>
<tr>
<td><strong>altercation</strong> / <em>ˌɔːltəˈkeɪʃən</em> /</td>
<td>N-COUNT An <strong>altercation</strong> is a noisy argument or disagreement. 吵嘴; 争辩[正式] [oft N ‘with/between’ n]</td>
</tr>
<tr>
<td><strong>orthodontist</strong> / <em>ˈɔːθəˌdɒntɪst</em> /</td>
<td>N-COUNT An <strong>orthodontist</strong> is a dentist who corrects the position of people’s teeth. 矫形牙医</td>
</tr>
<tr>
<td><strong>philanthropist</strong> / <em>fɪˈlænθrəpɪst</em> /</td>
<td>N-COUNT A <strong>philanthropist</strong> is someone who freely gives money and help to people who need it. 慈善家</td>
</tr>
<tr>
<td><strong>ambivert</strong> / <em>ˈæmbɪˌvɜːt</em> /</td>
<td>N a person who is intermediate between an extrovert and an introvert 既外向又内向的人 [psychol]</td>
</tr>
<tr>
<td><strong>ambidextrous</strong> / <em>ˌæmbɪˈdɛkstrəs</em> /</td>
<td>ADJ Someone who is <strong>ambidextrous</strong>can use both their right hand and their left hand equally skilfully. 两只手都很灵巧的 [usu v-link ADJ]</td>
</tr>
<tr>
<td><strong>taxidermist</strong> / <em>ˈtæksɪdɜːmɪst</em> /</td>
<td>N-COUNT A <strong>taxidermist</strong> is a person whose job is to prepare the skins of dead animals and birds and fill them with a special material to make them look as if they are alive. 动物标本制作师</td>
</tr>
<tr>
<td><strong>exodontist</strong></td>
<td><em>n.</em> 拔牙专家</td>
</tr>
<tr>
<td>verto</td>
<td>turn</td>
</tr>
<tr>
<td>dexter</td>
<td><em>adj.</em> 右侧的,右边的,〈废〉幸运的,吉利的</td>
</tr>
<tr>
<td>sinister</td>
<td><em>adj.</em> 危险的, 不吉祥的, 凶兆的, 险恶的</td>
</tr>
<tr>
<td>phyche</td>
<td>n. 灵魂；心智</td>
</tr>
<tr>
<td>-ium</td>
<td></td>
</tr>
<tr>
<td>outward</td>
<td><em>adj.</em> 外出的, 往外的 外表的, 表面的</td>
</tr>
<tr>
<td>bath</td>
<td></td>
</tr>
<tr>
<td>love</td>
<td></td>
</tr>
<tr>
<td>midwife</td>
<td></td>
</tr>
<tr>
<td>leading</td>
<td></td>
</tr>
<tr>
<td>inflammation</td>
<td><em>n.</em> &lt;医&gt;炎症</td>
</tr>
<tr>
<td>vision</td>
<td></td>
</tr>
<tr>
<td>age</td>
<td></td>
</tr>
<tr>
<td>beauty</td>
<td></td>
</tr>
<tr>
<td>ugly</td>
<td></td>
</tr>
<tr>
<td>comivial</td>
<td><em>adj.</em> 好交际的 随和的,活跃的， 欢乐的</td>
</tr>
<tr>
<td>exuberance</td>
<td><em>n.</em> 兴高采烈; 活跃; 愉快; 茁壮</td>
</tr>
<tr>
<td>insolvent</td>
<td><em>adj.</em> 无力偿付债务的，破产的 <em>n.</em> 无力偿还债务的人；破产者</td>
</tr>
<tr>
<td><strong>unscathed</strong> / <em>ʌnˈskeɪðd</em> /</td>
<td>ADJ If you are <strong>unscathed</strong> after a dangerous experience, you have not been injured or harmed by it. 未受伤的; 未受伤害的 [ADJ after v, v-link ADJ]</td>
</tr>
<tr>
<td><strong>surreptitious</strong> / <em>ˌsʌrəpˈtɪʃəs</em> /  TEM8</td>
<td>ADJ A <strong>surreptitious</strong> action is done secretly. 秘密的 [ADV with v]</td>
</tr>
<tr>
<td><strong>unassailable</strong> / <em>ˌʌnəˈseɪləbəl</em> /</td>
<td>ADJ If you describe something or someone as <strong>unassailable</strong>, you mean that nothing can alter, destroy, or challenge them. 不可改变的; 攻不破的; 不容置疑的</td>
</tr>
<tr>
<td><strong>misanthrope</strong> / <em>ˈmɪzənˌθrəʊp</em> /</td>
<td>N-COUNT A <strong>misanthrope</strong> is a person who does not like other people. 遁世者; 厌恶世人者 [正式]</td>
</tr>
<tr>
<td><strong>levity</strong> / <em>ˈlɛvɪtɪ</em> /</td>
<td>N-UNCOUNT <strong>Levity</strong> is behaviour that shows a tendency to treat serious matters in a nonserious way. 轻浮行为[文学性]</td>
</tr>
<tr>
<td><strong>proximity</strong> / <em>prɒkˈsɪmɪtɪ</em> /</td>
<td>N-UNCOUNT <strong>Proximity</strong> <strong>to</strong> a place or person is nearness to that place or person. 接近 [正式]</td>
</tr>
<tr>
<td><strong>voracious</strong> / <em>vɒˈreɪʃəs</em> /</td>
<td>ADJ If you describe a person, or their appetite for something, as <strong>voracious</strong>, you mean that they want a lot of something. 贪婪的; 如饥似渴的 [文学性]</td>
</tr>
<tr>
<td><strong>altruism</strong> / <em>ˈæltruːˌɪzəm</em> /</td>
<td>N-UNCOUNT <strong>Altruism</strong> is unselfish concern for other people’s happiness and welfare. 利他主义</td>
</tr>
<tr>
<td><strong>graffiti</strong> / <em>ɡræˈfiːtiː</em> /</td>
<td>N-UNCOUNT-COLL <strong>Graffiti</strong> is words or pictures that are written or drawn in public places, for example on walls or posters. 涂鸦</td>
</tr>
<tr>
<td>punk</td>
<td>N-UNCOUNT <strong>Punk</strong> or <strong>punk rock</strong> is rock music that is played in a fast, loud, and aggressive way and is often a protest against conventional attitudes and behaviour. Punk rock was particularly popular in the late 1970s. 朋客摇滚乐 N-COUNT A <strong>punk</strong> or a <strong>punk rocker</strong> is a young person who likes punk music and dresses in a very noticeable and unconventional way, for example, by having brightly coloured hair and wearing metal chains. 朋客青年</td>
</tr>
<tr>
<td>all over the place</td>
<td>到处</td>
</tr>
<tr>
<td>catch sb red-handed</td>
<td>逮个正着</td>
</tr>
<tr>
<td>get the upper hand</td>
<td>占上风; 占优势; 取得上风; 具有优势;</td>
</tr>
<tr>
<td>handcuff</td>
<td>手铐</td>
</tr>
<tr>
<td>convict</td>
<td></td>
</tr>
<tr>
<td>community service</td>
<td></td>
</tr>
<tr>
<td>can’t stand</td>
<td></td>
</tr>
<tr>
<td>hit the ceiling</td>
<td>勃然大怒, 极度激动</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Probability and Statistics</title>
    <url>/2022/02/23/Lecture/probabilityAndStatistic/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><ul>
<li>梁衡老师的概统讲的很好，少数我想线下听的课</li>
<li>听人说，梁衡老师的考试很能区分你听没听课，下没下功夫，反正没见人 rush 成功的</li>
<li>把时间用在小测和习题课上可比卷美赛国赛好多了</li>
<li>概统对机器学习意义大多了</li>
</ul>
<h1 id="课程学习的观念"><a href="#课程学习的观念" class="headerlink" title="课程学习的观念"></a>课程学习的观念</h1><ul>
<li><p>数学成熟的提升：</p>
<blockquote>
<p>用到数学的时候我不会害怕，真的知道它，它是你的工具，你能够驾驭</p>
</blockquote>
</li>
<li><p>什么是微积分：</p>
<blockquote>
<p>微积分（Calculus），数学概念，是高等数学中研究函数的微分(Differentiation)、积分(Integration)以及有关概念和应用的数学分支。 它是数学的一个基础学科，内容主要包括极限、微分学、积分学及其应用。 微分学包括求导数的运算，是一套关于变化率的理论。</p>
</blockquote>
</li>
<li><p>课堂笑话：</p>
<blockquote>
<p>你是个程序员，说出来就放你走，说不出来就枪毙你！</p>
<p>js 里 9+“1” 等于多少？</p>
</blockquote>
</li>
</ul>
<h1 id="离散型随机变量"><a href="#离散型随机变量" class="headerlink" title="离散型随机变量"></a>离散型随机变量</h1>]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript oop &amp; JavaScript in Web Browser</title>
    <url>/2022/02/23/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/JS_oop/</url>
    <content><![CDATA[<h1 id="JavaScript-的第一原则"><a href="#JavaScript-的第一原则" class="headerlink" title="JavaScript 的第一原则"></a>JavaScript 的第一原则</h1><p>这里，让我们首先铭记这样的一句话：</p>
<blockquote>
<p> 函数是 JavaScript 的一等公民，对象由函数创建。</p>
</blockquote>
<p>或许我们常见的创建对象的方式是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&quot;foobar&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>但这只是方便编程的语法糖，我们这里希望使用下述更为本质的创建方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.foo = <span class="number">1</span>;</span><br><span class="line">a.bar = <span class="string">&quot;foobar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">b[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">b[<span class="number">2</span>] = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>而这里 <code>Object</code> 和 <code>Array</code> 是两个函数，一定程度上可以理解为构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Object</span>; <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Array</span>; <span class="comment">// function</span></span><br></pre></td></tr></table></figure>
<h1 id="原型和构造函数"><a href="#原型和构造函数" class="headerlink" title="原型和构造函数"></a>原型和构造函数</h1><p>构造函数的作用是构建一个新对象，比如说我们可以写一个根据传入参数构造具有一种特定形式的对象的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = &#123;&#125;;</span><br><span class="line">    res.name = _name;</span><br><span class="line">    res.age = _age;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = createStudent(<span class="string">&quot;Ashitemaru&quot;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>
<p>这个函数就可以接受一个学生的名字和年龄，构造出一个包含这两个信息的、描述这个学生的对象并返回。这类需求，即根据信息构造指定形式对象的需求是很常见的，所以 JavaScript 就提供了语法上的支持以将其与普通函数区分开。比如上述函数就可以写为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = _name;</span><br><span class="line">    <span class="built_in">this</span>.age = _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student(<span class="string">&quot;Ashitemaru&quot;</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure>
<p>这里使用 <code>new</code> 关键字调用构造函数，这种调用方式就区分了构造函数和普通函数。并且，构造函数内部不用我们再自己构造一个空对象，而是直接使用 <code>this</code> 对象，并且在使用 <code>new</code> 调用的时候，函数会自动将 <code>this</code> 返回。实际上，如果不用 <code>new</code> 关键字调用构造函数也是合法的，这样的话该函数将会作为普通函数执行并返回 <code>undefined</code>。</p>
<hr>
<p><strong>Warning: 语法缺陷！</strong></p>
<p>如果我们不使用 <code>new</code> 关键字调用上述构造函数，根据先前的知识，这里 <code>this</code> 就会指向全局对象，从而语句 <code>this.name = _name</code> 将会构造出一个新的全局对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = _name;</span><br><span class="line">    <span class="built_in">this</span>.age = _age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = Student(<span class="string">&quot;Ashitemaru&quot;</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">stu; <span class="comment">// undefined</span></span><br><span class="line">name; <span class="comment">// Ashitemaru</span></span><br></pre></td></tr></table></figure>
<p>这是一种危险的行为，因为其可以污染全局作用域。</p>
<p><strong>目前大部分代码检查工具都会要求构造函数名称首字母大写以示区分，基于此，会强制检查构造函数是否使用 new 关键字调用。</strong></p>
<hr>
<p><strong>所有函数都可以是构造函数</strong></p>
<p>实际上一般函数也可以用 <code>new</code> 调用，其也会触发一次对象生成并返回生成的对象。而由于 <code>new</code> 关键字调用会让函数强行返回 <code>this</code> 对象从而覆盖掉原定义的返回值，但是由于一般函数内部一般不会设定 <code>this</code> 对象的属性，所以使用 <code>new</code> 关键字调用一般函数一般会得到一个空对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>现在我们回退一步，思考一下面向对象的意义。面向对象编程的一个重要的思维出发点是将具有类似抽象特征的事物归纳为一个<strong>类</strong>，根据一个定义好的类，可以创建这个类的对象，这个对象会满足类定义的所有要求。最初的 JavaScript 语言并没有类的概念，其践行面向对象思维的方式是采用<strong>原型</strong>。</p>
<p>原型的含义就是作为原型的这个对象所衍生出来的各个对象都与之有联系，满足原型要求的约束。我们又说过所有的对象都是通过函数生成，不妨让所有函数都具有一个 <code>prototype</code> 属性指向一个原型对象 <code>obj</code>，用这个函数构造出来的所有对象都以 <code>obj</code> 为原型，满足其约束。</p>
<p>比如说“学生都应当学习”，我们希望所有通过 <code>Student</code> 函数构造出来的对象都有 <code>study()</code> 方法。除去在构造函数中这样定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = _name;</span><br><span class="line">    <span class="built_in">this</span>.age = _age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.study = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们还可以在 <code>Student</code> 的 <code>prototype</code> 属性下定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Student.prototype.study = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样，通过 <code>Student</code> 函数构造出来的对象就都有了 <code>study()</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = _name;</span><br><span class="line">    <span class="built_in">this</span>.age = _age;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.study = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu = <span class="keyword">new</span> Student(<span class="string">&quot;Ashitemaru&quot;</span>, <span class="number">22</span>);</span><br><span class="line">stu.study(); <span class="comment">// studying...</span></span><br></pre></td></tr></table></figure>
<p>我们可以运行下述代码确定 <code>stu</code> 是以 <code>Student.prototype</code> 为原型构造出来的对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stu.__proto__ === Student.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<hr>
<p><strong>Warning!</strong></p>
<p><code>__proto__</code> 是即将废弃的属性，并且和 Python 类似，其名称使用双下划线包围实际上就代表了其理应私有，不能直接访问。</p>
<hr>
<p>另外，这里介绍 <code>constructor</code> 属性。所有对象都具有这个属性，其指向这个对象的构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stu.constructor === Student; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>并且由于原型也可以认为是通过构造函数构造，所以：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Student.prototype.constructor === Student; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><img src="https://docs.net9.org/static/languages/javascript/proto-triangle.png" style="zoom: 50%;" /></p>
<p>现在我们就可以介绍 ES6 的类语法糖到底是怎么一回事了：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">_name, _age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = _name;</span><br><span class="line">        <span class="built_in">this</span>.age = _age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">study</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实际上是下述代码（一种可能）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">_name, _age</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = _name;</span><br><span class="line">        <span class="built_in">this</span>.age = _age;</span><br><span class="line">    &#125;</span><br><span class="line">    Student.prototype.study = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;studying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Student;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>
<p>可以看见，ES6 的类中定义的类方法就会被挂载到构造函数的 <code>prototype</code> 属性下。这里尤其注意闭包的使用，这样才能保证作用域正确。</p>
<h1 id="函数的原型"><a href="#函数的原型" class="headerlink" title="函数的原型"></a>函数的原型</h1><p>上面我们都是使用的自定义构造函数讲解的原型，那么函数也是对象，他们都应该有原型。</p>
<p>JavaScript 的函数的包装类为 <code>Function</code>，<code>Function</code> 是函数的构造函数，所以实际上声明函数还有一种写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;return x + y&quot;</span>);</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>但显然不推荐这样写。</p>
<p>按照一个对象的 <code>__proto__</code> 指向其构造函数 <code>prototype</code> 的原则，显然有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">foo.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>而显然，所有构造函数也是函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>这里就会出现这样的环状引用，即 <code>Function.__proto__ === Function.prototype</code>。</p>
<p>另外，<code>Function</code> 是所有函数的构造函数，所以显然有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">foo.constructor === <span class="built_in">Function</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.constructor === <span class="built_in">Function</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>现在我们可以将这些关系记录下来，这里我们将 <code>__proto__</code> 的指向使用红色箭头，这么做的原因后续讲解。同时，我们将一般对象、原型、构造函数的外框颜色作出区分，后续我们也将沿用这一配色：</p>
<p><img src="https://docs.net9.org/static/languages/javascript/function-proto.png" style="zoom:60%;" /></p>
<h1 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h1><p>上面讨论函数的原型，但是还有一个问题没有解决，那就是原型也是对象，那么原型的原型是什么？</p>
<p>JavaScript 认为所有的原型均是由 <code>Object</code> 直接产生的，也就是说和 <code>new Object()</code> 创建出来的无异，只不过后续增添若干属性。在这样的设计思想下，所有原型的 <code>__proto__</code> 均指向 <code>Object.prototype</code>。但有个例外，<code>Object.prototype</code> 也是原型，但是其 <code>__proto__</code> 指向 <code>null</code>。也就是说：</p>
<p><img src="https://docs.net9.org/static/languages/javascript/proto-proto.png" style="zoom:50%;" /></p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HCI Tutorial</title>
    <url>/2022/02/22/Lecture/HCI/</url>
    <content><![CDATA[<h1 id="课程概况"><a href="#课程概况" class="headerlink" title="课程概况"></a>课程概况</h1><ul>
<li>由于前 12 周结课了，所以每周都上三小节</li>
<li>课程评分 20% 的论文阅读，80% 的小组作业</li>
<li>课程项目</li>
</ul>
<blockquote>
<p>3 ~ 4 人小组，以情景感知与自然交互为主题，平台为智能手机或者 VR</p>
<p>确定题目，交互设计，原型实现，用户评测</p>
</blockquote>
<ul>
<li>什么样的交互更 eloquent ？</li>
</ul>
<h2 id="情景感知"><a href="#情景感知" class="headerlink" title="情景感知"></a>情景感知</h2><ul>
<li>拍拍扫码——帮助雨课堂答题</li>
<li>新的交互方式 or 基于情景的服务推荐</li>
<li>VT loT 平台 </li>
</ul>
<h2 id="学习期望"><a href="#学习期望" class="headerlink" title="学习期望"></a>学习期望</h2><ul>
<li>人机交互的基本认识</li>
<li>人机交互的典型问题</li>
<li>用户实验和评测方法</li>
<li>交互创新的前沿发展</li>
<li>交互技术的创新过程</li>
</ul>
<h2 id="论文阅读"><a href="#论文阅读" class="headerlink" title="论文阅读"></a>论文阅读</h2><ul>
<li>阅览近三年的 CHI 和 UIST 中至少一个会议</li>
<li>从中选择一篇自己感兴趣的论文详细阅读并做分享</li>
<li>每周 6 到 8 个同学，从第二周开始</li>
<li>文档里给出了链接，CHI 也会给出参考的 session</li>
<li>分享论文内容——七分钟内容，三分钟提问</li>
<li>视频的 DEMO，标题作者，研究背景，基础知识，已有工作，研究问题，核心内容，解决思路，技术路线，设计方案，解决效果，实验设计，实际应用，讨论评估，未来启示</li>
</ul>
<h1 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h1><h2 id="Mental-Model"><a href="#Mental-Model" class="headerlink" title="Mental Model"></a>Mental Model</h2><ul>
<li>心理模型</li>
<li>触摸，界面</li>
</ul>
<h1 id="Fitts’-Law"><a href="#Fitts’-Law" class="headerlink" title="Fitts’ Law"></a>Fitts’ Law</h1><ul>
<li><p>Speed-accuracy trade-of  in human motor control</p>
</li>
<li><p>人的客观运动规律</p>
</li>
<li>移动时间与幅度 A，物体宽度 B 的关系</li>
<li>信息容量，信息的单位是什么 bit</li>
<li>先拿到了数据，然后才开始设定模型</li>
</ul>
<script type="math/tex; mode=display">
I_d:\text{index of difficulty}\\
I_d = - \Large{log_2^{\frac{W_s}{2A}}}\text{bits/response}</script><ul>
<li><p>从 A 长度的区间选出 W 长度的物体。</p>
</li>
<li><p>运动控制学的基本规律——人在做运动控制时的普遍策略</p>
</li>
<li><p>人在做运动控制时是一个两阶段优化，大范围粗调整，小范围细调</p>
<script type="math/tex; mode=display">
T=\large{a+b\log_2^{\frac{A}{w}+1}}</script><ul>
<li>T 是移动时间，A 是距离，W 是目标大小，a 和 b 是参数</li>
</ul>
</li>
<li><p>鼠标的参数比起触摸板更大，因为鼠标还需要点击</p>
</li>
<li>MAC 把菜单放在最左上角，实际上是增大了 W，因为角落的目标大小几乎是无限大的，这也是苹果的一大优势</li>
</ul>
<h1 id="Hick’s-Law"><a href="#Hick’s-Law" class="headerlink" title="Hick’s Law"></a>Hick’s Law</h1><ul>
<li>从 n 个里面选出 1 个的时间</li>
</ul>
<script type="math/tex; mode=display">
Rt=a+b\log_2^{(n+1)}</script><h1 id="Steering-Law"><a href="#Steering-Law" class="headerlink" title="Steering Law"></a>Steering Law</h1><ul>
<li>管道移动</li>
</ul>
<script type="math/tex; mode=display">
T=a+b\frac{l}{d}</script><ul>
<li>l 是管道长度，d 是管道宽度</li>
</ul>
<h1 id="Extends-Fitts’-Law"><a href="#Extends-Fitts’-Law" class="headerlink" title="Extends Fitts’ Law"></a>Extends Fitts’ Law</h1><script type="math/tex; mode=display">
MT = A+B\times log(\frac{A}{\sqrt{2\pi e}\theta}+1)</script><ul>
<li>人还会点错东西，比如打字</li>
</ul>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>HCI</tag>
      </tags>
  </entry>
  <entry>
    <title>答疑坊数据统计</title>
    <url>/2022/02/22/CS/%E5%85%B6%E4%BB%96/Tsing_answer_analysis/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="815513e11fc67fe8b889f162e8860307f50c6505df7491459a1725a553a0849a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>Python</tag>
        <tag>答疑坊</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概慕课答案</title>
    <url>/2022/02/21/Lecture/answer_for_mao/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c36724daa86b85d212c702ad01f2fef544bfc08abfd62937036f7536e5ccc500">7feab2e74e7ac8c26f5b44aac0c37567a8bb91f75c0616fb26c89457b269f277b1bd162e4785699b23cfd44eaac69cc77af02a85a3746b6f3f1a0cc3ff9d6087638b59345ce94bd357f8ab07e35150bc726c65920df86b21ddc5064a485dbf31fa1015142bdb191764866fb6c3b44aa97dd68d0e073a3165b5c6f64e188da16677cb8c02c0401d9f4c891c9e246c62d40b40047b24741551e96b95aa2c8a5d972d03f23137301ac707223a889566a3e04f694456110c0392ddd0485caa3122db4c691031d1733bb4376527fe1cb22664c2e30cc9f6e43e98caad6964a2d2aa3a8ac1941ad4cb9b3ade3bd03e6ee71b5aff02b1cf99fa3d0036d47648654436dc197bbfbe02694181141ce7721839840d6522b60a49e52c703f56ce4c64e30207a8cff14cfc59d9f104b183c5ae23a9373f09b0fc98f207716f0e831f4af41279a5f33bcac8a0bedca71913f3af8e21ee2058b7c33286af702c91656a3b53e044a2af7fcb21317a663ceaf21e0a6c36f6f34ed582b0e1ea085cea535e4ef4a84e6dc1f4d4021829367084af0401de9bcff2f15eaab1799e04ab94f93036c8cb47b2badcc12ac012aa4733f45bde44b3c605ca171454bae4dceebf07fe80ecd1b0d98b3a7cf0bce045414b2d3ffe950804f9bf0e3cabf75f9c827c8ddb876977fbede149370c7d413efff6bef2d14a668bca1023693d22f703feccd96312c6d9db35551afc8d023f599e65056230d8a514629700b5877d5ab008d39c6623212c6dab76062154900e69c6ea3e5ba495befc759979fa391c68a7f73b491091499bd5baa2d455fce1749c50b56766da6e41826b109565d5685d2daab2cdca417fa8beab0c44a838e77ea5ba99cdedc946e7a67940795e44f090a9cf85c8833c622046d3d0ab65281ccab59977ab0f27c023ededb4c082962b02ee50d83e7b0fb2bf42f80184d72446e8803fb224d487a48dfb640f8a2b50475874154de9a40d8202e4e44881d38ede129930336a995016ba721716fd42f4e1e988552410967548dfdba8ceca00ee8664465847d030cc7859ace1ea284dab79560307532b713af3a39acb5221666cced104746582fcdf491875d814db10b4883661ccb87daf62ab4ec6deab0a88f1a38d11bd61cfe06b31ad286f218ad48c635693f50ee14068212bf811f592f1a85c0a63e126866a2d83e72020307692b3419f4a7d61c0dcd939af80c00bbb91d1dca9d8f76263c40b2c28fe7fe6b4ab4627a8fbba59bd04dfa4bfa8e0422b9c9bc2e7cb2d843f2a7776998a1c5e0bc77273b6d59bc3091c606393ba574df653b01dbe60ac84655bf81b45491b85c08884be1a5ad1249dbd71b75b4743ec077d10ff3d59f948389d60daf18c4ced82451ca73844cc346faf83b495df0863bbd143de0eee22dfdcb115d147cf5770d1530b622aa92a92b41423586ef5ddac28855ad47b9fc1b0aea28adc43499720db007c5fe49d95a7f8504bdc7d1191b1748250055996672f5ef48870387895c2cae139a7a4ba2f7e8d47f508e2429a7cfc95e436ebb349f266b8adeeda241682d7d51d88f2152ef1146c3a44cc7df81a1bd88170ff82bfaa2f9c99d782d0ebfd37000baf57d82399c921b98d643cc78b7cbea1e5a8c6f8810bf87735911f4795becbe69ae5e15e9a923b0c223272dcf1013b2f935d326ab24a0f14da793cc91776b082a9f54c827e0f3729fe80403414bb38b8c048a82504bc2cde73c2895f7f71fb1b02e1d6454809694713f75373031af63d2da7afd338550a05bb7a1655709bf76b36337df9fec3964f9a61db29febb147688a5cf9103f8d6602e1b280981434e55009403ba197285dabac668f60281da35cc19b2908732ffa457cea2e875a10b4f3a9173213bb6a9f96067e5e6c3c6345252ef42e52ad269224c69d674806f43a1dded333124492b933046a28c507aa87671248f6f9e82635be108fde25dadb3593bdd24e135383bca1484b108c7980ff7d7a5ebd59ee0f8cdfd0a84c0a05795ae65ffe24ec9375cdd143664475d14765f7483bf9432c0e5fd8af8975467457b1b1ae9541c66470926bf4965fa35b3e0257123f11fea765bd0d45c949ab9a25061e48bddf4d6a930928236ccc1db90ae05f70669002e18208e243ab70797cec7874f2152fc60c7ab6ab35652388042d0ac8717b7c60a0e8fcf5fbd267b8bc6669502b2b7b7c2bfe746a7dd9d94812bf6eebec8736f5d2fe260016ca75e970aaec80b4bc409aa368fa9730679ba14dd810a34f09ac24ca45051cda45dc0aeca41baad34f244ca4dff34db9341f9aa256f2e564d88a1334326249345f8338536bd884740ae1be8a1d0f782506cea2f5ad7938c24feb99f0530f8508e8a0fd97c33e769e79e084f159297db64a255c50832b00367087b962057b7c2d530fa59543f553643ac03280c887065a72a92761109d71d8eb171770e66f98beb9dd4b2638f6d2cb8b7039bd1fa3f6dd1364723bad3fc1c8ceff1475fdb70bf59ddc9347c4a3f22890f6182bbf44bb5d3b65089c6763ee0a7ebdd953b5aaebab66fe62c072d64881e48179cbb576fc02bee64e4c9875cea85f379a21c92b33a6137174b5858209968afb64afa7b844380b994b82f5b815d1150b93be3ed50676fddcb1caea8265a4f5a65d22ef149736cbe9b5beddc1c3a0d9d5306a782f9406580d726fc1f23d220d961927eed4a5d500a6d66877ebd374eddee71c926219cba492a1e5b27c4c1a0e506bf3a74e9f53d06b75dde8742be049e35afba0a3d6c0185a4f95f6d7aa8420f1f3a2c6c7fa6e9cf660c9e9f30c3b9dab9af16fad69187035d986daf5ab978eee632d824ba1572cd625cb170c648ed4302775efb9a6dfb32b4654890a2a45ab99b51dca3374972a518457946ddde33a734b61962614b8003a1ac0435f7e50acf581af444ffb3715521ade4b2cd683685b01d8f75d6571e1a76cbfe6ccefc29b06d98a19ceaa43d518a753bf64923814279c5fda2544d58fb37aecf34f6d466fa8eca5498beeb3164825310dec257d776f37fdcdc5655d732e0a8d924ed6f35cad465ee953f6544342e14091fe83c8522047c194c89f0f6a4453f282792aa4a3fee9f49ed07c144b68d48e10c33a63f8c84410d6d31b2fae48baa8da64a9d4873030d9ae57c41928a9728dcc261c86f2cc07b8272eeef3306ecdbb498042de69cb2f630acdf9ab180f281b134ce181960f5f8679f8f19417d9ea3fbd7e81567c8607742636a0f717073d46c66471e46c3edb8a23b2d1945ce71efaf674a8de17e153d23974e979b168e2351fb56f3f88c96cb9f338038ba6bfe75bb5775836cc23e1e664c92708c75b8092f478a7e05f3904e499b5e6952205d7d578d80fd7ab7cd849e6043a217f7b7cfa43e61f4a2b7eab8c1a191c4ca58a74b97a0372f881f3ae4913eea7cefbe1959ecef9671beaa0522b4e66e0e245890d71c3fe2a5ab11193a91fda5dff577c6931d5cb1541e183f64d19a8be8060cc3bd691172267119039e8be63abb018766e59bfc20eb92103982496d1dff8cbc92c2e7d2dbbb0c4c8721569c96197ef014a1e8f957594639f68068db83ae314db7bad1bec8192f0d803e87a3320a21af11cddfef721c9b035061777df94c223e0ee54cd3471e6522c9600383d32b71836c63ec6fac360a0bb84ff489fe363544a8849396f539c8c1d528ed358846a743727e18d2e4cc1029bc668fc24e59adc7dff975de2a65c55ae7730ad776aab528257f7870aa5136af86f0548e0e7e389b124ea2fa91ced1d42b97d30d1a5b96e3a3b5061b912bcbf1fa5882301116c0a0830bc1d2726a887fda0521803cc16e6a6250c064138884ebdf55b1e636f6a76c254251d78a3f49db7cb3f663b6251bff5377e0ea605def8f321e16c926665174bca5cceacc170e344c409da4e65ea7d3a8c3ba9df8c4b7b5150804570a1499e9798c3fbbc99d475c184f8b5afa1036504be70bc4309fa1fde33bd2e9c7a6ffde92411d267f243942a788e5f85a88e4991b513971ebe53da0056995cd6b17c6734ddf98d222767afd4ba7c2a50f8948b8c26ec6035e249346144b3f4fd6fd1ffdb57925ddb5545db30845edd5ec6c9fa8aa47272ee047268847457061cc8e4fa8c92a327d8896ba829c7cc3cc986350e1bce3c3165e60dc23d67a00bf1ff0bc2118a5ee5759aaced66ef4fdae571372899f46b5cec7c549b2696a69d45433ebea3b75b5f56c0ad47d7d9cf385b39e768c5b2761e003d64180e1132707fccb5cd7227937c1dd30dfbe175c244c7bd3ab5146e1486eb3d080a59e473feb7d038aadb5bc291651192d6963a91c7a9cd7de43766dfbd7b2843a331f4e92f748b8fc671f016eb9b65d939371f99bdd0a928dd628c9bab9c0380d7a34e830dd1dc86c4731c855da0243af7b0d82d71d8f6cbf25cca9e0b5abaa80baff0621fa49ee0554bee38ea06257d2bb77a8c83b52d30ed1d8558d64fbd4d8c877073de8d3e23ceadc0fe0ddaf874d15f4505f82cfc199c96086af483511131f9568d8cd3bfdc5a8ce19aa9480150bc17a755b17155819fa5f3975c6883844045e96b733d022a1262e420a621648175afc04e5c19e84e96bf21a28b2b257095940e13ceae8493554a4882203bc69c0e10d80e886398b8f0c32b308c74dbdbf9e74fcabbb9e2e5b84a23d14fda088fec749e5edb6e45fe5a7c92e8ded77f677a0e624f14ade0cbe34c5617a199583a4d34989801203f5b631e73b87781648800aecc83a47b1a9108fc4a1b29e0b627f7d0648f3351448696e54b449c908b6dbc090248f4c38e237d33eb24ce02c3c0d9f3bb670a16c253fd5f1c26c837fda38f0ea76754ad08813e40c180f44748ef46d856223f8b2595bb5324fe1da83f71f9126db1344c7b5833e50feea53a886b3b8e34ec38a4ea8d38ecb3e32dbac1dd1a083c41c936f2e4c8c56a067140a1909b1449d6345be83b2c3401dffe881ffe555ae87ea9465d834b0e0c2de61145f11efa3ed35434fa033892e327ce92314cdf41af536886d5d10d37994ee466fae7e7d709dec670a8b27f02927f9bbcbfb9a2d98566fc8cf684258cdde66cf1c8a484ce6146acecc2bc77d1ea6cd06a17a1a232587b920be1a96d0dac3119a18825db04a449919aa722e36c4562303aa874fb4c6905b961b9c4dd7e18471eda3543b5c4613f86f67b92503fb6219265a3b384a34dc128b51b50fadad10281345bdb4712a86d4a1dce2b0d945fd16167d029eadc5e2fbbfdef1833ab28d7ebeb19ef4c4524b512564a9a1c7114e0871de46a596c56b2db35e881fe27380eb27a60800eb96e06e4a5cc8e098ffbe138f0573f59d9b9ce4f3d28a56b4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
      </tags>
  </entry>
  <entry>
    <title>Tsing-answer 开发匿名反馈</title>
    <url>/2022/02/19/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/addAnonymityFeedback/</url>
    <content><![CDATA[<h1 id="开发提示"><a href="#开发提示" class="headerlink" title="开发提示"></a>开发提示</h1><ul>
<li><p>小程序使用的数据库为MangoDB</p>
<blockquote>
<p> 数据存储参考云函数，比如 addOrder 云函数就是和新建订单有关的，addNotice 和新建通知有关的</p>
</blockquote>
</li>
<li><p>使用 addReconmandation，利用数据库里名为 Recommendation 的空集合</p>
</li>
<li><p>添加匿名反馈本身只是用一个集合</p>
</li>
<li><p>新写的代码编写 javadocs</p>
</li>
<li><p>所谓的云函数，都储存在 cloudfunctions 这个文件夹下面，其中最简单的云函数是 addNotes</p>
</li>
</ul>
<h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><ul>
<li><p>右键点击云函数区域( cloudfuncitons )，选择新建云函数，然后编写云函数的逻辑</p>
</li>
<li><p>接下来在 pages 文件夹下编写功能</p>
</li>
<li><p>找到想要添加功能的位置，大体上有 <code>dayi</code>文件夹——对应主页面的答疑，<code>luntan</code>文件夹——即论坛，<code>authen</code>文件夹——管理员，<code>me</code> 文件夹——即主页面的个人，<code>self</code> 文件夹——主要是个人成就，不是主页面上的个人</p>
</li>
<li><p>在对应添加功能的文件夹下右键点击添加功能，比如我要在个人页面上添加匿名反馈的功能，就右击 <code>me</code> 选择添加 <code>addAnonymityFeedback</code>，然后更改 <code>me.wxml</code>，编写<code>html</code>，设置触发函数，导向 <code>addAnonymityFeedback</code> 的二级页面</p>
</li>
<li><p>接下来，在 <code>addAnonymityFeedback</code> 的二级文件夹下，编写 <code>addAnonymityFeedback.wxml</code> 与 <code>addAnonymityFeedback.js</code>，前者是二级页面，后者是二级页面的逻辑</p>
</li>
<li><p>关键是，<code>addAnonymityFeedback.js</code> 和之前编写的云函数肯定是有关系的，接下来构造这个关系——在 <code>app.js</code> 下编写云函数的本地调用，这里调用了 <code>wx.cloud.addAnonymityFeedback</code>的<code>API</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">addAnonymityFeedback</span>(<span class="params">feedback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> wx.cloud.addAnonymityFeedback(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;addAnonymityFeedback&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">feedback</span>: feedback,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h1><p>每个云函数下，文件树包括如下文件：</p>
<ul>
<li><p>config.json</p>
</li>
<li><p>Index.js</p>
</li>
<li>Package-lock.json</li>
<li>Package.json</li>
</ul>
<p>添加 node.js 云函数后，默认生成三个文件：</p>
<ul>
<li><p>config.json</p>
</li>
<li><p>Index.js</p>
</li>
<li>Package.json</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">--------------------------------</span><br><span class="line">系统默认生成的 index.js</span><br><span class="line">--------------------------------</span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wxContext = cloud.getWXContext()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    event,</span><br><span class="line">    <span class="attr">openid</span>: wxContext.OPENID,</span><br><span class="line">    <span class="attr">appid</span>: wxContext.APPID,</span><br><span class="line">    <span class="attr">unionid</span>: wxContext.UNIONID,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编写完成后，当你在任何位置调用此函数时，会显示此处的参数列表</li>
</ul>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>答疑坊</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Discover 青年科学家论坛文稿</title>
    <url>/2022/02/19/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/Discover_news_report/</url>
    <content><![CDATA[<h1 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h1><ol>
<li>（WORD撰写时）主标题用宋体四号、加粗、居中。文中小标题用宋体小四、加粗、居中。正文使用宋体五号，英文部分使用Times New Roman五号，阿拉伯数字统一用Times New Roman。参考文献部分统一用Times New Roman 小五，左对齐。列举1、2、3……点的时候，统一用一、二、三……的中文表示，并使用顿号。</li>
<li>英文部分：英文主题报告不加书名号，直接用斜体，除介词冠词外首字母大写。英文缩写均大写，第一次出现时需用括号标明全称。英文出现在句首需首字母大写。</li>
<li>中文部分尽量不写长句，符合语言习惯拆为断句。句子中应包含主语。</li>
</ol>
<h1 id="AIR-DISCOVER｜段岳圻：数据是核心——深度学习在视觉大数据时代的挑战"><a href="#AIR-DISCOVER｜段岳圻：数据是核心——深度学习在视觉大数据时代的挑战" class="headerlink" title="AIR DISCOVER｜段岳圻：数据是核心——深度学习在视觉大数据时代的挑战"></a>AIR DISCOVER｜段岳圻：数据是核心——深度学习在视觉大数据时代的挑战</h1><h2 id="活动概况"><a href="#活动概况" class="headerlink" title="活动概况"></a>活动概况</h2><p>2022 年 2 月 18 日下午，AIR DISCOVER 青年科学家论坛第七期在清华大学智能产业研究院（AIR）如期举行。本期活动邀请到了清华大学电子工程系助理教授段岳圻做题为《数据是核心——深度学习在视觉大数据时代的挑战》的报告。</p>
<p><img src="https://pic.imgdb.cn/item/6210b2432ab3f51d916f7231.jpg" style="zoom:30%;" /></p>
<h2 id="讲者简介"><a href="#讲者简介" class="headerlink" title="讲者简介"></a>讲者简介</h2><p><img src="https://duanyueqi.github.io/image/Yueqi_Duan.jpg" style="zoom:13%;" /></p>
<p>段岳圻，清华大学电子工程系助理教授，博士生导师。研究方向为计算机视觉、模式识别。2014年和2019年在清华大学自动化系分别获得工学学士和博士学位，2019至2021年在斯坦福大学计算机系担任博士后研究员，合作导师为美国两院院士Leonidas J. Guibas教授。他在相关领域以第一作者身份发表国际顶级期刊、会议文章十余篇，包括TPAMI、TIP、CVPR、ECCV等，其中一篇TPAMI入选ESI高被引和热点论文。他担任ICME大会领域主席，并曾获得中国人工智能学会优秀博士论文等。</p>
<h2 id="报告内容"><a href="#报告内容" class="headerlink" title="报告内容"></a>报告内容</h2><p>段老师在本次报告中梳理了近年来计算机视觉领域算法与数据的发展，重点结合他自身的研究经历，指出了数据在计算机视觉的研究中起到的重要作用。段老师将数据比喻为深度学习的食材，生动形象地分享了自己挑选深度学习食材的经验。</p>
<h3 id="数据的采样问题"><a href="#数据的采样问题" class="headerlink" title="数据的采样问题"></a>数据的采样问题</h3><p>近年来，视觉数据发生了爆炸式增长，然而仅仅只有少数的样本具备训练价值。在训练集中，<strong>难负样本</strong>为神经网络训练提供了有效的梯度，而<strong>易负样本</strong>的梯度近似为零，难以支持有效训练。因此，难负样本挖掘在深度视觉表示学习中起到至关重要的作用。</p>
<p>而另一方面，基于搜搜的方法在难负样本挖掘上时间成本过高，难以适应不断增长的视觉数据，且只能适用于某些简单的损失函数，应用范围受到限制。</p>
<h3 id="判别性采样策略学习"><a href="#判别性采样策略学习" class="headerlink" title="判别性采样策略学习"></a>判别性采样策略学习</h3><p>基于传统深度采样网络（DSN）的策略学习方法在搜索中存在大量的冗余计算，缺乏深度学习中的泛化能力。</p>
<p><img src="https://s2.loli.net/2022/02/19/c3xzXb97GYyVWvA.png" style="zoom:50%;" /></p>
<p>而上图所示的策略学习流程，只需要在 mini-batch 上训练采样网络即可，同时能够采取不同的网络设计以适应不同的损失函数。例如采取如下网络以适应 N-pair 损失函数，所得到的的实验结果非常可观。</p>
<p><img src="https://s2.loli.net/2022/02/19/WdhY9v8iaOqBKsc.png" style="zoom: 67%;" /></p>
<p><img src="https://s2.loli.net/2022/02/19/kIWLvYtGhjRczZH.png" style="zoom: 67%;" /></p>
<h3 id="如何有效利用易负样本"><a href="#如何有效利用易负样本" class="headerlink" title="如何有效利用易负样本"></a>如何有效利用易负样本</h3><p>首先，易负样本具有变为难负样本的”潜力“，可以通过对抗难负样本生成的方式，挖掘出这一潜力。</p>
<p><img src="https://s2.loli.net/2022/02/19/NoMKhZfsDBtmUyj.png" style="zoom: 50%;" /></p>
<p><img src="https://s2.loli.net/2022/02/19/CowtZINF1BM8V4v.png" style="zoom:60%;" /></p>
<p>其次，不同的采样模式能够带来点云个体内部的差异，例如如下例子中，不同的采样模式对点云产生了较大的影响。</p>
<p><img src="https://s2.loli.net/2022/02/19/FxwWdRvT35CoLbU.png" alt="" style="zoom:50%;" /></p>
<p><img src="https://s2.loli.net/2022/02/19/g9CLnem7fjW3kl8.png" style="zoom:50%;" /></p>
<p>基于这一经验，我们能够优化点云每个点的坐标，使得每个点尽可能贴近几何体结构表面，并且在物体表面分布更加均匀。在 ModelNet400 数据集上的实验结果表明，如此采样后能够大幅提升三维点云表示对抗攻击、采样模式变化、点云稀疏化的鲁棒性。</p>
<p><img src="https://s2.loli.net/2022/02/19/MUDsCE6SvKnHQ8z.png" style="zoom:67%;" /></p>
<h3 id="隐函数学习的采样问题"><a href="#隐函数学习的采样问题" class="headerlink" title="隐函数学习的采样问题"></a>隐函数学习的采样问题</h3><p>隐函数（implicit function）是由隐式方程所隐含定义的函数，而我们在深度隐函数学习中，能够通过神经网络拟合隐函数。</p>
<p><img src="https://s2.loli.net/2022/02/19/Q6vnDl1Xkw4aeYj.png" alt=""></p>
<p>这对训练过程中的采样提出了新的问题与相应的解决方法。段老师形象地将采样问题类比为人类学习绘画的过程。人类学习绘画时，通常经历从易到难、从粗糙到精细的过程。这为三维物体视觉表示设计了课程<br>深度隐函数学习的算法：首先打磨表面精度，先勾勒大致轮廓，再刻画表面细节。随后降低采样难度，先学习简单的局部区域，再挑战复杂的局部区域。</p>
<h2 id="回顾与展望"><a href="#回顾与展望" class="headerlink" title="回顾与展望"></a>回顾与展望</h2><p>段老师提出了基于合成样本的深度学习的前景，并结合 AlphaGo 的例子具体阐述。</p>
<p>最后段老师总结了合成数据的优势：真实的数据犹如未经加工的食材，并不完全适合网络学习，而合成的数据价值更大，并且更易获取。</p>
<p><img src="https://s2.loli.net/2022/02/19/cX4sRCIPWDhmSFM.png" style="zoom: 67%;" /></p>
<h3 id="交流与互动"><a href="#交流与互动" class="headerlink" title="交流与互动"></a>交流与互动</h3><p>报告结束后，现场的老师同学们与段老师积极互动、探讨议题。探讨业界与学界对于数据的处理的些许差异时，段老师指出了在学界中，主要还是针对不同的任务选择样本挖掘的方法，并没有固定的策略。而谈及半难样本时，段老师指出了半难样本实际上是最具有样本的，而最难的样本可能会破坏网络，例如训练网络识别双胞胎可能会对学习成果产生很大的破坏，因此目前还需要刻意剔除最难的样本。</p>
<p><img src="https://pic.imgdb.cn/item/6210c5032ab3f51d91862e44.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6210c5202ab3f51d91864bf8.jpg" style="zoom:10%;" /></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>Duan Y, Chen L, Lu J, et al. Deep embedding learning with discriminative sampling policy[C]//Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition. 2019: 4964-4973.</p>
<p>Duan Y, Zhu H, Wang H, et al. Curriculum deepsdf[C]//European Conference on Computer Vision. Springer, Cham, 2020: 51-67.</p>
<p>Wu Z, Duan Y, Wang H, et al. If-defense: 3d adversarial point cloud defense via implicit function based restoration[J]. arXiv preprint arXiv:2010.05272, 2020.</p>
<p>Duan Y, Zheng W, Lin X, et al. Deep adversarial metric learning[C]//Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition. 2018: 2780-2789.</p>
<p>Lin X, Duan Y, Dong Q, et al. Deep variational metric learning[C]//Proceedings of the European Conference on Computer Vision (ECCV). 2018: 689-704.</p>
<h2 id="关于-DISCOVER-实验室"><a href="#关于-DISCOVER-实验室" class="headerlink" title="关于 DISCOVER 实验室"></a>关于 DISCOVER 实验室</h2><p>DISCOVER实验室是AIR科研方向的横向支撑实验室之一，旨在利用机器学习、计算机视觉、计算机图形学、机器人学、运筹学、高性能计算与人机交互等前沿技术，围绕车路协同（V2I）、用户直连制造（C2M）、实验室自动化等各应用场景，构建以感知、规划、控制与决策为核心的智能算法平台体系，结合涵盖设计、工艺、计算与人因的智能系统架构体系，研究人-机-边-云四位一体的人在环路多智能体协同系统，开展具有创新性的算法理论与系统架构研究，紧贴以制造业为主的国家重点行业需求，攻克以人为中心的场景理解、人在环路机器学习、仿真到现实迁移与柔性制造工艺等关键技术瓶颈，与产业界深入合作探索自动驾驶与柔性制造的范式转移路径并实现关键技术验证与落地，推动我国在智慧交通和智能制造领域的产业升级。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>一份奖学金答辩的模板</title>
    <url>/2022/02/18/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/defense/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cfb150fccddc3443ba9a17d28cb83a0e0c85f6733ca073636e8a168301acc4bd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分 WXF 第三章作业</title>
    <url>/2022/02/17/CS/%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1a51f1f5ebc5fd840c3fdab04ba6c2982134fb70e0307b5f5f9aa2b43b6cf49f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>多元微积分</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>多元微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分 WXF 第二章作业</title>
    <url>/2022/02/17/CS/%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5d198e72348927be72e06d05aaf95804758a11a335d27af923f6aa6379532651"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>多元微积分</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>多元微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分 WXF 第一章作业</title>
    <url>/2022/02/17/CS/%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9b1e1ba08298259b1e7bf771cb34781faf487aa799a60530425a3171c3b2a6b3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>多元微积分</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>多元微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>微积分 WXF 第五章作业</title>
    <url>/2022/02/16/CS/%E5%A4%9A%E5%85%83%E5%BE%AE%E7%A7%AF%E5%88%86/%E5%BE%AE%E7%A7%AF%E5%88%86%E4%BD%9C%E4%B8%9A%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f41d72be520f7d6e96cf66aa731a630c04c8949e0cb7d1c1f380fe3103712b86"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>多元微积分</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>多元微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>decorator Python装饰器</title>
    <url>/2022/02/16/CS/%E5%85%B6%E4%BB%96/python_decorator/</url>
    <content><![CDATA[<h1 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h1><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = now</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.__name__</span><br><span class="line"><span class="string">&#x27;now&#x27;</span></span><br></pre></td></tr></table></figure>
<p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p>
<p>本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>观察上面的<code>log</code>，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助Python的@语法，把decorator置于函数的定义处：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">call now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">now = log(now)</span><br></pre></td></tr></table></figure>
<p>由于<code>log()</code>是一个decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p>
<p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p>
<blockquote>
<p>何为 <code>return func(*args, **kw)</code>，就是在返回调用结果啊！</p>
</blockquote>
<p>如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。比如，要自定义log的文本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>
<p>这个3层嵌套的decorator用法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;execute&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2015-3-25&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now()</span><br><span class="line">execute now():</span><br><span class="line"><span class="number">2015</span>-<span class="number">3</span>-<span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>和两层嵌套的decorator相比，3层嵌套的效果是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = log(<span class="string">&#x27;execute&#x27;</span>)(now)</span><br></pre></td></tr></table></figure>
<p>我们来剖析上面的语句，按照调用逻辑，首先执行<code>log(&#39;execute&#39;)</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p>
<p>以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过decorator装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;wrapper&#39;</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.__name__</span><br><span class="line"><span class="string">&#x27;wrapper&#x27;</span></span><br></pre></td></tr></table></figure>
<p>因为返回的那个<code>wrapper()</code>函数名字就是<code>&#39;wrapper&#39;</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p>
<p>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的decorator的写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call %s():&#x27;</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>或者针对带参数的decorator：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span>(<span class="params">func</span>):</span></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s %s():&#x27;</span> % (text, func.__name__))</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></table></figure>
<p>设计一个decorator，它可作用于任何函数上，并打印该函数的执行时间：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metric</span>(<span class="params">fn</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        t = <span class="number">1000</span> * (end_time - start_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s executed in %s ms&#x27;</span> % (fn.__name__, t))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure>
<p>具体用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">metric</span>(<span class="params">fn</span>):</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">fn</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;start executing %s&#x27;</span> % (fn.__name__))</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        result = fn(*args, **kw)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        t = <span class="number">1000</span> * (end_time - start_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s executed in %s ms&#x27;</span> % (fn.__name__, t))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@metric</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fn(<span class="string">&quot;decorator test&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(fn.__name__)</span><br><span class="line">---------------</span><br><span class="line">&gt; python3 test.py</span><br><span class="line">start executing fn</span><br><span class="line">decorator test</span><br><span class="line">fn executed <span class="keyword">in</span> <span class="number">0.00286102294921875</span> ms</span><br><span class="line">fn</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>React 入坟</title>
    <url>/2022/02/10/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/react_tutorial/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>此文档参考了 <a href="https://zh-hans.reactjs.org/tutorial/tutorial.html">react 官方教程</a></p>
<p>本来是为了 discover web 做准备，顺手为软工做准备</p>
<p>还参考了<a href="https://cloud.tsinghua.edu.cn/d/276d435f204c429c9432/">贵系科协暑培的资料</a>，不过那个更加 fly bitch</p>
<h1 id="课程前言"><a href="#课程前言" class="headerlink" title="课程前言"></a>课程前言</h1><ul>
<li>我们一起用 React 开发一个井字棋（tic-tac-toe）</li>
<li>先修要求：HTML 和 JavaScript：函数、对象、数组，以及 class 。</li>
<li>业界名著——<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript">重新介绍 JavaScript</a></li>
</ul>
<h1 id="搭环境"><a href="#搭环境" class="headerlink" title="搭环境"></a>搭环境</h1><p>官方教程给了<a href="https://codepen.io/gaearon/pen/oWWQNa?editors=0010">基本的模板</a>，但是软工显然不能这么玩儿，所以以下展示给 React 搭环境的过程。</p>
<ul>
<li>搭配 node.js 和 npm </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; node -v</span><br><span class="line">v15.14.0</span><br><span class="line">&gt; npm -v</span><br><span class="line">7.7.6</span><br></pre></td></tr></table></figure>
<ul>
<li>Create React App</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; npx create-react-app React_tutor</span><br><span class="line">Need to install the following packages:</span><br><span class="line">  create-react-app</span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line">npm WARN deprecated tar@2.2.2: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.</span><br><span class="line">Cannot create a project named <span class="string">&quot;React_tutor&quot;</span> because of npm naming restrictions:</span><br><span class="line"></span><br><span class="line">  * name can no longer contain capital letters</span><br><span class="line"></span><br><span class="line">Please choose a different project name.</span><br><span class="line">npm notice</span><br><span class="line">npm notice New major version of npm available! 7.7.6 -&gt; 8.4.1</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.4.1</span><br><span class="line">npm notice Run npm install -g npm@8.4.1 to update!</span><br><span class="line">npm notice</span><br></pre></td></tr></table></figure>
<p>换个名字，居然不能用大写，我淦</p>
<p>贼慢，估计得用全局代理，但是我全局代理老是搞不好，麻了</p>
<p>先把概念学了：</p>
<blockquote>
<p>Create React App 不会处理后端逻辑或操纵数据库；它只是创建一个前端构建流水线（build pipeline），所以你可以使用它来配合任何你想使用的后端。它在内部使用 <a href="https://babeljs.io/">Babel</a> 和 <a href="https://webpack.js.org/">webpack</a>，但你无需了解它们的任何细节。</p>
<p>当你准备好部署到生产环境时，执行 <code>npm run build</code> 会在 <code>build</code> 文件夹内生成你应用的优化版本。你能<a href="https://github.com/facebookincubator/create-react-app#create-react-app--">从它的 README</a> 和<a href="https://facebook.github.io/create-react-app/">用户指南</a>了解 Create React App 的更多信息。</p>
</blockquote>
<h1 id="JavaScript-构建工具链"><a href="#JavaScript-构建工具链" class="headerlink" title="JavaScript 构建工具链"></a>JavaScript 构建工具链</h1><p>一组 JavaScript 构建工具链通常由这些组成：</p>
<ul>
<li>一个 <strong>package 管理器</strong>，比如 <a href="https://yarnpkg.com/">Yarn</a> 或 <a href="https://www.npmjs.com/">npm</a>。它能让你充分利用庞大的第三方 package 的生态系统，并且轻松地安装或更新它们。</li>
<li>一个<strong>打包器</strong>，比如 <a href="https://webpack.js.org/">webpack</a> 或 <a href="https://parceljs.org/">Parcel</a>。它能让你编写模块化代码，并将它们组合在一起成为小的 package，以优化加载时间。</li>
<li>一个<strong>编译器</strong>，例如 <a href="https://babeljs.io/">Babel</a>。它能让你编写的新版本 JavaScript 代码，在旧版浏览器中依然能够工作。</li>
</ul>
<h1 id="npm-换源"><a href="#npm-换源" class="headerlink" title="npm 换源"></a>npm 换源</h1><p>破防了，全局代理开不好，还是给 npm 换源好了</p>
<p>这个网站太强大了，<a href="https://segmentfault.com/a/1190000023288827">换所有的源</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>换成阿里的源，貌似没找到 tuna 的源</p>
<p>然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; npx create-react-app react_tutor</span><br><span class="line"></span><br><span class="line">Creating a new React app <span class="keyword">in</span> /Users/zhaochen20/CST_THU/2022_winter/前后端/react_tutor.</span><br><span class="line"></span><br><span class="line">Installing packages. This might take a couple of minutes.</span><br><span class="line">Installing react, react-dom, and react-scripts with cra-template...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">added 1368 packages <span class="keyword">in</span> 27s</span><br><span class="line">npm notice</span><br><span class="line">npm notice New major version of npm available! 7.7.6 -&gt; 8.4.1</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.4.1</span><br><span class="line">npm notice Run npm install -g npm@8.4.1 to update!</span><br><span class="line">npm notice</span><br><span class="line"></span><br><span class="line">Initialized a git repository.</span><br><span class="line">-------------------</span><br><span class="line">.....</span><br><span class="line">-------------------</span><br><span class="line">removed 1 package <span class="keyword">in</span> 2s</span><br><span class="line">npm notice</span><br><span class="line">npm notice New major version of npm available! 7.7.6 -&gt; 8.4.1</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.4.1</span><br><span class="line">npm notice Run npm install -g npm@8.4.1 to update!</span><br><span class="line">npm notice</span><br><span class="line"></span><br><span class="line">Created git commit.</span><br><span class="line"></span><br><span class="line">Success! Created react_tutor at /Users/zhaochen20/CST_THU/2022_winter/前后端/react_tutor</span><br><span class="line">Inside that directory, you can run several commands:</span><br><span class="line"></span><br><span class="line">  npm start</span><br><span class="line">    Starts the development server.</span><br><span class="line"></span><br><span class="line">  npm run build</span><br><span class="line">    Bundles the app into static files <span class="keyword">for</span> production.</span><br><span class="line"></span><br><span class="line">  npm <span class="built_in">test</span></span><br><span class="line">    Starts the <span class="built_in">test</span> runner.</span><br><span class="line"></span><br><span class="line">  npm run eject</span><br><span class="line">    Removes this tool and copies build dependencies, configuration files</span><br><span class="line">    and scripts into the app directory. If you <span class="keyword">do</span> this, you can’t go back!</span><br><span class="line"></span><br><span class="line">We suggest that you begin by typing:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cd</span> react_tutor</span><br><span class="line">  npm start</span><br><span class="line"></span><br><span class="line">Happy hacking!</span><br><span class="line">npm notice</span><br><span class="line">npm notice New major version of npm available! 7.7.6 -&gt; 8.4.1</span><br><span class="line">npm notice Changelog: https://github.com/npm/cli/releases/tag/v8.4.1</span><br><span class="line">npm notice Run npm install -g npm@8.4.1 to update!</span><br><span class="line">npm notice</span><br><span class="line">---------------</span><br><span class="line">&gt; npm start</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://pic.imgdb.cn/item/6204c6442ab3f51d912f0f9a.jpg" style="zoom:25%;" /></p>
<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><h2 id="What-is-React"><a href="#What-is-React" class="headerlink" title="What is React"></a>What is React</h2><p>React 是一个<a href="https://zh.wikipedia.org/wiki/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B">声明式</a>，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p>
<p>React 中拥有多种不同类型的组件，我们先从 <code>React.Component</code> 的子类开始介绍：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">class ShoppingList extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;shopping-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping List for &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Instagram<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>WhatsApp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oculus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 用法示例: <span class="tag">&lt;<span class="name">ShoppingList</span> <span class="attr">name</span>=<span class="string">&quot;Mark&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们马上会讨论这些又奇怪、又像 XML 的标签。我们通过使用组件来告诉 React 我们希望在屏幕上看到什么。当数据发生改变时，React 会高效地更新并重新渲染我们的组件。</p>
<p>其中，ShoppingList 是一个 <strong>React 组件类</strong>，或者说是一个 <strong>React 组件类型</strong>。一个组件接收一些参数，我们把这些参数叫做 <code>props</code>（“props” 是 “properties” 简写），然后通过 <code>render</code> 方法返回需要展示在屏幕上的视图的层次结构。（render 这个词很像 django）</p>
<p><code>render</code> 方法的返回值<em>描述</em>了你希望在屏幕上看到的内容。React 根据描述，然后把结果展示出来。更具体地来说，<code>render</code> 返回了一个 <strong>React 元素</strong>，这是一种对渲染内容的轻量级描述。大多数的 React 开发者使用了一种名为 “JSX” 的特殊语法，JSX 可以让你更轻松地书写这些结构。语法 <code>&lt;div /&gt;</code> 会被编译成 <code>React.createElement(&#39;div&#39;)</code>。上述的代码等同于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> React.createElement(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">className</span>: <span class="string">&#x27;shopping-list&#x27;</span>&#125;,</span><br><span class="line">  React.createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="comment">/* ... h1 children ... */</span>),</span><br><span class="line">  React.createElement(<span class="string">&#x27;ul&#x27;</span>, <span class="comment">/* ... ul children ... */</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>在 JSX 中你可以任意使用 JavaScript 表达式，只需要用一个大括号把表达式括起来。每一个 React 元素事实上都是一个 JavaScript 对象，你可以在你的程序中把它保存在变量中或者作为参数传递。</p>
<p>前文中的 <code>ShoppingList</code> 组件只会渲染一些内置的 DOM 组件，如<code>&lt;div /&gt;</code>、<code>&lt;li /&gt;</code>等。但是你也可以组合和渲染自定义的 React 组件。例如，你可以通过 <code>&lt;ShoppingList /&gt;</code> 来表示整个购物清单组件。每个组件都是封装好的，并且可以单独运行，这样你就可以通过组合简单的组件来构建复杂的 UI 界面。</p>
<h2 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h2><p>官方教程太不靠谱了，完全不说实例代码应该放在哪个位置，实际上，应该放在 js 代码放在 index.js 下面，css 放在 index.css，最后 html 放在<code>project_root/public/index.html</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">----------------</span><br><span class="line">index.js</span><br><span class="line">----------------</span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;/* TODO */&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">renderSquare</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> status = <span class="string">&#x27;Next player: X&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="xml">                    &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;/* status */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want to start measuring performance in your app, pass a function</span></span><br><span class="line"><span class="comment">// to log results (for example: reportWebVitals(console.log))</span></span><br><span class="line"><span class="comment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span></span><br><span class="line">reportWebVitals();</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">index.css</span><br><span class="line">----------------</span><br><span class="line">body &#123;</span><br><span class="line">  <span class="attr">font</span>: 14px <span class="string">&quot;Century Gothic&quot;</span>, Futura, sans-serif;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ol, ul &#123;</span><br><span class="line">  padding-left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.board-row:after &#123;</span><br><span class="line">  <span class="attr">clear</span>: both;</span><br><span class="line">  content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.status &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.square &#123;</span><br><span class="line">  <span class="attr">background</span>: #fff;</span><br><span class="line">  border: 1px solid #<span class="number">999</span>;</span><br><span class="line">  float: left;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  line-height: 34px;</span><br><span class="line">  height: 34px;</span><br><span class="line">  margin-right: -1px;</span><br><span class="line">  margin-top: -1px;</span><br><span class="line">  padding: <span class="number">0</span>;</span><br><span class="line">  text-align: center;</span><br><span class="line">  width: 34px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.square:focus &#123;</span><br><span class="line">  <span class="attr">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.kbd-navigation .square:focus &#123;</span><br><span class="line">  <span class="attr">background</span>: #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.game &#123;</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.game-info &#123;</span><br><span class="line">  margin-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------</span><br><span class="line">index.html</span><br><span class="line">-----------</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errors&quot;</span> <span class="attr">style</span>=<span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  background: #c00;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  color: #fff;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  display: none;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  margin: -20px -20px 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  padding: 20px;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">  white-space: pre-wrap;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="xml">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousedown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;mouse-navigation&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;kbd-navigation&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (e.keyCode === <span class="number">9</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;kbd-navigation&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;mouse-navigation&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">if</span> (e.target.tagName === <span class="string">&#x27;A&#x27;</span> &amp;&amp; e.target.getAttribute(<span class="string">&#x27;href&#x27;</span>) === <span class="string">&#x27;#&#x27;</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    e.preventDefault();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, line, col, error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">var</span> text = error ? error.stack || error : message + <span class="string">&#x27; (at &#x27;</span> + source + <span class="string">&#x27;:&#x27;</span> + line + <span class="string">&#x27;:&#x27;</span> + col + <span class="string">&#x27;)&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  errors.textContent += text + <span class="string">&#x27;\n&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  errors.style.display = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">console</span>.error = (<span class="function"><span class="keyword">function</span>(<span class="params">old</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    errors.textContent += <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>).join(<span class="string">&#x27; &#x27;</span>) + <span class="string">&#x27;\n&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    errors.style.display = <span class="string">&#x27;&#x27;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    old.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)(<span class="built_in">console</span>.error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>本地的效果为：</p>
<p><img src="https://pic.imgdb.cn/item/6204cdd82ab3f51d913987dd.jpg" alt=""></p>
<p>这些初始代码是我们要开发的小游戏的基础代码。我们已经提供了 CSS 样式，这样你只需要关注使用 React 来开发这个井字棋了。</p>
<p>通过阅读代码，你可以看到我们有三个 React 组件：</p>
<ul>
<li>Square</li>
<li>Board</li>
<li>Game</li>
</ul>
<p>Square 组件渲染了一个单独的 <code>&lt;button&gt;</code>。Board 组件渲染了 9 个方块。Game 组件渲染了含有默认值的一个棋盘，我们一会儿会修改这些值。到目前为止还没有可以交互的组件。</p>
<h2 id="通过-Props-传递数据"><a href="#通过-Props-传递数据" class="headerlink" title="通过 Props 传递数据"></a>通过 Props 传递数据</h2><p>让我们试试水，尝试将数据从 Board 组件传递到 Square 组件中。</p>
<p>强烈建议你动手编写本教程中的代码，不要使用复制/粘贴，这将加深你对 React 的记忆和理解。</p>
<p>在 Board 组件的 <code>renderSquare</code> 方法中，我们将代码改写成下面这样，传递一个名为 <code>value</code> 的 prop 到 Square 当中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">renderSquare</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span></span>;  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改 Square 组件中的 <code>render</code> 方法，把 <code>&#123;/* TODO */&#125;</code> 替换为 <code>&#123;this.props.value&#125;</code>，以显示上文中传入的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.props.value&#125;      </span></span><br><span class="line"><span class="xml">  		<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://zh-hans.reactjs.org/static/685df774da6da48f451356f33f4be8b2/01bf6/tictac-numbers.png" alt=""></p>
<p>修改后的渲染结果如上。</p>
<h2 id="给组件添加交互功能"><a href="#给组件添加交互功能" class="headerlink" title="给组件添加交互功能"></a>给组件添加交互功能</h2><p>接下来我们试着让棋盘的每一个格子在点击之后能落下一颗 “X” 作为棋子。 首先，我们把 Square 组件中 <code>render()</code> 方法的返回值中的 button 标签修改为如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;function()</span> &#123; <span class="attr">console.log</span>(&#x27;<span class="attr">click</span>&#x27;); &#125;&#125;&gt;</span>        &#123;this.props.value&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果此刻点击某个格子，将在浏览器的开发者工具中打印 ‘click’。</p>
<p>效果如下：</p>
<p><img src="https://pic.imgdb.cn/item/6205bcaf2ab3f51d91ffe1c0.jpg" alt=""></p>
<hr>
<p>为了少输入代码，同时为了避免 <a href="https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/"><code>this</code> 造成的困扰</a>，我们在这里使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a> 来进行事件处理，如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;click&#x27;)&#125;&gt;       &#123;this.props.value&#125;</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：此处使用了 <code>onClick=&#123;() =&gt; console.log(&#39;click&#39;)&#125;</code> 的方式向 <code>onClick</code> 这个 prop 传入一个<em>函数</em>。 React 将在单击时调用此函数。但很多人经常忘记编写 <code>() =&gt;</code>，而写成了 <code>onClick=&#123;console.log(&#39;click&#39;)&#125;</code>，这种常见的错误会导致每次这个组件渲染的时候都会触发控制台输出。</p>
<hr>
<p>接下来，我们希望 Square 组件可以“记住”它被点击过，然后用 “X” 来填充对应的方格。我们用 <strong>state</strong> 来实现所谓“记忆”的功能。</p>
<p>可以通过在 React 组件的构造函数中设置 <code>this.state</code> 来初始化 state。<code>this.state</code> 应该被视为一个组件的私有属性。我们在 <code>this.state</code> 中存储当前每个方格（Square）的值，并且在每次方格被点击的时候改变这个值。</p>
<p>首先，我们向这个 class 中添加一个构造函数，用来初始化 state：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lass Square <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;    <span class="built_in">super</span>(props);    <span class="built_in">this</span>.state = &#123;      <span class="attr">value</span>: <span class="literal">null</span>,    &#125;;  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(&#x27;click&#x27;)&#125;&gt;</span></span><br><span class="line"><span class="xml">        &#123;this.props.value&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li><p>注意</p>
<p>  在 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">JavaScript class</a> 中，每次你定义其子类的构造函数时，都需要调用 <code>super</code> 方法。因此，在所有含有构造函数的的 React 组件中，构造函数必须以 <code>super(props)</code> 开头。</p>
</li>
</ul>
<hr>
<p>现在，我们来修改一下 Square 组件的 <code>render</code> 方法，这样，每当方格被点击的时候，就可以显示当前 state 的值了：</p>
<ul>
<li>在 <code>&lt;button&gt;</code> 标签中，把 <code>this.props.value</code> 替换为 <code>this.state.value</code>。</li>
<li>将 <code>onClick=&#123;...&#125;</code> 事件监听函数替换为 <code>onClick=&#123;() =&gt; this.setState(&#123;value: &#39;X&#39;&#125;)&#125;</code>。</li>
<li>为了更好的可读性，将 <code>className</code> 和 <code>onClick</code> 的 prop 分两行书写。</li>
</ul>
<p>修改之后，Square 组件中 <code>render</code> 方法的返回值中的 <code>&lt;button&gt;</code> 标签就变成了下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">className</span>=<span class="string">&quot;square&quot;</span>        </span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(&#123;value: &#x27;X&#x27;&#125;)&#125;      </span></span><br><span class="line"><span class="xml">  		&gt;</span></span><br><span class="line"><span class="xml">        &#123;this.state.value&#125;      </span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Square 组件 <code>render</code> 方法中的 <code>onClick</code> 事件监听函数中调用 <code>this.setState</code>，我们就可以在每次 <code>&lt;button&gt;</code> 被点击的时候通知 React 去重新渲染 Square 组件。组件更新之后，Square 组件的 <code>this.state.value</code> 的值会变为 <code>&#39;X&#39;</code>，因此，我们在游戏棋盘上就能看见 <code>X</code> 了。点击任意一个方格，<code>X</code> 就会出现了。</p>
<p>每次在组件中调用 <code>setState</code> 时，React 都会自动更新其子组件。</p>
<h2 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h2><p>在 <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">Chrome</a> 或者 <a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/">Firefox</a> 中安装扩展 React Devtools 可以让你在浏览器开发者工具中查看 React 的组件树。</p>
<p><img src="https://pic.imgdb.cn/item/6205bfeb2ab3f51d9102a03a.jpg" alt=""></p>
<p>你还可以在 React DevTools 中检查 React 组件的 state 和 props。</p>
<p>安装 React DevTools 之后，右键点击页面的任何一个元素，然后选择“查看”，这样就能打开浏览器的开发者工具了，并且工具栏最后会多展示一个 React 的选项卡（包含 “⚛️ Components” 和 “⚛️ Profiler”）。你可以使用 “⚛️ Components” 来检查组件树。</p>
<h1 id="游戏完善"><a href="#游戏完善" class="headerlink" title="游戏完善"></a>游戏完善</h1><p>我们现在已经编写好了井字棋游戏中，最基础的可以落子的棋盘。为了开发一个完整的游戏，我们还需要交替在棋盘上放置 “X” 和 “O”，并且判断出胜者。</p>
<h2 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h2><p>当前，每个 Square 组件都维护了游戏的状态。我们可以把所有 9 个 Square 的值放在一个地方，这样我们就可以判断出胜者了。</p>
<p>你可能会想，我们也可以在棋盘 Board 组件中收集每个格子 Square 组件中的 state。虽然技术上来讲是可以实现的，但是代码如此编写会让人很难理解，并且我们以后想要维护重构时也会非常困难。所以，最好的解决方式是直接将所有的 state 状态数据存储在 Board 父组件当中。之后 Board 组件可以将这些数据通过 props 传递给各个 Square 子组件，<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#passing-data-through-props">正如上文我们把数字传递给每一个 Square 一样</a>。</p>
<p><strong>当你遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中所有组件的状态数据就能够更方便地同步共享了。</strong></p>
<p>像这种将组件的 state 提升到父组件的情形在重构 React 组件时经常会遇到 —— 借此我们来实践一下。</p>
<p>为 Board 组件添加构造函数，将 Board 组件的初始状态设置为长度为 9 的空值数组：</p>
<hr>
<p>为了提高可读性，我们把返回的 React 元素拆分成了多行，同时在最外层加了小括号，这样 JavaScript 解析的时候就不会在 <code>return</code> 的后面自动插入一个分号从而破坏代码结构了。</p>
<hr>
<p>现在我们从 Board 组件向 Square 组件中传递两个 props 参数：<code>value</code> 和 <code>onClick</code>。<code>onClick</code> prop 是一个 Square 组件点击事件监听函数。接下来，我们需要修改 Square 的代码：</p>
<ul>
<li>将 Square 组件的 <code>render</code> 方法中的 <code>this.state.value</code> 替换为 <code>this.props.value</code> 。</li>
<li>将 Square 组件的 <code>render</code> 方法中的 <code>this.setState()</code> 替换为 <code>this.props.onClick()</code> 。</li>
<li>删掉 Square 组件中的构造函数 <code>constructor</code>，因为该组件不需要再保存游戏的 state。</li>
</ul>
<p>进行上述修改之后，代码会变成下面这样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;  </span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">className</span>=<span class="string">&quot;square&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick()&#125;      </span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">        &#123;this.props.value&#125;      </span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一个 Square 被点击时，Board 提供的 <code>onClick</code> 函数就会触发。我们回顾一下这是怎么实现的：</p>
<ol>
<li>向 DOM 内置元素 <code>&lt;button&gt;</code> 添加 <code>onClick</code> prop，让 React 开启对点击事件的监听。</li>
<li>当 button 被点击时，React 会调用 Square 组件的 <code>render()</code> 方法中的 <code>onClick</code> 事件处理函数。</li>
<li>事件处理函数触发了传入其中的 <code>this.props.onClick()</code> 方法。这个方法是由 Board 传递给 Square 的。</li>
<li>由于 Board 把 <code>onClick=&#123;() =&gt; this.handleClick(i)&#125;</code> 传递给了 Square，所以当 Square 中的事件处理函数触发时，其实就是触发的 Board 当中的 <code>handleClick(i)</code> 方法。</li>
<li>现在我们还尚未定义 <code>handleClick()</code> 方法，所以代码还不能正常工作。如果此时点击 Square，你会在屏幕上看到红色的错误提示，提示内容为：“this.handleClick is not a function”。</li>
</ol>
<p><img src="https://pic.imgdb.cn/item/6205c4ac2ab3f51d9106c765.jpg" style="zoom:25%;" /></p>
<hr>
<p>注意</p>
<p>因为 DOM 元素 <code>&lt;button&gt;</code> 是一个内置组件，因此其 <code>onClick</code> 属性在 React 中有特殊的含义。而对于用户自定义的组件来说，命名就可以由用户自己来定义了。我们给 Square 的 <code>onClick</code> 和 Board 的 <code>handleClick</code> 赋予任意的名称，代码依旧有效。在 React 中，有一个命名规范，通常会将代表事件的监听 prop 命名为 <code>on[Event]</code>，将处理事件的监听方法命名为 <code>handle[Event]</code> 这样的格式。</p>
<hr>
<p>我们现在来向 Board 里添加 <code>handleClick</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> squares = <span class="built_in">this</span>.state.squares.slice();</span><br><span class="line">   squares[i] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;<span class="attr">squares</span>: squares&#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>现在，我们可以通过点击 Square 来填充那些方格，效果与之前相同。但是，当前 state 没有保存在单个的 Square 组件中，而是保存在了 Board 组件中。每当 Board 的 state 发生变化的时候，这些 Square 组件都会重新渲染一次。把所有 Square 的 state 保存在 Board 组件中可以让我们在将来判断出游戏的胜者。</p>
<p>因为 Square 组件不再持有 state，因此每次它们被点击的时候，Square 组件就会从 Board 组件中接收值，并且通知 Board 组件。在 React 术语中，我们把目前的 Square 组件称做“受控组件”。在这种情况下，Board 组件完全控制了 Square 组件。</p>
<p>注意，我们调用了 <code>.slice()</code> 方法创建了 <code>squares</code> 数组的一个副本，而不是直接在现有的数组上进行修改。在下一节，我们会介绍为什么我们需要创建 <code>square</code> 数组的副本。</p>
<h2 id="为什么不可变性在-React-中非常重要"><a href="#为什么不可变性在-React-中非常重要" class="headerlink" title="为什么不可变性在 React 中非常重要"></a>为什么不可变性在 React 中非常重要</h2><p>在上一节内容当中，我们建议使用 <code>.slice()</code> 函数对 <code>squares</code> 数组进行拷贝，而非直接修改现有的数组。接下来我们来学习不可变性以及不可变性的重要性。</p>
<p>一般来说，有两种改变数据的方式。第一种方式是直接<em>修改</em>变量的值，第二种方式是使用新的一份数据替换旧数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接修改</span></span><br><span class="line"><span class="keyword">var</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;;</span><br><span class="line">player.score = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// player 修改后的值为 &#123;score: 2, name: &#x27;Jeff&#x27;&#125;</span></span><br><span class="line">----------------</span><br><span class="line"><span class="comment">// 新数据替换旧数据</span></span><br><span class="line"><span class="keyword">var</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newPlayer = <span class="built_in">Object</span>.assign(&#123;&#125;, player, &#123;<span class="attr">score</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="comment">// player 的值没有改变, 但是 newPlayer 的值是 &#123;score: 2, name: &#x27;Jeff&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象展开语法，就可以写成：</span></span><br><span class="line"><span class="comment">// var newPlayer = &#123;...player, score: 2&#125;;</span></span><br></pre></td></tr></table></figure>
<p>不直接修改（或改变底层数据）这种方式和前一种方式的结果是一样的，这种方式有以下几点好处：</p>
<ul>
<li>简化复杂的功能</li>
</ul>
<p>不可变性使得复杂的特性更容易实现。在后面的章节里，我们会实现一种叫做“时间旅行”的功能。“时间旅行”可以使我们回顾井字棋的历史步骤，并且可以“跳回”之前的步骤。这个功能并不是只有游戏才会用到——撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用游戏的历史记录。</p>
<ul>
<li>跟踪数据的改变</li>
</ul>
<p>如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与改变之前的版本进行对比，这样整个对象树都需要被遍历一次。</p>
<p>跟踪不可变数据的变化相对来说就容易多了。如果发现对象变成了一个新对象，那么我们就可以说对象发生改变了。</p>
<ul>
<li>确定在 React 中何时重新渲染</li>
</ul>
<p>不可变性最主要的优势在于它可以帮助我们在 React 中创建 <em>pure components</em>。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。</p>
<p>查阅<a href="https://zh-hans.reactjs.org/docs/optimizing-performance.html#examples">性能优化</a>章节，以了解更多有关 <code>shouldComponentUpdate()</code> 函数及如何构建 <em>pure components</em> 的内容。</p>
<h2 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h2><p>接下来我们把 Square 组件重写为一个<strong>函数组件</strong>。</p>
<p>如果你想写的组件只包含一个 <code>render</code> 方法，并且不包含 state，那么使用<strong>函数组件</strong>就会更简单。我们不需要定义一个继承于 <code>React.Component</code> 的类，我们可以定义一个函数，这个函数接收 <code>props</code> 作为参数，然后返回需要渲染的元素。函数组件写起来并不像 class 组件那么繁琐，很多组件都可以使用函数组件来写。</p>
<p>把 Square 类替换成下面的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;props.value&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们把两个 <code>this.props</code> 都替换成了 <code>props</code>。</p>
<hr>
<ul>
<li><p>注意</p>
<p>   当我们把 Square 修改成函数组件时，我们同时也把 <code>onClick=&#123;() =&gt; this.props.onClick()&#125;</code> 改成了更短的 <code>onClick=&#123;props.onClick&#125;</code>（注意两侧<em>都</em>没有括号）。</p>
</li>
</ul>
<hr>
<h2 id="轮流落子"><a href="#轮流落子" class="headerlink" title="轮流落子"></a>轮流落子</h2><p>现在井字棋还有一个明显的缺陷有待完善：目前还不能在棋盘上标记 “O”。</p>
<p>我们将 “X” 默认设置为先手棋。你可以通过修改 Board 组件的构造函数中的初始 state 来设置默认的第一步棋子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Board</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">squares</span>: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">      <span class="attr">xIsNext</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>棋子每移动一步，<code>xIsNext</code>（布尔值）都会反转，该值将确定下一步轮到哪个玩家，并且游戏的状态会被保存下来。我们将通过修改 Board 组件的 <code>handleClick</code> 函数来反转 <code>xIsNext</code> 的值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> squares = <span class="built_in">this</span>.state.squares.slice();</span><br><span class="line">  squares[i] = <span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">squares</span>: squares,</span><br><span class="line">    <span class="attr">xIsNext</span>: !<span class="built_in">this</span>.state.xIsNext,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来修改 Board 组件 <code>render</code> 方法中 “status” 的值，这样就可以显示下一步是哪个玩家的了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> status = <span class="string">&#x27;Next player: &#x27;</span> + (<span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     <span class="comment">// 其他部分没有改变</span></span><br></pre></td></tr></table></figure>
<p>修改之后，我们就实现了 “X” 和 “O” 轮流落子的效果。</p>
<p>这一步能实现下棋了，但是一个位置能点无穷次，还完全没有逻辑，和我写的军棋一样。</p>
<h2 id="判断出胜者"><a href="#判断出胜者" class="headerlink" title="判断出胜者"></a>判断出胜者</h2><p>至此我们就可以看出下一步会轮到哪位玩家，与此同时，我们还需要显示游戏的结果来判定游戏结束。<del>拷贝如下 calculateWinner 函数并粘贴到文件底部：</del></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateWinner</span>(<span class="params">squares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>传入长度为 9 的数组，此函数将判断出获胜者，并根据情况返回 “X”，“O” 或 “null”。</p>
<p>接着，在 Board 组件的 <code>render</code> 方法中调用 <code>calculateWinner(squares)</code> 检查是否有玩家胜出。一旦有一方玩家胜出，就把获胜玩家的信息显示出来，比如，“胜者：X” 或者“胜者：O”。现在，我们把 Board 的 <code>render</code> 函数中的 status 的定义修改为如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> winner = calculateWinner(<span class="built_in">this</span>.state.squares);</span><br><span class="line">   <span class="keyword">let</span> status;</span><br><span class="line">   <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">     status = <span class="string">&#x27;Winner: &#x27;</span> + winner;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     status = <span class="string">&#x27;Next player: &#x27;</span> + (<span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">     <span class="comment">// 其他部分没有修改</span></span><br></pre></td></tr></table></figure>
<p>最后，修改 <code>handleClick</code> 事件，当有玩家胜出时，或者某个 Square 已经被填充时，该函数不做任何处理直接返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> squares = <span class="built_in">this</span>.state.squares.slice();</span><br><span class="line">  <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  squares[i] = <span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">squares</span>: squares,</span><br><span class="line">    <span class="attr">xIsNext</span>: !<span class="built_in">this</span>.state.xIsNext,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>恭喜！现在你已经完成了井字棋！除此之外，你也已经掌握了 React 的基本常识。所以坚持到这一步的你才是真正的赢家呀！</p>
<h1 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h1><p>接下来是最后一个练习，我们将实现“回到过去”的功能，从而在游戏里跳回到历史步骤。</p>
<h2 id="保存历史记录"><a href="#保存历史记录" class="headerlink" title="保存历史记录"></a>保存历史记录</h2><p>如果我们直接修改了 <code>square</code> 数组，实现时间旅行就会变得很棘手了。</p>
<p>不过，我们可以使用 <code>slice()</code> 函数为每一步创建 <code>squares</code> 数组的副本，同时把这个数组<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#why-immutability-is-important">当作不可变对象</a>。这样我们就可以把所有 <code>squares</code> 数组的历史版本都保存下来了，然后可以在历史的步骤中随意跳转。</p>
<p>我们把历史的 <code>squares</code> 数组保存在另一个名为 <code>history</code> 的数组中。<code>history</code> 数组保存了从第一步到最后一步的所有的棋盘状态。<code>history</code> 数组的结构如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history = [</span><br><span class="line">  <span class="comment">// 第一步之前</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第一步之后</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="string">&#x27;X&#x27;</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第二步之后</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="string">&#x27;X&#x27;</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>现在，我们需要确定应该在哪一个组件里保存 <code>history</code> 这个 state。</p>
<h2 id="再次提升状态"><a href="#再次提升状态" class="headerlink" title="再次提升状态"></a>再次提升状态</h2><p>我们希望顶层 Game 组件展示出一个历史步骤的列表。这个功能需要访问 <code>history</code> 的数据，因此我们把 <code>history</code> 这个 state 放在顶层 Game 组件中。</p>
<p>我们把 <code>history</code> state 放在了 Game 组件中，这样就可以从它的子组件 Board 里面删除掉 <code>square</code> 中的 state。正如我们把 Square 组件的<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#lifting-state-up">状态提升</a>到 Board 组件一样，现在我们来把 state 从 Board 组件提升到顶层的 Game 组件里。这样，Game 组件就拥有了对 Board 组件数据的完全控制权，除此之外，还可以让 Game 组件控制 Board 组件，并根据 <code>history</code> 渲染历史步骤。</p>
<p>首先，我们在 Game 组件的构造函数中初始化 state：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">history</span>: [&#123;</span><br><span class="line">        <span class="attr">squares</span>: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">xIsNext</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;/* status */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下一步，我们让 Board 组件从 Game 组件中接收 <code>squares</code> 和 <code>onClick</code> 这两个 props。因为当前在 Board 组件中已经有一个对 Square 点击事件的监听函数了，所以我们需要把每一个 Square 的对应位置传递给 <code>onClick</code> 监听函数，这样监听函数就知道具体哪一个 Square 被点击了。以下是修改 Board 组件的几个必要步骤：</p>
<ul>
<li>删除 Board 组件中的 <code>constructor</code> 构造函数。</li>
<li>把 Board 组件的 <code>renderSquare</code> 中的 <code>this.state.squares[i]</code> 替换为 <code>this.props.squares[i]</code>。</li>
<li>把 Board 组件的 <code>renderSquare</code> 中的 <code>this.handleClick(i)</code> 替换为 <code>this.props.onClick(i)</code>。</li>
</ul>
<p>接着，更新 Game 组件的 <code>render</code> 函数，使用最新一次历史记录来确定并展示游戏的状态：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="built_in">this</span>.state.history;</span><br><span class="line">  <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line">  <span class="keyword">let</span> status;</span><br><span class="line">  <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">    status = <span class="string">&#x27;Winner: &#x27;</span> + winner;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    status = <span class="string">&#x27;Next player: &#x27;</span> + (<span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onClick</span>=<span class="string">&#123;(i)</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于 Game 组件渲染了游戏的状态，因此我们可以将 Board 组件 <code>render</code> 方法中对应的代码移除。修改之后，Board 组件的 <code>render</code> 函数如下所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="xml">        &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，我们需要把 Board 组件的 <code>handleClick</code> 方法移到 Game 组件中。同时，我们也需要修改一下 <code>handleClick</code> 方法，因为这两个组件的 state 在结构上有所不同。在 Game 组件的 <code>handleClick</code> 方法中，我们需要把新的历史记录拼接到 <code>history</code> 上。</p>
<hr>
<ul>
<li><p>注意</p>
<p>  <code>concat()</code> 方法可能与<del>你比较熟悉的</del> <code>push()</code> 方法不太一样，它并不会改变原数组，所以我们推荐使用 <code>concat()</code>。</p>
</li>
</ul>
<hr>
<p>到目前为止，Board 组件只需要 <code>renderSquare</code> 和 <code>render</code> 这两个方法。而游戏的状态和 <code>handleClick</code> 方法则会放在 Game 组件当中。</p>
<hr>
<p>我自己不知道哪儿写出了 bug，本地没保存 git，然后用 jetbrain 的 local history revert 回去，强行把代码粘贴回去</p>
<p><a href="https://codepen.io/gaearon/pen/EmmOqJ?editors=0010">把这一段代码粘贴到自己的 index.js </a>，注意保存开头的声明：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="展示历史步骤记录"><a href="#展示历史步骤记录" class="headerlink" title="展示历史步骤记录"></a>展示历史步骤记录</h2><p>由于我们已经记录了井字棋的历史记录，因此我们可以把这些记录以历史步骤列表的形式展示给玩家。</p>
<p>在前文中提到的 React 元素被视为 JavaScript 一等公民中的对象（first-class JavaScript objects），因此我们可以把 React 元素在应用程序中当作参数来传递。在 React 中，我们还可以使用 React 元素的数组来渲染多个元素。</p>
<p>在 JavaScript 中，数组拥有 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>map()</code> 方法</a>，该方法通常用于把某数组映射为另一个数组，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>
<p>我们可以通过使用 <code>map</code> 方法，把历史步骤映射为代表按钮的 React 元素，然后可以展示出一个按钮的列表，点击这些按钮，可以“跳转”到对应的历史步骤。</p>
<p>现在，我们在 Game 组件的 <code>render</code> 方法中调用 <code>history</code> 的 <code>map</code> 方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> history = <span class="built_in">this</span>.state.history;</span><br><span class="line">    <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> winner = calculateWinner(current.squares);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">        <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> status;</span><br><span class="line">    <span class="keyword">if</span> (winner) &#123;</span><br><span class="line">      status = <span class="string">&#x27;Winner: &#x27;</span> + winner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      status = <span class="string">&#x27;Next player: &#x27;</span> + (<span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Board</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onClick</span>=<span class="string">&#123;(i)</span> =&gt;</span> this.handleClick(i)&#125;</span></span><br><span class="line"><span class="xml">          /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>当我们遍历 <code>history</code> 数组时，<code>step</code> 变量指向的是当前 <code>history</code> 元素的值，而 <code>move</code> 则指向的是 <code>history</code> 元素的索引。此处，我们只对 <code>move</code> 感兴趣，因此未对 <code>step</code> 做任何处理。</p>
<p>对于井字棋历史记录的每一步，我们都创建出了一个包含按钮 <code>&lt;button&gt;</code> 元素的 <code>&lt;li&gt;</code> 的列表。这些按钮拥有一个 <code>onClick</code> 事件处理函数，在这个函数里调用了 <code>this.jumpTo()</code> 方法。但是我们还没有实现 <code>jumpTo()</code> 方法。到目前为止，我们可以看到一个游戏历史步骤的列表，以及开发者工具控制台的警告信息，警告信息如下：</p>
<hr>
<p><strong>Warning: Each child in an array or iterator should have a unique “key” prop. Check the render method of “Game”.</strong></p>
<hr>
<h2 id="选择一个-key"><a href="#选择一个-key" class="headerlink" title="选择一个 key"></a>选择一个 key</h2><p>当我们需要渲染一个列表的时候，React 会存储这个列表每一项的相关信息。当我们要更新这个列表时，React 需要确定哪些项发生了改变。我们有可能增加、删除、重新排序或者更新列表项。</p>
<p>想象一下把下面的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Alexa: 7 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Ben: 5 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>转换成下面的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Ben: 9 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Claudia: 8 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Alexa: 5 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除了数字发生了改变之外，阅读这段代码的人也许会认为我们把 Alexa 和 Ben 的顺序交换了位置，然后把 Claudia 插入到 Alexa 和 Ben 之间。然而，React 是电脑程序，它并不知道我们想要什么。因为 React 无法得知我们人类的意图，所以我们需要给每一个列表项一个确定的 <em>key</em> 属性，它可以用来区分不同的列表项和他们的同级兄弟列表项。你可以使用字符串，比如 <code>alexa</code>, <code>ben</code>, <code>claudia</code>。如果我们使用从数据库里获取的数据，那么 Alexa、Ben 和 Claudia 的数据库 ID 就可以作为 key 来使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;: &#123;user.taskCount&#125; tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每当一个列表重新渲染时，React 会根据每一项列表元素的 key 来检索上一次渲染时与每个 key 所匹配的列表项。如果 React 发现当前的列表有一个之前不存在的 key，那么就会创建出一个新的组件。如果 React 发现和之前对比少了一个 key，那么就会销毁之前对应的组件。如果一个组件的 key 发生了变化，这个组件会被销毁，然后使用新的 state 重新创建一份。</p>
<p><code>key</code> 是 React 中一个特殊的保留属性（还有一个是 <code>ref</code>，拥有更高级的特性）。当 React 元素被创建出来的时候，React 会提取出 <code>key</code> 属性，然后把 key 直接存储在返回的元素上。虽然 <code>key</code> 看起来好像是 <code>props</code> 中的一个，但是你不能通过 <code>this.props.key</code> 来获取 <code>key</code>。React 会通过 <code>key</code> 来自动判断哪些组件需要更新。组件是不能访问到它的 <code>key</code> 的。</p>
<p><strong>我们强烈推荐，每次只要你构建动态列表的时候，都要指定一个合适的 key。</strong>如果你没有找到一个合适的 key，那么你就需要考虑重新整理你的数据结构了，这样才能有合适的 key。</p>
<p>如果你没有指定任何 key，React 会发出警告，并且会把数组的索引当作默认的 key。但是如果想要对列表进行重新排序、新增、删除操作时，把数组索引作为 key 是有问题的。显式地使用 <code>key=&#123;i&#125;</code> 来指定 key 确实会消除警告，但是仍然和数组索引存在同样的问题，所以大多数情况下最好不要这么做。</p>
<p>组件的 key 值并不需要在全局都保证唯一，只需要在当前的同一级元素之前保证唯一即可。</p>
<h2 id="实现时间旅行"><a href="#实现时间旅行" class="headerlink" title="实现时间旅行"></a>实现时间旅行</h2><p>在井字棋的历史记录中，每一个历史步骤都有一个与之对应的唯一 ID：这个 ID 就是每一步棋的序号。因为历史步骤不需要重新排序、新增、删除，所以使用步骤的索引作为 <code>key</code> 是安全的。</p>
<p>在 Game 组件的 <code>render</code> 方法中，我们可以这样添加 key，<code>&lt;li key=&#123;move&#125;&gt;</code>，这样关于 key 的警告就会消失了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moves = history.map(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> desc = move ?</span><br><span class="line">    <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">    <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>因为 <code>jumpTo</code> 还未定义，所以你点击列表项的按钮时，会出现报错。在我们实现 <code>jumpTo</code> 之前，我们向 Game 组件的 state 中添加 <code>stepNumber</code>，这个值代表我们当前正在查看哪一项历史记录。</p>
<p>首先，我们在 Game 的构造函数 <code>constructor</code> 中向初始 state 中添加 <code>stepNumber: 0</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      <span class="attr">history</span>: [&#123;</span><br><span class="line">        <span class="attr">squares</span>: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">      &#125;],</span><br><span class="line">      <span class="attr">stepNumber</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">xIsNext</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>然后，我们在 Game 组件中定义 <code>jumpTo</code> 方法以更新状态 <code>stepNumber</code>。除此之外，当状态 <code>stepNumber</code> 是偶数时，我们还要把 <code>xIsNext</code> 设为 true：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 这个方法无更改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">jumpTo</span>(<span class="params">step</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    <span class="attr">stepNumber</span>: step,</span><br><span class="line">    <span class="attr">xIsNext</span>: (step % <span class="number">2</span>) === <span class="number">0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 这个方法无更改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>jumpTo</code> 方法中, 我们没有更新 state 中的 <code>history</code> 属性。这是因为 state 更新被合并了，或者用更简单的话说，React 不会更新 <code>setState</code> 方法中未提到的属性。 <strong><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged">这篇文档</a></strong>对此有更详细的介绍。</p>
<p>接下来，我们还要修改 Game 组件的 <code>handleClick</code> 方法，当你点击方格的时候触发该方法。</p>
<p>新添加的 <code>stepNumber</code> state 用于给用户展示当前的步骤。每当我们落下一颗新棋子的时候，我们需要调用 <code>this.setState</code> 并传入参数 <code>stepNumber: history.length</code>，以更新 <code>stepNumber</code>。这就保证了保证每走一步 <code>stepNumber</code> 会跟着改变。</p>
<p>我们还把读取 <code>this.state.history</code> 换成了读取 <code>this.state.history.slice(0, this.state.stepNumber + 1)</code> 的值。如果我们“回到过去”，然后再走一步新棋子，原来的“未来”历史记录就不正确了，这个替换可以保证我们把这些“未来”的不正确的历史记录丢弃掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleClick</span>(<span class="params">i</span>)</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> history = <span class="built_in">this</span>.state.history.slice(<span class="number">0</span>, <span class="built_in">this</span>.state.stepNumber + <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">const</span> current = history[history.length - <span class="number">1</span>];</span><br><span class="line">   <span class="keyword">const</span> squares = current.squares.slice();</span><br><span class="line">   <span class="keyword">if</span> (calculateWinner(squares) || squares[i]) &#123;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   squares[i] = <span class="built_in">this</span>.state.xIsNext ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">   <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">     <span class="attr">history</span>: history.concat([&#123;</span><br><span class="line">       <span class="attr">squares</span>: squares</span><br><span class="line">     &#125;]),</span><br><span class="line">     <span class="attr">stepNumber</span>: history.length,</span><br><span class="line">     <span class="attr">xIsNext</span>: !<span class="built_in">this</span>.state.xIsNext,</span><br><span class="line">   &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>最后，修改 Game 组件的 <code>render</code> 方法，将代码从始终根据最后一次移动渲染修改为根据当前 <code>stepNumber</code> 渲染。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>恭喜你！你已经完成了一个拥有以下功能的井字棋啦：</p>
<ul>
<li>tic-tac-toe(三连棋)游戏的所有功能</li>
<li>能够判定玩家何时获胜</li>
<li>能够记录游戏进程</li>
<li>允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态</li>
</ul>
<p>干的不错！我们希望你至此已经基本掌握了 React 的使用——<strong><a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010">最终成果</a></strong>.</p>
<p>如果你还有充裕的时间，或者想练习一下刚刚学会的 React 新技能，这里有一些可以改进游戏的想法供你参考，这些功能的实现顺序的难度是递增的：</p>
<ol>
<li>在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)。</li>
<li>在历史记录列表中加粗显示当前选择的项目。</li>
<li>使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）。</li>
<li>添加一个可以升序或降序显示历史记录的按钮。</li>
<li>每当有人获胜时，高亮显示连成一线的 3 颗棋子。</li>
<li>当无人获胜时，显示一个平局的消息。</li>
</ol>
<p>通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。更多关于这些概念的细节的解释，参考<a href="https://zh-hans.reactjs.org/docs/hello-world.html">文档的其他部分</a>。了解更多关于组件定义的内容，参考<a href="https://zh-hans.reactjs.org/docs/react-component.html"><code>React.Component</code> API reference</a>。</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Say Something for Spring 2022</title>
    <url>/2022/02/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/Say%20Something%20for%20Spring%202022/</url>
    <content><![CDATA[<h1 id="winter-2022"><a href="#winter-2022" class="headerlink" title="winter 2022"></a>winter 2022</h1><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>不得不说，这是上了大学后第一个没有浪费的假期，虽然做的事情和一开始的期望很不一样，但是很有价值。按照我一贯的观点——选择比努力重要——那么这个假期，我做了无比重要的事情——选择。</p>
<p>这部分内容，完全写在了<a href="https://zhaochenyang20.github.io/categories/%E5%87%BA%E5%9B%BD%E5%BF%83%E8%B7%AF/">出国心路</a>里，希望不久的将来，这些资料能为贵系改革 touch a torch</p>
<h2 id="认知"><a href="#认知" class="headerlink" title="认知"></a>认知</h2><p>这里我想谈两个认知，第一是自我认知，这种认知是<a href="https://zhaochenyang20.github.io/2022/02/03/%E5%87%BA%E5%9B%BD/%E7%94%B3%E8%AF%B7%E5%9B%9E%E5%BF%86%E5%BD%95/#%E4%B8%AD%E4%BB%8B%E7%A2%B0%E7%93%B7">在再来人那儿碰完瓷后</a>产生的。</p>
<h3 id="为什么想出国"><a href="#为什么想出国" class="headerlink" title="为什么想出国"></a>为什么想出国</h3><p>出国不是目的，而是手段，是实现自我完善这条路上的一个选择罢了。</p>
<p>最初选择出国是对国内的社会压力感到极度的反感，之后的想法转向了学业和未来自我发展的综合考量。在这份公开的文档说明并不合适，如果您有邀请密码，可以移步一些<a href="https://zhaochenyang20.github.io/2022/01/14/%E5%87%BA%E5%9B%BD/reasoning/">人生的规划</a>一文。</p>
<p>自从和再来人碰完瓷后，我陷入了对自我的思考——</p>
<p>我的初衷本来就是不想和系里的同学一起盲目卷绩点、卷科研而后直博，我并不认为自己是个能够胜任 PhD 学位的人，而国内的硕士培养不如国外健康，加之国外良好的业界环境和潜力，因而选择了出国。</p>
<p>然而和这些中介的交流过程中，他们认可了我超乎同龄人的规划，却又不断在激发我内心的贪婪。他们不断给我灌输，我的基本盘很不错，足以申请前 10 的 ms 项目和前 20 的 PhD 项目。而后我不断的叙述我的认知，却又让我对读名校 PhD 这件事产生了无穷大的向往。直到再来人完全点燃了这种颠覆了初衷的贪婪，让我感到了无穷的恐惧和焦虑，才让我回想起了自己的初衷。</p>
<blockquote>
<p>我都是为了不盲目跟风读博才决定出国的，那我出国了还要盲目跟风读博，这不是本末倒置吗？</p>
</blockquote>
<p>想到这里，我就很明确了——我的目标是通过学习和人类社会观察这两件事情来认知自我，科研能力、唯物主义价值观等等，而听中介画大饼和贩卖焦虑只能激发超出初心的贪欲和焦虑感。</p>
<p>因此，下个学期的核心目标是——</p>
<blockquote>
<p>探索自我</p>
</blockquote>
<p>具体如何实现，将会在第三部分展开</p>
<h3 id="社会学认知"><a href="#社会学认知" class="headerlink" title="社会学认知"></a>社会学认知</h3><p>在这个寒假，我初步建立起了完整的客观唯物主义价值观，能够对社会问题有更加深入客观的理解，不会被阴谋论和臆测带偏节奏，哪怕对于中国房市这样以往深恶痛绝的事物也有从社会学、经济学和历史学角度的认知，而改变了以往对中国三座大山的彻底敌视。</p>
<p>寒假主要的社会学认知在于</p>
<ul>
<li><a href="https://zhaochenyang20.github.io/2022/02/02/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/">对双元革命的理解</a></li>
<li><a href="https://zhaochenyang20.github.io/2022/02/04/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E7%A4%BE%E4%BC%9A%E8%BE%BE%E5%B0%94%E6%96%87%E4%B8%BB%E4%B9%89/">对社会达尔文主义的反思</a></li>
<li><p><a href="https://zhaochenyang20.github.io/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%84%9F%E8%B0%A2%E9%99%88%E8%99%B9%E4%BC%8A%E4%B8%BA%E4%B8%AD%E5%9B%BDAI%E5%81%9A%E5%87%BA%E7%9A%84%E8%B4%A1%E7%8C%AE/">个人学术发展与子女教育的思考</a></p>
</li>
<li><p><a href="https://zhaochenyang20.github.io/2022/01/14/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A4%9A%E5%B7%B4%E8%83%BA%E5%B7%A5%E4%BD%9C%E6%9C%BA%E7%90%86/">对于多巴胺戒断的认知</a></p>
</li>
<li><a href="">对于中国女权运动发展的认知</a></li>
</ul>
<p>还有一些颇有价值的社会认知资料，诸如读书笔记。整合在<a href="https://zhaochenyang20.github.io/categories/%E4%B9%A6%E6%91%98/">书摘分类</a>当中，而 b 站上许多精彩的视频，也收录在了 <a href="https://zhaochenyang20.github.io/2022/02/03/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/movies/">movie 博客</a>当中。</p>
<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><h3 id="家人"><a href="#家人" class="headerlink" title="家人"></a>家人</h3><p>实际上家人才是最重要的，然而我总是忘记写，最后补在最开头。</p>
<p>寒假出于疫情，更是害怕和爸妈因为出国的事情争吵，所以没有回家过年。</p>
<p>除夕附近还很想念亲人，最后觉得独立在北京过年还行，也和爸妈一直在联系家常，没有让他们抄心，过年也给其他亲人送了祝福。</p>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>寒假在 AIR 的工作主要是调参，然后为了 ECCV 的投稿做了一些准备，不得不为自己尚未对 CV 产生自己的理解感到遗憾，而 torch 仍旧是自己的心病。</p>
<p>寒假里对组内的工作有了了解，从鹏飞、雪儿姐、田哥、寅君学长和昊哥他们那儿对于学术界的规则与残酷产生了朦胧的认知，对于未来出国后的选择有了更多认知。</p>
<h3 id="锻炼"><a href="#锻炼" class="headerlink" title="锻炼"></a>锻炼</h3><p>寒假坚持了很久锻炼，开学当然没法这么玩了，但是的确每次锻炼都很舒适，可惜没能主要练习短跑和引体。</p>
<h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>寒假的社工很多，占据的时间远超想象</p>
<p>社工上追求完美主义无法避免，那么解决的方案是减少项目和放平心态</p>
<ul>
<li>情系母校——写了<a href="https://zhaochenyang20.github.io/tags/%E6%88%90%E5%A4%96/">三篇推文</a>，进行了<a href="https://www.bilibili.com/video/BV1Hu411d756?spm_id_from=333.999.0.0">一次讲座</a>，push 了 happy 组织工作，同时为全队建立了数据备份，从 <a href="https://space.bilibili.com/176873733/video">b 站</a>到<a href="https://cloud.tsinghua.edu.cn/d/629d34437a39481183c1/">云盘</a>，同时在成外的候鸟计划群里解答了很多问题，讲解了一些观点，认识了很多学弟学妹。除了情系母校，还和一多等中加班的成外校友建立了不错的 connection，将来去了加拿大亦或是出国了会有更多的互助。</li>
<li>支教——从想要摆烂，到成为了小组的主要策划人，<a href="https://lead-alley-0ca.notion.site/71d9200633f147b59c7152b866d70628">完善小组文档</a>，帮助组长完成了工作，最后全组的核心成果总结为了<a href="https://cloud.tsinghua.edu.cn/d/4a3d224d0fe34cf09b5b/">云盘资料</a>，在这个过程中认识了可爱的组长小姐姐，并且越发感受到了自己的为人处事和社交能力，至于是否有管理能力还有待考量</li>
<li>答疑坊——这部分其实和软工小组混在一起，自己学习了雷哥搭建的文档思路，组织了小组第一次开发会议，并且多次 push 我的组员们。个人的学习成果总结在了<a href="https://zhaochenyang20.github.io/categories/%E5%89%8D%E5%90%8E%E7%AB%AF/">前后端分类</a>，而具体项目不便透露。</li>
<li><p>课咨委——为上个学期的采访工作进行了收尾，对课咨委这项贵系的改革 pivot 任务充满了期待，希望自己能够为贵系改革提供自己微薄的贡献，而自己的<a href="https://zhaochenyang20.github.io/categories/%E5%87%BA%E5%9B%BD%E5%BF%83%E8%B7%AF/">出国心路</a>希望能有幸为以后的贵系人 touch a torch</p>
</li>
<li><p>酒井科协——在 yyj 和 holder c7w 等同学的帮助下，<a href="https://docs.net9.org/languages/c-oop/">大一下学期所写的 OOP 文档</a>成功部署到了 docs 9，由于自己在编写规范和 git 部署上的能力不足，给组员产生了很多不便，希望自己之后的工作再接再厉。另一方面，oop 文档的 readme 算是对以往的一些事情做出了自己的和解，一生太短，来不及犹豫，诚然如此。最后，为技能文档的推广写了文案，纯粹出于情怀而写，虽然花费了一整天，然而非常开心。文案在用语部分参考了 c7w 和夏老板的意见，进行了修改。最后的推广效果个人感觉非常开心，阅读量 6000+ ，在贵系人的朋友圈刷屏，同时也在一字班的群里进行了推广。我的 oop 文档也得到了一字班同学的更正，希望这份文档能为 oop 课程生态做出贡献。</p>
</li>
<li>乐学——很遗憾而又很快乐，退掉了这份社工。的确自己不喜欢这些宣传能力和艺术设计能力，最后期待已久的清华重生模拟器因为开发风险而被停掉，虽然对我而言开发此事还有所难度，然而被停掉实在遗憾。自己也不喜欢追求所谓 10 w+ 的阅读量，技能文档文案 6000 + 的阅读量已然让我很快乐了。最后退了这份划水一学期，想干活却没活干的社工。</li>
<li>push 了车队同学打卡，也 push 了两个小学弟完成微积分作业，最后给一些朋友和一字班同学分享了我的<a href="https://cloud.tsinghua.edu.cn/d/6dbd3f2689ca4addbebb/">史纲</a>和<a href="https://zhaochenyang20.github.io/2022/02/03/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E4%BA%94%E9%81%93%E5%8F%A3%E4%BD%93%E6%A0%A1%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E7%94%B7%E5%AD%90%E4%BD%93%E6%A0%A1%E4%BD%93%E8%82%B2%E8%AE%AD%E7%BB%83/">体育资料</a>，希望我的两个小学弟将来能建立成外的云盘</li>
<li>唯一划水的是实践，在一个台湾同学带队下去北京特斯拉玩了一圈，感觉还不错，自己还蛮喜欢特斯拉，最后写了<a href="https://zhaochenyang20.github.io/2022/01/10/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/tesla/">一篇总结</a></li>
</ul>
<h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ul>
<li>认识了不少新朋友，然后在出国这件事情上有了更多队友</li>
<li><p>和之前的朋友们一直保持着良好的联系</p>
</li>
<li><p>值得高兴的是，除夕夜给诸多师友<a href="https://zhaochenyang20.github.io/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%96%B0%E5%B9%B4%E7%A5%9D%E7%A6%8F/">送上了祝福</a></p>
</li>
</ul>
<h3 id="SRT"><a href="#SRT" class="headerlink" title="SRT"></a>SRT</h3><ul>
<li><p>非常遗憾，假期开始就在 push 瑞涵姐，结果到了写总结的时候都还没开工。</p>
</li>
<li><p>在开学前最后两周一定完成寒假任务，决然不可拖累大家。</p>
</li>
<li>实际上很快就做了不少活，<a href="https://zhaochenyang20.github.io/2022/01/17/CS/%E5%85%B6%E4%BB%96/SRT/">具体的工作在这儿</a></li>
</ul>
<h1 id="fall-2021-gt-spring-2022"><a href="#fall-2021-gt-spring-2022" class="headerlink" title="fall 2021  -&gt; spring 2022"></a>fall 2021  -&gt; spring 2022</h1><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>上学期的学业由于情感和社交等事情的重创，在开学一个月后才恢复了正常。然而上学期融入了社工和科研，加之花费了众多实践在读书、反思、自我认知和做决定上，因此花费在学业上的时间客观减少，学业成绩发生了很大的下滑，虽然仍在可控范围内，然而需要引起高度的注意。</p>
<p>上学期起初是由于心理原因，很多课程没法线下上课。到了后期逐渐发现了寝室学习 + 车队回放的妙处，这学期将继续尝试。</p>
<p>本学期的课程以科研 + 必修 + 英语为核心，虽然压力很大，也有很多自己的期望，然而还是希望自己能够做到——</p>
<blockquote>
<p>彼其于世，未数数然也！</p>
</blockquote>
<h2 id="科研-1"><a href="#科研-1" class="headerlink" title="科研"></a>科研</h2><p>上学期在 AIR 对 CV 有了朦胧的认识，这学期继续坚持，并且以后的科研也该做到每一次探索以一个项目或者一篇论文收尾。</p>
<p>这学期的探索结束后，希望 summer 2022 能够去微软亚研院进行期盼已久的实习。</p>
<h2 id="社工-1"><a href="#社工-1" class="headerlink" title="社工"></a>社工</h2><p>时间和精力有限，学业科研社工 6 ：3：1 到 7：2：1</p>
<ul>
<li>答疑坊两周一次 + 小程序开发</li>
<li>课咨委保持工作，不必花费太多</li>
<li>技能文档小组，希望能够完成期待已久的 torch 入坟</li>
</ul>
<h2 id="探索-1"><a href="#探索-1" class="headerlink" title="探索"></a>探索</h2><h3 id="家人-1"><a href="#家人-1" class="headerlink" title="家人"></a>家人</h3><p>上学期终于一改报喜不报忧的坏习惯，每天都有和爸妈打电话，主要是聊日常，还算开心。印象中经常下了 DSA 课，在周三早十回宿舍的路上和爸妈打电话。还是蛮幸福的，虽然爸妈很多时候没法理解我，但是交流本身就是件珍贵的事情。</p>
<p>以后去交换而后出国，能物理意义陪伴爸妈的时间越来越少，还是要坚持多聊聊家常和近况。</p>
<h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>坚持每天阅读，然而每天不得超过半小时，且记录笔记也要算入阅读时间</p>
<h3 id="人际关系"><a href="#人际关系" class="headerlink" title="人际关系"></a>人际关系</h3><p>践行非暴力沟通，和朋友们保持良好的 connection，尽量不要让感情、亲情、友情等相互影响，保持独立</p>
<h3 id="选择-1"><a href="#选择-1" class="headerlink" title="选择"></a>选择</h3><p>不断地探索自己的科研能力，并且和更多决定出国的朋友进行交流</p>
<h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>已经将读书笔记归入了阅读时间，那么除开读书笔记之外的阅读时间不应超过半小时</p>
<h3 id="锻炼-1"><a href="#锻炼-1" class="headerlink" title="锻炼"></a>锻炼</h3><p>坚持包括体育课在内的每周三次锻炼，锻炼应该具有目的性，以练腿、引体和卧推为主，不要浪费在长跑上</p>
<p><code>to be continued...</code></p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>AI PhD Application and MSCS Application Tutorial</title>
    <url>/2022/02/05/%E5%87%BA%E5%9B%BD/AI_application/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>树洞上的深度好文，目测应该来自某个 7 字班茶园的学长吧，今天重新翻了翻，贴在博客上</p>
<p>前半部分是 AI 方向 的 PhD 申请，后半部分是整个 MSCS 的申请</p>
<p>简直碾压之前<a href="https://zhaochenyang20.github.io/2022/02/04/%E5%87%BA%E5%9B%BD/shool_details/">世毕盟的广告</a>，打赢了疫情防控清华信息保卫战！</p>
<p>致谢洞主</p>
<h1 id="AI-PhD-正文"><a href="#AI-PhD-正文" class="headerlink" title="AI PhD 正文"></a>AI PhD 正文</h1><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>长文慎入】开个洞来详细的讲讲美国AI方向PhD的申请。</p>
<p>本来我早就想写这么一个来造福有意向出国读研的学弟学妹，但是要么我太忙没时间，要么有时间但因为喜欢冲塔被树洞小管家禁言。正巧前两天看见那个答疑洞吸引了很多关注，而且我最近就差nips写作了，正好借此机会练习一下文笔写点东西。请注意，本文由于追求完备，力争覆盖申请的每一个细节，所以可能会很长，毕竟我想写这个的目的就是看不惯中介靠信息差卖高价，我就是来砸他们的饭碗的，所以自然要事无巨细地全写出来。这样即便大家要报世毕盟，也只需要报半价的那个套餐就好了。不过我其实有很多地方十分主观，比如涉及评价学校的部分，所以不认同的人可能觉得我在夹带私货。如果你不认同本人的部分观点，就请当做我的一家之言，仅做参考就完了。  </p>
<p>当然，这个洞是专门给AI方向的PhD申请开的，主要针对的群体是ai/ml/cv/nlp/dm/robotics方向的申请者。cs其他方向比如system也可以参考，甚至不是cs的申请者读完可能也会觉得有所收获，所以各位敬请各取所需。我在最后也会讲讲关于mscs的申请。  </p>
<h2 id="去美帝的原因"><a href="#去美帝的原因" class="headerlink" title="去美帝的原因"></a>去美帝的原因</h2><p>所以为什么要去美国读AI的PhD呢？这似乎在当下有点政治不正确，显得清华好像留美预备学校一样。按理说，看csranking上清华北大反超cmu登顶世界第一不过是时间问题，为什么要跑到“注定失败”的美国去再上演一出49年入国军呢？很多人有从各个面向给出了很多不同的解答。我只根据纯粹的research原因给大家一个我的想法。其实，清华cs和北美top校最大的差距就是工作偏follow-up。不服气的小伙伴可以先想一想，ai顶会国内没少产出，但dl时代真正有high impact的可能只有当年kaiming he在msra的那一系列工作，而kaiming现在也已经在FAIR了。换言之，国外的顶级cs phd program更喜欢学生能够去开坑，而清华的phd更倾向去填坑。  什么样的工作算开坑呢？一个类型是定义新的问题，比如fei-fei组的工作。很多人诟病飞飞标了个数据集，或者搞了个新的benchmark就不管了，但在她看来刷benchmark是工业界的事，学术界本来就应该告诉大家我们应该往哪里move on，无论是定义新问题，还是标新的数据集，都是在告诉大家整个community下一步的前进方向。而不单纯是今天我有一个task，有一个benchmark，还有一个SOTA的模型，我在上面加加减减然后提几个点，讲一个故事就是一篇论文。值得关心的不是在ImageNet上有提了几个点，而是我们究竟离AI还有多远这样一个big picture。所以很多做object detection或者segmentation的同学不妨想想，为什么要从bounding box和pixel-wise两个角度来做understanding。另一类开坑的工作，是创造性的提出一套前所未有的解决问题的范式。很多人用lstm做nlp的时候，google第一个说attention is all u need,cv都是cnn的时候也是google告诉大家transformer可以代替cnn。很多人现在做点云，但是第一个提出可以直接用deep model on point cloud的是guibas组。类似的还有首先用deep model结合SDF表达3D物体的DeepSDF（UW+FB），以及去年大火的nerf（Berkeley+google)第一个把deep model引进到rendering中取得了很好的结果。总之，说穿了就两个问题，我可以怎么创造新的问题来继续提升deep learning？deep learning可以用来提升哪些现有的问题？很多时候回答这两个问题需要的是对于潮流发展有敏锐的sense，我认为这才是中美AI学界差距最大的地方。song han能拿到mit的教职是因为在stanford开了model compression的大坑，jun-yan zhu和tianqi chen拿到cmu的offer也是因为分别在Berkeley和UW开了image2image以及tvm的大坑。我觉得清华要摆脱留美预备学校的帽子，需要先清华能让美国人做我们定义的问题。</p>
<h2 id="GPA"><a href="#GPA" class="headerlink" title="GPA"></a>GPA</h2><p>好像扯得有点远，不过我觉得先让大家厘清为何要去美国读AI PhD是一件很重要的事情。下面我把申请中的各要素分门别类地和大家详细讲一讲。</p>
<p>我首先就要讲gpa。很多人说gpa对phd不重要，也有很多人说gpa重要，到底重不重要呢？Itdepends。如果你本科毕业发了10篇顶会一作，gpa可有可无，如果没有paper，gpa可能就是你的救命稻草。申请的结果是各个方面加权的结果，但不同人的加权系数是不一样的。与高考关注有没有短板不同，美国学校更关注的是你的长板，一般来说你出彩的那一部分越出彩作用越大，加权越高。所以3.95gpa很可能让缺少过硬科研经历的你进入Princeton这种分控学校。但很多gpa没这么高的同学也不必过于担心，你也可以通过多发paper来弥补。虽然gpa永远越高越好，但gpa过了3.7以后边际效益就很低了，3.7和3.8的差距远远小于一篇一作paper的差距。从来没有什么不到3.8上不了topphd的说法，唯一的硬线只有3.0，到不了3.0是真的会第一轮被刷的。所以啊，如果你都大三了，别天天计较怎么能让gpa的百分位高一点这种事了，赶快去加入实验室做科研吧。如果你刚大一的话，赶快让自己的gpa高一点，这样你其他方面的压力会小不少。</p>
<h2 id="TG"><a href="#TG" class="headerlink" title="TG"></a>TG</h2><p>很多人为了英语考试没完没了给ets或者新东方送钱，真的是没必要。其实cs研究生的申请根本没必要什么托福110，许多学校的线一般是100，有些学校或项目会明确写出来要求托福100以上，如果想保险一点可以考到105以上，再往上也没啥用了。至于单项唯一要紧的是口语，至少要上20，像cornell这种藤校，明确写了会卡22的线。一般低于22的话，你的交流水平会被质疑，教授肯定要通过面试确认一下你是不是不会说英文。但不会因为22就不录取你，而是要你入学后去上英语课，毕竟读phd要做TA。至于GRE，这东西320+3.5以上绝对够了，现在无论phd还是ms都越来越淡化GRE的重要性了，毕竟背一堆生僻词汇以后也用不上。</p>
<h2 id="publication"><a href="#publication" class="headerlink" title="publication"></a>publication</h2><p>研究经历&amp;Publication： 重中之重。AI方向没有一作paper基本与top<br>phd绝缘，即便3.95的gpa最好很可能也就是Pton了。可能偏理论的机器学习方向还好一些，但应用方向比如cv/nlp没有paper基本四大第一轮就被筛掉了。所以建议有志于top phd的赶快搞paper，但是tier2的学校很多没有paper也是有可能的，这就要看你的推荐信（主要是暑研导师的评价）以及gpa了。但paper与paper是不同的，一般paper看的是几作、什么会议以及是否已经中稿。基本来说，一作顶会是能逆天改命的，本科毕业生一篇中了的一作顶会基本能把你送进前15的学校。二作对本科来说也有点用，三作及以后作用寥寥，但在简历上写上去总比什么也没有好看，所以即便蹭三作也请大家蹭一蹭。至于会议类别，基本北美top phd只看顶会，cv就是cvpr/iccv/eccv，国内喜欢投什么aaai/mm，这对于top phd作用比较小，但tier2的学校会看，申请ms也是大有裨益，基本一篇aaai一作能报送进入cmu类似miis或者mscv这类项目，所以看大家的目标院校，如果不是非四大不读，可能差一点的会议也可以投投。至于我上面说北美学校比较喜欢开坑的工作，会不会对文章质量也有要求呢？其实这是对phd毕业生的期待，junior researcher的paper基本只能证明你走了一整套流程，教授看的也是这个，因为可以不用从头培养。所以啊，即便灌水顶会，也请多灌一点，你大四申请的时候中了三篇icml/nips/iclr一作，要是没有四大offer，我可以跟你姓。顶会水文的确多，但也不是是个人拍拍脑瓜就能中的。当然如果能像zhuang liu那样发一篇best paper就能横扫了，但这不是必要条件。至于文章本身，topic也比较重要，建议大家看看自己感兴趣的老师在做啥，然后follow他们的工作，会大大提高被录取的概率。但并不是说你不能申请其他方向的老师，因为你本科做得可能和你phd做得完全不同，老师看的是潜力，所以申请的时候不要因为和自己方向不match就不申请了，只要你觉得你愿意做，你就大胆去申请就是了，反正申请就是轮盘赌，一看风水二看命，然后才看你的背景条件。paper另一个重要的点是中没中。不管是不是水文侥幸中的，只要中了就是大大有用。当然很多人暑研的工作大概率申请的时候没结果，但也要在cv和ps里列出来，然后标上in submission，虽然不如accept，但也是有用的！然后建议在投的要么挂arxiv，要么加一个google drive的link，然后要在教授的letter中体现出来。至于in progress的列了也没用，因为没完成的paper等于没有。</p>
<h2 id="暑研"><a href="#暑研" class="headerlink" title="暑研"></a>暑研</h2><p>对于申请phd来说，北美推荐信很重要，当然ms也一样。唯一的拿到北美letter的机会就是暑研。所以无论申请ms或者phd的，都请暑假去美国实验室搬砖吧，即便你对科研没兴趣。而要申请phd的人，去academia要比industry强，即便你的offer来自google brain。至于暑研选校的问题，我诚挚地建议不要无脑四大，虽然我觉得我说了很多人也不会听。道理很简单，暑研的目的是拿推荐信，暑研不会给你发文凭，即便ugvr这种官方项目也不会给你发斯坦福的文凭。你要确保的是哪里能拿强推。众所周知，四大ai的phd return极度难拿，一年去了好几个可能就一个能拿return，如果你没gpa很高，或者已经有一作顶会了，我建议不要去陪太子读书当分母了。要不到时候你那些去了top10的同学纷纷把坑位占了，你回头才发现top10都没你位子了。不过如果你海专精算后发现自己是四大的有力竞争者，建议直接去四大暑研，因为本校的推荐信总是更好用。很多人可能怀疑letter质量是否会和学校专排挂钩，我可以这么讲，这个相关性有，但比你做的怎么样要低得多。你去ucsd拿top1%的强推照样可以把你送进四大。当然如果目标就是ms，请直接去目标学校，因为ms的坑位多很多，不会有别人占了你的概率就急剧降低这种事。所以啊，准确定位自己是申请暑研前应该做的第一件事！也是申请成功的先决条件。确定了自己的水平然后就是确定去哪个老师。建议参考各校官网率、csranking以及过往学长去向，然后广撒网。可能发十封有一封回复的，这其实很正常。一般老师如果愿意会约你面试，这基本大半只脚就迈进去了。因为暑研门槛不高，所以不要紧张！和老师随便聊聊你过去的一些科研经历或者参与的srt，可以很naive，但老师只是想看看你有没有入门而已。至于办理签证买机票我就不赘述了。  </p>
<p>然后我要讲讲怎么做一个成功的暑研。基本有两点，第一个有产出，第二个给老师留下印象。有产出自然是有paper了，对于老师写推荐信来说，paper提交了中没中其实差距不大，但有没有交这评价注定是两个档次，特别是ai领域。然后留下印象这事可能比较tricky，我的建议是多交流，多开口！！老师认知学生最主要方式就是交流，一个是paper reading，另一个是关于project的personal meeting。纵然你满腹经纶，但如果你徐庶进曹营，一言不发，你这个letter也不会很强，因为老师没东西写。可能有人觉得我没啥可说的啊，项目进度很快就说完了。这就需要你展现吹nb的天赋了，你大可以和教授讨论各种high-level的东西，美国人喜欢学生对high-level的东西有思考，而不是只关注技术细节。至于high-level是什么东东？请看各文章的intro部分。交流的质量只要从你的表达能力以及思维是不是清楚来判定。如果你觉得自己英语不好，或者专业术语不太熟悉，建议找华人教授，这样可以中文交流，甚至可以微信交流。总之多交流就对了！当然你也不能做一个光说不做的人，你要干活，要可靠，如果你答应了要做一个实验，下一次请展示出结果，而不是说我忘了，否则大大扣分！然后要关注细节，无论是和导师的日常交流还是面试，很多时候对细节的追问会体现你到底懂不懂自己的project。最后的最后，要主动！！如果老师不找你，你就找他；如果你对project有什么想法，你就大大方方地说出来，哪怕你想做一个不同的也无所谓。展现出你的热情以及对于新知的渴望来！哪怕一个task从没接触过也不要怕，你要展现出你在清华锻炼的自学能力以及学习热情来，因为fast adaptation是很重要的能力。暑假结束后，也不要不理老师了。要继续保持联络，直到project得到论文产出，善始还要善终。</p>
<h2 id="推荐信"><a href="#推荐信" class="headerlink" title="推荐信"></a>推荐信</h2><p>推荐信：最重要的没有之一！！！！好的推荐信能让你逆天改命，坏的则能让你前功尽弃。所以怎么做才能得到好的letter，我已经在上一段讲了。我这一段说说怎么判定是不是positive的letter，该向谁要letter，以及如果自己写letter该怎么弄。有些限制推荐信数量的，我觉得都是坑。填推荐信其实特别快。我问过我所有老板，他们都说没数量限制。而且负责人的老板在你申请前，比如11月底，会主动抽时间和你商量一下你的申请，该怎么选校，该怎么写文书，一般老板越关心你的申请，越愿意和你聊你的申请，你拿到强推的可能性越高。至于该管谁要，尽量找你的科研老板，上课教师基本没啥用，即便是交换期间的美国授课老师也是不如国内老板的。美国有个词形容这一类推荐信，叫做DWIC，也就是do well in class，毫无信息量，因为上课的人太多了，即便你做了十分好的project，也没用。ms也一样。所以尽量找你的academic advisor，因为他们和你接触的最多。要知道，推荐信的强度和推荐人对你的熟悉程度直接挂钩，你认识越长这信说服力越强。但是很多时候国内老师不知道怎么写美国学校的lor，所以这就牵扯另一个问题，我们自己怎么写。首先是信的内容，主要就是要有具体的例子，不要泛泛，要从这几个例子得出被推荐人的品质，比如highly motivated，quick learner，clarity of thought, independent, hard-working, own initiative and self-driven，反正推荐信看的就是成为good researcher的潜力，一定要把相关的特质反映出来，但是不要凭空突然冒出一个形容词来，那样会很生硬。然后老美很夸张的，就不要太谦虚，就直接说recommende with no reservation。如果你觉得自己nb的很，大可以加上“这是我xxx年来见过的最nb的本科生，你不录取他我会和拼命的！”。除了信的本体，还要填一个调查问卷，渴望了解的quality列的很清楚。有些人不了解情况，觉得20%就不错，简直大错特错，那简直快和黑推差不多了。如果综合评价没有全在5%，也就是outstanding，基本上top phd就和你say goodbye了。哪怕是申请ms，也请厚着脸皮给自己勾选top 10%及以前的选项。有志于top phd的同学，请直接选前两项， top 5% or top 1%。  </p>
<p>哦对了，补充一点，建议尽量去美国暑研拿美国推荐信。因为美国人很自大，即便是欧洲的推荐信很多分量也不重，他只看美国的letter，但欧洲、新加坡、香港的学校是认美国推荐信的。</p>
<h2 id="CV"><a href="#CV" class="headerlink" title="CV"></a>CV</h2><p>CV：cv很重要，因为是最直观了解你的窗口。即便没有上传cv的窗口，也请在补充材料里面上传。cv不要太长，就2页。第一部分是教育背景，gpa啥的，如果排名好看就把排名加上去。第二部分是publication list，即便in submission的也加进去，当然你需要在letter里面有所呼应。然后把自己的名字标黑，按照作者顺序依次排列。后面可以加一个paper网页的超链接。不要没有paper，自己瞎编，这是诚信问题，后果十分严重。第三部分是你的project部分，著作等身的同学可以不写，但没paper的还是写一下吧。然后接下来的section你可以列一下你得到的各种award或者scholarship。最后一个section，写一下你掌握的技能，比如计算机涉及的各种tools，例如pytorch，还有你的语言能力，比如托福、GRE分数。</p>
<h2 id="文书"><a href="#文书" class="headerlink" title="文书"></a>文书</h2><p>个人陈述其实没那么重要，至少肯定不如cv重要，虽然很多人鼓吹说我依靠与众不同的文书逆袭了。但洗洗睡吧，这事儿落不到你头上，你还是老老实实写一篇正常的八股ps比较靠谱。开头不要说什么自己小时候怎么样怎么样，搞得和二十四史帝王传记开篇一样天有异象。你是申请phd，不是申请当皇帝。没人care你小时候如何如何天纵奇才，或者是怎么开始搞计算机的。你就直接说，我对计算机感兴趣，对ai感兴趣，因为ai可以改变世界，改变人类，blablabla。然后你就需要把你列在cv里的代表性项目，用一个high-<br>level的topic串联起来，来表达你曾经探索过什么方向。举个例子，比如我现在既做过few-shot，又搞过efficient ml，我就可以说我长期以来都对于如何在resource constraint的情况下提升deep learning model感兴趣。然后分别叙述这两个project。叙述project请简短叙述project是什么方向，然后highlight你做了啥，然后解释给了你哪些high-level的思考。陈述完个人过往经历之后，还要展望未来，说说你未来想干什么，这个部分可以针对不同学校定制，往该校相关方向关心的问题上面去靠。然后要写一段你愿意和学校的谁合作什么项目，一般一所学校列三个老师，不要太多，要不大家会觉得你海王。也不要太少，要不正好这老师不招生你就惨了。最后加一段结尾表达对该校衷心的热爱与对录取的期待。不要让ps超过两页。</p>
<h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><p>我大致谈谈AI的几大方向以及顶会，我把他分成了六大方向。<br>传统AI：现在做的人很少了，一般包括search、planning，其实bayes那些我觉得也可以算进来。顶会自然是aaai、ijcai，虽然这俩在cv领域不咋样。此外UAI也不错。</p>
<h3 id="CV-1"><a href="#CV-1" class="headerlink" title="CV"></a>CV</h3><p>计算机视觉（cv)：顶会自然是cvpr、iccv、eccv。很多人说cv不行了，但是国外申请的人还是多的一笔。有一些小会议，比如WACV、BMVC或者3dv，感觉3dv其实还不错，就是topic比较窄，只局限在3d vision。BMVC因为牛津的人力捧，所以感觉比wacv强一点。 </p>
<h3 id="NLP"><a href="#NLP" class="headerlink" title="NLP"></a>NLP</h3><p>自然语言处理（nlp）：可能比cv申请更卷的方向，因为美本喜欢做，而且因为short、finding这些，paper数量大家都很多。请见acl、emnlp、naacl，而且一般以长文为主。short要弱一些，finding就更弱了。至于其他的像coling这种会其实都差一档。 </p>
<h3 id="ML"><a href="#ML" class="headerlink" title="ML"></a>ML</h3><p>机器学习（ml）：因为理论，所以自动筛掉了很多竞争者。也因为这样，相比其他方向，ICML/NIPS/ICLR的论文数量是最能体现四大优势的。其他几项csranking就是个笑话。当然AISTATS和COLT也很好，但更理论。其实AAAI的ml paper比cv paper质量高一些。</p>
<h3 id="DM"><a href="#DM" class="headerlink" title="DM"></a>DM</h3><p>数据挖掘（DM）：这个领域基本是走日薄西山了，KDD已经不比10年前了，sigir更衰，我觉得已经混到cikm、icdm差不多的水平了。www会议还不错。而且这个领域的老师很多也在和nlp或者hci交叉，会投很多CHI或者acl这种会议。  </p>
<h3 id="Robotics"><a href="#Robotics" class="headerlink" title="Robotics"></a>Robotics</h3><p>机器人（Robotics）：Robotics感觉相当杂，基本cs、ee、me的人都在做，而且侧重点从偏perception到偏control的，这中间的差异可谓相当之大。一般传统上的三大顶会是ICRA/IROS/RSS，其中rss最好，iros相对最容易。近年还有做robot learning的人搞得CORL，北美反正是认这个会，可能国内因为ccf还没啥人投吧。</p>
<h2 id="选校"><a href="#选校" class="headerlink" title="选校"></a>选校</h2><p>然后我要开始得罪人了，开始点评各个学校的AI综合实力。当然大家选校基本是靠排名，常见的排名包括USNEWS的cs专排以及csranking网站排名。前者是peer review的结果，比较靠谱，但有滞后性。后者是辣鸡，不要相信那个排名，大家看看老师有谁就好了，而且名单还不一定齐全。不过排名很多时候差个两三名但实力其实差不多，所以我把他们分了个档来排，同档的有些微差距但并不十分大。</p>
<p>以下这个排名只反映AI综合实力，一不代表cs总体实力或者其他方向的实力，典型就是UIUC、UMich，他们system很好，但AI就一般。二不代表分项的实力，例如nlp和dm领域的排名就与之有很大出入。</p>
<p>至于大家选校，还可以看看faculty跳槽的去向，毕竟faculty判断谁靠谱那是真的靠谱。  </p>
<h3 id="Tier-1"><a href="#Tier-1" class="headerlink" title="Tier 1"></a>Tier 1</h3><p>四大yyds。不过CMU方差比较大，里面是真有些比较菜的老师的存在的。相对来说，斯坦福的cs基本坑货比较少，而且各个方向都十分强。MIT和Berkeley没有做data mining的，nlp的也很少，但Berkeley的cv和mit的robotics都逆天强。四大的共同特点就是ml都巨强，是直接拉出第五一档的强，而且人也特别多。  </p>
<h3 id="Tier1-5"><a href="#Tier1-5" class="headerlink" title="Tier1.5:"></a>Tier1.5:</h3><h4 id="UW-amp-Cornell："><a href="#UW-amp-Cornell：" class="headerlink" title="UW&amp;Cornell："></a>UW&amp;Cornell：</h4><p>两所基本在AI所有方向都很强的学校，但是加总起来从规模到质量都比四大稍差一点点的学校。UW主要是得益于西雅图的地理位置，msft和amazon钱给的多，而且像fb和google这些硅谷公司已经把西雅图变成了最大的分部，近十年来不知道从CMU挖了多少学术新星；cornell虽然在偏僻的伊萨卡，但是他在同处纽约州的纽约市建了康泰克校区，尽管坐公交要5个多小时吧。罗斯福岛地理位置很好，紧挨着google的office。虽然校园很小，但环境真的美如画。基本上，在工业界学术界联手搞事情的今天，地理位置的作用还是很大的。  </p>
<h4 id="Princeton："><a href="#Princeton：" class="headerlink" title="Princeton："></a>Princeton：</h4><p>普林整体实力其实不如上面两所，主要是因为规模太小。不过要是你碰巧是普林的强势方向，也就是偏重理论的方向，特别是ml，普林真的是很好的选择，但越应用就相对越差一些。不过普林这种基本一个方向坑位很少，可选的老师很少，录取的人也很少，很可能你找不到你感兴趣的方向。  </p>
<h4 id="Caltech："><a href="#Caltech：" class="headerlink" title="Caltech："></a>Caltech：</h4><p>更极端的例子，普林是你可能找不到对应的老师，caltech是除了极个别方向，比如rl啥的，你都找不到对应的导师。不过一旦有，还都是很好的！而且地处帕萨迪那，周围就是全美最好的中餐。  </p>
<p>tier1和tier1.5的学校基本都不是rolling- based，就发一轮offer，然后没有拿到的发reject，因为他们有足够的信心会有达到预期数量的学生会take offer。当然一般也没有wl，因为他们第一轮发的数量就多于预期录取的数量了。mit是个例外，可能会有一些wl，但很难转正，因为锯掉mit的太少了。  </p>
<h3 id="Tier2："><a href="#Tier2：" class="headerlink" title="Tier2："></a>Tier2：</h3><h4 id="UIUC："><a href="#UIUC：" class="headerlink" title="UIUC："></a>UIUC：</h4><p>我把UIUC放这里真不是故意黑他。可能有人说uiuc不是有韩家伟这种超级华人ip，但很遗憾，dm community的影响力已经日薄西山了，而其他领域uiuc也不错但我觉得基本就是tier2的水平。我认为主要还是地理位置的原因。uiuc很多funding来时军方，像他们的nlp方向的paper的tease都r经常是战场背景……  </p>
<h4 id="UT-Austin："><a href="#UT-Austin：" class="headerlink" title="UT- Austin："></a>UT- Austin：</h4><p>其实我甚至想把他放在tier2的第一个，但我怕uiuc的同学打我，而且UT的规模也不大。不过各个方向ut都还是做得不错的！而且陈平老师都住的地方，生活一定不那么困难！  </p>
<h4 id="UCSD："><a href="#UCSD：" class="headerlink" title="UCSD："></a>UCSD：</h4><p>我觉得ucsd综合来看真的是很好的选择。各方向基本都有老师而且实力都还不错，像cv老师是又多又强。而且地处拉霍亚，冬天穿条短裤走路去沙滩的感觉不要太好。  </p>
<h4 id="Gatech："><a href="#Gatech：" class="headerlink" title="Gatech："></a>Gatech：</h4><p>其实前两年我认为gt是最强的，奈何现在song le/hongyuan zha纷纷出走，其他一些老师沉迷industry不怎么在学校。但gt的底子还是很厚的，像cv/robotics都是十分的强。只是ml现在有点人去楼空。而且google也会在亚特兰大建新的分部，相信gt以后会更好。  </p>
<h4 id="UCLA"><a href="#UCLA" class="headerlink" title="UCLA:"></a>UCLA:</h4><p>UCLA的ml这几年是真的不错。其他方向像nlp、dm这几年也都作出了一些不错的hiring。唯一就是cv方向现在朱松纯回国之后没什么人，可能也是以后要招人的方向。  </p>
<h4 id="UMICH"><a href="#UMICH" class="headerlink" title="UMICH:"></a>UMICH:</h4><p>umich的sys很强，特别是arch方向，但ai真的一般。他最近做的几个hiring我也都认为一般，大家可以自己查csranking，人挺多，但个体实力我就不予置评了。当然像honglak这种没列出来，但他基本只招韩国人。  </p>
<h4 id="COLUMBIA"><a href="#COLUMBIA" class="headerlink" title="COLUMBIA:"></a>COLUMBIA:</h4><p>哥大AI挺强的，基本上各个方向都有老师，就是许多老教师现在不是很活跃。每个方向的新老师也不是很多，基本上就一个。  </p>
<h4 id="PENN"><a href="#PENN" class="headerlink" title="PENN:"></a>PENN:</h4><p>PENN的robotics和nlp都很强，像grasp基本涵盖了robotics所有的方向了。而且今年penn cs也在积极招新的faculty。  </p>
<h4 id="HARVARD"><a href="#HARVARD" class="headerlink" title="HARVARD:"></a>HARVARD:</h4><p>也是只有ml这种偏理论的方向，应用方向要么缺门，要么相对弱势。当然，哈佛的econ+cs、tcs还有ml都是不错的。加上哈佛的牌子，能去还是很不错的。  </p>
<h3 id="Tier3："><a href="#Tier3：" class="headerlink" title="Tier3："></a>Tier3：</h3><p>top30其他学校。其实像umd这种，实力也够tier2。所以我的分类准则是根据四大选手会选哪些做保底。就即便上了斯坦福的学生也会申请许多tier2的学校，但他们大概率不会申请tier3的学校了。不过tier3的学校也有很多很好的老师。BTW，我认为清华的ai实力在tier3，当然这没有考虑毕业出路等其他因素。</p>
<h2 id="选老师"><a href="#选老师" class="headerlink" title="选老师"></a>选老师</h2><p>其实老师比学校重要。老师主要是要看让你做什么，你做的topic直接影响你未来的出路。建议提前查看组里的同学都在做什么，以及他们毕业后的去向。基本这就是你未来的模板。然后还要关注和这个老师合作的舒适度，如果是个push或者放羊的主，你就要掂量掂量自己的个性了，毕竟五年快乐过下来比你做出多大成绩要重要。我见过很多北美phd读的很快乐的，也见过很多痛苦到quit的，主要的区别就是选了个什么样的老板。所以怎么能够掌握自己的方向都有哪些活跃的faculty，又怎么能够判断他们工作solid与否或者是否是rising star呢？除了csranking和官网，我还有一个建议是好好利用twitter。基本年轻的老师都会在上面推销自己的工作。而且有一些营销号，像AK，会转推好的arxiv new submission，比看arxiv daily高效多了，也比微信公众号那些花钱pr的paper质量好多了。</p>
<h2 id="套磁"><a href="#套磁" class="headerlink" title="套磁"></a>套磁</h2><p>我觉得其实对多数人没啥用，多数都是模板回复，毕竟多数人没到非你不可的地步。但我还是建议大家就像表白一样，宁可被拒也不要错过。就给自己选的professor of interest发一封邮件，说说自己对他的paper是多么的感兴趣。可能全是模板回复或者石沉大海，说欢迎申请或者你录取了我们详谈，但没准就有一个愿意和你面试呢。而且有些paper在投的同学，也可以通过email来和professor或者负责admission的staff来update你paper的情况。</p>
<h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>基本所有学校都要有面试，第一轮基本在一月份，一般拿到面试就离offer很近了。多数学校的面试就是聊聊你cv上的paper，你想做的方向以及瞎扯淡。最重要的是放松，不要紧张，就正常的和老师交流，把你paper的细节清晰地说出来，从motivation到method再到取得的结果。然后要对面试老师近期的paper有所了解，建议仔细阅读他的homepage以及google<br>scholar。我相信大家经过和暑研老师的meeting肯定对这个驾轻就熟了。</p>
<h2 id="等结果"><a href="#等结果" class="headerlink" title="等结果"></a>等结果</h2><p>一般会在一月底二月初开始出结果，tier2的学校到三月份也会接着发，毕竟要等第一轮录取的学生是否接前面学校的offer。大家也可以利用这个时间和学校更新自己cv上在投paper的情况，个别老师也会在三月份再安排面试。总之，耐心等待吧，这个过程很煎熬的。</p>
<h2 id="非cs院系的ai"><a href="#非cs院系的ai" class="headerlink" title="非cs院系的ai"></a>非cs院系的ai</h2><p>其实除了cs系，ee/me这些院系也有做ai的，比如stanford的ee、Berkeley的me和mit的aeroastro。只不过他们光谱比较窄。ee基本偏signal processing，me基本只有robotics，这样到时候找工作的时候也会受限。比如me做robotics也基本都是去自动驾驶公司，相比之下cs做robotics的选择会宽的多。教职的话就更不用说了，cs做ai的可以找ee的教职，但ee做ai的找cs教职难度层级大大提高。所以即便差一层级的学校，建议大家还是优选cs，如果你想做ai的话。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ms的情况我写不动了，过两天我再开一个洞写一写。<br>所以总结一下timeline就是：认真刷gpa-&gt;srt或者联系老师去搬砖-&gt;考托福和GRE-&gt;联系暑研-&gt;拿到重要的海外推荐信-&gt;整理ps&amp;cv-&gt;在申请网站上填申请-&gt;套磁-&gt;面试-&gt;等offer-&gt;决定去哪里-&gt;办签证买机票。</p>
<h1 id="MS-正文"><a href="#MS-正文" class="headerlink" title="MS 正文"></a>MS 正文</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>暌违日久，前来兑现承诺，写一写美国mscs的申请经验。</p>
<p>之所一直拖着，一方面自然是因为我拖延症晚期又发作了，另一方面这东西难写的程度让我望而却步。在我看来，phd申请同质化很高，大可以one to rule them all（魔戒烂梗。。。），但ms申请真的是五花八门，不同项目之间差异太大，很难找到一根主线把所有项目全串起来。所以啊，我先大致提纲挈领地写一写，然后还是得把每个学校每个项目逐个分析。当然请首先阅读本文的前传，也就是AI PhD的申请经验🕳，毕竟ms申请的timeline和准备的材料大同小异，所不同之处主要还是在项目本身。</p>
<p>所以要怎么提纲挈领呢？我想谈两件事，第一个，我们申请ms要看什么？第二个，ms招生的又看我们什么？</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>申请美国cs的master，目标无外乎三个，留美工作、准备继续深造读phd、回国工作。</p>
<p>留美工作大概是多数人的目标。基本的流程就是上课刷题、cpt实习，opt，抽h1b，排绿卡，所有学校所有项目都是如此。但上学只能去一个项目，自然是要优中选优，选最好的那个念。所以我经常碰到很多人会问的一个问题是A项目和B项目哪个好啊？我的答案很多时候是不知道。因为选项目最重要的是适合自己，有些项目再好，但是不符合你自身的现状或者预期目标，那对你就不是好项目。一般来说一个ms项目首先值得关心的是年限问题。一般ms项目都是两年，当然也可以提前毕业，但也有的meng项目只有一年。一年的项目往往意味着没有cpt，也就是不能暑假实习，也就是到了美国就要开始找full time job。当然例如cmu的某些项目暑假还要上课，这也意味着没有full-time cpt，暑假也无法实习。如果你大三暑假或者大四的暑假没有在比如google、msft、amzn这种知名实习过，那你直接怼全职就很困难。要知道你opt结束之后只有60天的grace period，没工作申请不了opt过了60天就要离境。所以对于那些实习不丰富，或者算法题还没刷的很熟练的，建议还是优选两年的项目比较好。但两年项目也有很大的不同。虽然很多人说美国念什么项目无所谓，都能拿面试，到时候就看你自 leetcode刷的如何。我做了很多的统计和调研，发现根本不是这么回事儿，很多人都只能拿到一部分公司的面试，也就是说拿面试这就是第一道坎，很多人在这儿就折戟沉沙了。那么怎么才能拿到面试呢？首先，你的cv要和cs高度相关，如果你背景全是finance或者financial engineering，你申请sde肯定会被直接pass，申请data scientist还差不多。这也是为什么明明ee的项目也能做sde而且ee的项目明显好申请，但还是那么多人往cs的master program上去挤。而且cs背景不仅能帮助你拿面试，还能帮你拿多的工资哦。然后呢，面试还要考虑到peer pressure。有些公司比如fb就很讲究diversity，这也意味着很多学校有一个headcount的上限。像cmu这种内卷大校，你要是简历不能出类拔萃很可能连fb的面试都无。因为career fair上的一抓一大把，你要找不到靠谱内推，很可能直接被刷掉了。其次，地理位置也有影响。由于IT公司集中在西海岸，我听到的普遍反映是西海岸学校的cf要比东海岸学校的cf上的公司多，当然主要是中小公司，因为flag这种都是全国招聘。而东海岸像纽约一般fintech的公司会多一些。  </p>
<p>所以拿到面试之后的第二件事就是面试了，这我觉得没啥好说的，就是刷题，你不刷个300道leetcode，我都替你在白板上写code这事感到心里没底儿。现在疫情期间，感觉也没onsite了，基本都是online做题。具体经验请参考一亩三分地。很多公司会出很多原题，像fb似乎全是他那个tag的原题，当然google就很喜欢出新题，甚至偶尔还会出一些面试官都不知道确切答案的题出来XD。当然，除了算法题还有behavior面试，像amazon就很重视这玩意儿。大家准备面试呢，还是要平衡好上课和刷题这两个事儿。当然啦，你读ms本质是买了个opt，在我看来刷题找工作才是正事儿，读书上学那是副业。因为ms时间很短，不像本科或者phd那样有时间让你探索自我，所以还是要功利一点。而且要是真喜欢上课的话，完全可以找到full time之后慢慢上个够。所以啊，大家还是要根据自身情况选择课程硬核还是更flexible的项目。  </p>
<p>那面试拿到实习offer之后就match组，match到了满意的之后就可以直接快进到summer intern了。所有人都喜欢去fb实习不只是fb钱多，更是因为fb可以直接给reutrn offer，而万恶的google实习了还得再面两轮（不实习是5轮）。一般暑假努力干就是为了这个return。有return之后第一个好处是稳定心态，第二个是你找其他工作可以compete offer。像google这样的，要是你没有其他offer compete，给你的package就很低。而且一般intern表现好的，都更容易拿到更大的package。  </p>
<p>一个package的主要组成就是base+股票+signon。像google的等级，一般本科和ms进去是L3，phd是L4，但有些ms也能L4，一般是发了paper的ms，因为在美国mle&gt;sde&gt;data scientist。L3的base一般是11-14w，L4能到17w左右。像cmu这种技校就十分贴心地公开了所有项目的毕业生拿到的base salary的统计：<a href="https://www.cmu.edu/career/outcomes/post-grad-
dashboard.html">https://www.cmu.edu/career/outcomes/post-grad-
dashboard.html</a><a href="https://www.cmu.edu/career/outcomes/post-grad-
dashboard.html"></a>。大家可以选择master+scs+自己心仪的program看看出路。至于股票的话，一般都是四年为期，多数人都是4年20万左右。很多人虽然base不高，但股票多，特别是最近美股坐着火箭一样往上涨，今年到现在就涨了40%，所以package总和可能特别高，像phd的base一般也不比ms高多少，但是股票一般没上线，像今年有个phd去adobe research就拿了40多万的股票。另一笔钱是签字费，只有第一年有，一般就几万，fb的上限是10w。所以一般一个经典的fresh grad package就是12w+20w/4+7.5w/4=18.875w，差不多就是一个正常水平的新员工的税前package。当然税后能到手的也就60%，因为加州税太tm多。所以很多人往西雅图跑，因为华州没有9%多的州税，只有联邦税，所以很多人算了一下同样的package能比加州一年多拿一万多。当然西雅图的税前也要比加州低，所以总算起来其实税后差不多，但是西雅图的各种开支更低，房价更是只有湾区的一半出头。所以就看大家愿不愿意给CA政府交阳光税了。不过疫情之后似乎西雅图和湾区的税前package也差不多了，可能是因为大家都wfh吧。。。  </p>
<p>毕业后full time一般要用opt实习，然后在opt实习期间要抽h1b，一般opt期间能抽三次。但很多人都提前毕业赶在3月前入职，主要是h1b抽签在4月，这样能抽4次。一般抽三次的最后命中率是7成，命中不了就回国、去加拿大或者在读个professional program继续进入opt-&gt;h1b的循环之中。而且虽然名义上人人平等，我直觉感觉这个抽签明显偏向高学历，当然也可能是统计偏差。如果想长期留美，还可以排绿卡，一般硕士排eb2，phd只要别太水可以排eb1，期限短很多。当然啦，作为清华的学生还是不鼓励大家申请绿卡啦。  </p>
<p>如果一毕业就想回国，其实找国内的实习或者full-time就好了。</p>
<h2 id="深造"><a href="#深造" class="headerlink" title="深造"></a>深造</h2><p>上面说的都是找工作的东西，对于少部分有意读博深造的，我建议是先确认老板。虽然有些人管cmu的msr、mlt和uiuc的mscs叫研究型项目，但在我看来不准确，美国所有项目都可以做研究，一年的meng也可以，学校老板可以不搭理其他学校的套磁，但自己学校的任何一名学生发邮件想做research他都会答应。那些所谓的研究型项目不过是必须做研究和肯定有funding罢了。研究型项目可不是能随便选老板的，要看老板有没有以及你的竞争对手的情况。想想一整个项目几十个人都要做research的盛况，你首先真不一定能去你最心仪的老板，像cmu ri的很多做cv的老师已经不招master了，其次你老板手底下可不止你一个人，到时候申请的时候不可能全留下，顶多留一两个。所以不要觉得录了这种研究型项目然后接着读该校的phd就稳了，你很可能到时候还是正常申请，只能说你留校读phd的可能性比其他人大一些，但是没留校和其他人的情况是一样的。而且要是碰到个给你安排个不好发paper方向的advisor，你的申请还很可能处于一个不利的地位。所以啊，我建议还是先确定潜在的ms advisor，这个人要愿意要你，而且最好你的水平能留下，申请还是得留个保底。而且ms申请是一定要有pub的，所以一定要找个近年发paper多的，最好是找个ap，毕竟不像senior的老教授对文章要求那么高，更方便多水几篇。</p>
<h2 id="选项目"><a href="#选项目" class="headerlink" title="选项目"></a>选项目</h2><p>所以这些五花八门的ms项目是如何选择我们的呢？其实标准完全不一样。像cmu scs的很多项目，特别是mld、ri、lti的项目主要是要背景match，言外之意就是要你有相关的research经历，最好是有paper，sde实习的不太管用。但一般其他的mscs项目则比较一视同仁。但是东部的藤校比较重视gpa或者托福这种标化成绩，公立学校感觉重视程度低一点点。有些像uiuc这样的学校因为mscs是给funding做research的，所以一般比较看重本校的推荐信。当然啦，我觉得这还得case by case，逐个项目给大家分析。至于准备和流程，基本和phd申请一毛一样，区别主要在于各项加权的方法有差异。</p>
<p>我在下面的回复里按usnews的排名给大家分析一下top30的学校cs方向的ms program。</p>
<h2 id="逐学校分析"><a href="#逐学校分析" class="headerlink" title="逐学校分析"></a>逐学校分析</h2><h3 id="Stanford"><a href="#Stanford" class="headerlink" title="Stanford"></a>Stanford</h3><p>mscs要么top5+3.95gpa，要么是3.8+的gpa加上一作paper两篇，或者有ugvr强推+突出的特长点。</p>
<h3 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h3><p>没有mscs项目，meng是给本科4+1的，phd能中途拿一个ms。似乎也没有相近的cs program，可能media lab是一个？但那个需要考雅思，而且很难。</p>
<h3 id="Berkeley"><a href="#Berkeley" class="headerlink" title="Berkeley"></a>Berkeley</h3><p>ms是本校的博士预科班，一年的meng的bar并不很高，基本gpa3.75就大有希望。只不过呢，这项目不是纯正的cs项目，要上leadership的课，其实比较浪费时间的。现在似乎meng也能延期了，但似乎申请延期的过程也是遭到了很多吐槽，需要进一步查证。</p>
<h3 id="CMU"><a href="#CMU" class="headerlink" title="CMU"></a>CMU</h3><p>CMU：我就是不想写cmu艹，这项目也太多了。。。  </p>
<p>先来scs吧。</p>
<h4 id="csd"><a href="#csd" class="headerlink" title="csd"></a>csd</h4><p>也即mscs，没啥好说的，bar稍微低一点的stanford mscs，录得就是gpa学霸。  </p>
<h4 id="mld"><a href="#mld" class="headerlink" title="mld"></a>mld</h4><p>mld名义是就业项目，但很多人还是做research读phd，整体人比较少，竞争压力小，十足的好项目啊！！！  </p>
<h4 id="ri"><a href="#ri" class="headerlink" title="ri"></a>ri</h4><p>msr是一定要嗑盐的，但整体做robotics的老板更好找，做cv的不好找，这就使得另一个项目mscv现在变得格外不适合嗑盐，但找工作还是很香的。这两个项目我看现在有research背景已经不够了，是最好有paper了。另一个项目msrd的bar要低一些，主要是robotics系统设计，找工作也比另两个差一些，毕竟robo项目比cs找工作还是要难。  </p>
<h4 id="lti"><a href="#lti" class="headerlink" title="lti"></a>lti</h4><p>mlt也是个research项目，miis和mscv的地位差不多，这俩也是比较prefer有paper的。mcds是找工作王牌项目，有data、system、hci三个track，适合各种方向的申请者。课程也很硬核。msaii就有点儿水，倾向非cs背景转专业的，而且学费更贵。</p>
<h4 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h4><p>项目太多，我一个申请phd的也搞不明白，就知道他申请要面试，面试要写code。而且有些还暑假上课不能实习，小心雷坑。  </p>
<h4 id="HCII"><a href="#HCII" class="headerlink" title="HCII"></a>HCII</h4><p>mhci就很难，而且英语要求也比其他专业高，托福最好能110以上，口语能26。education tech &amp; applied learning science就要水不少啦  </p>
<h4 id="CBD"><a href="#CBD" class="headerlink" title="CBD"></a>CBD</h4><p>Computational Biology Department：吾尝闻mscb挺水的。。。很多人在一亩三分地上吐槽他是个坑</p>
<h4 id="INI"><a href="#INI" class="headerlink" title="INI"></a>INI</h4><p>msin就一小号的mcds。msit和isr的项目一样复杂，大家自己看看具体内容吧，我也没有仔细阅读过。  </p>
<h4 id="ECE"><a href="#ECE" class="headerlink" title="ECE"></a>ECE</h4><p>ee、自动化的同学也可以申请这个。  </p>
<h4 id="heinz"><a href="#heinz" class="headerlink" title="heinz"></a>heinz</h4><p>mism比较适合信管或者经管转码的同学申请，也有好多track，我也不是很懂，cmu为了赚钱真是疯了……出路我看基本多数是data scientist。  </p>
<h4 id="cmu-sv"><a href="#cmu-sv" class="headerlink" title="cmu-sv"></a>cmu-sv</h4><p>硅谷校区，没啥老师，不咋上课，或者课程质量很低，适合来美国就是为了找工作然后开始养老旅游的人。  </p>
<h3 id="UIUC"><a href="#UIUC" class="headerlink" title="UIUC"></a>UIUC</h3><p>mscs是个research program，喜欢有uiuc推荐信的，mcs是个就业项目，感觉bar也不是很高？可能介于columbia和Berkeley的meng之间？</p>
]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>申请</tag>
      </tags>
  </entry>
  <entry>
    <title>The Legend of Escape</title>
    <url>/2022/02/05/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/The%20Legend%20of%20Escape/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="88d86729de9908d32e71313d64124545c20d75b077f7a65f80447caebbb92799"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>EECS list</title>
    <url>/2022/02/04/%E5%87%BA%E5%9B%BD/shool_details/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个本来是世毕盟的推送，但是里面广告太多了，我人为删除了大多数广告等等乌七八糟的东西（其实就是 command + F 搜索世毕盟三个字，不破坏语义完整性的就一个一个删，破坏语义完整性的就把“世毕盟”换为了“某机构”）</p>
<p>如果你感兴趣，想要了解广告，<a href="https://mp.weixin.qq.com/s/0xZCdOemTW8ve4VDUklhaQ">链接在这儿</a></p>
<p>其实原文也不只是广告，还有些申请小的案例啥的，说不定有收获啥的</p>
<p><del>反正我不想读</del></p>
<p><del>白嫖他不香吗？</del></p>
<p>棕榈大道也有讲学校的文书，<a href="https://cloud.tsinghua.edu.cn/d/d6d4505f6073412f8a39/">链接在这儿</a></p>
<p>另外有一篇很重磅的分析，目测应该来自某个 7 字班茶园的学长吧，<a href="https://zhaochenyang20.github.io/2022/02/05/%E5%87%BA%E5%9B%BD/AI_application/">链接在这儿</a></p>
<p>我之后结合棕榈大道的白皮书，写进出逃记那篇博客里面</p>
<p>什么，你不知道出逃记那篇博客的密码？</p>
<p><del>那就不用知道了…</del></p>
<h1 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h1><p>MIT EECS系，非常大，合计博士700人在读（多个年级合计）。包括EE方向和CS两个大的方向，其中EE主要包括如下子方向：Information, System, and Network Science; Integrated Electronic and Photonic Systems; Physical Science, Devices, and Nanotechnology; Bioelectrical and Biomedical Engineering；而CS主要包括如下子方向：Artificial Intelligence; Computer Systems, Networks, and Architecture; Theory of Computer Science; Bioinformatics and Computational Biology。MIT EECS，世毕盟已经有超过40名学员拿到其PhD录取，就读，甚至从其中博士毕业。  </p>
<p>MIT CS大部分研究组构成了著名的CSAIL（MIT计算机科学与人工智能实验室），部分和数据科学，统计学习有关的研究团队组成了LIDS和IDSS两个统计与数据科学研究机构。CS方向有Ph.D.项目和MEng.项目，但是MEng项目多数情况下只招收MIT本校学生，因此一般认为MIT EECS系只对外招Ph.D.学生，是美国录取率最低的CS项目之一，每年的录取率在1%-5%左右，总共录取150-200人。</p>
<p>这里补充一下几个顶级学校 (MIT, Stanford, Berkeley, CMU, Princeton) CS PhD的申请。对于PhD的申请来说，标准相对统一，主要针对科研，大部分对GPA看得不重，但对海外经历（包括科研以及交换学期的GPA等）看重，对publication和network极其看中。需要说明的是，近几年的趋势是，顶级学校的PhD项目，已不仅仅是看publication的数量，而更加看中network和推荐信。顶会文章往往只是敲门砖，和教授的network以及获得的海外教授的强推成为了关键。这更加凸显了尽早布局、提前规划以及增加海外科研经历的重要性。</p>
<p>从申请材料上看MIT CS的博士，雅思和托福都可以用，两者选择其一提交；同时，重要的是MIT EECS系的申请，不需要GRE，所以如果你GRE很低，或者根本没有参加过GRE考试，在申请MIT EECS的时候根本不吃亏。再者，雅思和托福成绩也不太重要，也有人在托福不到100分，也被MIT EECS项目录取。</p>
<h1 id="UCB"><a href="#UCB" class="headerlink" title="UCB"></a>UCB</h1><p><strong>可以这么说，UC Berkeley的CS的博士录取，在四大计算机神校之中，是最困难的！</strong></p>
<p>我们这里多谈一下涉及更多人的，Berkeley计算机硕士的情况。MEng，授课型硕士，每年有2000多人申请，录取300人左右。整体录取率在10%-30%。项目时间为1年，偏向于就业，而且是管理者层面的就业，因为从课程设置就可以看出来，管理和CS方面的课程占了一半。一年4门technical课（每门3-4分），两学期的capstone project（总共5分），2门capstone写作课（共2分），6门其它商科课（共6分）。有很多个Track，被定义为CS的（偏软的）差不多是Data Science and Systems 和 Visual Computing 两个Track。在读学生，可以参加capstone project，和教授做工业界或者学术界的科研项目。 </p>
<p>该项目在读时间较短，申请难度在CS四大里面相对不大，就业placement因为地处加州，旁边就是三藩市和硅谷，地理位置占很大优势，就业非常不错。</p>
<p><strong>该项目的申请技巧性较大，看重的背景与大部分Stanford以及CMU的master有很大不同，对此，世毕盟经过多年摸索，有一套非常完整的经验。世毕盟于2019 Fall有11名学员收获本项目的offer。</strong></p>
<p>补充：Berkeley CS MS项目招生极少，一般都是在Berkeley本校faculty的推荐下录取，科研导向，类似于最开始没有funding的PhD项目，或者说给Berkeley其他系的博士附加来读一个CS硕士双学位的。</p>
<h1 id="Stanford"><a href="#Stanford" class="headerlink" title="Stanford"></a>Stanford</h1><p>Stanford University计算机系不需要多介绍。其博士招生有其特别之处。其录取的小方向包括：Artificial Intelligence, Systems, Theory, Graphics, HCI, Biocomputation（合计六个子方向），合计大概全球录取110人左右，其中Artificial Intelligence（人工智能方向）的录取人数，占所有录取人数的50%左右，并且未来可能更多！！！有的小伙伴为了避开竞争激烈的AI方向，而去申请其他方向，不一定是明智的选择（例如HCI方向，只录取2人，且基本不招收中国人，你提交申请的那一刻，基本就等于被拒绝了）。</p>
<p>硕士方面，由于Stanford地处硅谷，其CS硕士项目就业率非常高。申请难度很高，不亚于tier2的PhD申请难度，但并非只看科研、文章，对申请者背景的独特性有较高要求。MSCS项目包含人工智能、计算生物学、计算机网络安全、人工交互等10个specialization，录取MSCS的学生可自由选择specialization，且TA机会多，很多MSCS的学生都会选择进入著名的计算机科学实验室（如Stanford Artificial Intelligence Lab，Stanford Computer Graphics Lab等），如果master期间和教授做Research，申请Stanford的PhD会容易一些（大概1/2命中率），对申请者的科研背景比较看重，近两年比较注重Diversity，性别/种族等少数群体申请会容易一些。 </p>
<h1 id="CMU"><a href="#CMU" class="headerlink" title="CMU"></a>CMU</h1><p>CMU在众多排行榜上都是CS领域排名第一的美国大学，在全球知名度非常高。它的Master项目超过10个，分别下属于SCS下的各个院系。CMU的项目大致可以分为research-based和course-based两个类别，也可以通过不同院系的下属来分类。CMU的项目申请在项目选择、申请策略以及文书针对性准备三个方面的技巧性很强。</p>
<p>CMU计算类的硕士项目，主要分布在如下的系/所内部：Computational Biology Department（计算生物系），Computer Science Department（计算机科学系），Human-Computer Interaction Institute（人机交互研究所），Institute for Software Research（软件研究所），Language Technologies Institute（语言科技研究所），Machine Learning Department（机器学习系），Robotics Institute（机器人研究所），合计7个院所。以下只介绍申请的最多的一批计算机类硕士项目：</p>
<h2 id="MSCS"><a href="#MSCS" class="headerlink" title="MSCS"></a>MSCS</h2><p>Computer Science系下属的授课项目，但也可以广泛联系各个系的教授进行科研，公认的竞争最激烈的CS Master项目之一，申请人数很多同时录取率很低。在CMU的选课有很大的自由度(几乎没有限制)和比较高的优先级。项目本身的workload在CMU里不算特别大，每学期3门课左右。该项目主要招CS科班出身（极少有转专业申请上的情况出现），要求推荐信、publication、GPA等各个方面都很优秀。 </p>
<h2 id="Master-of-Robotics-MSR"><a href="#Master-of-Robotics-MSR" class="headerlink" title="Master of Robotics (MSR)"></a>Master of Robotics (MSR)</h2><p>机器人系下的纯正科研硕士项目，有funding，可以转PhD。这个项目是CMU计算机学院机器人系为了遴选和培养PhD的过渡项目，在申请机器人系PhD的时候可以选择是否同意降转MSR。申请时对科研背景和成果很看重。课程的压力比较小 (每学期2门课，和博士1.2年级一样)每届招30-40人，中国人数量比较少，但最近几年有所提高。申请难度高，基本要求和评价标准类似于PhD。对海外科研看重，喜欢纯正robotics科研出身。</p>
<h2 id="Master-of-Computer-Vision-MSCV"><a href="#Master-of-Computer-Vision-MSCV" class="headerlink" title="Master of Computer Vision (MSCV)"></a>Master of Computer Vision (MSCV)</h2><p>机器人系下的授课型硕士项目。申请形势同样很火爆。和MSR相比课程压力较大(每学期3-4门课)，定位是毕业找工作，就业形势非常好，同时也有转PhD的可能性。申请难度高，与MSCS接近，看中CV方面针对性的经验，需要提早进行CV方面的布局和经历的积累，讲究学术经验和工业界经验的平衡。世毕盟每年有多名学员成功申请到该项目</p>
<h2 id="Master-of-Language-Technologies-MLT"><a href="#Master-of-Language-Technologies-MLT" class="headerlink" title="Master of Language Technologies (MLT)"></a>Master of Language Technologies (MLT)</h2><p>语言科学系下的纯正科研硕士项目，有funding，可以转PhD。定位和MSR类似，区别是科研重点在NLP（自然语言处理）方面。如果要转博士，在不换导师的情况下，硕士两年的时间是算在博士的总时长里的。这点和MSR项目相同。是NLP方面理想的项目，可就业可学术。该项目对科研看中，专业要求高，并不一定需要CS出身。世毕盟曾帮助本科信管、EE等专业学员转专业申请到此项目。</p>
<h2 id="Master-of-Computational-Data-Science-MCDS"><a href="#Master-of-Computational-Data-Science-MCDS" class="headerlink" title="Master of Computational Data Science (MCDS)"></a>Master of Computational Data Science (MCDS)</h2><p>MCDS就是以前CMU大名鼎鼎的VLIS项目，是一个授课型的硕士项目。后来划归到语言科学系下。学生的就业数据非常好，这个项目非常的火，现在是CMU申请人数最多的项目之一。课程压力很大(每学期3-5门)，且大四暑假有暑期课程。可以自己选择18和月或者24月毕业，大部分同学选择18个月方便实习和就业。若想参与科研或多上一些课可以选择24个月。申请方面并不是完全看中科研，但看中背景独特性，需要有针对学员本身背景的特色包装。</p>
<h2 id="Master-of-Science-in-Intelligent-Information-Systems-MIIS"><a href="#Master-of-Science-in-Intelligent-Information-Systems-MIIS" class="headerlink" title="Master of Science in Intelligent Information Systems (MIIS)"></a>Master of Science in Intelligent Information Systems (MIIS)</h2><p>语言科学系下比较新的授课型项目，申请难度相比前几个项目较小一点。一个学期48个最低学分要求里，有12个学分是和导师做研究或做项目，剩下36个学时基本是三门大课。该项目并不强调CS科班出身，对转专业申请比较友好。</p>
<h2 id="MSIN，MSIS-MSIT-MOB-MSIT-IS"><a href="#MSIN，MSIS-MSIT-MOB-MSIT-IS" class="headerlink" title="MSIN，MSIS, MSIT-MOB, MSIT-IS"></a>MSIN，MSIS, MSIT-MOB, MSIT-IS</h2><ol>
<li><p>INI （Information Networking Institute，CMU信息网络研究所）下属的四个项目。INI是由CS、Tepper商学院、公共关系管理学院Heinz College和工程学院合办的面向就业的一个院系。MSIN和MSIS是在CMU本部上两年学。MSIT的两个是第一年在匹兹堡第二年在硅谷。</p>
</li>
<li><p>MSIN 选课自由度比较高，大概有八门课的选择自由度，所以可以主攻一个方向比如system或者AI/Machine Learning。这两个领域也是CMU的强项。MSIT-MOB自由度次之。MSIT-IS和MSIS比较侧重网络安全。 </p>
</li>
<li><p>第二年去硅谷各有利弊。如果要找全职，在硅谷面试会方便很多。但是硅谷校区质量高的课程比较少。在匹兹堡的话选课不会被限制，但是找全职飞来飞去面试还是很累的。</p>
</li>
<li><p>以上项目对CS科班出身并不看中，每年都有多名非CS专业的成功申请者，专业包括EE、信息工程、金融、商科、数据科学等。</p>
</li>
</ol>
<h2 id="Master-of-Software-Engineering"><a href="#Master-of-Software-Engineering" class="headerlink" title="Master of Software Engineering"></a>Master of Software Engineering</h2><ol>
<li><p>该项目是Institute for Software Research系下的master项目，非科研导向，内含大量的课程以及工业界性质的大project的训练，目标是培养学生的就业技能。就业极好，85%以上的中国学生在master后就业都是应聘software engineer职位。申请方面，该项目对大型软件开发以及代码能力非常看重，需要申请者提早有针对性的进行背景提升以及文书包装。该项目对CS科班出身并不看重、对国内学校排名也并不看重，每年都有非985大学的申请者申请到该项目。需注意，该项目申请过程中有代码测试，最好提前做刷题准备。</p>
</li>
<li><p>除以上项目之外，CMU的硅谷校区也有一个Master of Software Engineering项目。有意思的是，该项目并非Institute for Software Research系开设，而是ECE系开设。该项目同样是就业导向，除上课之外，有大量项目训练，并且会通过学校本身network创造实习、就业等机会。申请难度比上面项目略低，但就业同样极好。是一个常被中国申请者忽略或者低估的项目。申请方面，同样需要针对性的准备和技巧，对国内学校排名不看重。每年都有非985/211大学的申请者拿到该项目的录取。</p>
</li>
</ol>
<h1 id="UIUC"><a href="#UIUC" class="headerlink" title="UIUC"></a>UIUC</h1><h2 id="MSCS-1"><a href="#MSCS-1" class="headerlink" title="MSCS"></a>MSCS</h2><p>UIUC是一个CS神校，CS系实力非常强。UIUC的Master是纯正的科研型硕士项目，有funding有导师。录取门槛极其高，基本低于5%的录取率。录取标准大致等同于PhD，比UIUC的PhD项目的标准稍低。大部分学生会找到自己的导师并进行科研，2年后为申请PhD做准备。</p>
<p>该项目的申请截止日期在12月15日，和UIUC CS PhD的申请截止日期一致。 </p>
<h2 id="MCS（Professional-Master-of-Computer-Science）"><a href="#MCS（Professional-Master-of-Computer-Science）" class="headerlink" title="MCS（Professional Master of Computer Science）"></a>MCS（Professional Master of Computer Science）</h2><p>近几年新开的项目。上课等方面和MSCS一样，区别是授课型项目，没有科研和找导师的要求，因此没有funding。从这几年的毕业生反馈而言，就业很好。该项目本身对申请者的科研背景和要求没有MSCS高，同时对国内申请者的学校要求也较为宽松。世毕盟帮助多名学员申请到此项目。但据世毕盟观察，该项目的申请门槛在快速提升。该项目学制3个学期，一般大概是一年半的时间。</p>
<p>该项目的申请截止日期在1月15日，和MSCS以及PhD的申请截止日期不一样。</p>
<p>PhD的申请，相比于四大，教授权力很大，基本教授可以决定录取，非committee强势学校。只要教授愿意要，committee基本不会卡英语成绩、本科学校排名、GPA等条件。</p>
<p>UIUC工程学院的计算机系的研究生项目（含PhD, MSCS，MCS）的申请都不需要GRE成绩。尽管官网对于国际学生的托福成绩有严格要求，即使申请者不够官方要求的分数，也无法阻止Committee的发offer的决心和速度！！！</p>
<h1 id="Cornell"><a href="#Cornell" class="headerlink" title="Cornell"></a>Cornell</h1><h2 id="CS-Master-of-Engineering-MEng"><a href="#CS-Master-of-Engineering-MEng" class="headerlink" title="CS Master of Engineering (MEng)"></a>CS Master of Engineering (MEng)</h2><ol>
<li><p>康村坐落于纽约州的一个小镇Ithaca，是一个真真正正的村，环境比较自然。Meng项目时长只有9个月两个semester，可以申请延期一学期毕业。相对其他学校华人比例较少，其中香港和海本居多。 </p>
</li>
<li><p>CS拥有最高的选课priority，对于选课的自由度很高。</p>
</li>
<li><p>雇主的口碑较好，linkedin的求职排名在Software Engineer这块排全美第二，学校本身就是绝对的加分项。</p>
</li>
<li><p>申请方面，CS的科研并不是该项目考察的重点。项目经历、海外经历、工业界经历、大公司实习、创业等经历，是该项目更为看重的方面。喜欢有美国本科交换经历的申请者。</p>
</li>
</ol>
<h2 id="Cornell-Tech-CS-Master-of-Engineering-Meng"><a href="#Cornell-Tech-CS-Master-of-Engineering-Meng" class="headerlink" title="Cornell Tech CS Master of Engineering (Meng)"></a>Cornell Tech CS Master of Engineering (Meng)</h2><ol>
<li><p>极好的一个新项目。在Cornell位于纽约的新校区，Roosevelt Island，完美填补了Cornell本校区地理位置带来的找工作方面的限制和不便。</p>
</li>
<li><p>招生看重的方面和Cornell Ithaca本校区的MEng类似，但招生规模稍大，难度相近。目前的招生规模大概是70人，其中中国人大概30人左右，就业情况极好极好！</p>
</li>
<li><p>Cornell Tech CS项目含有名校情结（申请者的本科院校），被录取者一般都为中国大陆10的名校，如南京大学等；或者EECS领域的传统名校，如北邮等；</p>
</li>
<li><p>项目重面试，面试官由校友面试官（可能是教职工，含教授，或者该项目校友，甚至是在读的学生）充当，面试问的问题比较随机，没有题库；</p>
</li>
<li><p>根据目前雇主们的评价，以及在读学生找工作的情况看，Cornell Tech比Cornell本校区声誉更好一些；</p>
</li>
<li><p>尽管Cornell Tech的项目和Cornell本部项目，可以建立不同的账号申请不同的项目，但是最终只允许你提交一个申请，所以小伙伴在提交申请时需要选择是申请Cornell Meng in CS还是Cornell Tech Meng in CS！</p>
</li>
<li><p>Cornell Tech除了有CS Meng外，还有Master in Electrical and Computer Engineering（ECE）, Master in Operations Research and Information Engineering（ORIE）, Technion-Cornell Dual Master’s Degrees in Connective Media（CM，偏HCI）等项目。</p>
</li>
</ol>
<h1 id="UW"><a href="#UW" class="headerlink" title="UW"></a>UW</h1><ol>
<li><p>不接受外校申请者的MS申请；尽管UW计算机系也开设了PMP项目，但是对于申请者的全职工作经历有2年以上的硬性要求。</p>
</li>
<li><p>PhD的申请门槛逐年上升，甚至有逼近CS四大神校的趋势。PhD的申请由committee和教授共同决定，committee的权力略小于MIT、Stanford和Berkeley，但远强于UMich和UIUC。Committee会对GPA和英语成绩等有基本要求。</p>
</li>
</ol>
<p>历史上曾有多名申请者，因为UW的CS博士的就读机会，而放弃MIT, Princeton，CMU等offers</p>
<h1 id="Gatech"><a href="#Gatech" class="headerlink" title="Gatech"></a>Gatech</h1><h2 id="Master-of-CS"><a href="#Master-of-CS" class="headerlink" title="Master of CS"></a>Master of CS</h2><ol>
<li><p>为期1年，需修读30个学分，强烈建议申请者拥有C语言背景。项目偏就业，基本无奖学金。Gatech是CS大牛校，工科大牛校。近年CS的排名提升较快。地理位置不占优势，但也是大城市，非农村。</p>
</li>
<li><p>申请方面，偏重均衡，无特别看重（如paper等），但对英语成绩有严格的要求，GRE和TOEFL的要求见其项目主页。对中国大陆地区学生并非特别友好，录取比例里面大陆的申请者的比例相对于一些其他项目（比如CMU、UMich、UIUC等）偏低。</p>
</li>
<li>PhD的申请，教授权力很大，基本教授可以决定录取，非committee强势学校。</li>
</ol>
<h1 id="Princeton"><a href="#Princeton" class="headerlink" title="Princeton"></a>Princeton</h1><p>总体来说，是一个非常高冷的项目，招的人数较少，偏重有研究背景的学生，在大陆地区招生很少，如果没有一定的connection，不建议随意申请。 </p>
<p>具体来说：</p>
<ol>
<li><p>master项目，两年，统一录入，第一年结束时可以选择thesis-track和MEng-track。学术课程为主、无特别的针对工业界的培养。往年的master项目录取看重research，极难申请。master项目今年有可能会扩招，但消息尚待证实。</p>
</li>
<li><p>PhD项目高冷、偏重理论、需要有教授的connection，招生人数较少，难度大。过去的3年中，某机构至少收获9人次的Princeton CS PhD offer，但是绝大多数被录取者都选择了其他项目就读……</p>
</li>
</ol>
<h1 id="UT-Austin"><a href="#UT-Austin" class="headerlink" title="UT - Austin"></a>UT - Austin</h1><h2 id="Master-of-Science"><a href="#Master-of-Science" class="headerlink" title="Master of Science"></a>Master of Science</h2><ol>
<li><p>德州扛把子，CS传统强校，学校AI方面特别强。学费便宜，城市宜居，英语成绩过关的话，做TA、RA甚至不要学费倒贴钱给你。就业率非常高，有部分继续读PhD。出路非常好的master项目。</p>
</li>
<li><p>项目申请难度较高，官网统计录取的学生平均GPA在3.85，录取率大概在5%。其录取的背景很多样化，不过根据统计数据，还是比较重科研的项目，大体喜好CS科班出身的申请者，对除EE外转专业申请者不友好。最好有一定的海外科研经历和publication。</p>
</li>
<li>PhD申请教授的权力比较大，但committee并非完全弱势，总体来说是一个比较均衡的录取机制，但和教授的套磁等是有必要的。</li>
</ol>
<h1 id="Caltech"><a href="#Caltech" class="headerlink" title="Caltech"></a>Caltech</h1><p>比Princeton更加高冷的项目，招的人数极少，偏重有研究背景的学生，但并非只要publication好就能上。无论MS还是PhD录取标准非常迷。如果没有一定的connection，不建议随意申请，否则和抽彩票无异。 </p>
<h1 id="Umich"><a href="#Umich" class="headerlink" title="Umich"></a>Umich</h1><p>老牌公立常青藤，实验室比较好进、找老板也比较容易，想拿MS当跳板转PhD的话不错。找工作总体来说不错，Umich在业界的名声和connection极好。</p>
<p>总的来说，是非常“实在”和“良心”的项目，体现在以下几个方面：</p>
<ol>
<li><p>有两个master项目，一个computer science and engineering (CSE)，另外一个是electrical and computer engineering (ECE)。两个项目之间有很大的选课自由，并且两个项目的area是有很多交叉的地方，比如ECE项目下有computer vision等偏CS的track。</p>
</li>
<li><p>非常适合EE背景转CS的一个项目。EE背景的同学可以通过申请ECE项目就能转CS。</p>
</li>
<li><p>录取方面，非常喜欢国内清北复交科浙等学校的理工科背景申请者，对中国学生比较友好，<strong>每年中国学生录取比例较高，这和该校EECS系华人faculty较多、势力较大也很有关系。</strong></p>
</li>
<li><p>PhD的申请，教授权力很大，基本教授可以决定录取，非committee强势学校。</p>
</li>
</ol>
<h1 id="UCLA"><a href="#UCLA" class="headerlink" title="UCLA"></a>UCLA</h1><h2 id="Master-of-Science-1"><a href="#Master-of-Science-1" class="headerlink" title="Master of Science"></a>Master of Science</h2><ol>
<li><p>两年时间，进可PhD，退可找工作，因为地理位置优势，录取的国内学生水平十分之高。</p>
</li>
<li><p>在加州，众人印象中的加州系统老二，名声大。感觉去UCLA这个项目的很多同学都想继续读博，而且这个学校开的课程也是比较偏理论，不是特别偏重工程实践。</p>
</li>
<li><p>录取方面，以科研为主，和PhD的录取标准比较一致，一般要求有publication和海外推荐信。对在UCLA本校做过的科研的申请者有一定的优势。</p>
</li>
<li><p>PhD方面，教授权力比较大，但committee会卡一些基本的GPA和英语成绩，如果不满足英语成绩，教授一般无法绕过committee录取。</p>
</li>
</ol>
<h1 id="Columbia"><a href="#Columbia" class="headerlink" title="Columbia"></a>Columbia</h1><h2 id="MSCS-2"><a href="#MSCS-2" class="headerlink" title="MSCS"></a>MSCS</h2><p>哥大的CS系成立于1979年，研究的领域涵盖了CS领域的各个研究方向，包括计算生物学、计算机工程、算法和用户界面、机器学习、网络、自然语言处理和语言、安全与隐私、软件系统、计算机理论、视觉与机器人等等。其中，实力较强的专业方向包括机器学习、安全与隐私、软件系统以及计算机理论。哥大的CS项目申请截止时间比较晚，本质上属于Rolling机制，也就是说早申请是可以早拿到offer的，并不是最后等到申请截止日期统一被审阅材料和决定录取。</p>
<p>项目本身的地理位置、项目质量、就业情况都非常不错。对中国申请者也比较友好，总的来说，是一个绝对不容错过的申请学校。</p>
<p>PhD方面，教授的权力很大，看重publication和connection，需要套磁以及和教授联系。</p>
<h1 id="WISC"><a href="#WISC" class="headerlink" title="WISC"></a>WISC</h1><p>我他么连这学校的名字都读不称头…（称头是四川话里面清楚的意思）</p>
<p> 貌似叫做：<a href="https://zh.wikipedia.org/wiki/%E5%A8%81%E6%96%AF%E5%BA%B7%E6%98%9F%E5%A4%A7%E5%AD%A6%E9%BA%A6%E8%BF%AA%E9%80%8A%E5%88%86%E6%A0%A1">威斯康星大学麦迪逊分校</a></p>
<p>CS系比较大，隶属于College of Letters &amp; Science, 不是College of Engineering，毕业生去业界工作的比较多，但就业受一定地理位置的限制，就业出路并不如同排名的Columbia等学校好。MS项目申请难度不小，总体来说和UT Austin的项目类似，看重科研的同时，对GPA和英语也有较高的要求。对中国申请者没有特别友好，项目中中国人比例不如一些其他项目的高。喜好有海外交换和科研经历的申请者，看重美国教授的推荐信，最好有publication。</p>
<h1 id="Harvard"><a href="#Harvard" class="headerlink" title="Harvard"></a>Harvard</h1><p>Harvard的CS专业小而精，不是传统的CS强校，是这几年冉冉升起的新贵，最近几年的排名逐年上升。</p>
<ol>
<li><p>Harvard基本没有真正的CS MS项目。两个相关的项目，都是由Institute for Applied Computational Science开设，一个是Computational Science and Engineering（CSE），另外一个是Data Science。其中CSE有SM和MEng两个项目，而Data Science只有MS一个项目。</p>
</li>
<li><p>总的来说，Harvard的录取综合考虑很多因素，需要各个方面都非常均衡的顶尖，包括学校出身、GPA/排名、research、推荐信。对清北复交浙以及美本学生友好。</p>
</li>
<li><p>特别需要指出的是，Harvard的这两个项目很适合理科背景，尤其是physics和math，转CS。这两个项目注重computational和data，不偏好纯software engineering出身的，很多时候CS科班出身并不占绝对优势。录取的学生背景非常多元化，某机构历史上被录取的学员，有CS背景的，有商科背景的，甚至还有社会科学（社会学）背景的。</p>
</li>
</ol>
<p>PhD项目：Harvard有正统的CS PhD项目，CS PhD项目招生比较少，教授权力大，需要有教授的connection申请才比较有希望。如果没有的话，套磁是十分必要的。</p>
<h1 id="UCSD"><a href="#UCSD" class="headerlink" title="UCSD"></a>UCSD</h1><h2 id="MSCS-3"><a href="#MSCS-3" class="headerlink" title="MSCS"></a>MSCS</h2><ol>
<li>SD的master项目的培养质量近年有超过UCLA的趋势（主要是SD重视master项目……）。每年超出4000+个申请者（去年是4400，每年增幅700左右，今年估计已经到5000人），录取率大概10%。Master项目分为CS75(computer science)和CS76(computer engineering),计算机专业多数申请的MSCS是CS75。项目是quarter制，项目比较灵活，分为15个月或者18个月或者21个月，且提供三种修习方式：</li>
<li>Thesis 需修满40个学分，需要参加一个科研项目，写毕业论文，答辩通过后毕业，适合以后申PhD</li>
<li>Standard Option 需修满40个学分，需满足课程宽度和深度双重要求，宽度上课程涵盖Theory, Systems和Applications</li>
<li>Interdisciplinary Option 该交叉修读方式需要修48个学分，除了Standard Option的要求外，需要选择一个交叉方向作为Secondary Option</li>
</ol>
<p>MSCS在学校的学生，如果有导师愿意接受为PhD的话，可以在第二年直接transfer为PhD，不用再走常规申请的流程，并且可以用硕士课程waive前两年PhD课程，省下不少时间，非常赞。</p>
<ol>
<li>SD的MSCS项目总的来说比较偏重申请者research方面的背景，有publication是非常加分的。对中国申请者总体友好，特别钟爱清北、上交、浙大的学生。</li>
</ol>
<p>PhD: UCSD的CS PhD项目教授权力非常大，connection加分、套磁必要。</p>
<h1 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h1><p>又是一所我名字都读不出来的学校</p>
<p><a href="https://en.wikipedia.org/wiki/University_of_Maryland,_College_Park">马里兰大学学院市分校 (University of Maryland)</a></p>
<p>MSCS和PhD</p>
<ol>
<li><p>每年申请人数两千多。这个CS系的graduate项目以研究为主, 和别的学校不同，该校的MS和PhD的录取是由同一个committee以同一套标准决定的。但由于招收的MS的申请者数量相对较少且申请人背景普遍弱一些，致使master的录取率小于10%，低于PhD的录取率。但是该校的CS系现在很有钱（不少申请者放弃Berkeley, CMU等offer，而选择UMD Master），目前在扩张，未来几年要招更多的faculty，会适当增加master项目的招生数量。</p>
</li>
<li><p>这边的研究机会很多，MS如果愿意做research，也基本都可以找到导师，这个系的graduate program是研究向的，愿不愿意找导师取决于学生自己。</p>
</li>
<li><p>学校每年春秋各举办一次career fair，秋天的规模较大。有很多公司过来，包括FLAG这样的大公司。</p>
</li>
</ol>
<h1 id="Upenn"><a href="#Upenn" class="headerlink" title="Upenn"></a>Upenn</h1><p>宾大的计算机系叫做Computer and Information Science(CIS)，提供的以下硕士项目：Master of Science in Engineering (MSE)in Computer and Information Science (CIS)，Master ofScience in Engineering (MSE) in Computer Graphics and Game Technology (CGGT)，Master of Science in Engineering (MSE) in Robotics (ROBO)和Master of Computer and Information Technology (MCIT)等项目。</p>
<p>宾大的申请有两轮，第一轮截止日期是当年的11月15日，第二轮截止日期是次年的3月15日。其中MCIT接受各种转专业申请。</p>
<p>总的来说，宾大的申请看重申请者的综合条件，并不过分强调publication等，也不强调学校的出身，但很在乎ranking。对各个学校ranking靠前的女生特别友好，看重diversity。另外一个特别有意思的是，他们的MCIT针对的是和CS差别很大的专业的转专业申请，比如像EE、信息工程等都不合适，商科、文科非常合适。因为以上的原因，针对宾大申请的文书和背景包装很有技巧。每年都有很多申请者申请到宾大的CS项目，其中一些申请者来自非985和211的本科学校。</p>
]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>社会达尔文主义反思</title>
    <url>/2022/02/04/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E7%A4%BE%E4%BC%9A%E8%BE%BE%E5%B0%94%E6%96%87%E4%B8%BB%E4%B9%89/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>原文是b站上的一个视频，<a href="https://www.bilibili.com/video/BV1mb4y1Q7Y8?from=search&amp;seid=7461968258326144211&amp;spm_id_from=333.337.0.0">原视频链接在这儿</a></p>
<p><a href="https://cloud.tsinghua.edu.cn/d/8992695eb2fa4d809632/">我爬下来的视频资源</a></p>
<p>昨晚读《改变美国的时刻》一书，讲了讲洛克纳主义的问题，之后我会详细做笔记，貌似洛克纳主义和社会达尔文主义还是有些区别，不过我还是详细地听了听社会达尔文主义的一些事情，颇有收获。</p>
<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>1831年12月，一个冰冷的冬日，当年仅22岁的达尔文登上小列选号时，他一定没有预料到这场历时五年的环球航行后，他写出的物种起源会震惊世界，刷新人类对于神对于自然，科学和自身的认识。他更加想不到的是，他的自然科学理论会被套到人类社会上，造就社会达尔文主义之名。</p>
<p>在100多年后，所谓的社会达尔文主义，会给造成约600万犹太人死亡的种族屠杀提供所谓的科学依据。</p>
<p>达尔文通过观察化石和自然界的生物提出了一套生物演化的理论，为什么这套理论被应用了人类社会的时候可以和如此极端的恶联系起来。</p>
<h1 id="从进化论到社会理论"><a href="#从进化论到社会理论" class="headerlink" title="从进化论到社会理论"></a>从进化论到社会理论</h1><p>从生物学家达尔文到社会达尔文主义这个过程到底出了什么问题？</p>
<p>首先我们先简单解释一下什么是社会达尔文主义。</p>
<p>其实，这套理论乍看起来人畜无害，平平无奇，甚至在很多人的眼里，是如今广为接受的常识。</p>
<p>英国哲学家斯宾赛根据他自己理解的达尔文进化论，用几个字就概括了社会达尔文主义的核心思想。</p>
<p>适者生存——因为资源有限，自然界的个体之间是竞争的关系，强大的个体才能生存。弱小落后的个体才会被淘汰，这个不断淘汰弱者的过程，也是一个种群不断提升自我。日趋完善的过程社会，达尔文主义者说，既然自然界是逝者生存，优胜劣汰。人类社会也应该这样，强者就应该成为统治者，征服者，把他们优秀的基因繁殖下去。广大的种群弱者则注定要成为强者的垫脚石，他们的命运是被压制。</p>
<p>被淘汰他们的消失是人类的福音，这一套与达尔文的理论发展来的说辞给历史上无数人类的罪恶行径包裹上了一层科学的外衣，让作恶的人心安理得，甚至莫名的有了一种崇高的使命感——我可是为了我族群的未来才这样做的。</p>
<p>从18世纪中期，社会达尔文主义者就开始用这套理论反对给穷人提供基本生活保障的社会福利制度。</p>
<p>他们的逻辑是这样的，一个社会资源有限，那么在争夺资源的过程中必然强者胜出。成为富人，弱者沦落为穷人，有些人穷是因为懒，有些是因为笨，还有些则是有精神问题。但不论如何，这些人的劣等特质都不该遗传下去。在自然界，这些人一定会被饿死淘汰。可是社会福利制度，居然让这些人有饭吃，有房住，还可以繁殖，而拥有优良特质的富人却因为他们天生的精明，勤奋慎重，推迟生育，甚至无暇生育。</p>
<p>如此一来，劣等特质会迅速成为社会主流，优等特质反而被淘汰了，一个社会只会走下坡路，因此我们要反对社会福利制度。反对社会福利制度的同时，社会达尔文主义者也顺理成章的反对政府对市场的管制。维护放任自由的资本主义，他们说在充分竞争的商业社会，自然是最优秀的个体才能通过经商盈利。政府管得越多，收税越多越杂，竞争就越被扭曲，越不纯粹，就越难保证市场的筛选作用。更何况，收税是从优秀的富人精英身上搜刮油水去补贴劣等的穷人，那就更应该抵制了。</p>
<h2 id="组合拳"><a href="#组合拳" class="headerlink" title="组合拳"></a>组合拳</h2><p>抵制社会福利和支持放任自由的资本主义，这套组合拳让大西洋对岸的美国人找到了知音。20世纪前后，美国经历了经济飞速发展的镀金时代，社会达尔文主义迅速在美国深耕发芽，至今仍然是美国共和党保守派一日形态的一大支柱。此外，社会达尔文主义也被用来支持种族歧视，殖民统治，帝国主义乃至种族屠杀。</p>
<p>社会达尔文主义者说，个体之间存在竞争，种族之间也一样存在竞争。人类在进化的过程中一步步走向更加高级完美的形态。越是进化早期的种族就越低级，优等种族理应征服统治，奴役劣等种族。至于大规模无差别的杀戮，那是优等种族在替天行道根除人类中的劣等基因，防止它们污染高等基因。</p>
<p>十九世纪一个殖民者这样说，殖民者的首要任务是清扫各色野兽，野兽中最令人厌恶的就是野人。本着所谓的科学精神，社会达尔文主义信奉者开始推行优生学。通过隔离，结扎，甚至杀害那些他们认为有缺陷的个体，企图把人类一代代优化下去。纳粹德国就曾经以优生为名系统性杀害了约20万有生理残疾或者精神疾病的人。之后对犹太人的大屠杀也是在维护雅利安种族血统纯粹性的优生学旗号下进行。</p>
<h2 id="社会达尔文主义的反思"><a href="#社会达尔文主义的反思" class="headerlink" title="社会达尔文主义的反思"></a>社会达尔文主义的反思</h2><p>能和屠杀，种族歧视，殖民等人类历史的污点联系在一起，社会达尔文主义显然是有问题了。可他的逻辑又看似有些道理，他究竟错在哪里。我们从如下角度分析社会达尔文主义的问题。</p>
<h2 id="竞争与合作"><a href="#竞争与合作" class="headerlink" title="竞争与合作"></a>竞争与合作</h2><p>在社会达尔文主义者眼里，物种之间和物种内部永远都是一场你死我活的斗争，个体的生存大于一切。</p>
<p>从这个角度来看，同情心，对于痛苦的共情能力，无私精神，以及在此基础上发展出的伦理道德，不仅仅没有任何用处，反倒是个体生存的障碍。</p>
<p>相比之下自私才是美德，然而社会达尔文主义者却选择性地忽视了达尔文在物种起源里就已经记录下的现象——哪怕是没有人类道德观的动物，也存在大量的互助，互惠，协作和利他的行为。</p>
<p>如果自私才是生存的唯一要义，道德伦理都是虚幻的生存阻碍，那为什么互助协作，在上亿年的进化过程中没有被淘汰掉。</p>
<p>在这个问题上，俄罗斯无政府主义教学家克鲁帕德金给出了有力的论述。他说，虽然物种之间确实有生存竞争的现象，但我们在观察自然界时更应该注意动物之间广泛普遍的互助行为，无论是蚂蚁，蜜蜂，鸟类还是哺乳动物。互助现象越是显著，生存机会就越大，种群就越昌盛，至于把互助行为升华到道德伦理层面，规范种群个体行为的那个物种——人类，早已遍布全球，发展出了璀璨的文明。</p>
<p>在克鲁帕德金看来，自然界的种种互助现象都在向人类喊话。不要竞争，竞争永远是有害于物种的。你们可以找到形形色色避免竞争的办法，所以，团结起来实行互助吧！</p>
<p>可惜这番苦口婆心的喊话，社会达尔文主义者听不见。自然界中除了竞争以外，大量的合作互助现象，他们也视若不见，还在搞他们认为的科学。很多人以为达尔文的进化论可以用优胜劣汰，适者生存来概括，但其实进化论远没有那么简单。</p>
<h2 id="进化论"><a href="#进化论" class="headerlink" title="进化论"></a>进化论</h2><p>我们可以把进化论分为两个步骤来理解。</p>
<p>第一步，因为各种基因的偶然结合与复制错误，导致物种的繁衍不是复刻原样，而是会产生多样性。</p>
<p>第二步是自然选择外界的某些因素会导致一部分个体更容易存活，而另一部分个体更容易死去，这个淘汰的过程确实有一定的方向性，但更显著的，却是偶然性。</p>
<p>这里说的偶然性与方向性，可以用一个广为人知的例子来解释。十九世纪，在工业革命进行了如火如荼的英国，有一种蛾子，翅膀是花白色，这种颜色与他们栖息地的树皮颜色非常接近。因此是一种保护色，但在繁衍的过程中，总有些蛾子因为偶然的基因结合与基因复制时产生的变异。导致他们拥有黑色的翅膀，在花白色的树皮上，黑色的蛾子当然更容易被捕食。</p>
<p>但是工业革命把两种蛾子的命运颠倒了过来。空气中充斥的煤灰把花白色的树皮染成了黑色，导致花白色的蛾子反倒更容易被鸟类发现。黑色的蛾子则更加难以被分辨，因此存活了下来。</p>
<p>深入思考这个例子，我们可以知道，黑色蛾子取来白色蛾子成为主流，完全是两个偶然性叠加的结果——繁衍产生多样性，偶然产生了黑色的蛾子，又碰巧遇到工业革命导致的空气污染。</p>
<p>黑色蛾子存活下来，确实是适者生存的结果。但这个适应我们只能狭义的理解为适应当时那个偶然的外界条件，不能理解为是对被淘汰个体的全面优越性。</p>
<h2 id="随机性"><a href="#随机性" class="headerlink" title="随机性"></a>随机性</h2><p>黑色蛾子为白色蛾子哪个更好——没有绝对的答案，要根据外界情况而定。</p>
<p>换句话说，这个进化的过程，不是种群自我提升，自我完善的过程，也没有一个最终的目的。</p>
<p>但社会达尔文主义者不明白这一点，或者他们不想搞明白这一点。在他们眼里，进化就是进步就是提升，有明确的方向和目的地。</p>
<p>猿猴进化为人类，其中一部分人类走出非洲，走向欧洲，肤色变得越来越白，这一定是人类沿着一条直线，朝着一个完美人类的样子前进的结果。</p>
<p>进化的越高级的人类就越有适应性，但是适应什么他们却说不出来，他们的确不知道。</p>
<p>非洲的黑人之所以皮肤黑，是为了保护人体不受过量的紫外线的伤害。白人之所以白是因为日照不足的环境必须多吸收紫外线才能合成人体必须的维他命 D。</p>
<p>和蛾子一样，人的肤色黑白没有绝对的优劣之分，二者都是通过自然选择的过程逐渐适应当时当地环境的结果。</p>
<p>白人白出了优越感，和白色的蛾子白出优越感一样可笑。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结一下，达尔文的进化论核心是充满偶然性的基因变化和外界变化合力造成的自然选择。进化不是线性的发展，没有必然的方向适应。进化这个这个概念本身也不是绝对的。</p>
<p>而相对于具体环境而言，适应 A 环境的个体并不比适应 B 环境的更高级，而社会达尔文主义者说的生物进化，是从低级到高级，有方向的前进，更高级的进化形态，代表更加完善的个体。在他们眼里，适应不是相对具体环境而言的，而是个抽象的，客观的，绝对的概念。</p>
<h2 id="实然和应然的混淆"><a href="#实然和应然的混淆" class="headerlink" title="实然和应然的混淆"></a>实然和应然的混淆</h2><p>可这里就出现了一个问题，剥离了具体的环境，我们该如何定义什么是绝对意义上的适应？</p>
<p>这个问题当然是强者说了算——谁是强者，当然是有适应性的那些人。社会达尔文主义者像一条追逐自己尾巴的狗，逻辑上绕成了一个圈，社会达尔文主义者的逻辑是——自然界遵循优胜劣汰，试着生存的原则，所以人类社会也应该遵循同样的原则。</p>
<p>这个推论过程是一个经典的逻辑谬误，他们试图从实然中推导出应然。这个说法听起来很玄乎，但其实用白话来表述就是，他们试图证明因为世界是这样的，所以世界就应该是这样。</p>
<p>实然指的是事实性描述性的成熟，比如有些人类会吃自己的同胞，女性比男性的平均收入低，中世纪国王和贵族享有极大的特权。这些陈述只关乎事实，不涉及好与坏的价值判断，与道德无关。这样的陈述没法直接转换为应然的或者叫规范性的结论，告诉我们什么是好的，什么是对的，我们应该怎样做？</p>
<p>我们试着强行转换一下，就会得出荒谬的结论。人应该吃人，女性应该比男性收入低，国王和贵族就应该享有特权。很难想象，如果这些推论都成立，我们今天会生活在一个什么样的世界，而社会达尔文主义都是这样的逻辑鬼才。</p>
<p>从实然一步就轻松跨越到了应然，因为自然界遵循适者生存的原则，所以人类应该遵循适者生存的原则。如果这种逻辑成立的话，那我们干脆都住回山洞里好了，因为人类一开始过的是茹毛饮血的日子，所以我们就应该过茹毛饮血的日子，不应该发展科技。社会达尔文主义是什么——表面上是把达尔文的自然科学理论应用到人类社会而发展来的一套社会理论，实际上，达尔文的进化论不过是一种华丽的包装。</p>
<p>有学者观察到每一种借达尔文证明的社会思想，其实都出现于达尔文之前。</p>
<p>英国历史学家理查德埃文斯说，纳粹德国从达尔文那里得到的，不是一套自恰的理念或是完善的历史形态，而是一套话术。拨开华丽的外表，社会达尔文主义内部不过是那些自古以来自私的人，维护自己既得利益时的说辞——强权及正义，我强我优秀，你弱你活该。</p>
<p>讽刺的是社会达尔文主义者心心念念着维护自己的强势地位，但却不知道，短视和无知是有代价的。</p>
<p>为了维护高贵的雅利安血统纯洁性，纳粹德国大肆清洗低劣的犹太民族。导致大量犹太人逃往美国，其中不乏高级知识分子，科研人才。同时期美国坐收渔翁之利，闷声发大财，注册的专利数量上升了33%。逃难来的科学精英，又进一步吸引大量人才流入，把美国拉入到了一个新的科技飞跃阶段。</p>
<p>希特勒苦心经营的种族政策，造就了自己的灭亡，却成就了美国的世界霸权。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>五道口体校秋季学期男子体育训练</title>
    <url>/2022/02/03/Lecture/%E4%BA%94%E9%81%93%E5%8F%A3%E4%BD%93%E6%A0%A1%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E7%94%B7%E5%AD%90%E4%BD%93%E6%A0%A1%E4%BD%93%E8%82%B2%E8%AE%AD%E7%BB%83/</url>
    <content><![CDATA[<h1 id="引体向上"><a href="#引体向上" class="headerlink" title="引体向上"></a>引体向上</h1><ul>
<li>这里附带上<a href="https://cloud.tsinghua.edu.cn/d/9683cf925d3b4ebeb022/">两个视频和对应的音频提取</a></li>
</ul>
<h2 id="个人看法"><a href="#个人看法" class="headerlink" title="个人看法"></a>个人看法</h2><p>人家的方法肯定讲的比我专业，我就不献丑了，说点自己的看法：</p>
<ul>
<li>引体这玩意儿很硬，而且给分完全线性，建议好好练习，不要摆烂</li>
<li>学校能练习引体的地方不少，比如紫操旁边那个小操场，东操室内，西操下面</li>
<li>我个人最推荐东操室内，因为是软杆，没那么疼，而且软杆显著比硬杆好拉，大概 软杆 : 硬杆 = 2 : 1</li>
<li>练之前一定去买手套，不要买什么握力器啥的，就是买个运动手套，不然手掌很容易磨破受伤——虽然练多了还是会受伤</li>
<li>宿舍里可以买硬杆用来练习，但是效果远不如操场，而且容易撞到空调</li>
<li>东操室内好是好，但是经常得和田径队抢位子，脸皮厚一点，进去练基本没问题——如果被撵出来，就去东操外面的篮球场旁边那儿练习也行</li>
<li>还是能练好的，我上次从 0 个一学期练到 17 个，我还有不少同学满了</li>
<li>给分的话，大于 1 个之后，1 个 1 分，21 个满分，为什么不是 20，emmm，个人觉得纯粹恶心人</li>
<li>有的老师水一些，可以动作水一点，不用手完全放下去，但是至少得大于 90° ，但是纯粹看运气，老师不放水也没法，建议练习就好好练习，毕竟身体是自己的长期投资，不然以后凭什么面对资本家 996 呢？</li>
</ul>
<h1 id="短跑"><a href="#短跑" class="headerlink" title="短跑"></a>短跑</h1><ul>
<li>这里还是附上<a href="https://cloud.tsinghua.edu.cn/d/d3fe28d821514cf1a0d9/">两个短跑视频和相应的音频提取</a></li>
</ul>
<h2 id="个人看法-1"><a href="#个人看法-1" class="headerlink" title="个人看法"></a>个人看法</h2><ul>
<li>我的短跑很拉胯，一直不会练习</li>
<li>还是可以说一说，练习短跑不必南辕北辙，考虑时间有限的话，别想着通过练习长跑来练短跑，这俩几乎没关系</li>
<li>练习长跑的话，推荐 跑协 &gt;&gt; 夜跑队 ~ 晨跑队（如果你是中长跑二队或者田径队大佬，当我没说 X</li>
<li>练习短跑的话，我也没啥方法，跟着上面的视频练习呗</li>
<li>下学期的长跑对短跑基本没啥用，如果你的锻炼时间有限，建议长跑直接靠骑就好了</li>
</ul>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="大一专项"><a href="#大一专项" class="headerlink" title="大一专项"></a>大一专项</h2><ul>
<li>我超，纯粹靠脸，不可控因素</li>
<li>我去年抽到篮球，我印象中上篮全中的一个班三个吧，然后丢 1 个扣 5 分，直接让我对这 XX 的考核方式深恶痛绝</li>
<li>有的班是清华拳 + 校庆 buff，喜提专项满分 + 引体向上调分</li>
<li>有的班是足球，貌似开大脚，线性给分，20m 及格，50 m 满分来着？</li>
<li>看脸，抽到了啥只能接受吧</li>
<li>hhh，实际上，人生本就是个看脸的问题🐴，运气好或是差都不必太过纠结…</li>
</ul>
<blockquote>
<p>运气是守恒嘞！</p>
</blockquote>
<h2 id="大二专项"><a href="#大二专项" class="headerlink" title="大二专项"></a>大二专项</h2><ul>
<li>我的专项是健美，貌似有卧推自重 70% 啥的，还有做动作</li>
<li>一群大老爷们儿，赤裸上半身，然后做《喜羊羊与灰太狼》里沸羊羊做的那套动作，想想就觉得快笑死了</li>
<li>等我研究下再来更新</li>
</ul>
<p><code>to be continued...</code></p>
<h2 id="体育报告"><a href="#体育报告" class="headerlink" title="体育报告"></a>体育报告</h2><ul>
<li>纯粹傻逼，<a href="https://cloud.tsinghua.edu.cn/f/ea2b73d2087f4a969004/">我把我的放在这儿</a>，你们要写的时候直接抄吧</li>
<li>别忘了抄完改名字</li>
<li>我超，我一年前写的什么垃圾玩意儿，别骂了别骂了</li>
<li>附带上 <a href="https://trinkle23897.github.io/posts/thu-3rd-year-part2">n + e 学长的体育报告</a>，人家都写进博客了，那估计是可以抄的吧，hhh（打开之后点击 课程 体育 D 61 就好了</li>
</ul>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>锻炼</tag>
      </tags>
  </entry>
  <entry>
    <title>movies</title>
    <url>/2022/02/03/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/movies/</url>
    <content><![CDATA[<h1 id="死侍"><a href="#死侍" class="headerlink" title="死侍"></a>死侍</h1><p>把<a href="https://cloud.tsinghua.edu.cn/d/94e2cf5d09da4961a2b9/">台词</a>和<a href="https://cloud.tsinghua.edu.cn/f/971f8a4613a94a46b1bb/">影片链接</a>都放在这儿</p>
<p>死侍嘛，童年记忆了属于是！</p>
<h1 id="多巴胺戒断"><a href="#多巴胺戒断" class="headerlink" title="多巴胺戒断"></a>多巴胺戒断</h1><p>这博主讲的挺好的，<a href="https://cloud.tsinghua.edu.cn/d/c896c10efc8642479767/">视频在这儿</a></p>
<p>我写过一篇笔记，<a href="https://zhaochenyang20.github.io/2022/01/14/%E9%9A%8F%E7%AC%94/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/%E5%A4%9A%E5%B7%B4%E8%83%BA%E5%B7%A5%E4%BD%9C%E6%9C%BA%E7%90%86/">放在这里</a></p>
<h1 id="社会达尔文主义"><a href="#社会达尔文主义" class="headerlink" title="社会达尔文主义"></a>社会达尔文主义</h1><p><a href="https://zhaochenyang20.github.io/2022/02/04/%E9%9A%8F%E7%AC%94/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/%E7%A4%BE%E4%BC%9A%E8%BE%BE%E5%B0%94%E6%96%87%E4%B8%BB%E4%B9%89/">我的笔记放在这儿</a>，讲的真的好</p>
<p><a href="https://cloud.tsinghua.edu.cn/d/8992695eb2fa4d809632/">视频在这里啦！</a></p>
<h1 id="碳中和"><a href="#碳中和" class="headerlink" title="碳中和"></a>碳中和</h1><p><a href="https://cloud.tsinghua.edu.cn/d/6fcdcb3f4b284704b1fb/">时代的下一个风口</a>，可惜没有记笔记</p>
<h1 id="疯县事件后续"><a href="#疯县事件后续" class="headerlink" title="疯县事件后续"></a>疯县事件后续</h1><p>397期睡前消息寄了，我上油管爬了回来。我一开始以为是因为讨论俄乌局势，结果是因为疯县啊。<a href="https://cloud.tsinghua.edu.cn/d/32e1611d4e8443babf89/">视频链接和文稿</a>放在这儿了，不做评价。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
        <tag>英语</tag>
        <tag>电影</tag>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>纪念《钢铁是怎样炼成的》一书百年</title>
    <url>/2022/02/02/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/</url>
    <content><![CDATA[<blockquote>
<p>此文为马逆的 381 期睡前消息，不得不说非常精彩！</p>
<p>马逆对历史唯物主义的讲解让我大为叹服，虽然我对托克维尔此类愚蠢的跪舔美帝的所谓知识分子深感痛恶，以至于不愿意了解托克维尔所写的《旧制度与大革命》，然而马逆的讲解让我对双元革命有了全新的认知！</p>
</blockquote>
<h1 id="一-、百年回响"><a href="#一-、百年回响" class="headerlink" title="一 、百年回响"></a><strong>一 、百年回响</strong></h1><p>现在是寒假期间，我儿子的老师要求他们假期必读两本书，其中一本是《钢铁是怎样炼成的》。我也很好奇，00后会怎么看待这本曾经对中国影响最大的文艺作品。</p>
<p>我儿子告诉我，虽然已经初二了，但是之前只在学校的共产主义课程（团课）上了解一点共产主义，而且每次都是看一堆不懂的视频，抄一些看不懂的句子，就当学习了。这本书让他对共产主义产生了感性认识。</p>
<p>但是，因为时代差异，从第一页开始，他就有很多疑问，我收集了几条典型的问题。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97222ab3f51d914b2fd8.jpg" alt=""></p>
<ul>
<li>第一个问题，小说开头提到，保尔的老师是一个信教的神职人员，教他们背圣经故事。而同一所学校的高年级，有人讲地球的历史和天文学，为什么这两种知识会出现在同一所学校？</li>
<li>第二个问题，小说里很多军队来来往往，穿过保尔的家乡，大多数军队只要打进来，用不了几天都要去杀犹太人。为什么犹太人这么倒霉？</li>
<li>第三个问题，小说里反复提到了资产者、无产者的概念，应该怎么理解这两个概念？</li>
<li>第四个问题，保尔在战场上给其他战士读小说《牛虻》，有效地激励了红军作战的勇气，为什么一本19世纪的外国小说对保尔有这么大的影响？</li>
<li>第五个问题，让人印象最深刻的情节，是几百个年轻人疯狂地修铁路，拯救一个城市的冬天取暖计划。现实中很难找到理由去解释他们的工作热情。最后我儿子总结说，在没有理解共产主义精神之前，他只在宗教活动看到过类似的热情，问我保尔和他的同事为什么会有这样的工作动力。</li>
<li>我想，还有很多 00 后应该也跟着学校的惯性读了《钢铁是怎样炼成的》，我打算和他们聊聊我对同一本书的读后感。但是首先我要解释一下，为什么我要在 2022 年春节来说这件事。</li>
</ul>
<p>请静静帮我读一段几亿中国人都熟悉的文字：</p>
<blockquote>
<p>人最宝贵的是生命。生命每个人只有一次。<br>人的一生应当这样度过：回首往事，他不会因为虚度年华而悔恨，也不会因为卑鄙庸俗而羞愧；临终之际，他能够说：“我的整个生命和全部精力，都献给了世界上最壮丽的事业——为解放全人类而斗争。</p>
</blockquote>
<p>这段文字，出处是《钢铁是怎样炼成的》第二部第三章。时间顺序上看，1921年深秋，战乱破坏了城市供暖，老领导朱赫来作为市政负责人，派保尔柯察金和同事去沼泽地修临时铁路，要运几十万立方米的木柴出来。1月份铁路即将修好的时候，保尔前2年战场上的旧伤复发，被送回乌克兰西南部的家乡休养，途中另外一个发型相似的青年遇难，被误传为保尔牺牲。</p>
<p>保尔回到家里卧床一个月，恢复健康，到战友牺牲的广场去悼念，在心里默念了这段话。虽然保尔柯察金是小说虚拟人物，但《钢铁是怎样炼成的》也是奥斯托洛夫斯基的准自传小说。所以，这段写到中国教科书的文字，对应的思考和悼念活动应该发生在1922年二、三月份，到今天正好100年。</p>
<p><img src="https://pic.imgdb.cn/item/61fa96a82ab3f51d914a9755.jpg" alt=""></p>
<p>现在苏联没了，乌克兰正在内战，中国的几亿读者应该为保尔柯察金举办一个百年纪念活动。</p>
<h1 id="二、经典的淡化"><a href="#二、经典的淡化" class="headerlink" title="二、经典的淡化"></a><strong>二、经典的淡化</strong></h1><p>我读《钢铁是怎样炼成的》，是差不多30年前。对于一个世纪来说，三十年的时间不算长，但是也改变了很多东西，让我和00后对同一本书产生不同的观感。</p>
<p>首先，我和社会革命之前的一代人，有十几年的共同生活经验，直接听他们讲过解放前旧中国的生活。而到00后记事的年代，身边的老人能提供的间接生活经历，基本上来自新中国。所以他们很难通过生活体会到旧时代的压力。</p>
<p><img src="https://pic.imgdb.cn/item/61fa975a2ab3f51d914b74e2.jpg" alt=""></p>
<p>其次，长篇通俗小说，是工业化开始之后，电视剧和电子游戏出现之前的典型文艺作品。长篇小说把细致的生活描写和主角的各种经历结合，让读者体会到一段“平行人生”。在我十几岁的时候，中国开始普及电视机和电子娱乐设备，19世纪以来的长篇小说传统逐渐被削弱。</p>
<p>我小时候读了很多19世纪到20世纪的长篇小说，对那个年代各国的生活都有一定了解。现在所有长篇小说的读者比例都在下降，让00后读当代题材的小说还好，忽然塞给他们一本上世纪的外国长篇，肯定代入感要比我差一些，更没法理解保尔柯察金为什么会对更早的小说——比如《牛虻》，印象深刻。</p>
<p>第三个因素是最重要的区别。我的记忆从1984年延伸到2022年，正好横跨了中国的全面工业化年代。我读小学的时候，中国绝大多数人还是守着几亩地吃饭的小农，一年赚不到工人两个月的工资，大多数年轻人的婚姻是父母来主导。现在进厂打工已经是中国年轻人最基本的就业选项，婚姻和恋爱默认是每个人自己做决定。所以，我能直接体会到中国前几十年社会革命和工业革命的冲击力，知道保尔-柯察金这一代人为什么要努力改造社会。</p>
<p>而00后从记事开始就是成熟的工业化社会，反而容易忽视社会革命和工业革命的重要性。他们甚至可能会认为周围的革命成果是自古就有的社会环境，不觉得革命是划时代的变化。所以很难和保尔-柯察金产生共情。</p>
<p>一个月之前是苏联解体三十周年，这个月是《钢铁是怎样炼成》核心内容诞生100周年。尽管很多学校的老师还在推荐学生去读这本书，但似乎我周围没有人注意到这个纪念日。所以，我借着睡前消息春节特别节目的机会，和大家再聊聊这部作品。解答一下00后读完小说提出的疑问。</p>
<h1 id="三、旧时代"><a href="#三、旧时代" class="headerlink" title="三、旧时代"></a><strong>三、旧时代</strong></h1><p>既然00后的阅读迷惑和生活的历史阶段相关，我在解答问题之前，想先讲讲我眼中的近代史。前面我提到了我直接经历的工业革命，间接体会了中国的社会革命，这特指发生在中国的两场革命。而《钢铁是怎样炼成的》描述了苏联的社会革命和工业革命。但无论是中国的革命，还是苏联革命，都不是个孤立事件，而是全世界双重革命的一部分。</p>
<p>具体来说，中国工业化的基本资源是从苏联引入的，而无论在成立之前还是成立之后，苏联的工业资源和革命思想又都是从西方欧美国家引入的。中国和苏联的工业社会，当代中国人熟悉的生活环境，源头最终要追溯到1800年前后大西洋沿岸的两件事，一个是英国工业革命，一个是法国社会革命。历史学上往往把这两场革命放到一起，称为“双元革命”。</p>
<p>要理解“双元革命”的意义，我们首先要理解双元革命之前的世界。</p>
<p>双元革命包括工业革命，之前的世界经济基础是农牧业和手工业。而在没有工业的年代，农业和手工业效率都非常低，绝大多数人只能生产略微超过自己需要的产品。一旦社会稍微富裕一点，人口就会快速繁衍，降低人均土地和原材料，让剩余产品回到原来的水平上，所以农业社会的基本特征就是穷。</p>
<p>穷不仅仅意味着缺吃的，缺衣服，还意味着精神和战斗力的贫乏。普通人既没有时间，也交不起学费，连识字都是稀缺能力，更不要说购买文化产品，对整个社会进行深入思考。同时，穷人吃不起肉，练不出肌肉，卖了房子也换不到一套盔甲和战马，所以十个人也打不过一个专业武士。只要极少量的军事贵族加上专业知识分子，比如说僧侣和文官，就能在物质和精神上统治很多农民，把他们的剩余产品都拿过来。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97802ab3f51d914ba160.jpg" alt=""></p>
<p>反过来说，每个农民和工匠贡献的剩余产品很少，军事贵族和知识分子必须统治足够多的人口，才能养活自己优越的生活。这意味着农业社会的稳定结构一定是多数人依附于少数人，少数人统治多数人，用严格的等级制度限制每个人的生活方式。</p>
<p>在这样的时代，你如果是个普通农民、工匠，日子肯定不好过，吃饱穿暖就是最高目标，除非特别幸运，否则不要奢望有发展空间，更不要妄想和统治者谈平等，甚至连自由选择信仰的权利都没有。而如果你运气不错，生在一个统治者家庭，其实也没有多少生活自由度，因为社会没有什么经济增量，你分到的这一块财富已经不算少了。如果统治者不小心翼翼履行自己的职责，不认真维护自己的地位，作为一个阶层他们会被清洗，作为个人他们会被替换。如果你不理解我说的这段话，可以看看《红楼梦》的故事。</p>
<p>自从人类进入农业社会，尤其是金属工具普及之后，等级制社会结构就基本建立了，接下来几千年，统治者换了一茬又一茬，但内核区别不大。500年前的明朝地主，如果忽然和2000年前的汉朝地主交换身份；或者是清朝早期的军官穿越到秦国的边境要塞，虽然都会惊慌，但用不了多久就能适应。至于说普通农民，除非遇到战乱，否则很难感受到每一代人的生活有什么区别。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97922ab3f51d914bb5d8.jpg" alt=""></p>
<p>这种停滞、穷困，绝大多数人没有自由的社会，历代都有人想打破它。比如说农民起义，比如说宗教领袖或者贵族官僚在内部搞改良，建立一个更理想的社会。但是，农业社会的结构，是经济基础决定的。只要普通人只能生产出略多于基本生存需求的财富，等级制和一定程度的人身依附制度就不会变。暂时打破也肯定很快回到原来的状态。只有通过工业革命改变生产效率，然后通过社会革命改变社会制度，社会才能现代化，所以我强调“双元革命”的重要性。</p>
<h1 id="四、双元革命"><a href="#四、双元革命" class="headerlink" title="四、双元革命"></a><strong>四、双元革命</strong></h1><p>“双元革命”的起源在西欧英法两个国家，这不是个偶然现象。这和西欧的地理位置有很强的关联。西欧文明最先探索了全球远洋航线，控制了新大陆的资源，所以他们有机会打破农业社会的停滞状态。</p>
<p>我们看西欧的地理位置，首先它是欧亚大陆的一部分，这一点非常重要。欧亚大陆是地球上最大，最富饶的一块土地，古代文明发展水平比其他大陆加起来还要强十倍。而且其他大陆的主要轴线基本上是南北方向，只有欧亚大陆是东西向的，适合农业文明沿着同纬度气候带传播，内部技术交流很快，包括造船技术和导航技术。第一个探索全球航线的文明，必然出现在欧亚大陆。哥伦布这种人不太可能出现在其他大陆的文明。</p>
<p>在欧亚大陆之外，最值得开发的陆地，显然是南北美洲。非洲虽然距离欧亚大陆很近，但是整体上是个高原大陆，大多数非洲河流在靠近大海的地方都有瀑布，航海者不能开船进入内陆，所以不适合从沿海搞开发。所以，哪个文明距离美洲的可居住土地越近，哪个文明就最容易从远洋获得回报，开拓全球的航线。</p>
<p>拿起一个地球仪，可以看到显然欧亚大陆去美洲温带、热带最近的地方是欧洲，西班牙到纽约只有5000多公里，而东亚大陆到美国加州，起码一万多公里。所以西欧文明通向全球海权的门槛最低。</p>
<p>另外，有内海的文明，可以逐步提升自己的航海水平，就算不搞远洋贸易和殖民，也会常年保持航海团队，一有机会就开拓其他大洲。哥伦布就是从意大利地中海船长改成西班牙远洋探险者的。世界上有内海的文明，一个是西欧，一个是中东阿拉伯文明，但阿拉伯文明外面只有东非海岸和荒凉的西澳大利亚，西欧对面是美洲。所以最终是美洲文明发现了新大陆。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97a52ab3f51d914bcbc3.jpg" alt=""></p>
<p>新开发的土地给欧洲文明提供了远远超出本土的资源，吸收了那些和邻居有矛盾的移民，缓解了欧洲的经济和政治压力，还引导欧洲文明开拓了包围整个地球的商业航线，让欧洲积累了明显超出其他农业文明的财富。这些财富可以用来供养更多的技术人员和商人，提升手工业水平和贸易规模，最终拉高了工资水平，让肌肉力量越来越贵，商人不得不开发机器来替代人力。</p>
<p>所以，西欧的手工纺织最先使用钢铁造的机器，最先用煤炭驱动蒸汽机。等到他们实现了机器造机器，烧煤的蒸汽机去运输更多的煤，工业革命就爆发了。</p>
<p>掌握全球海洋贸易的国家，先后是西班牙、葡萄牙和荷兰。但到了18世纪，最终是英国和法国这两个农业基础最好的西欧国家站到了现代化的门槛上。为了争夺全球贸易的主导权，18世纪中期，1756年，英国和法国展开了第一场全球争霸战，被称为七年战争。</p>
<p>七年战争的结果是英国赢了，变成了全球帝国，跨越了工业革命的门槛，法国虽然还是强国，也跟随英国完成了工业化，只能变成次一等的国家。一般来说，争霸失败的农业国家，都会爆发内部矛盾，出现统治阶级大洗牌。而那些对旧制度不满，希望能突破等级制，建立理想社会的人，也会趁机推进自己的事业。所以法国人先用国民公会夺了国王的权，后来还投票砍了国王的脑袋。</p>
<p>按照以往的规律，就算造反成功夺权，就算社会改良很有创意，但在生产力水平限制下，最终社会还要回归到农业社会的旧制度。但法国在和英国争霸的时候，本来已经是全世界最发达的农业文明之一了，而在法国经历几十年大动荡的同时，英国完成了工业革命，开始向外输出工业文化，给其他国家提供了经济样板，给更理想的社会变革提供了物质基础。</p>
<p>所以，法国大革命虽然掺杂了很多农业文明历史循环的因素，但这一次真的和历史上任何一次造反都不一样，把很多理想主义方案变成了现实，而且产生了长期影响，带动了整个社会进步。现在世界各国基本公认的价值观和社会制度，比如自由、平等、民主、法治，比如我们的社会主义核心价值观，都起源于法国大革命。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97b22ab3f51d914bdad2.jpg" alt=""></p>
<p>法国大革命和英国工业革命都持续了几十年，如果一定要给双元革命取一个标志性年份，我建议就找个好记的年份，19世纪的第一年，1800年。距离现在的时间是222年，距离保尔柯察金出生还有103年。</p>
<p>法国有个传说，当时有个明智的官员找法国国王报告，说巴黎街头有人群聚集，国王第一反应是“刁民又骚乱了”。官员严肃地纠正，说“陛下，不是骚乱，是革命！”。这个传闻无法证实，但能在法国大革命时期广泛流传，说明有很多当事人意识到，他们做的事情，正在突破几千年农业文明的历史惯性。</p>
<h1 id="五、无产者和资产者"><a href="#五、无产者和资产者" class="headerlink" title="五、无产者和资产者"></a><strong>五、无产者和资产者</strong></h1><p>双元革命一旦爆发，就开始影响全世界，也让最先掌握这两场革命力量的国家逐渐征服全世界。在吸收了一部分革命成果的国家，出现了一个明显的资产阶级集团。这些资产阶级有的来自传统的贵族和知识分子，有的是从底层农民工匠爬上来的，但不论出身，他们有一个共同点，就是重视经济增量，愿意把手上的财富不断投入扩大再生产，开发新科技。</p>
<p>这个特征在今天看起来天经地义，在农业社会末期看来，是不可思议的行为，因为农业社会的经济基础是肌肉劳动，不存在持续扩大生产这回事，持续投资早晚会赔钱。好不容易攒点钱，过去的土财主或者买耕地，或者买官，哪怕是买武器训练家丁，也算正确的思路，肯定不会像资本家那样搞扩大生产。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97be2ab3f51d914be97a.jpg" alt=""></p>
<p>但是工业革命改变了经济基础，只要能跟上生产力，就可以用机器干活，用煤炭提供能源，生产效率不受肌肉限制。所以资产阶级越来越兴旺，财富越来越多，最后主导了国家政权，还拿出钱训练常备军，这就是资产者主导的资本主义社会。</p>
<p>有资产者，就有无产者。英国工业革命提供了新的工作机会，法国大革命打碎了封建身份制度，所以，当不成资产者的人，可以进工厂，给资本家干活，从事更高效率的生产劳动。不过，虽然工人的生产效率比农民高，但是他们的工资不是按生产效率来的，而是按照农业社会的收入来的。因为在革命打散封建体制之后，只要工业化还没有覆盖整个国家，总有农民不断从农村出来和城里工人竞争工作。工资一定会停在比农民高不了多少的水平上，工人很难积累财富，这就是无产者。</p>
<p>无产者拿着比农民高一点的收入，但是失去了农村熟人社会互助的保障，对生活可能更焦虑。而且工商业经济的波动要大于农业，经济形势不好的时候，工人容易失业，不像农民那样还有一点基本口粮，饿死的风险更高。所以无产者对双元革命后的现代社会并不满意，只能在经济持续增长的时候才能和资产阶级妥协，一起搞生产。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97cc2ab3f51d914bf976.jpg" alt=""></p>
<p>刚才我说可以把1800年看做双元革命的时间点，接下来几十年社会虽然也有很多矛盾，但在西欧国家，总的来说资本主义还是往前发展的，技术越来越强，生产规模越来越大。到了1840年，英国已经可以派远征军打败世界上最强大，最遥远的农业国家了，这就是鸦片战争。</p>
<p>鸦片战争是典型的工业力量打倒农业国家。一开始英国靠几十艘帆船的机动性沿海骚扰，虽然也能打下一些地方，但对于几亿人口的陆地大国来说，就像被小虫子咬几口，很烦人但不致命。在清朝统治者看来，国家的命脉是内陆大运河，只要江南富裕地区的物资能送到北京，能送到西北边疆，沿海丢几个小岛不是大问题。</p>
<p>在农业时代，远洋帆船虽然可以进入内陆河流，但一般不会有人这么干，因为帆船要不断调整姿态才能利用风力，到了狭窄的内河不能随便用帆，只能用划桨船拖着走，没什么机动力，半夜被人放火一波就挂了。所以清朝不怕英国的炮舰。没想到，1840年的英国已经完成了工业化，派来了一批蒸汽拖船，没有风的时候也能拖着炮舰进长江。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97d92ab3f51d914c06e6.jpg" alt=""></p>
<p>所以英国人的海军开到了京杭运河和长江的交叉点，打下镇江，中国就投降了，签订了《南京条约》，要割地就给香港，要赔款就给钱。这个时候是1842年。距离现在180年，距离保尔出生还有61年。英国1000多万资产者和无产者，随便抽出一支军队就打败了农业时代最强大的封建社会。</p>
<h1 id="六、生产过剩"><a href="#六、生产过剩" class="headerlink" title="六、生产过剩"></a><strong>六、生产过剩</strong></h1><p>虽然英国打赢了鸦片战争，其他国家也纷纷仿效英国。但资本主义制度是有问题的。前面说了，工人的生产率是按照新时代的机器算的，但工人的工资也就是消费能力是按照农民的收入算的。所以，工人自己不可能把自己制造的商品都买下来，资本主义只有在两种情况下才能运转。一个是更新生产技术，让一部分工人去造新设备，暂时不生产商品，这样工资可以覆盖商品。另一个选择就是寻求外部市场，把商品卖到资本主义社会外面去。</p>
<p>更新生产技术的机会不常有，但英国连中国都能打败，证明资本主义社会抢市场很方便。所以资本主义社会需要限制别人的发展，只允许自己搞高效率生产，别人提供市场就行。英国人逼中国签《南京条约》的第二年，又跑来签订了两个附件，规定了中国关税税率，而且禁止中国自己调整，就是让中国放弃搞高效率生产，只能接受英国人的商品或者投资。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97e42ab3f51d914c14a7.jpg" alt=""></p>
<p>但其他国家的人也是人，被资本主义国家搞经济侵略肯定不乐意。另一方面英法双元革命之后，其他国家的人发现西欧和美国的社会繁荣，国家强盛，普通老百姓也能分一些好处，所以也想打破自己身边的传统社会，向西欧国家学习，搞自己的双元革命。英国、法国、美国这些国家侵略越厉害，其他国家的反弹越严重，越容易出现自己的革命。保尔看的那本《牛虻》，讲的就是鸦片战争前后，意大利年轻人跟着加里波弟，建设自己的现代社会的故事。保尔从中看到了个人命运和集体命运的结合。</p>
<p>到了1848年，资本主义暂时没抢到更多的外部市场，欧洲内部倒是不少国家要推翻旧秩序了。所以革命在几天之内就蔓延到整个欧洲，甚至还扩散到欧洲之外。比如说，广州本来是中国的外贸中心，从广州往内陆去，有很多人靠外贸产业链生活。但是英国人打了鸦片战争，冲击了广州和内陆商路上的一批人口的就业，他们被迫起来造反，打出了几千年来最有创意的一次农民起义，这就是太平天国运动，也可以看做广义的1848年革命的一部分。</p>
<p>这个时候，马克思和恩格斯出场了，合作写了一篇非常有战斗力的宣传稿，《共产党宣言》。马克思首先承认了资本主义社会过去几十年的进步，认为这体现了资产者的先进性。然后他说，以往的革命和造反，都是因为财富太少，现在资本主义社会因为生产东西太多而爆发经济危机，影响无产者的就业，最终引发了革命，这是非常荒谬的事情，说明资产阶级已经反过来要限制生产力发展了，所以人类应该超越资产阶级社会，建设一个能更能充分发挥工业力量的美好社会。</p>
<p>至于谁来取代资产阶级，马克思认为是无产者。尤其是当时的欧洲资产阶级喜欢仿效封建统治者的生活，摆贵族范，不允许那些来自底层，掌握技术的工人技师加入资产阶级圈子，强行要把这个技术阶层留在无产阶级。所以当时的无产阶级既对资本主义社会不满，又掌握最先进的生产技术，看起来的确适合取代资产阶级，控制工业社会。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97f52ab3f51d914c292a.jpg" alt=""></p>
<p>在马克思主义和19世纪其他类似观点的指导下，各国都出现了依靠无产阶级的革命党。这些人虽然也发动农民，但和农业时代活不下去的造反者有根本不同，他们真心相信自己夺取政权之后，能建设一个更富裕，更进步，更自由的社会。在俄国，这就是列宁参与的社会民主工党。而布尔什维克就是社会民主工党多数派的意思。</p>
<h1 id="七、世界大战"><a href="#七、世界大战" class="headerlink" title="七、世界大战"></a>七、世界大战</h1><p>1848年的革命最终还是被资产阶级压下去了，短期原因是发现了一些新的金矿，给资本主义提供了暂时的购买力。长期原因是资本主义国家征服了更多的落后国家，找到了更大的市场。同时也开发了一些新科技，逼着所有资本家更新设备，暂时解决了无产阶级的就业问题。</p>
<p>但是到了1900年，也就是保尔柯察金出生的年代，全世界都被欧美资产阶级征服了，再也没有新增的外部市场来提供购买力了。而蒸汽机的技术进步基本到头，内燃机和电力设备还不靠谱。资本家也缺乏普遍更新生产设备的动力。所以几个资本主义强国开始相互看着不顺眼，随时准备把对方的生产能力打垮，让对方只能出售原材料，买自己的商品。强国相互看着不顺眼，结果就是1914年的第一次世界大战，德国带着奥匈帝国打英国法国俄国。这是典型的马克思说的那种因为生产过剩产生的荒谬战争。</p>
<p><img src="https://pic.imgdb.cn/item/61fa98002ab3f51d914c36ec.jpg" alt=""></p>
<p>第一次世界大战爆发的时候，军事技术恰好发展到一个不利于进攻的阶段——军队有了机枪大炮，火力很强大，防御能力很强，但是内燃机不够发达，早期的汽车拉不动这些机枪大炮。一旦离开铁路，机枪大炮只能靠人和马拖着走，行动非常慢。就算强势一方打了胜仗，也只能慢慢拖着机枪大炮前进，到对方下一个火车站，去慢慢对付另一道用机枪大炮构成的防线。</p>
<p>所以战争打了三四年，不分胜负，每个强国都因为对方的机枪大炮损失了几百万人，再动员几百万新的士兵当炮灰。这就是保尔小时候看到那些上前线的军人。到了1917年，整个欧洲的年轻人几乎都去当兵了，他们意识到，如果战争不停下来，整个欧洲的无产阶级都会被征兵，都会死在前线。而马克思主义的宣传又让普通士兵认识到，资产阶级国家不是自己的国家，资产阶级战争不是自己的战争。敌人的士兵和他们没有矛盾。只是因为资产阶级不知道怎么处理过剩商品，资产阶级国家才彼此打仗。</p>
<p>1917年到1918年，兵变席卷了欧洲乃至全世界，保尔-柯察金看到，列车从前线开回来，普通士兵拒绝打仗，赶走车站上的宪兵。而其他国家的士兵也纷纷把枪口对准自己的军官。列宁在这一片混乱中，号召士兵不仅要离开战场，还要回头去干掉资产阶级政府和军官，和工人一起建立新型国家。这个前所未有的政权会给人民带来和平，还一定能比资产阶级更擅长搞工业，利用双元革命带来的发展机会，给所有人带来富裕和自由。</p>
<p>第一次世界大战就这样莫名其妙的结束了，没有经过决战，几百万军队的国家忽然心肌梗塞。在俄国一边，先是沙皇退位，把政权交给资产阶级，然后士兵在布尔什维克带领下夺取政权。而对面的德国士兵也集体兵变，赶走了皇帝和资产阶级政府。法国军队也一度有几十个师放弃战线，准备回去收拾那些送他们去死的军官。</p>
<p><img src="https://pic.imgdb.cn/item/61fa98102ab3f51d914c4a34.jpg" alt=""></p>
<p>但是，最终只有保尔所在的原沙皇俄国建立了稳定的苏维埃政权，也就是我们常说的苏联。原因是各国的资产阶级发育水平不一样。西欧的资产阶级掌握资源比较多，而且经过长时间的发展，已经丢掉了贵族范，允许优秀的无产阶级通过学技术，加入自己的行列。所以在战争结束后还能稳定局势，勉强维持原来的政权。而俄国的资产阶级比较弱，还偏偏喜欢和贵族阶层结合，不允许技术工人加入自己，结果就被布尔什维克打垮了。</p>
<p>比如说保尔柯察金的革命领路人朱赫来就是个典型例子。他打仗的时候可以当军官，回到后方懂机械修理，懂电工，是典型的跨界人才。这样的人在西欧可能战前就成了中产阶级，但俄国资产阶级不喜欢这种人，也不给他体制内的发展空间，所以反而加强了无产阶级的力量。</p>
<p>等到几万个朱赫来式的骨干把保尔这样的年轻人带动起来学技术，学打仗，列宁就有接管国家的能力了。100年前的1922年，也就是保尔柯察金思考人生意义的同一年，苏联成立，很快发展成超级大国。</p>
<h1 id="八、答案"><a href="#八、答案" class="headerlink" title="八、答案"></a><strong>八、答案</strong></h1><p>近代史回顾到这里，我已经给《钢铁是怎样炼成的》展示了历史背景，也可以回答我儿子前面提出的那几个问题了。</p>
<p><img src="https://pic.imgdb.cn/item/61fa97222ab3f51d914b2fd8.jpg" alt=""></p>
<h2 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h2><p>第一个问题，小说开头提到，保尔的老师是一个信教的神职人员，教他们背圣经故事。而同一所学校的高年级，有人讲地球的历史和天文学，为什么这两种知识会出现在同一所学校？</p>
<p>因为保尔生活在一个过渡年代。双元革命的力量已经开始改变俄国，但还没有完全改变俄国。传统社会的教育往往依托宗教机构进行，只有进入符合国家意识形态的学校，学习陈旧的经典，才有识字的权利。我的爷爷在20世纪30年代读私塾，明明国家已经不搞科举了，但还是要跟着私塾老师学四书五经，背书不顺利或者得罪了老师就要像保尔一样，被打手心。这是过渡年代学习文化的主要方式。</p>
<p>但是，新时代也明显冲击了旧时代，就算是封建贵族管理的国家，被资本主义入侵的时候，也要多少搞一点现代化，否则连农民都镇压不了。所以，保尔的学校里能看到高年级老师讲天文学，讲地质学。这个小说的序幕非常真实，既体现了保尔柯察金的生活压力，也体现了时代交替的冲突。</p>
<h2 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h2><p>第二个问题，小说里很多军队来来往往，穿过保尔的家乡，大多数军队只要打进来，用不了几天都要去杀犹太人。为什么犹太人这么倒霉？</p>
<p>因为农业时代的人民缺乏教育，只了解自己周围的一小块生活空间，只有接受本地的各种教士、僧侣或者其他类型的知识分子统治，才能获得文化服务。他们几乎不知道世界上还有其他类型的生活，也很难理解别人的生活。我们现在工业社会的宽容精神，多样化生活方式，当时是不存在的。所以不同群体之间，只要有微小的生活习惯差别，就很容易被挑拨仇恨，相互侵犯。</p>
<p>而且农业社会资源很匮乏，能干掉邻居，本地人均土地就增加了。所以没文化的人民很容易被煽动起来，放大自己的欲望，屠杀和自己区别很小的邻居。在保尔柯察金周围的犹太人被屠杀的年代，中国也有客家人和本地居民的冲突，我的家乡热河省有金丹道事件，农民和牧民相互屠杀。这是传统社会的普遍现象。</p>
<p>在欧洲，几种基督教徒比如说东正教和天主教、新教，本来就经常彼此屠杀，而犹太人的宗教和基督教有明显区别，潜在的对立情绪肯定更大。从职业来看，大多数欧洲居民是农民，而大多数犹太人是手工业者，小商人，相对富裕一点点。还有少数犹太人搞金融，经常放高利贷，和别人产生经济矛盾。比较适合作为抢劫对象。</p>
<p>在世界大战刚结束的年代，乌克兰土地上有几十种军队，大多数纪律很差，没有特别明确的目标，必须给士兵发足够的军饷才能打仗，发不出军饷就让士兵去抢劫。但军官又不能让士兵把整个城市都破坏掉，那样就收不到税了。所以最好是选择一个有明确边界的群体去抢劫，犹太人因此成为常见的目标。</p>
<h2 id="第三个问题"><a href="#第三个问题" class="headerlink" title="第三个问题"></a>第三个问题</h2><p>第三个问题，小说里反复提到了资产者、无产者的概念，应该怎么理解这两个概念？</p>
<p>前面介绍社会简史之后，我们可以看到，所谓资产者就是追求资本，不断投资来获取财富的阶层。无产者靠劳动来生存。但是社会上往往没有这么清晰的界限，比如说前面提到的朱赫来这种人，很容易因为社会文化和经济发展水平的变化，在不同的社会，进入不同的社会集团。</p>
<h2 id="第四个问题"><a href="#第四个问题" class="headerlink" title="第四个问题"></a>第四个问题</h2><p>第四个问题，保尔在战场上给其他战士读小说《牛虻》，有效地激励了红军作战的勇气，为什么一本19世纪的外国小说对保尔有这么大的影响？</p>
<p>这一点，也需要从近代史寻求答案。牛虻亚瑟，和保尔这些战士一样，都体会过类似的底层苦难，都模模糊糊意识到革命可以开创一个新时代。给自己和别人带来幸福。</p>
<p><img src="https://pic.imgdb.cn/item/61fa982d2ab3f51d914c72ec.jpg" alt=""></p>
<p>而且，在现实生活中，这些战士和牛虻的主角一样，都遇到了阻碍时代进步的阶层。亚瑟那边是教会和封建军队，在1917年的俄国就是沙皇和资产阶级政府。所以19世纪的小说，能激励保尔柯察金这一代人参加革命。牛虻小说的年代，和保尔柯察金战斗的年代，有七八十年的时间差。这相当于当代的年轻人看铁道游击队和解放战争的电影。</p>
<h2 id="第五个问题"><a href="#第五个问题" class="headerlink" title="第五个问题"></a>第五个问题</h2><p>第五个问题，让人印象最深刻的情节，是几百个年轻人疯狂地修铁路，拯救一个城市的冬天取暖计划。现实中很难找到理由去解释他们的工作热情。最后我儿子总结说，在没有理解共产主义精神之前，他只在宗教活动看到过类似的热情，问我保尔和他的同事为什么会有这样的工作动力。</p>
<p>要解释保尔柯察金的工作积极性，我们要先看到宗教热情的来源。宗教给信徒许诺了天国，这在农业社会，几乎是普通人摆脱日常苦难的唯一希望，所以农业社会最强的积极性，最强的战斗力，都来自这些信徒。</p>
<p>但是用宗教虔诚去形容保尔他们是不合适的，因为宗教在现实中只能提供苦难和精神上的套路，越是生活艰难的地方越有效，比如说西藏高原培养了强大的藏传佛教，中东沙漠培养了伊斯兰教。</p>
<p>了解了“双元革命”概念之后，我们会发现，保尔不仅仅是因为反抗眼前的苦难才去革命的。保尔家的日子的确不富裕，但也要看到，他生活的小镇是俄国最发达的地区之一，好几条铁路交汇到小镇上，给小镇带来了工厂和电力，还有一批富裕的资产阶级。保尔虽然是工人家庭出身，但是他读了几年书，能欣赏冬妮娅的私人图书馆，长大之后哥哥随便介绍一下，就能找个车间去学机械技术和电工技术，这可是同时代最尖端的技术，类似于今天学习搭建互联网平台，造电动汽车。</p>
<p>所以，朱赫来代表的布尔什维克稍微教育一下，这些工人子弟就能认识到双元革命的力量，意识到搞工业革命和社会革命有非常光辉的未来，而且这是可以用理性预计到的未来，比宗教的天国诱惑力强了不知道多少倍。在布尔什维克还有革命精神的时候，任何宗教信徒的虔诚，都比不了这些年轻人的工作动力。理解这一点，才能理解保尔柯察金，理解作者奥斯托洛夫斯基。</p>
<p>这就是我对疑问的回答。</p>
<h1 id="九、从苏联到中国"><a href="#九、从苏联到中国" class="headerlink" title="九、从苏联到中国"></a><strong>九、从苏联到中国</strong></h1><p>在保尔柯察金的名言诞生100周年之际，我们发现他参与创造的那个国家早就消失了，30年前就消失了。所以，我们不应该把这本小说讲述的历史当做一个答案，而是看做一个给我们带来希望的方向。方向不是结果，但也很重要，因为它打破了社会制度本身的神秘性，让我们敢于进步。工业革命的力量和法国大革命的进步思想在1848年结合，给我们带来了马克思主义。而马克思主义最重要的核心思量，就是唯物主义历史观。</p>
<p>所谓唯物主义历史观，就是保尔那段话的最重要的理论元素。在看清楚生产方式可以塑造社会制度之后，人类就不会认为社会制度是一个很神秘的东西。就会主动去改变它，设计它。工业革命给我们提供了近乎无限的物质发展前景，我们要做的就是用制度进步消除工业发展的障碍，同时也用进步的制度释放享受幸福的机会。</p>
<p>比如说，传统社会男尊女卑，这不是因为有什么天经地义的原则规定了男性高于女性，而是因为在用肌肉力量工作的年代，男性有天然的优势。凡是宣称男性必须强于女性的意识形态，都是基于神秘主义的胡说八道。</p>
<p>而到了现代社会，大多数工作不靠肌肉力量了，男女的经济地位逐渐平等，社会地位也逐渐平等。如果在不需要肌肉力量的地方，还有一些制度打击女性参与生产的机会，那就坚决打破它。这就是法国大革命后续的制度革命。反过来说，在充分利用机器的行业提倡男女平等，也是在释放更多的劳动力，促进生产。这就是制度革命给进一步的工业革命创造条件。</p>
<p>这种主动设计制度的做法，历史上有很多例子。我举两个历史课本上最常见的例子，比如说汉朝的黄巾军，用宗教力量组织造反，设计新社会；又比如说明朝末期的李自成，基于小农利益组织造反，给大家求一条生路，所以诉求是不交税，不纳粮。还有的起义者同时动员了宗教力量和农民立场，比如说太平天国。</p>
<p>这些起义者最大的问题，在于反抗性和理想性相互脱离。他们的反抗性来自现实的苦难，而理想性来自编造的神话。所以，在战乱结束之后，天国和不交税的政府都消失了，社会还是要回归稳定的封建制度。就算之前讲过反抗性，反抗者也变成了新的贵族。就算之前用过宗教的力量，宗教也只是个迷信说法。朱元璋的宗教起义军就是这样变成新朝代的统治集团的。</p>
<p><img src="https://pic.imgdb.cn/item/61fa98492ab3f51d914c95d1.jpg" alt=""></p>
<p>但是保尔这次革命不一样，这些年轻人学到了马克思的唯物主义历史观。在他们眼里，所有制度都是一种工具，是工具就可以随便换。追求新社会，不是因为新制度更神圣，而是因为所有制度都没有神圣光环。</p>
<p>所以，保尔的革命精神不是来自于狂热，恰恰是源于理性。他打败那些阻碍进步的旧制度，打败那些把旧制度神圣化的人，为了发展生产力，增加享受生产力的机会，同时给自己的人生提供自由，提供成就感。旧世界的苦难和新世界的希望从两面给保尔压力，把他变成了钢铁。所以书名是《钢铁是怎样炼成的》。</p>
<p>现在回头我们可以再读一下保尔的名言。</p>
<blockquote>
<p>人最宝贵的是生命。生命每个人只有一次。人的一生应当这样度过：回首往事，他不会因为虚度年华而悔恨，也不会因为卑鄙庸俗而羞愧；临终之际，他能够说：“我的整个生命和全部精力，都献给了世界上最壮丽的事业——为解放全人类而斗争。</p>
</blockquote>
<p>我希望我儿子，以及所有当代年轻人，不要因为双元革命在中国已经取得很大成果，就忘掉唯物主义历史观，忘掉保尔革命精神的来源。因为毛主席告诉我们，已经取得的革命成果只是万里长征第一步。我们还是需要继续发挥双元革命的驱动力，用发展解决问题，给自己，也给别人创造无限幸福的可能性。用莎士比亚的一句台词来说：</p>
<p>凡是过往，皆为序章。</p>
<h1 id="十-、什么是解放"><a href="#十-、什么是解放" class="headerlink" title="十 、什么是解放"></a><strong>十 、什么是解放</strong></h1><p>但是，我儿子的问题说明，革命的成果的确已经淡化了革命的意义，让一部分年轻人忘掉了革命的原因和目标。所以，在最后的部分，我想把话题拉回来，说说中国的近代史和当代史。</p>
<p>就在保尔认识朱赫来，接受唯物主义思想启蒙的1918年。北京的天安门广场上也有一个人在做类似内容的演讲。标题是《庶民的胜利》。这个演讲者叫李大钊，台下有一个听众叫毛泽东。这两个人创建、领导的共产党，接过了之前欧洲和俄国双元革命的成果。在一个比俄罗斯更落后，但是封建社会也更虚弱的国家发动了革命，31年后建立了新中国。所以，保尔说的“解放”，在中国有两个含义。广义的说法，是革命者主动驾驭双元革命释放的生产力和新制度，为全人类创造幸福。而狭义的概念，就是特指1949年胜利的那场革命战争。这形成了两个专有名词，一个是“解放后”，一个是“新中国”，都特指1949年后的中国社会。而且被写进了教科书。</p>
<p>观众都知道我上个月和一个自媒体博主产生了争论。来自社科院的傅正在自媒体节目里说左宗棠解放了新疆，而且在B站动态和视频里各强调了一次。我对傅正说，作为一个自媒体博主，解放这个词不能滥用。你不能因为清朝比明朝新，就说清朝是新中国，更不能因为明朝打败了一个蒙古政权就说这是新中国，那当然也不能因为清朝侯爵左宗棠做了好事就说这是解放。傅正坚持说他的观点没错。</p>
<p>这里我要分析一下这场争论的的重要性。在傅正之前，从未有人用“解放”形容过左宗棠或者其他清朝贵族军官的胜利，也没有人用解放这个词去形容过历史上其他封建军阀。我们的历史教科书上很清晰地给出了解放和解放军的概念。指出解放是一个革命史和当代史概念。所以，我认为，古代军阀给封建帝王打下领土，只能说是封建政权的扩张。</p>
<p>为了确定历史事件的常见定性，我找到了傅正博士导师汪晖的论文。在左宗棠进军新疆的地图下面，明确说这个行为的定性是扩张。当然，这也可能是汪晖不对论文配图负责，是编辑配错了图。但我作为一个自媒体主播，不应该随便超越历史著作和教科书的说法，去搞历史创新，所以我得为我的说法找到出处和依据。我尽量使用这个学科内常见的说法。</p>
<p><img src="https://pic.imgdb.cn/item/61fa98572ab3f51d914ca57d.jpg" alt=""></p>
<p>现在傅正说清朝的军事行动“解放”了领土，这是一个重大的历史概念创新。如果以后再有人用类似的概念，都要承认傅正的首创权。反过来说，如果这个词真的成了社会共识，这也应该是傅正迄今为止最大的历史成果，其他论述都不值一提。我几乎想不出什么级别的历史论文能创造更重要的概念。傅正这一辈子都应该为自己扩展了解放的定义而自豪。</p>
<p>但是，很遗憾，傅正只提出了新颖的概念，自己并没有结合近代史现代史，充分解释清朝军队“解放”行为的合理性。所以我只能自己动手找依据。傅正以往的论文没提出过相关论证，我就到他所属的学派找。</p>
<p>我读过一些傅正导师的书，汪晖。前十几年，汪晖被称为新左派，也的确站在弱者立场，站在反自由主义立场上讲了很多话。虽然他没有对“解放”的概念做详细论证，但在理解这批学者的历史观之后，我认为汪晖的很多观点可以解释傅正对“解放”概念的扩展。</p>
<p>比如说，汪晖最重要的作品，是《现代中国思想的兴起》。作为一本目录式的著作，这套书很有价值，可以帮助我们理解最近1000年各种学术思潮的发展脉络，以及各自向现代社会延伸的过程。但这本书最大的问题，就是没有理解双元革命的内部逻辑作用。他把中国和西方的社会现代化，当做一场纯粹的思想制度革新，工业革命反而只是附属品。</p>
<p>既然是纯粹的思想革新，那现代社会的组织方式，当然可以直接和历史上各个时代，各种思潮直接作对比，总能找到相似之处。比如说，他在黄宗羲、严复、章太炎乃至康有为身上，都找到了特定儒学支流和当代社会的重合之处。为此专门推出了一个“儒家（学）普遍主义”，结论是“新型的儒学普遍主义的诞生是和作为一个新型世界体系中的主权国家的中国的诞生同时发生的。所谓儒学普遍主义实际上正是现代公理观的曲折的呈现方式”</p>
<p>面对现代化的冲击，西方早就有人基于本国经验提出过类似于汪晖的观点，比如前几年在中国很流行的托克维尔、《旧制度与大革命》的作者，就说，法国大革命是旧制度的碎片拼起来的，不是新东西。汪晖也引用过托克维尔的这个观点。</p>
<p>今天我前面的部分，专门分析了法国大革命，分析了法国大革命在“双元革命”时代的地位。我知道法国大革命从传统社会历史找到了很多思想财富和制度遗产，如果只看思想史，这些创新或者说复古，的确和工业革命关系不大。汪晖和托克维尔是有一定道理的。</p>
<p>但是，历史上有无数次类似的创新和复古，主导者有的时候是体制内的改良者，有的时候是体制外的造反者，他们的创意并不比法国大革命那一代人差。但他们的创意都被农业社会的停滞性淹没了。只有法国大革命这一次，知识分子和人民的创意和工业革命相互作用，发生了双元革命，这才创造了现代社会。所以说，在双元革命时代，工业革命起相对的主导作用，法国大革命是相对的被动因素。脱离工业革命提供的发展机会去讨论思想史，只能把著作变成目录，而得不出有效结论。</p>
<p>当代很多中国学者，比如说蒋庆，比如说甘阳，他们拿到汪晖这种资料式的著作，就欣喜若狂，开始在中国传统儒家中寻找平等、自由、民主、民权，论证中国就算不受西方社会冲击，也会有原生的进步性。所以，他们可以把儒家“通三统”的老工具翻新再用一次。过去清朝、元朝、金朝能用“通三统”工具论证自己的合法性，看起来突兀的新中国当然也可以从历史获得合法性。</p>
<p>对于这种观点，我只建议他们去看看人民英雄纪念碑，读一读碑文，当代中国如果一定要寻找历史合理性，那也是在太平天国和义和团运动中寻找一点萌芽，犯不着把法统续到传统封建王朝。那不是一个自信的社会该做的事。</p>
<p>当然，我也赞同汪晖批判西方那种单线条的史观。刚才我说双元革命有很大概率爆发在西欧，跟着大航海时代一起到来。但是，概率不等于绝对必然，双元革命的核心是工业革命，是煤铁复合体，这并不一定要依赖于大规模的海洋贸易。我在其他地方设想过，也许草原帝国和中原帝国的对抗，也会在恰当的条件下创造煤铁复合体。在这样的历史背景下，东亚也可能率先爆发工业革命和社会革命，甚至把儒家道家佛学一些名词套用到社会革命概念，但这和儒家本身没有关系，依然是工业革命主导的双元革命的结果。</p>
<p>所以说，傅正和汪晖最大的问题，还是没有理解什么是唯物主义历史观。缺乏论证生产力和制度之间互动的能力，喜欢对着制度谈制度，这种唯心主义论证方式把自己绕进去了。最终他们忘掉了“解放”对应一个独特的历史事件，不自觉地就滥用这个专有名词了。</p>
<p><img src="https://pic.imgdb.cn/item/61fa98642ab3f51d914cb60c.jpg" alt=""></p>
<p>但是我也理解傅正和他所属学派为什么这么容易绕进去，就像我前面理解我儿子会对《钢铁是怎样炼成的》提那么多问题一样。我儿子说保尔的革命精神，像唐僧取经一样虔诚。傅正把解放的概念滥用到封建军阀。他们的共同问题是距离革命太远，享受革命成果太多，所以反而忽视了刚刚发生那次革命的重要性，忽视了解放的历史特殊性。</p>
<p>我理解他们立场的来源，但也必须认真批判。因为广义的解放和革命还没有结束，主动的社会变革还必须继续推进。中国年轻人必须主动拿起唯物主义武器，破除对一切社会制度的神秘主义敬畏，才能在生产力动起来的时候跟上社会进步。</p>
<h1 id="十一、人的正确思想从哪里来，到哪里去？"><a href="#十一、人的正确思想从哪里来，到哪里去？" class="headerlink" title="十一、人的正确思想从哪里来，到哪里去？"></a><strong>十一、人的正确思想从哪里来，到哪里去？</strong></h1><p>当然，我在反对滥用名词的同时，也绝对支持学术自由。傅正已经公开提出了重要的历史创新，而且很有可能因此在史学界上留名。所以我绝对支持他写论文，论证自己用词的合理性。学术自由才是思想进步的前提。</p>
<p>但是，傅正现在的内容不是发在学术圈，而是发在媒体。这里我想问傅正，也问观众一个问题，媒体和学术界，哪个领域的用词标准应该更严格一点？</p>
<p>作为一个曾经的工程师，这个问题在我这里有理所当然的答案。因为学术界类似于实验室，而媒体对应的工业领域是生产线。生产线的品控肯定要比实验室严格，因为生产线——或者说媒体行业是批量生产文化产品的地方。用词有失误，影响要比任何实验失败都严重。</p>
<p>所以，傅正在学术论文用什么词，我都支持他的自由。但既然他现在主动产业升级，来到了更严肃的媒体行业，我就要用媒体行业的内容控制标准来衡量言论，这是爆发用词争论的原因之一。</p>
<p>最后一段内容，我想对围观此事的观众说。</p>
<p>很多人说，这件事是吵架，是对线。我纠正一下，这里其实不存在什么争论或者所谓的“对线”，因为我不能去批一个不存在的观点。傅正从来没有严肃论证过“解放”这个词可以用于清朝，其他人也没有做过类似的创新。我不需要论证这个说法不成立，而是使用的人需要论证他成立。</p>
<p>但是，这件事的意义又超越了所谓的“对线”概念，我看到有年轻人对解放这个词的用法毫不在意，也看到更多的观众觉得这件事是口舌之争，是咬文嚼字，不觉得这件事关乎每个人的生活。这个态度才是真正的问题，是我们这一代人的问题。我们没有把革命故事讲好，双元革命的宣传被我们媒体人淡化了，然后才有这样的错误风向。所以今天我用了一个小时讲近代史，好好分析“解放”这个词的来源，同时也要搞清楚那些修改“解放”概念的人是怎么想的。</p>
<p>回到《钢铁是怎样炼成的》这本书。毛主席说：</p>
<blockquote>
<p>人的正确思想是从哪里来的？是从天上掉下来的吗？不是。是自己头脑里固有的吗？不是。人的正确思想，只能从社会实践中来，只能从社会的生产斗争、阶级斗争和科学实验这三项实践中来。人们的社会存在，决定人们的思想。而代表先进阶级的正确思想，一旦被群众掌握，就会变成改造社会、改造世界的物质力量。</p>
</blockquote>
<p>保尔柯察金的故事之所以能打动中国几亿读者，不是因为故事本身写得好，而是因为建国前几十年的中国青年也走到了少年保尔的发展阶段，也遇到了社会需要进一步解放的问题，需要从中继承革命精神，获得改变社会的勇气，也找到人生的意义。</p>
<p>在2022年的今天，中国社会从未如此繁荣。但年轻人也从未像今天这样，需要生产力和制度的双重进步来解决自己的问题。对于当代年轻人来说，正确的解放概念，首先像是鱼身边的水，也许因为革命战争过去太久，看不到摸不着，但是非常重要。另一方面，这些水也是我们这些“鱼”跳过龙门，发展到新阶段的依托。</p>
<p>我们必须知道解放是主动利用“双元革命”的成果，对制度的批判和建构。如果把“解放”这词随便泛化使用，实际上忽视了当代社会和古代社会的根本区别，会让我们的社会忽视“双元革命”传统，丢掉进一步突破自身的锐气。</p>
<p>所以，我希望大家努力观察身边的社会，观察这个被双元革命开创，还要继续往前走的社会。希望每个人都像保尔柯察金一样理解个人和社会的关系，寻求自身的解放。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>古希腊罗马留下了什么	第一章——开门两件事：食与住</title>
    <url>/2022/02/02/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E5%8F%A4%E5%B8%8C%E8%85%8A%E7%BD%97%E9%A9%AC%E7%95%99%E4%B8%8B%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="食物塑造了你"><a href="#食物塑造了你" class="headerlink" title="食物塑造了你"></a>食物塑造了你</h1><ul>
<li>上次你在高档意大利餐厅，用面包片蘸着碟中的橄榄油，小口抿着葡萄酒时，别忘了这是最穷困的古希腊和古罗马农民的一日三餐。</li>
<li>正如现代运动员为了提升速度，灵活性，耐力或者体力而遵守严格的饮食方案，古代的运动员已经学会了食用特定种类的食物，以达到理想的身材。</li>
<li>在今天的美国，我们会根据一个人喜欢吃烧烤来判断他是南方人，偏爱肉和土豆的一定是中西部人，喜欢吃鳄梨和橄榄菜的是加州人。</li>
<li>人们普遍认为快餐店是现代社会的创造物，其实不然，古罗马有着繁荣的快餐业，在我们看来，也许会觉得很眼熟。</li>
<li>尽管如此，暴食被视为七宗罪中的一种。对于古雅典人来说，至少对进行道德讨论的希腊哲学家来说，过度食用面包以外的任何食物都会迅速导致道德败坏。</li>
</ul>
<h1 id="饮食与社交：来参加我的宴会吧"><a href="#饮食与社交：来参加我的宴会吧" class="headerlink" title="饮食与社交：来参加我的宴会吧"></a>饮食与社交：来参加我的宴会吧</h1><ul>
<li>在美国，我们经常会听到“在拉斯维加斯发生的事就留在拉斯维加斯”这句谚语，希腊也流行着一句差不多的谚语，”我讨厌记性好的酒友“，换言之，在饮酒宴会上发生的事情，就留在饮酒宴会上吧。</li>
</ul>
<h1 id="花样百出的古代食谱"><a href="#花样百出的古代食谱" class="headerlink" title="花样百出的古代食谱"></a>花样百出的古代食谱</h1><h1 id="栖身之所：蜗居公寓"><a href="#栖身之所：蜗居公寓" class="headerlink" title="栖身之所：蜗居公寓"></a>栖身之所：蜗居公寓</h1><ul>
<li>和今天一样，贫民窟的房东们向贫困的租户收取房租，他们租住的房屋建造粗糙，随时都有可能在他们头顶坍塌。令人震惊的是，这种情况竟然十分常见。</li>
<li>今天许多豪华公寓楼的顶层公寓因为距离地面非常高，视野开阔而备受住户青睐，但在古代人眼里却并非如此。当时豪华公寓通常在低楼层，公寓楼层越高越不好，这种安排创造了迥异于现代城市的阶层划分模式。今天住宅区通常因财富而被分隔开，比如一片住宅区全是面向富有住户的公寓，而城市的另一片只住着穷人。在罗马，财富分布是纵向的，而不是横向的，因而在同一栋建筑内，也许下面几层是富人公寓，中产人士住在他们上面，贫困的租户住在最高层。</li>
<li>在尚未发明电梯的年代，这种安排合乎情理，且生活在高楼层，不仅不方便，还存在着巨大的风险隐患。倘若发生火灾，高楼层将会变成致命的区域，丢掉性命的概率将会高很多。</li>
<li>罗马有一些私人住宅。罗马表示单个房屋或家的词domus,在英语中留下了深深的印记，从许多熟悉的词中，甚至一些不可思议的地方，都能明显地看到它的痕迹。</li>
<li>先看看更具逻辑性的关联：英语中，“domain”（领地）一词来自拉丁语dominium,意为所有权，而这个词又来自dominus,意为一家之主、领主、君主。从古至今，君主对国家的统治经常被拿来与父亲对家庭的统治相比较，两者的类似之处可以追溯到古罗马。许多英语词，如kingdom、officialdom、wisdom后面的词缴“-dom”，都源于domus,意为某一活动的范围、领域或场所。“domicile”（住所）、“domestic”（家庭的）、“domesticate”（驯化）等词都强调与家庭的关联，同样源于domus。拉丁语形容词domabilis,意为可驯服的，动词domo意为驯服、驯化或训练动物。因此，害怕婚姻的单身汉们将自己视作有待驯化的“野生”动物，也许没什么错。此外，还有一些domus的派生词，关联不太明显。例如，多米诺骨牌（dominoes)可以追溯到dominus,原指一种连帽黑色斗篷，穿这种斗篷的天主教教士被称为“dominus”（大人）。从此引申为连帽黑色斗篷，也指化装舞会上戴的黑色面具。多米诺骨牌因牌身为黑色而得名domino,这一名字也许也会让人们想起那种半脸式黑面具。</li>
<li>我们从罗马词domus的语言学意义回到它所指的真实住所上来。虽然古罗马的房子与我们的有很多不同（比如，外面没窗户、家具很少、不太要求私密性）,但一些现代术语其实源自古罗马的住宅设计。所有罗马房子的基本设计都大同小异，尽管如今住宅设计日益个性化，但仍能看到这种基本设计。古罗马人进入住宅，要穿过前庭，即正门前的区域。今天，我们进入建筑内部，需要穿过前厅（连接外门和建筑内部的门厅或门廊）。罗马住宅的正式门厅和主要的待客区域是位于建筑中央的开放式庭院。今天，许多建筑中央仍设计有大片开放空间，称为中庭，多数大房子还设计有一条主门道，通向前厅或入口大厅。</li>
</ul>
<h1 id="货币推动生意，生意推动世界"><a href="#货币推动生意，生意推动世界" class="headerlink" title="货币推动生意，生意推动世界"></a>货币推动生意，生意推动世界</h1><ul>
<li>一个社会即使没有货币系统，也能进行积极活跃的买卖交易。</li>
<li>最后，如果你手边有一张1美元纸币，请将它掏出来，仔细端详一下。<br>美元上面充满了古代的字符。首先，1美元纸币的背面至少有三句拉丁语口号：Annuit coeptis,意思是“保佑我们的基业”；Novus ordo seclorum,意思是“时代新秩序”；e pluribus unum,意思是“合众为一”。此外，纸钞背面左右两边都是美国国玺，一边是老鹰，罗马人也用鹰代表他们的国家，另一边是一座看起来酷似埃及金字塔的金字塔。老鹰一只爪子紧抓着一把箭，象征着战争；另一只抓着一枝橄榄枝，象征和平。希腊人和罗马人都用橄榄枝象征和平，罗马钱币上也出现了橄榄枝，用来表现这一意义。纸币正面正中央是乔治.华盛顿的肖像，这是对古币上刻印统治者肖像的效仿。此外，右边还有一台天平，是古希腊与古罗马“正义”的象征。最后，华盛顿的肖像下方是月桂叶，月桂在古典时代代表胜利和伟大成就。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>古希腊罗马留下了什么</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript finale</title>
    <url>/2022/02/01/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/javascript_finale/</url>
    <content><![CDATA[<h1 id="JavaScript-的异步"><a href="#JavaScript-的异步" class="headerlink" title="JavaScript 的异步"></a>JavaScript 的异步</h1><ul>
<li><p>正常情况下，我们编写的代码都是同步代码，也就是说代码执行的顺序是从上到下，上面的操作还没有执行完，下面的操作就不会被执行到。但是在前端代码之中，我们会经常向后端或者网络请求数据，即使现在网络已经很快，在请求数据量较大的时候，请求数据的操作依然会占据相当长的时间。如果我们还依然使用同步代码，那么就会导致页面卡顿（因为这个时候代码卡顿在了请求数据这一步）。</p>
</li>
<li><p>另外一方面，有些操作完全可以在前端请求页面的时候完成，比如说渲染出页面的模板。我们可以在数据完全获取之后再把这些数据填入页面。</p>
</li>
<li><p>总而言之，前端需要使用异步代码，需要允许多段代码同时执行而非严格按照顺序一步步走。这种允许多段代码同时执行的代码就是<strong>异步（英语：Asynchronous）</strong>。</p>
</li>
</ul>
<h1 id="事件循环与消息队列机制"><a href="#事件循环与消息队列机制" class="headerlink" title="事件循环与消息队列机制"></a>事件循环与消息队列机制</h1><p>首先我们需要明确，JavaScript 是单线程语言，这也就代表 JavaScript 并不能像 C++ 或者 Java 那样实现多线程并发的异步。</p>
<p>但 JavaScript 使用了另外一种方式实现异步，也就是事件循环和消息队列机制。</p>
<p>在详细叙述这个机制之前，我们首先需要重新认识一下回调函数。当主线程派遣出一个异步过程，比如说触发了网络请求，一般而言需要设定一个这个异步过程的回调函数。这个回调函数描述的，是这个异步过程执行完毕后需要做的事情。</p>
<p>需要定义这个回调函数的原因也很简单，主线程没有办法了解到异步过程何时才能结束，甚至并不清楚这个过程能否结束。在这样的情况下，主线程完全不能知晓什么时候做这个异步过程的善后工作（比如说从网络获取数据后，主线程应该把这些数据加载到页面上）。那么不如定义一个回调函数，具体什么时候调用，根据异步过程来确定。</p>
<p>回到事件循环和消息队列。JavaScript 的主线程上会有一个死循环，称为<strong>事件循环</strong>。其执行逻辑为在空闲的时候不断检查消息队列是否有消息，如果有，则执行，如果没有，则等待。而空闲的含义是当前函数栈空。</p>
<p>而需要异步执行的代码则会负载一个回调函数，当异步过程执行完毕后，则会把回调函数放入消息队列末尾。当主线程空闲且检测到消息队列之中有回调函数的时候，主线程就会执行回调函数，做好异步过程的善后工作。</p>
<p>通过这样的机制，JavaScript 依然是单线程的，对文档树的操作依然是同步的、不会出现冲突的。但依靠这个机制，JavaScript 实现了异步。</p>
<p>现在我们编写一个异步的代码。这里会用到 <code>setTimeout</code> 函数，其接受两个参数，第一个参数为一个回调函数，第二个参数为多长时间后执行上述回调函数。比如下列代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;1s has passed!&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>这个代码将会延迟一秒后输出 <code>&quot;1s has passed!&quot;</code>。这个函数的等待过程会异步于主线程执行，而其通过第一个参数接受的回调就会在等待完毕后放入消息队列。现在我们利用这个函数写出一个需要耗时的操作，以此模拟网络请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Data got!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这个函数调用后会立刻返回，因为它的任务是派遣一个异步过程，而不负责等待异步结束和善后，善后工作应该写在回调函数之中等待主线程执行。</p>
<p>在等待异步的过程中，主线程可以完成其他的任务：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Data get!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetchData(); <span class="comment">// Dispatch async task</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Rendering template...&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Loading local storage...&quot;</span>); <span class="comment">// Main thread doing other tasks</span></span><br></pre></td></tr></table></figure>
<p><img src="https://pic.imgdb.cn/item/61f8f5b02ab3f51d91c628b6.jpg" alt=""></p>
<p>效果不戳！</p>
<p>遗憾的是，在<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023020895584256">廖雪峰的博客上</a>跑这段代码没法实现异步，所以跑异步还得<a href="https://zhaochenyang20.github.io/2022/01/30/%E5%89%8D%E5%90%8E%E7%AB%AF/javascript_part_3/#%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%20js%20%E4%BB%A3%E7%A0%81">用 c7w 讲的方法</a>。</p>
<h1 id="回调函数的缺陷"><a href="#回调函数的缺陷" class="headerlink" title="回调函数的缺陷"></a>回调函数的缺陷</h1><p>回调函数不需要引入很多的其他语法就可以方便地使用到异步之中，但是其问题也是很突出的。回调函数本身可读性就不是很好，而且也并不能很好贴合我们的直观思维逻辑。而其最大的问题就是可能造成回调函数过分嵌套，导致代码难以维护。这一般被称为<strong>回调地狱</strong>。</p>
<p>真正的异步业务逻辑可能并不会很单一，比如说前端要从多个数据源加载数据，但是后一个数据的加载需要依靠前一个数据的结果。这样就不能在主线程中同时派遣多个异步过程，而必须在前一个异步过程的回调之中派遣下一个异步过程。这里我们依然用 <code>setTimeout</code> 来模拟耗时操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// Get data #1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Data #1 get!&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// Get data #2</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Data #2 get!&quot;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// Get data #3</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Data #3 get!&quot;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// Get data #4</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;Data #4 get!&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<p>这样的代码很难阅读，也很难维护，而实际上的业务逻辑也不可能是 <code>setTimeout</code> 这样简单。另一方面，我们还需要处理异步异常的情况，如果发生错误，就应当立刻跳出异步，交由主线程做异常处理。而显然，我们很难给这样的代码添加异常处理功能。</p>
<h1 id="promise-对象"><a href="#promise-对象" class="headerlink" title="promise 对象"></a>promise 对象</h1><p>为了解决回调函数不直观的问题，新版本的 JavaScript 设立了 <code>Promise</code> 对象，可以说这个对象完全改变了 JavaScript 异步代码编写的规范。</p>
<p>创建一个 <code>Promise</code> 对象可以使用其构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> asyncSucceeded = <span class="built_in">Math</span>.random() &gt; <span class="number">0.2</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncSucceeded) &#123;</span><br><span class="line">            resolve(<span class="string">&quot;Async succeeded!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&quot;Async failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>其构造函数接受一个回调函数，这个回调函数的两个参数是另外的两个回调函数。<code>resolve</code> 代表异步成功的回调函数，<code>reject</code> 代表异步失败的回调函数。而构造函数接受的回调函数的函数体则是需要执行的耗时操作。</p>
<blockquote>
<p>Promise 的中文一般是“承诺”，那异步和承诺究竟有什么关系？</p>
<p>我们来设想这样的一个情景。小明是一位五年级的小学生，他的妈妈为了让他好好学习，<strong>承诺</strong>小明如果他期末考试考到 100 分，就给他买新手机。而等待期末考试出成绩，就是异步过程。在这段时间内，作为主线程的小明的妈妈可以去做其他的工作，而负责执行异步过程的小明则要好好学习。</p>
<p>等到异步过程执行完毕，也就是期末考试出成绩了，就到了<strong>承诺</strong>兑现的时候了。小明和妈妈就会核对小明的学习成果（异步过程的执行状态），如果小明考到了 100 分（异步过程执行成功），作为主线程的小明的妈妈就会去买新手机。而如果小明没考到 100 分（异步过程执行失败），小明的妈妈就不会买新手机。无论买不买，作为主线程的小明的妈妈都做好了异步过程的善后工作。</p>
<p>换到程序设计的情景。一个<strong>承诺</strong>要成立，就需要规定好，异步过程执行完毕，主线程需要做什么，其实这就是指派异步过程的回调函数。在 <code>Promise</code> 的构造函数之中，<code>resolve</code> 实际上就是“考到 100 分，小明的妈妈要买新手机”，<code>reject</code> 实际上就是“考不到 100 分，小明的妈妈不买新手机”，函数体就是“小明努力学习”。</p>
<p>但是构造函数之中虽然有了 <code>resolve</code> 和 <code>reject</code>，但实际上我们还没有具体规定这两个回调到底是啥。而指定这两个回调需要调用 <code>Promise</code> 的 <code>then</code> 和 <code>catch</code> 方法。这个我们在下面讲解。</p>
</blockquote>
<p>给 <code>resolve</code> 和 <code>reject</code> 指定具体的函数体需要使用 <code>then</code> 和 <code>catch</code> 方法。这两个方法都会接受回调函数，并且返回 <code>Promise</code> 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> asyncSucceeded = <span class="built_in">Math</span>.random() &gt; <span class="number">0.2</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncSucceeded) &#123;</span><br><span class="line">            resolve(<span class="string">&quot;Async succeeded!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&quot;Async failed!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Then&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Catch&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>注意此处的业务逻辑，<code>.then</code> 和 <code>.catch</code> 是同一个语句，没有 <code>;</code> 符号</p>
<p>通过这样的方式，我们就在 <code>Promise</code> 构造函数接受的回调函数的函数体中规定了异步过程的具体任务，在 <code>then</code> 和 <code>catch</code> 方法之中指派了异步过程的回调函数。这样，主线程就完整完成了异步过程的派遣。</p>
<p><code>Promise</code> 比直接写回调模式优越的地方就是这种写法解决了回调地狱。我们依然考虑依次获取多数据源数据的业务场景，由于 <code>then</code> 方法依然返回 <code>Promise</code> 对象，所以实际上我们可以在 <code>then</code> 后面接着调用 <code>then</code>。而上一个 <code>then</code> 之中的回调函数的返回值会被传入下一个 <code>then</code> 之中的回调函数的第一个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Get Data #1</span></span><br><span class="line">    resolve(<span class="string">&quot;Data #1&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// Get Data #2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data #2&quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="comment">// Get Data #3</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data #3&quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="built_in">console</span>.log)</span><br><span class="line">    .catch(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<p>这种写法被称为 <code>then</code> 链，其好处是比回调函数写法更易读且易维护。</p>
<p>另外，对于多依赖问题（需要多个异步全部结束后才能派遣下一个异步），<code>Promise</code> 提供了 <code>all</code> 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all(</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">`Promise #<span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res); <span class="comment">// [&quot;Promise #1&quot;, &quot;Promise #2&quot;, &quot;Promise #3&quot;]</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>另外，注意两点：</p>
<ul>
<li><code>Promise</code> 一旦创建，内部的异步过程就开始执行，且开始执行后就不会取消</li>
<li>创建 <code>Promise</code> 会写很多很长的回调，写完这些回调后很容易给编写者一种“异步已经执行结束”的错觉。实际上这么长的语句仅仅是<strong>定义了 <code>Promise</code> 对象</strong>，也就是仅仅只是派遣了异步。</li>
</ul>
<p>关于第二点，可以看下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        i = <span class="number">2</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="built_in">console</span>.log);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在实际工程中，创建 <code>Promise</code> 对象的语句可以比这个示例长很多，甚至可以超出一个屏幕显示的范围。此时一定要保持清醒，这么长的语句，<strong>仅仅是派遣了异步</strong>，不要紧接着后面使用一些会被异步过程修改的值。</p>
<p>跟着我念，<strong>再长的语句也仅仅是派遣了异步</strong>，<strong>再长的语句也仅仅是派遣了异步</strong>，<strong>再长的语句也仅仅是派遣了异步</strong>。</p>
<p>此外，实际工程之中，一般会设计一个标记表示某个异步是否还在执行。这个标记会在创建 <code>Promise</code> 对象派遣异步的时候置真，然后在 <code>then</code> 链最后的回调中置假。这样主线程就可以根据这个标记确定是否可以使用一些敏感变量（比如上面例子中的 <code>i</code>）。</p>
<p>这种思想其实类似于读写锁的思想</p>
</blockquote>
<h3 id="async-与-await"><a href="#async-与-await" class="headerlink" title="async 与 await"></a><code>async</code> 与 <code>await</code></h3><p>在最新标准之中，JavaScript 引入了 <code>async, await</code> 这两个关键字，这两个关键字的作用是能够让异步代码写得和同步代码一样自然。</p>
<p>我们可以用 <code>async</code> 关键字将一个函数声明为异步函数。调用异步函数的时候，其会立刻返回并派遣一个异步：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Async over!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Sync code here!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>而 <code>async</code> 关键字的的另外一个作用就是将函数的返回值包装为 <code>Promise</code> 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Async over!&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> foo(); <span class="comment">// &quot;object&quot;, note &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>
<p>那么我们也可以按照 <code>Promise</code> 的 <code>then</code> 链写法使用异步函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Data #1&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data #2&quot;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="built_in">console</span>.log)</span><br><span class="line">    .catch(<span class="built_in">console</span>.log);</span><br></pre></td></tr></table></figure>
<p><code>await</code> 关键字后面可以接一个变量，如果这个变量不是 <code>Promise</code> 对象，那么 <code>await</code> 关键字不产生任何效果。</p>
<p>如果是 <code>Promise</code> 对象，那么 <code>await</code> 关键字会阻塞代码运行，直到这个 <code>Promise</code> 对象代表的异步执行完毕。</p>
<p>如果异步成功，这个时候 <code>await</code> 语句的返回值是 <code>Promise</code> 的 <code>resolve</code> 回调接受的参数，无论有没有通过 <code>then</code> 方法指定 <code>resolve</code> 回调。</p>
<p>如果异步失败，首先确定这个 <code>Promise</code> 有没有通过 <code>catch</code> 方法规定 <code>reject</code> 回调。如果有，<code>await</code> 返回 <code>catch</code> 之中回调函数的返回值，如果没有，抛出 Uncaught Failure 错误。</p>
<p>比如说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">await</span> <span class="number">1</span>;</span><br><span class="line">a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> succeeded = <span class="built_in">Math</span>.random() &gt; <span class="number">0.2</span>;</span><br><span class="line">    <span class="keyword">if</span> (succeeded) resolve(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> reject(<span class="string">&quot;Failure&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="string">&quot;Error &quot;</span> + err);</span><br><span class="line">b; <span class="comment">// Maybe &quot;Success&quot;, maybe &quot;Error Failure&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>破防了！！！！</p>
<p>异步根本没特么学明白，还是先去读读更细致的博客，orz</p>
<hr>
<p>上面那段文字写于 2 月 2 日，现在是 2 月 5 日了，回头重新学习下 js 的异步</p>
<p><code>async, await</code> 关键字实际上是针对 <code>then</code> 链可能过长导致可读性降低的问题而提出的。我们现在还是考虑依次从多个数据源获取数据的问题，事实上通过 <code>async, await</code> 关键字，这个异步过程甚至可以写得很像同步代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data_1 = <span class="keyword">await</span> fetchData_1(initData);</span><br><span class="line">    <span class="keyword">let</span> data_2 = <span class="keyword">await</span> fetchData_2(data_1);</span><br><span class="line">    <span class="keyword">let</span> data_3 = <span class="keyword">await</span> fetchData_3(data_2);</span><br><span class="line">    <span class="keyword">return</span> [data_1, data_2, data_3];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的 <code>fetchData</code> 系列函数均是异步函数。</p>
<p>可以发现这种写法和同步代码几乎没有什么差别，可读性比 <code>then</code> 链好一些，更是比回调函数写法好很多。</p>
<p>另一方面，其解决了不定长 <code>then</code> 链的问题。如果要依次拉取数据的信息源个数不是固定的，而是通过变量指定，那么 <code>then</code> 链就不可用了，因为我们不知道具体要写多少个 <code>then</code>。但是通过 <code>async, await</code> 结合 <code>for</code> 循环就可以解决问题。</p>
<h1 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h1><p>但是 <code>async, await</code> 带来的争议也不小，最大的危险是异步传染。</p>
<p><code>await</code> 关键字的使用有一个要求，也就是如果在函数中使用，那么这个函数必须是异步的。原因也是好理解的，因为 <code>await</code> 会阻塞代码运行，如果在主线程上阻塞，则会导致页面卡顿，这本来就和异步的初衷矛盾。</p>
<p>那么进一步，调用了这个函数的外层函数中的语句为了防止异步可能带来的敏感变量问题（和 <code>Promise</code> 问题类似，异步函数如果修改了某一个变量，这个变量很有可能不会被及时修改），外层函数也很有可能给这个函数加上 <code>await</code>，这又会导致外层函数不可抗力地变为异步函数。这种传染会导致整片函数变为异步，从而让逻辑变得混乱。</p>
<p>另外，<code>async, await</code> 关键字会降低我们对阻塞的敏感，从而编写出不必要的阻塞和串行代码。实际上，<code>async, await</code> 只是让<strong>依次</strong>拉取信息的代码变得简洁，对于本就可以多并发的信息拉取，反而会有让我们写出不必要的串行代码的可能，从而降低代码效率：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data_1 = <span class="keyword">await</span> fetchData_1();</span><br><span class="line">    <span class="keyword">let</span> data_2 = <span class="keyword">await</span> fetchData_2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果 <code>data_1, data_2</code> 本就可以并发获取，这样的写法反而会降低效率，因为这样代码的实际含义是串行地获取数据。真正的写法应该是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data_1_promise = fetchData_1();</span><br><span class="line">    <span class="keyword">let</span> data_2_promise = fetchData_2();</span><br><span class="line">    <span class="keyword">let</span> data_1 = <span class="keyword">await</span> data_1_promise;</span><br><span class="line">    <span class="keyword">let</span> data_2 = <span class="keyword">await</span> data_2_promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有先获取两个异步的 <code>Promise</code> 对象，同时派遣出两个异步后后分别 <code>await</code> 才能实现并发。</p>
<p>但是 <code>async, await</code> 的目的本来就是用于隐藏掉 <code>Promise</code> 的存在，将异步代码写成同步的格式，这样做其实还不如直接把 <code>Promise</code> 写出来。</p>
<p>此外，对于多依赖问题，<code>async, await</code> 关键字并没有解决，因为 <code>await</code> 一次只能等待一个异步。这个时候还是不可避免地需要使用 <code>Promise</code> 对象。</p>
<h1 id="该如何写好异步代码"><a href="#该如何写好异步代码" class="headerlink" title="该如何写好异步代码"></a>该如何写好异步代码</h1><p>现代的 JavaScript 已经将异步操作封装得足够易用，借助 <code>Promise, async, await</code> 就可以写出很明晰地异步代码。</p>
<p>但是我们在编写的时候一定需要注意自己写的不是同步代码而是异步代码，以免出现问题。此外，应当根据实际应用要求合理选择直接使用 <code>Promise</code> 对象还是 <code>async, await</code> 关键字。</p>
<p>实际上文档能教给读者的很有限，编者还是希望大家多去编写真实的工程代码以真正掌握 JavaScript 异步。</p>
<h1 id="Javascript异步编程的4种方法"><a href="#Javascript异步编程的4种方法" class="headerlink" title="Javascript异步编程的4种方法"></a>Javascript异步编程的4种方法</h1><ul>
<li>现在开始看的是阮一峰的博客，人家在 2012 年写的博客，十年后读都觉得写的很好</li>
</ul>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>这是异步编程最基本的方法。</p>
<p>假定有两个函数f1和f2，后者等待前者的执行结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　f1();</span><br><span class="line"></span><br><span class="line">　　f2();</span><br></pre></td></tr></table></figure>
<p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　callback();</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
<p>真正调用的时候：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">f1(f2);</span><br></pre></td></tr></table></figure>
<p>采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p>
<p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度<a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming">耦合</a>)（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p>
<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p>
<p>还是以 f1 和 f2 为例。首先，为 f1 绑定一个事件（这里采用的 jQuery 的<a href="https://api.jquery.com/on/">写法</a>）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　f1.on(<span class="string">&#x27;done&#x27;</span>, f2);</span><br><span class="line"></span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　f1.trigger(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
<p>f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p>
<p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以<a href="https://en.wikipedia.org/wiki/Decoupling">“去耦合”</a>（Decoupling），有利于实现<a href="https://www.ruanyifeng.com/blog/2012/10/javascript_module.html">模块化</a>。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>
<h1 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h1><p>上一节的”事件”，完全可以理解成”信号”。</p>
<p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做<a href="https://en.wikipedia.org/wiki/Publish-subscribe_pattern">“发布/订阅模式”</a>（publish-subscribe pattern），又称<a href="https://en.wikipedia.org/wiki/Observer_pattern">“观察者模式”</a>（observer pattern）。</p>
<p>这个模式有多种<a href="https://msdn.microsoft.com/en-us/magazine/hh201955.aspx">实现</a>，下面采用的是Ben Alman的<a href="https://gist.github.com/661855">Tiny Pub/Sub</a>，这是jQuery的一个插件。</p>
<p>首先，f2向”信号中心”jQuery订阅”done”信号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　jQuery.subscribe(<span class="string">&quot;done&quot;</span>, f2);</span><br><span class="line"><span class="comment">// 这不就是 QT 吗？</span></span><br><span class="line">　　jQuery.unsubscribe(<span class="string">&quot;done&quot;</span>, f2);</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　<span class="comment">// f1的任务代码</span></span><br><span class="line"></span><br><span class="line">　　　　　　jQuery.publish(<span class="string">&quot;done&quot;</span>);</span><br><span class="line"></span><br><span class="line">　　　　&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p>
<h1 id="setTimeout-的用法"><a href="#setTimeout-的用法" class="headerlink" title="setTimeout() 的用法"></a>setTimeout() 的用法</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(要执行的代码, 等待的毫秒数)</span><br><span class="line"><span class="built_in">setTimeout</span>(JavaScript 函数, 等待的毫秒数)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&quot;alert(&#x27;对不起, 要你久候&#x27;)&quot;</span>, <span class="number">3000</span> )</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id=<span class="string">&quot;content&quot;</span>&gt; 请等三秒钟!&lt;/p&gt;  </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="built_in">setTimeout</span>(<span class="string">&quot;changeState()&quot;</span>,<span class="number">3000</span> );  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params"></span>)</span>&#123;  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> content=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;content&#x27;</span>);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">    content.innerHTML=<span class="string">&quot;&lt;div style=&#x27;color:red&#x27;&gt;我是三秒后显示的内容！&lt;/div&gt;&quot;</span>;  </span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>实例中设定了等待 3 秒 (3000 milliseconds) 后浏览器就会执行 changeState( ) 这一个函数。</p>
<p>setTimeout() 方法可以使到浏览器不断执行一段代码或一个函数 当一个 setTimeout( ) 开始了循环的工作, 我们要使它停下来, 可使用 clearTimeout( ) 这方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(timeoutID)</span><br></pre></td></tr></table></figure>
<p>timeoutID 为调用 setTimeout() 函数时所获得的返回值，使用该返回标识符作为参数，可以取消该 setTimeout() 所设定的定时执行操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">meter1 =<span class="built_in">setTimeout</span>(<span class="string">&quot;count1()&quot;</span>, <span class="number">1000</span>)</span><br><span class="line">meter2 =<span class="built_in">setTimeout</span>(<span class="string">&quot;count2()&quot;</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>古人云：“君子一诺千金”，这种“承诺将来会执行”的对象在JavaScript中称为Promise对象。</p>
<p>Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供<a href="http://wiki.commonjs.org/wiki/Promises/A">统一接口</a>。</p>
<p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　f1().then(f2);</span><br></pre></td></tr></table></figure>
<p>我们先看一个最简单的Promise例子：生成一个0-2之间的随机数，如果小于1，则等待一段时间后返回成功，否则返回失败：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeOut = <span class="built_in">Math</span>.random() * <span class="number">2</span>;</span><br><span class="line">    log(<span class="string">&#x27;set timeout to: &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeOut &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            log(<span class="string">&#x27;call resolve()...&#x27;</span>);</span><br><span class="line">            resolve(<span class="string">&#x27;200 OK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&#x27;call reject()...&#x27;</span>);</span><br><span class="line">            reject(<span class="string">&#x27;timeout in &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, timeOut * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个<code>test()</code>函数有两个参数，这两个参数都是函数，根据 timeout 参数，调用<code>resolve(&#39;200 OK&#39;)</code> 或者调用<code>reject(&#39;timeout in &#39; + timeOut + &#39; seconds.&#39;)</code>。可以看出，<code>test()</code>函数只关心自身的逻辑，并不关心具体的<code>resolve</code>和<code>reject</code>将如何处理结果。</p>
<p>有了执行函数，我们就可以用一个Promise对象来执行它，并在将来某个时刻获得成功或失败的结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(test);</span><br><span class="line"><span class="keyword">var</span> p2 = p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功：&#x27;</span> + result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = p2.catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败：&#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>变量<code>p1</code>是一个Promise对象，它负责执行<code>test</code>函数。由于<code>test</code>函数在内部是异步执行的，当<code>test</code>函数执行成功时，我们告诉Promise对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果成功，执行这个函数：</span></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功：&#x27;</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当<code>test</code>函数执行失败时，我们告诉Promise对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p2.catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败：&#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Promise对象可以串联起来，所以上述代码可以简化为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(test).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功：&#x27;</span> + result);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败：&#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>连在一起的话，就是这个样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;start new Promise...&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> timeOut = <span class="built_in">Math</span>.random() * <span class="number">2</span>;</span><br><span class="line">    log(<span class="string">&#x27;set timeout to: &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeOut &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            log(<span class="string">&#x27;call resolve()...&#x27;</span>);</span><br><span class="line">            resolve(<span class="string">&#x27;200 OK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&#x27;call reject()...&#x27;</span>);</span><br><span class="line">            reject(<span class="string">&#x27;timeout in &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, timeOut * <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;Done: &#x27;</span> + r);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;Failed: &#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可见Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了：</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/1027242914217888/l" alt=""></p>
<p>Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。</p>
<p>要串行执行这样的异步任务，不用Promise需要写一层一层的嵌套代码。有了Promise，我们只需要简单地写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">job1.then(job2).then(job3).catch(handleError);</span><br></pre></td></tr></table></figure>
<p>其中，<code>job1</code>、<code>job2</code>和<code>job3</code>都是Promise对象。</p>
<p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0.5秒后返回input*input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">&#x27;calculating &#x27;</span> + input + <span class="string">&#x27; x &#x27;</span> + input + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, input * input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.5秒后返回input+input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        log(<span class="string">&#x27;calculating &#x27;</span> + input + <span class="string">&#x27; + &#x27;</span> + input + <span class="string">&#x27;...&#x27;</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, input + input);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;start new Promise...&#x27;</span>);</span><br><span class="line">    resolve(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;Got value: &#x27;</span> + result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">-----------------------------------------------</span><br><span class="line">Log:</span><br><span class="line"></span><br><span class="line">start <span class="keyword">new</span> <span class="built_in">Promise</span>...</span><br><span class="line"></span><br><span class="line">calculating <span class="number">123</span> x <span class="number">123.</span>..</span><br><span class="line"></span><br><span class="line">calculating <span class="number">15129</span> + <span class="number">15129.</span>..</span><br><span class="line"></span><br><span class="line">calculating <span class="number">30258</span> x <span class="number">30258.</span>..</span><br><span class="line"></span><br><span class="line">calculating <span class="number">915546564</span> + <span class="number">915546564.</span>..</span><br><span class="line"></span><br><span class="line">Got value: <span class="number">1831093128</span></span><br></pre></td></tr></table></figure>
<p>除了串行执行若干异步任务外，Promise还可以并行执行异步任务。</p>
<p>试想一个页面聊天系统，我们需要从两个不同的URL分别获得用户的个人信息和好友列表，这两个任务是可以并行执行的，用<code>Promise.all()</code>实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;P1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">600</span>, <span class="string">&#x27;P2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 同时执行p1和p2，并在它们都完成后执行then:</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results); <span class="comment">// 获得一个Array: [&#x27;P1&#x27;, &#x27;P2&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用<code>Promise.race()</code>实现：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;P1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, <span class="number">600</span>, <span class="string">&#x27;P2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.race([p1, p2]).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// &#x27;P1&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由于<code>p1</code>执行较快，Promise的<code>then()</code>将获得结果<code>&#39;P1&#39;</code>。<code>p2</code>仍在继续执行，但执行结果将被丢弃。</p>
<p>如果我们组合使用 Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</p>
<h1 id="给-docs-9-写个-pr"><a href="#给-docs-9-写个-pr" class="headerlink" title="给 docs 9 写个 pr"></a>给 docs 9 写个 pr</h1><p>个人感觉在<a href="https://docs.net9.org/languages/javascript/async/#promise">引入 Promise 对象</a>的时候跳跃比较大，我没能都明白</p>
<p>自己来写一点引入的内容，来自<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544">廖雪峰的博客</a></p>
<p>Promise 对象的核心思想是每一个异步任务返回一个 Promise 对象，该对象有一个 then 方法，允许指定回调函数。</p>
<p>我们先看一个最简单的 Promise 例子：生成一个 0~2 之间的随机数，如果小于 1，则等待一段时间后返回成功，否则返回失败：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timeOut = <span class="built_in">Math</span>.random() * <span class="number">2</span>;</span><br><span class="line">    log(<span class="string">&#x27;set timeout to: &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeOut &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            log(<span class="string">&#x27;call resolve()...&#x27;</span>);</span><br><span class="line">            resolve(<span class="string">&#x27;200 OK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// branch A</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&#x27;call reject()...&#x27;</span>);</span><br><span class="line">            reject(<span class="string">&#x27;timeout in &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// branch B</span></span><br><span class="line">    &#125;, timeOut * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个<code>test()</code>函数称为执行函数，具有有两个参数。</p>
<p>这两个参数都是函数，根据 timeout 方法，调用 <code>resolve(&#39;200 OK&#39;)</code> 或者调用 <code>reject(&#39;timeout in &#39; + timeOut + &#39; seconds.&#39;)</code><br>可以看出，<code>test()</code> 函数只关心自身的逻辑，并不关心具体的 <code>resolve</code> 和 <code>reject</code> 将如何处理结果。</p>
<p>有了执行函数，我们就可以用一个 Promise 对象来执行它，并在将来某个时刻获得成功或失败的结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(test);</span><br><span class="line"><span class="keyword">var</span> p2 = p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success: &#x27;</span> + result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> p3 = p2.catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;failed: &#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>变量  p1 是一个 Promise 对象，它负责执行 test 函数。由于 test 函数在内部是异步执行的，当 test 函数进入 branch A 并且执行 resolve 语句时（或者说执行成功时），我们告诉 Promise 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if test enter branch A</span></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;right: &#x27;</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当 <code>test</code> 函数进入 branch B 并且执行 reject 语句（也即执行失败）时，我们告诉 Promise 对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if test enter branch B</span></span><br><span class="line">p2.catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrong: &#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Promise 对象可以串联起来，所以上述代码可以简化为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(test).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;right: &#x27;</span> + result);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;wrong: &#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>连在一起的话，就是这个样子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;start new Promise...&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> timeOut = <span class="built_in">Math</span>.random() * <span class="number">2</span>;</span><br><span class="line">    log(<span class="string">&#x27;set timeout to: &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeOut &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            log(<span class="string">&#x27;call resolve()...&#x27;</span>);</span><br><span class="line">            resolve(<span class="string">&#x27;200 OK&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&#x27;call reject()...&#x27;</span>);</span><br><span class="line">            reject(<span class="string">&#x27;timeout in &#x27;</span> + timeOut + <span class="string">&#x27; seconds.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, timeOut * <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;Done: &#x27;</span> + r);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">&#x27;Failed: &#x27;</span> + reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可见Promise最大的好处是在异步执行的流程中，把执行代码和处理结果的代码清晰地分离了：</p>
<p><img src="https://www.liaoxuefeng.com/files/attachments/1027242914217888/l" alt=""></p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>新年祝福</title>
    <url>/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%96%B0%E5%B9%B4%E7%A5%9D%E7%A6%8F/</url>
    <content><![CDATA[<h1 id="春联"><a href="#春联" class="headerlink" title="春联"></a>春联</h1><p><img src="https://pic.imgdb.cn/item/61f8ec292ab3f51d91bc9969.jpg" alt=""></p>
<p>心想事成无压力 吉星高照好运来 虎虎生威——紫六楼长</p>
<p><img src="https://pic.imgdb.cn/item/61f8ec7f2ab3f51d91bcee8a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f8ec8b2ab3f51d91bcf8b1.jpg" alt=""><br>lambda 他们寝室门口</p>
<p><img src="https://pic.imgdb.cn/item/61f8eca42ab3f51d91bd1149.jpg" alt=""><br>言特的朋友圈</p>
<p><img src="https://pic.imgdb.cn/item/61f8ecb92ab3f51d91bd268a.jpg" alt=""><br>除夕夜在 AIR 拍的，你别说真的很有精神！</p>
<h1 id="c7w"><a href="#c7w" class="headerlink" title="c7w"></a>c7w</h1><p>诶，感谢寒暖暖学姐 2021 年的救命之恩，还有伸出物理意义的大腿让我抱紧！！！！</p>
<p>祝高老板新的一年继续冲哇！学业不能再好了，体育锻炼要更上一层楼哇！科研顺利，挑战杯乱杀！！！</p>
<h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><p>喵！</p>
<p>跪谢过去两年的一路相伴诶！</p>
<p>新的一年，继续冲哇！学业科研通通乱杀！<del>提高自己在相亲市场的竞争力！</del></p>
<p>爱你唔， lambda！</p>
<h1 id="hjj"><a href="#hjj" class="headerlink" title="hjj"></a>hjj</h1><p>诶，感谢 hjj 过去一年的唠嗑和排忧解难诶！</p>
<p>新的一年要继续冲哇！</p>
<p><del>寒假卷起来，开学卷翻天</del></p>
<p>快快取得驾照，在车队里继续飙车(X</p>
<h1 id="gls"><a href="#gls" class="headerlink" title="gls"></a>gls</h1><p>感谢高老师过去一年的陪伴和唠嗑诶</p>
<p>新的一年要继续加油，做复杂人类社会的洞察者</p>
<p>新年快乐，学业顺遂！</p>
<p>科研乱杀，身体健康！</p>
<h1 id="yyj"><a href="#yyj" class="headerlink" title="yyj"></a>yyj</h1><p>新的一年，杀入信院了要继续冲啊！</p>
<p>认知自我，做人类社会的洞察者！</p>
<p>新年快乐，学业顺遂！</p>
<p>体育加油，多陪陪家人的！</p>
<h1 id="义淮哥"><a href="#义淮哥" class="headerlink" title="义淮哥"></a>义淮哥</h1><p>义淮哥，我滴大超人！！！</p>
<p>去 MIT 要一定要注意身体啊，早日四大 PhD 通吃！</p>
<p>新年继续乱杀，继续当好五角形战士，来年特奖答辩一定给我留个座位，我给你摇旗呐喊！！！</p>
<h1 id="雷哥"><a href="#雷哥" class="headerlink" title="雷哥"></a>雷哥</h1><p>雷哥新年快乐诶！</p>
<p>预祝来年春招乱杀，<del>大厂给的实在太多啦</del>！</p>
<p>以后担任 CTO，迎娶白富美，走上人生巅峰了，记得等我从阿美利卡落魄回国来投奔你。</p>
<h1 id="阿飞"><a href="#阿飞" class="headerlink" title="阿飞"></a>阿飞</h1><p>阿飞新年快乐诶！</p>
<p>新的一年，科研学业卷卷卷！</p>
<p>体育更上一层楼，早日健美成为肌肉猛男！</p>
<h1 id="一多"><a href="#一多" class="headerlink" title="一多"></a>一多</h1><p>一多新年快乐诶！</p>
<p>祝你在伦敦身体健康，学业有成，科研顺利诶！</p>
<p><del>女人只会影响我们拔剑的速度</del></p>
<p>在 CS 的路上继续一路乱杀！</p>
<h1 id="狗子"><a href="#狗子" class="headerlink" title="狗子"></a>狗子</h1><p>啊，可爱的狗子，新年快乐！</p>
<p>来年还要继续卷起来，哪怕考研我也陪你冲到底(<del>就算考研，咱那时候也没书读，一定陪你到最后的！</del>)</p>
<p>新的一年，要好好学数学的，<del>早点回学校和我一起看概统</del></p>
<p>生活幸福，沙雕快乐！</p>
<h1 id="sfgg"><a href="#sfgg" class="headerlink" title="sfgg"></a>sfgg</h1><p>祝 sfgg 新年快乐诶，要和 npy 99<del>6 996</del> 哇！</p>
<p>早日摆脱 A- 收割机的命运，<del>争取早日集齐彩虹成绩单</del></p>
<p>就，新年继续加油，棒球队和跑协继续玩下去的！</p>
<p>生活快乐，学业顺遂！</p>
<h1 id="光宇"><a href="#光宇" class="headerlink" title="光宇"></a>光宇</h1><p>光宇新年快乐啦！</p>
<p>新的一年，学业上一起加油诶，软工带我飞<del>入垃圾堆</del></p>
<p>答疑坊和科协冲冲冲，咱们为计 06 冲丙团！</p>
<p>生活快乐，万事顺遂啦！</p>
<h1 id="芸"><a href="#芸" class="headerlink" title="芸"></a>芸</h1><p>小芸新年快乐哇！</p>
<p>来年学业进步，早日在<del>男女比无穷大而你居然还找不到 npy 的</del>北邮找到 npy！<del>找对象嘛，性别别卡太死，是个人就行了嘛！</del></p>
<p>新年快乐，万事胜意！</p>
<h1 id="怡轩"><a href="#怡轩" class="headerlink" title="怡轩"></a>怡轩</h1><p>怡轩新春快乐哇！</p>
<p>祝你在经管继续卷卷卷起来！！学业继续乱杀！</p>
<p>来年收获自己喜爱和满意的社工和实习鸭！</p>
<p>科英带带孩子，qvq！</p>
<p>平安喜乐，万事胜意！</p>
<h1 id="毛老师"><a href="#毛老师" class="headerlink" title="毛老师"></a>毛老师</h1><p>毛老师新年快乐！</p>
<p>祝你来年喜提 offer 雨，去了阿美利卡别忘你留守在海淀没有书的可怜室友。</p>
<p><del>祝来年包括七夕节和情人节在内的每一天都有学妹陪！</del></p>
<p>新年坚持建政，我们的理想是星辰大海！</p>
<h1 id="鲁睿"><a href="#鲁睿" class="headerlink" title="鲁睿"></a>鲁睿</h1><p>鲁睿新年快乐哇！<del>争取在未央卷院继续当卷王，</del>早日超过咱们所有成外的学长学姐，在未央给以后成外的学弟<del>学妹</del>们立下万代基业</p>
<p>早点建好成外的资料库，<del>懂吧，这不会还要我 push 吧？</del></p>
<h1 id="lsq"><a href="#lsq" class="headerlink" title="lsq"></a>lsq</h1><p>诗棋新年快乐哇！<del>来年也要在清华继续坚持活下去</del></p>
<p>刚来清华嘛，大家冲击和改变都很大啦，还要继续加油走下去。专业课稳扎稳打，其他课程多多向群里的学长学姐们请教啦！</p>
<p>希望你也会成为一个优秀的人类社会观察员啦，认知自我，洞悉世界，随心所欲而不逾矩，来这人世间一次潇洒的逍遥游！</p>
<h1 id="钰凯凯"><a href="#钰凯凯" class="headerlink" title="钰凯凯"></a>钰凯凯</h1><p>ykk 新年快乐哇！</p>
<p>来年也要继续在清华园快乐<del>苟</del>活下去，乱杀电子系和统辅的课程哇！</p>
<p>下学期一起答疑坊，要加油啦！</p>
<p>钰凯<del>妹妹</del>，冲冲冲！</p>
<h1 id="跳跳鸟"><a href="#跳跳鸟" class="headerlink" title="跳跳鸟"></a>跳跳鸟</h1><p>可恶的跳跳鸟，新年快乐哇！</p>
<p>来年还要一起建政，早日找到春研暑研实验室！</p>
<p><del>要么咱俩一起去阿美利卡，要么咱俩一起去选调吧！(一起去选调也要带上我)</del></p>
<p>早日<del>和我一起</del>孤寡一生！</p>
<h1 id="若兮"><a href="#若兮" class="headerlink" title="若兮"></a>若兮</h1><p>若兮新年快乐哇！</p>
<p>来年也要继续在 PhD 的路上一路狂奔的！</p>
<p>专业课、统辅、计算机一路乱杀，收获理想的实习和春研暑研啦！</p>
<p>加油，万事顺遂，过两年一起 offer 乱杀！</p>
<h1 id="cyd"><a href="#cyd" class="headerlink" title="cyd"></a>cyd</h1><p>可爱的 cyd 新年快乐哇！</p>
<p>祝你的地球 online 桌游越玩越明白，早日找到<del>一直都没能找到的</del> npy ！</p>
<p>炉石包包金色传说，科研天天顶会乱杀！</p>
<p>读博顺利鸭！</p>
<h1 id="坤哥"><a href="#坤哥" class="headerlink" title="坤哥"></a>坤哥</h1><p>可爱的坤哥新年快乐哇！</p>
<p>继续和 npy 99<del>6 996</del> 哇！还是要每个月见一次的！</p>
<p>在龙组科研乱杀，学业继续佛里带卷，干翻宇宙！</p>
<h1 id="rick"><a href="#rick" class="headerlink" title="rick"></a>rick</h1><p>亲爱的 rick 新年快乐！</p>
<p>早日在一字班卷出头啊，科研上岸，收获爱情！</p>
<p>以后申请还要一起报团取暖啦，一切顺利的！</p>
<h1 id="文瑄"><a href="#文瑄" class="headerlink" title="文瑄"></a>文瑄</h1><p>可爱的文瑄新年快乐！</p>
<p>来年继续做一个佛系的强者鸭！</p>
<p>要和 npy 99<del>6 996</del>！</p>
<p>以后也要多多关照啦，让孩子抱紧大腿(<del>物理意义</del>)！</p>
<h1 id="骏博哥"><a href="#骏博哥" class="headerlink" title="骏博哥"></a>骏博哥</h1><p>骏博哥新年快乐哇！</p>
<p>祝新的一年，升值加薪，找到等待你的天长地久的感情啦！</p>
<p>等你出任 CTO ，迎娶白富美，走上人生巅峰了，我就从阿美利卡回来投奔你，一定要收留孩子！</p>
<p>新年顺遂，万事如意啦！</p>
<h1 id="瑞涵姐"><a href="#瑞涵姐" class="headerlink" title="瑞涵姐"></a>瑞涵姐</h1><p>瑞涵姐新年快乐喵！</p>
<p>新的一年，最后的学业旅途要一切顺利的，带着孩子和 lambda SRT 乱杀，qvq！</p>
<p>寒假实习顺利，新的一年万事顺遂喵！</p>
<h1 id="思源哥"><a href="#思源哥" class="headerlink" title="思源哥"></a>思源哥</h1><p>思源哥新年快乐，祝新的一年早日上岸，有书读，找到冥冥中等待你许久了的另一半啦！</p>
<p>来年也要继续教孩子如何做人类世界头号<del>沙雕</del>观察员诶！</p>
<p>新年快乐，一切顺利啦！</p>
<h1 id="李导"><a href="#李导" class="headerlink" title="李导"></a>李导</h1><p>李导新年快乐哇！</p>
<p>祝博士学业顺利，科研乱杀，辅导员工作永远心平气和，永不爆肝，成为一字班同学滴大超人！！！</p>
<p><del>早日找到另一半啦！！！</del></p>
<h1 id="韩哥"><a href="#韩哥" class="headerlink" title="韩哥"></a>韩哥</h1><p>韩哥新年快乐哇！</p>
<p>新的一年，祝愿科研顺遂，感情更上一层楼哇！</p>
<p>有朝一日一定要记得请我吃喜糖，哈哈哈</p>
<p>辅导员工作顺利诶，做一字班同学们的引路人的！</p>
<h1 id="xpr"><a href="#xpr" class="headerlink" title="xpr"></a>xpr</h1><p>天，祝 xpr 同学新年快乐哇！</p>
<p>早日收获满意的学业，进入科研的天地，<del>一起被血虐</del></p>
<p>当真，新年要注意身体的，努力试试多和人交流</p>
<p><del>不和其他人交流，至少可以多和我交流嘛，科英多带带我撒！</del></p>
<p>新年快乐，万事胜意啦！</p>
<h1 id="holder"><a href="#holder" class="headerlink" title="holder"></a>holder</h1><p>可爱的 holder 新年快乐哇！</p>
<p>感谢去年在技能文档组的不杀之恩，新的一年也要好好给科协打工哇！</p>
<p>祝新年学业顺利，早日收获自己喜爱的科研诶！</p>
<h1 id="小迪姐姐"><a href="#小迪姐姐" class="headerlink" title="小迪姐姐"></a>小迪姐姐</h1><p>祝小迪姐姐新年快乐诶！</p>
<p>来年学业继续乱杀，春研顺利，平安往返，一切都好诶！</p>
<p>期待小迪姐姐四大 PhD 一网打尽，等我申请了带带孩子，qvq！</p>
<p>新年快乐，一切顺利啦！</p>
<h1 id="向阳"><a href="#向阳" class="headerlink" title="向阳"></a>向阳</h1><p>向阳新年快乐！</p>
<p>祝愿新的一年学业继续乱杀，科研顺利，<del>早日找到人生另一半啦</del>！</p>
<p>做志愿者一定要照顾好自己哇，注意身体，期待三月份再见啦！</p>
<h1 id="田哥"><a href="#田哥" class="headerlink" title="田哥"></a>田哥</h1><p>田哥新年快乐！</p>
<p><del>感谢过去一年的不杀之恩！</del></p>
<p>祝愿在 AIR 的 PhD -1 年级一切顺利，早日投中自己心水的顶会！</p>
<p>也祝愿和 npy 的感情 99<del>6 996</del>！</p>
<p><del>软工全组的身家性命就靠抱紧田哥的大腿了</del></p>
<h1 id="李导-1"><a href="#李导-1" class="headerlink" title="李导"></a>李导</h1><p>诶，祝李导新年快乐！</p>
<p>继续做好茶园的可爱辅导员啦！</p>
<p>新的一年，走出过去一年的一些迷茫，有崭新的收获啦！</p>
<p>早日找到<del>一直都没能找到的</del>小姐姐哇！</p>
<h1 id="臻哥"><a href="#臻哥" class="headerlink" title="臻哥"></a>臻哥</h1><p>臻哥新年快乐哇！</p>
<p>感谢过去一年学业和生活上的排忧解难啦！</p>
<p>祝愿新的一年在物理研究上更上一层楼，乱杀一片自己心水的物理 PhD 诶！</p>
<h1 id="恩贤哥哥"><a href="#恩贤哥哥" class="headerlink" title="恩贤哥哥"></a>恩贤哥哥</h1><p>祝 exgg 新年快乐！</p>
<p>虽然已经有很好的 offer 啦，但是还是祝愿更上一层楼哇！</p>
<p>新的一年，继续搏击，继续给周围的人带来温暖诶！</p>
<p><del>等孩子去阿美利卡了来投奔恩贤哥哥！</del></p>
<h1 id="寅君学长"><a href="#寅君学长" class="headerlink" title="寅君学长"></a>寅君学长</h1><p>寅君学长新年快乐哇！</p>
<p><del>感谢过去一年的不杀之恩！</del></p>
<p>新的一年科研顺遂，早日乱杀 CV 和生物学的顶会诶！</p>
<h1 id="昊哥"><a href="#昊哥" class="headerlink" title="昊哥"></a>昊哥</h1><p>昊哥新年快乐！</p>
<p><del>感谢过去一年的不杀之恩！</del></p>
<p>新的一年，祝愿昊哥在学术上带领全组更上一层楼，乱杀 CV 顶会！</p>
<p>也祝愿大 AIR 冲冲冲，Discover 永远是大家滴家！！！</p>
<h1 id="一哥"><a href="#一哥" class="headerlink" title="一哥"></a>一哥</h1><p>一哥新年快乐哇！</p>
<p>新的一年也要继续热爱生活，带给大家温暖和热忱诶！</p>
<p>担任志愿者很辛苦，也要照顾好自己哇，小心病毒和寒冷的环境啦！</p>
<p>祝愿 PhD 0 年级一切顺利，科研顺遂，paper 乱杀！</p>
<h1 id="王特么文琦"><a href="#王特么文琦" class="headerlink" title="王特么文琦"></a>王特么文琦</h1><p>可恶的王特么文琦，新年快乐！</p>
<p><del>新的一年，要继续卷死我们</del></p>
<p>哈哈哈，新的一年，要一起加油</p>
<p>来年科研顺利，夏天找到心水的实习(<del>早日体会 996 的生活</del>)</p>
<p>也会找到彼此合适的人啦！</p>
<h1 id="李特么宇晨"><a href="#李特么宇晨" class="headerlink" title="李特么宇晨"></a>李特么宇晨</h1><p>可恶的李特么宇晨，新年快乐！</p>
<p><del>新的一年，继续在寝室里带头摆烂，摆死我们！</del></p>
<p>新的一年，少摆烂，好好卷起来！科研顺利，早日有书读，以后读了 PhD 祝你乱杀相亲市场！</p>
<h1 id="王特么伯阳"><a href="#王特么伯阳" class="headerlink" title="王特么伯阳"></a>王特么伯阳</h1><p>可恶的王特么伯阳，新年快乐！</p>
<p><del>新的一年，继续在寝室和宇晨一起带头摆烂！</del></p>
<p>新的一年，继续锻炼身体，做好跑协和计 03 的工作</p>
<p>背答案虽然可耻，但是有效</p>
<p>新的一年学业继续加油哇！</p>
<h1 id="lxy"><a href="#lxy" class="headerlink" title="lxy"></a>lxy</h1><p>新宇新年快乐！</p>
<p>来到你清的第一年，看到你疯狂的有在蜕变啦！</p>
<p>新的一年，学业上继续加油哇，做好社工，探索新的世界哇！</p>
<h1 id="lqw"><a href="#lqw" class="headerlink" title="lqw"></a>lqw</h1><p>清雯新年快乐哇！</p>
<p><del>来了清华第一年，社工就成功碾压我了</del></p>
<p>祝愿新的一年里，能够更加享受生命科学的世界诶！学业上继续加油！</p>
<p>要多陪陪爸爸妈妈啦！</p>
<h1 id="ylgg"><a href="#ylgg" class="headerlink" title="ylgg"></a>ylgg</h1><p>耀良哥哥新年快乐哇！</p>
<p>感谢夏天里的陪伴和宽慰诶！</p>
<p>祝愿 MS 0 年级一切顺利，科研有成，车技飙升(<del>早日成为学堂路新的车神</del>)</p>
<h1 id="yj"><a href="#yj" class="headerlink" title="yj"></a>yj</h1><p>师姐新年快乐哇！！</p>
<p>新的一年，学业更上一层楼诶！</p>
<p>要多参加体育锻炼，身体要更好一些啦！</p>
<p>加油，一切顺遂啦！</p>
<h1 id="凡宝"><a href="#凡宝" class="headerlink" title="凡宝"></a>凡宝</h1><p>凡凡新年快乐！</p>
<p>新的一年，继续卷起来！在软院叱咤风云！</p>
<p>早日卷出新高度，以后 offer 乱杀！</p>
<p>科研顺利，早日找到另一半哇！</p>
<h1 id="安娜"><a href="#安娜" class="headerlink" title="安娜"></a>安娜</h1><p>安娜新年快乐！</p>
<p>新年学业继续加油哇！早日找到自己喜爱的科研方向，带领软 01 的同学们走上班级巅峰。</p>
<p>早日投出顶会，以后 offer 乱杀！</p>
<p>也祝愿早日找到合适的人哇！</p>
<h1 id="承扬师兄"><a href="#承扬师兄" class="headerlink" title="承扬师兄"></a>承扬师兄</h1><p>祝老师兄新年快乐诶！</p>
<p>MS 旅途顺利，收获超爱的实习，以后走上业界独领一代风骚！</p>
<p>承扬学长，我滴大超人！！！</p>
<h1 id="达哥"><a href="#达哥" class="headerlink" title="达哥"></a>达哥</h1><p>达哥新年快乐！</p>
<p>祝愿 PhD 0 年级生活顺利诶！</p>
<p>在教研院科研顺遂，助教工作一切顺利哇！</p>
<h1 id="嘉政哥"><a href="#嘉政哥" class="headerlink" title="嘉政哥"></a>嘉政哥</h1><p>嘉政哥新年快乐！</p>
<p>新的一年，祝愿学业和科研顺遂啦！</p>
<p>带领课咨委和贵系学生会继续一路乱杀！</p>
<p>也要和 npy 继续 99<del>6 996</del>哇！</p>
<h1 id="栋哥"><a href="#栋哥" class="headerlink" title="栋哥"></a>栋哥</h1><p>栋哥新年快乐诶！</p>
<p>新的一年，学业和科研最后冲刺加油！</p>
<p>社工也会继续冲冲冲，在实验室卷卷卷！</p>
<p>早日找到另一半哇！</p>
<h1 id="冠霖学长"><a href="#冠霖学长" class="headerlink" title="冠霖学长"></a>冠霖学长</h1><p>喵，冠霖学长猫年快乐！</p>
<p>新的一年，继续为了理想和共产主义继续冲锋！</p>
<p>科研顺利，顶会乱杀！</p>
<h1 id="玮杭姐姐"><a href="#玮杭姐姐" class="headerlink" title="玮杭姐姐"></a>玮杭姐姐</h1><p>玮杭姐姐新年快乐哇！</p>
<p>祝愿新年学业顺遂，offer 乱杀！</p>
<p>来年申请带带孩子，qvq</p>
<p>要和 npy 继续 99<del>6 996</del> 哇！！</p>
<h1 id="茨月猫猫"><a href="#茨月猫猫" class="headerlink" title="茨月猫猫"></a>茨月猫猫</h1><p>学长新年快乐诶！</p>
<p>祝愿新的一年学业顺利，科研乱杀！</p>
<p>早日找到好心人收留大猫猫的诶！</p>
<p>技能文档，继续冲鸭！！！</p>
<h1 id="乐程"><a href="#乐程" class="headerlink" title="乐程"></a>乐程</h1><p>乐程新年快乐哇！</p>
<p>新的一年，学业加油哇！继续带给周围的大家陪伴和快乐诶！</p>
<p>球技渐佳，万事顺遂啦！</p>
<h1 id="家骏"><a href="#家骏" class="headerlink" title="家骏"></a>家骏</h1><p>家骏新年快乐诶！</p>
<p>新的一年，学业继续加油哇！</p>
<p>收获喜爱的实习，offer 乱杀！</p>
<p>早日找到另一半哇！</p>
<h1 id="乾师傅"><a href="#乾师傅" class="headerlink" title="乾师傅"></a>乾师傅</h1><p>乾师傅新年快乐哇！</p>
<p><del>祝愿新的一年在 CS 这不归路上越走越偏</del></p>
<p>去加拿大交换一切顺利哇！回头带带孩子的！</p>
<p>也祝愿早日找到人生另一半啦！</p>
<h1 id="昱佬"><a href="#昱佬" class="headerlink" title="昱佬"></a>昱佬</h1><p>昱佬新年快乐！</p>
<p>新的一年，继续做一个佛系的强者哇！</p>
<p>祝愿科研顺利，早日找到人生另一半，走上人生巅峰哇！！！</p>
<h1 id="雷捷学长"><a href="#雷捷学长" class="headerlink" title="雷捷学长"></a>雷捷学长</h1><p>雷捷学长新年快乐哇！</p>
<p>反复提前祝贺师兄 offer 乱杀，科研顺利，顶会一网打尽！</p>
<p>以后到了阿美利卡，会更加优秀的诶！</p>
<h1 id="n-e-学长"><a href="#n-e-学长" class="headerlink" title="n + e 学长"></a>n + e 学长</h1><p>n + e 学长新年快乐！</p>
<p>每次读师兄的博客都觉得自己太菜了，orz</p>
<p>感谢师兄写博客给后来的小朋友们，也感谢师兄的支持和点醒诶！</p>
<p>祝愿最后的 MS 生涯一切顺利，收获薪水逆天的 offer，早日找到人生另一半啦！</p>
<h1 id="小雪姐"><a href="#小雪姐" class="headerlink" title="小雪姐"></a>小雪姐</h1><p>小雪姐新年快乐！</p>
<p>每次和小雪姐讨论，都大有启发，非常感谢雪儿姐的支持和点醒哇！</p>
<p>祝愿雪儿姐 PhD 生涯一切顺利，paper 乱杀！</p>
<p>身体健康哇！Discover 冲冲冲冲！！！！</p>
<h1 id="曾导"><a href="#曾导" class="headerlink" title="曾导"></a>曾导</h1><p>曾导新年快乐！</p>
<p>新的一年，曾导一定要养好身体哇！还要继续在健身房遇见曾导啦！</p>
<p>祝愿科研顺利，paper乱杀！！！</p>
<p>辅导员工作一切顺利啦！</p>
<h1 id="黄导"><a href="#黄导" class="headerlink" title="黄导"></a>黄导</h1><p>黄导新年快乐诶！</p>
<p>祝愿黄导新的一年科研顺利，狂砍顶会！</p>
<p>感情顺利，继续和 npy 99<del>6 996</del> 哇！！</p>
<h1 id="张导"><a href="#张导" class="headerlink" title="张导"></a>张导</h1><p>张导新年快乐啦！</p>
<p>感谢张导去年的陪伴和关心的诶！</p>
<p>新的一年，祝愿张导科研顺利哇，多多分享科研喜讯！</p>
<p>也要和 npy 继续 99<del>6 996</del> 的！</p>
<h1 id="喻老师"><a href="#喻老师" class="headerlink" title="喻老师"></a>喻老师</h1><p>喻老师新年快乐啦！</p>
<p>感谢喻老师去年的开导啦！</p>
<p>祝愿喻老师科研工作顺利，带领门下高徒个个发顶会！！！</p>
<p>祝愿咱们班继续 6 的飞起，下学期在您的课堂收获满满诶！</p>
<h1 id="邓老师"><a href="#邓老师" class="headerlink" title="邓老师"></a>邓老师</h1><p>邓老师新年快乐，阖家平安哇！</p>
<p>感谢邓老师的悉心教导和指点诶！</p>
<p>祝愿邓老师新年身体健康，永远心怀对教学和生活的热情！</p>
<p>也祝愿咱们清华的 DSA 课堂更上一层楼，继续担当咱们系的宇宙级宝藏课！</p>
<h1 id="柏老师"><a href="#柏老师" class="headerlink" title="柏老师"></a>柏老师</h1><p>柏老师新年快乐诶！</p>
<p>感谢过去一年的教导啦，孩子现在还有在好好学习英语的！</p>
<p>祝愿柏老师新的一年教研顺遂，阖家平安啦！</p>
<p>柏老师的读写课堂真的超级有启发的啦！</p>
<h1 id="耿老师"><a href="#耿老师" class="headerlink" title="耿老师"></a>耿老师</h1><p>耿老师新年快乐诶！</p>
<p>感谢您在写沟课上的悉心教导诶，孩子从大二开始终于有在好好读各种书啦！</p>
<p>坚持阅读，坚持用文字表达对世界的观察，希望自己能做一个更加深刻的社会观察者诶！</p>
<p>祝愿耿老师教研顺遂，身体健康，一家人幸福美满！</p>
<h1 id="晏老师"><a href="#晏老师" class="headerlink" title="晏老师"></a>晏老师</h1><p>晏老师新年快乐！</p>
<p>作为您的开门+关门大弟子，感谢您的悉心教导啦！</p>
<p>我从大二开始，终于重新坚持阅读<del>和积极建政</del>啦！</p>
<p>也想要成为一个有着深刻理解与思考的社会观察者！</p>
<p>祝愿晏老师在社科院研究顺利，身体健康，感情顺利啦！</p>
<h1 id="陆老师"><a href="#陆老师" class="headerlink" title="陆老师"></a>陆老师</h1><p>陆老师新年快乐！</p>
<p>之前有听我的学弟讲过您的形势与政策课程的美妙，期待您的毛概和习思已久啦！</p>
<p>祝愿新的一年，教研顺利，身体健康，感情顺利诶！</p>
<p>提前给两门课打 call！</p>
<h1 id="王老师"><a href="#王老师" class="headerlink" title="王老师"></a>王老师</h1><p>王老师新年快乐！</p>
<p>在您的马原课上与和您讨论的过程中收获良多，感谢过去一学期的悉心教导啦！</p>
<p>希望自己能够一直秉承马克思主义的光辉，做一个人类社会的深刻观察者！</p>
<p>祝愿来年教研顺利，身体健康，阖家欢乐啦！</p>
<h1 id="邓老师-1"><a href="#邓老师-1" class="headerlink" title="邓老师"></a>邓老师</h1><p>邓老师新年快乐诶！</p>
<p>感谢过去一年经常陪我聊天解忧诶！</p>
<p>上了大二，我终于养成了每天读书的好习惯啦！希望能够继续做一个坚持阅读和思考社会的人诶！</p>
<p>来年教学顺利，domi 乖乖，身体健康，阖家换了啦！</p>
<h1 id="Yang-sir"><a href="#Yang-sir" class="headerlink" title="Yang sir"></a>Yang sir</h1><p>Yang sir 新年快乐！</p>
<p>感谢在高代课上的悉心教导诶！<del>让我终于认清了我不适合数学的本质</del></p>
<p>祝愿新的一年教研顺利，孩子健康成长，阖家欢乐诶！</p>
<p><del>在我的力荐下，会有越来越多的同学来挑战您的线代和高代课程的！</del></p>
<h1 id="于老师"><a href="#于老师" class="headerlink" title="于老师"></a>于老师</h1><p>于老师新年快乐！</p>
<p>上了大二，我也有在坚持锻炼，<del>力争为祖国工作五百年</del>，也在繁忙的学业之余积极在读那些无用之书。</p>
<p>感谢于老师之前的教导啦！</p>
<p>祝愿于老师教研顺利，阖家平安！</p>
<h1 id="立一学长"><a href="#立一学长" class="headerlink" title="立一学长"></a>立一学长</h1><p>新年快乐哇！！！</p>
<p>祝在麦吉尔的 PhD 生涯一切顺利，顶会发到手软！！</p>
<p>身体健康，阖家幸福哇！</p>
<p>AIR 继续冲冲冲！！</p>
<h1 id="王老师-1"><a href="#王老师-1" class="headerlink" title="王老师"></a>王老师</h1><p>王老师新年快乐哇！</p>
<p>感谢您寒假督促孩子学习英语——</p>
<p>在您的督促下，我坚持好好学习英语，坚决不划水，认真提升英语水平</p>
<p>期待在您的课堂上收获满满，顺祝教学顺遂，阖家美满哇！！</p>
<h1 id="晋钧哥"><a href="#晋钧哥" class="headerlink" title="晋钧哥"></a>晋钧哥</h1><p>师兄新年快乐哇！！</p>
<p>感谢在组里时不时敲敲孩子，<del>我知道自己多菜啦</del>，orz</p>
<p>祝愿师兄来年学业顺利，科研乱杀！！！</p>
<p>discover 继续冲冲冲冲！！！</p>
<h1 id="游导"><a href="#游导" class="headerlink" title="游导"></a>游导</h1><p>喵！游导新年快乐！</p>
<p>感谢大一在软软的时候的不杀之恩！</p>
<p>祝游导新的一年辅导员工作顺利哇，科研乱杀，继续狂砍顶会！！！</p>
<p>要和 npy 继续 99<del>6 996</del>！！！</p>
<h1 id="陶姐"><a href="#陶姐" class="headerlink" title="陶姐"></a>陶姐</h1><p>陶姐新年快咯！！</p>
<p>感谢来你清两年的点醒诶！</p>
<p>新的一年，学业社工继续乱杀哇！</p>
<p>感情顺利，和 npy 99<del>6 996 996</del> 哇！！</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
      </tags>
  </entry>
  <entry>
    <title>人类社会观察系列第一篇</title>
    <url>/2022/01/31/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%84%9F%E8%B0%A2%E9%99%88%E8%99%B9%E4%BC%8A%E4%B8%BA%E4%B8%AD%E5%9B%BDAI%E5%81%9A%E5%87%BA%E7%9A%84%E8%B4%A1%E7%8C%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c9bed8ba884d828f5335e36be8616223a37a02ea9e3b3031fdbe3cf4544d94c8"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript part 3</title>
    <url>/2022/01/30/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/javascript_part_3/</url>
    <content><![CDATA[<h1 id="JS-OOP"><a href="#JS-OOP" class="headerlink" title="JS OOP"></a>JS OOP</h1><p>使用类语法的 JavaScript 很大程度上和 C++ 语言类似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">_real, _imaginary</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.real = _real;</span><br><span class="line">        <span class="built_in">this</span>.imaginary = _imaginary; <span class="comment">// Declare members &amp; initialize</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.real&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.imaginary &gt;= <span class="number">0</span> ? <span class="string">&quot;+&quot;</span> : <span class="string">&quot;-&quot;</span>&#125;</span> <span class="subst">$&#123;<span class="built_in">Math</span>.abs(<span class="built_in">this</span>.imaginary)&#125;</span> i`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">printInfo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;This is a complex class.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> com = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">com.print(); <span class="comment">// &quot;1 + 2 i&quot;</span></span><br><span class="line">Complex.printInfo(); <span class="comment">// &quot;This is a complex class.&quot;</span></span><br></pre></td></tr></table></figure>
<p>有一些细节需要注意：</p>
<ul>
<li><p>类方法内使用类成员的时候必须使用 <code>this</code> 调用</p>
</li>
<li><p>JavaScript 的所有类成员和类方法均是公有的，JavaScript 不具有访问权限修饰符</p>
</li>
</ul>
<h1 id="怎么运行-js-代码"><a href="#怎么运行-js-代码" class="headerlink" title="怎么运行 js 代码"></a>怎么运行 js 代码</h1><p>实际上最简单的办法是——<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023020895584256">直接在廖雪峰的博客里跑</a></p>
<p>然而，关于这个问题，我还去问了问<a href="https://c7w.tech/">可爱的 c7w</a></p>
<blockquote>
<p>你机器上装 nodejs 了嘛，装了的话可以把这个写到一份文件里面，然后直接 nodejs xxx.js，就跟你 python3 xxx.py一样，是node 还是 nodejs 我忘了</p>
<p>我们一般js不写成文件直接跑的，不过你要是学习阶段用console也可以，就跟我们学python也可以用console 一样</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// JS Script here</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把这个写成一个 html，然后打开，就是读取一个 html 里面的 js 直接执行了。</p>
<blockquote>
<p>HTML 是万物之始，JS 你就理解成是脚本。</p>
<p>脚本就是，你点击了HTML一个元素，背后执行的那一串逻辑，举个例子 你点击了一个按钮，之后会发生什么就交给JS了，HTML就负责把前面的这些元素都显示出来</p>
</blockquote>
<p>不过我貌似打开了还是没啥用</p>
<p><img src="https://pic.imgdb.cn/item/61f64a8b2ab3f51d9181473d.jpg" alt=""></p>
<blockquote>
<p>搜索关掉，然后default levels 我推荐写all levels，我推荐把default levels 改成verbose，然后console.log改成console.debug</p>
</blockquote>
<p><img src="https://pic.imgdb.cn/item/61f64c932ab3f51d91833198.jpg" alt=""></p>
<blockquote>
<p>这样的话默认浏览器以default levels 打开看不到 console.debug 但是能看到 console.log，大概你应该能理解这个按等级分配logger的逻辑</p>
<p>就是dispatcher 这边发送一个消息说要打印到屏幕上，然后就遍历所有的logger 对于等级符合条件的logger才记录，verbose &lt; info &lt; warning &lt; error</p>
<p>比如你以console.debug发送一个verbose等级的消息，那么后三个logger就都接受不到这条消息</p>
<p>你以console.log发送一个info级别的消息 那么所有的 verbose 和 info 的logger都能接收到</p>
</blockquote>
<p>最好<a href="https://www.jianshu.com/p/52fa84ce6fff">参考下这个</a></p>
<p>update：廖雪峰的博客上的内镶编译器处理异步貌似会出问题</p>
<p><img src="https://pic.imgdb.cn/item/61f8f7022ab3f51d91c78c14.jpg" alt=""></p>
<p>最好还是用 c7w 的方法！</p>
<h1 id="this-的指向问题"><a href="#this-的指向问题" class="headerlink" title="this 的指向问题"></a><code>this</code> 的指向问题</h1><p>严格来说，JavaScript 的 <code>this</code> 指向规则只有一条，即 <strong><code>this</code> 永远指向最近的调用者</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: foo, &#125;;</span><br><span class="line">obj.foo(); <span class="comment">// &#123; foo: foo &#125;</span></span><br></pre></td></tr></table></figure>
<p>这里两次调用的都是同一个 <code>foo</code> 函数，不同的是前者是全局调用（即直接调用），而后者是把函数作为一个对象 <code>obj</code> 的属性后通过 <code>obj</code> 调用。而 <code>this</code> 的指向就是在函数调用的时候确定的。全局调用 <code>foo</code> 函数，那 <code>this</code> 就指向全局对象，通过 <code>obj</code> 调用，那 <code>this</code> 就指向 <code>obj</code>。</p>
<p>事实上 JavaScript 的全局变量都是全局对象的属性，每一个 JavaScript 运行环境都有一个全局对象。比如说浏览器的全局对象往往是 window。你声明的每一个全局变量都会绑定为全局对象的属性（下述代码在浏览器运行）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="built_in">window</span>.foo();</span><br></pre></td></tr></table></figure>
<p>对于更为复杂的对象嵌套，<code>this</code> 的指向也遵循着指向最近的调用者的规则：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">inner</span>: &#123;</span><br><span class="line">        <span class="attr">foo</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">fn</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.foo);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.inner.fn(); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">obj.fn = obj.inner.fn;</span><br><span class="line">obj.fn(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = obj.inner.fn;</span><br><span class="line">fn(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p>这里的 <code>fn</code> 函数被三个对象分别调用，从上到下为 <code>obj.inner, obj, window</code>，可以看出这三次调用中的 <code>this</code> 就分别指向这三个对象。</p>
<p><code>this</code> 的缺陷就在于其指向是动态的，有些函数可能内部使用了 <code>this</code> 但开发者并不知晓，从而在不同情况下应用这个函数的时候会产生不可理解的错误。而现在的一些补丁就是允许开发者硬性指定 <code>this</code> 的指向或者永久绑定 <code>this</code> 的指向以防止未知错误。</p>
<p>比如说 <code>call(), apply()</code> 方法就允许我们手动指定 <code>this</code> 的指向，其接受的第一个参数就会成为 <code>this</code> 的指向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, &#125;;</span><br><span class="line"><span class="keyword">let</span> another = &#123; <span class="attr">a</span>: <span class="number">2</span>, &#125;;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// undefined</span></span><br><span class="line">foo.call(obj); <span class="comment">// 1</span></span><br><span class="line">foo.apply(obj); <span class="comment">// 1</span></span><br><span class="line">foo.call(another); <span class="comment">// 2</span></span><br><span class="line">foo.apply(another); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>而 <code>bind()</code> 方法则允许我们将 <code>this</code> 的指向永久绑定于某一个对象上。无论后续使用哪一个对象调用这个函数，其 <code>this</code> 都保持原先 <code>bind()</code> 设定的指向：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, &#125;;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// undefined</span></span><br><span class="line">foo = foo.bind(obj);</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> another = &#123; <span class="attr">foo</span>: foo, <span class="attr">a</span>: <span class="number">2</span>, &#125;;</span><br><span class="line">another.foo(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>在这些补丁出现之前，为了硬性规定 <code>this</code> 的指向，程序员甚至会在函数中使用 <code>var that = this</code> 语句先捕获 <code>this</code>，之后使用 <code>that</code> 代替 <code>this</code> 来防止 bug。</p>
<p>而现在更常用的一种解决方法是箭头函数，这种新特性值得专门开出一节来讲讲。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>这一个章节本应该在函数部分讲解，但是由于箭头函数的出现很大的原因是为了解决 <code>this</code> 问题，编者还是将其放到了 OOP 章节。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>同时，对于一些函数体没有中间操作的函数，可以直接在箭头右侧写返回值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.data</span><br><span class="line">    .map(<span class="function">(<span class="params">val, ind</span>) =&gt;</span> (&#123;</span><br><span class="line">        ...val,</span><br><span class="line">        <span class="attr">index</span>: ind,</span><br><span class="line">    &#125;))</span><br><span class="line">    .filter(<span class="function">(<span class="params">val</span>) =&gt;</span> val.name !== <span class="literal">undefined</span>)</span><br><span class="line">    .sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.subscriberNum - b.subscriberNum);</span><br></pre></td></tr></table></figure>
<p>作为对比：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.data</span><br><span class="line">    .map(<span class="function"><span class="keyword">function</span> (<span class="params">val, ind</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...val,</span><br><span class="line">            <span class="attr">index</span>: ind,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.name !== <span class="literal">undefined</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.subscriberNum - b.subscriberNum;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>研究了很久这串代码啥意思，后来发现，不如直接查源文档：</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map"><code>array</code> 内置的 <code>map</code> 方法</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue[, index[, array]]</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Return element for new_array </span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#parameters">参数</a></h3><ul>
<li><p><code>callback</code></p>
<p>生成新数组元素的函数，使用三个参数：</p>
<ul>
<li><code>currentValue</code> : <code>callback</code> 数组中正在处理的当前元素。</li>
<li><code>index</code> : 可选, <code>callback</code> 数组中正在处理的当前元素的索引。</li>
<li><code>array</code> : 可选，<code>map</code> 方法调用的数组。</li>
</ul>
</li>
<li><p><code>thisArg</code></p>
<p>可选，执行 <code>callback</code> 函数时值被用作<code>this</code>。</p>
</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map#返回值">返回值</a></h3><p>一个由原数组每个元素执行回调函数的结果组成的新数组。</p>
<p> <code>...</code> 操作符为对象展开，这里操作的数组是个对象数组，直接展开，经过第一次回调后生成新的对象数组。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"><code>array</code> 内置的 <code>filter</code> 方法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure>
<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#参数">参数</a></h3><ul>
<li><p><code>callback</code></p>
<p>用来测试数组的每个元素的函数。返回 <code>true</code> 表示该元素通过测试，保留该元素，<code>false</code> 则不保留。它接受以下三个参数：</p>
<p><code>element</code>数组中当前正在处理的元素。<code>index</code>可选正在处理的元素在数组中的索引。<code>array</code>可选调用了 <code>filter</code> 的数组本身。</p>
</li>
<li><p><code>thisArg</code>可选</p>
<p>执行 <code>callback</code> 时，用于 <code>this</code> 的值。</p>
</li>
</ul>
<h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#返回值">返回值</a></h3><p>一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">至于 sort 方法</a>，还是看文档呗</p>
<hr>
<p>回到箭头函数：</p>
<p>需要注意的是，如果一个箭头函数直接返回一个对象，这个对象的花括号可能会和代码块的花括号混淆，所以如果直接返回一个对象，记得在对象的花括号外再套一层小括号防止出现 Syntax Error。</p>
<p>箭头函数和 <code>function</code> 函数最大不同的地方是其 <code>this</code> 的指向跟随上下文的 <code>this</code>，也就是说其本身不具有 <code>this</code>，在箭头函数体里使用的 <code>this</code> 实际上是其上下文（一般是其所在的函数作用域）的 <code>this</code>。换句话说，<strong>箭头函数的 <code>this</code> 在定义的时候就完成了绑定</strong>，这样的性质就解决了 <code>this</code> 指向不明的问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Changing caller will not change &#x27;this&#x27;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: foo, &#125;;</span><br><span class="line">obj.foo(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#x27;call&#x27; &amp; &#x27;bind&#x27; may fail</span></span><br><span class="line">foo.call(obj); <span class="comment">// window</span></span><br><span class="line">foo = foo.bind(obj);</span><br><span class="line">foo(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure>
<p>可以看出，在全局环境下设定的箭头函数的 this 永远跟随全局环境指向全局对象。</p>
<p>但另外一方面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> foo = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = obj.bar();</span><br><span class="line">foo(); <span class="comment">// obj</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = obj.bar;</span><br><span class="line">bar()(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure>
<p>这里前面获取 <code>foo</code> 的时候是使用的 <code>obj</code> 调用的普通函数 <code>bar</code>，所以 <code>bar</code> 的 <code>this</code> 指向 <code>obj</code>，跟随着的 <code>foo</code> 的 <code>this</code> 就指向 <code>obj</code>。而后面获取的时候 <code>bar</code> 是被全局对象调用的，其 <code>this</code> 就被自然绑定到了全局对象上，所以内部箭头函数的 <code>this</code> 也就绑定到了全局对象上。</p>
<hr>
<p>考虑下 bar 是什么，bar 是 obj 的一个键，<code>obj. bar</code> 得到的是一个函数，这个调用这个函数一次，也即 <code>obj. bar()</code> ，会返回一个函数，再次调用返回的函数，才能执行 <code>console.log(this)</code> 语句。</p>
<p>所以 <code>bar()()</code> 的调用者实际上是 <code>window</code></p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Discover Lab Website</title>
    <url>/2022/01/29/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/discover_website/</url>
    <content><![CDATA[<h1 id="yarn-安装"><a href="#yarn-安装" class="headerlink" title="yarn 安装"></a>yarn 安装</h1><p>Yarn 对你的代码来说是一个包管理器。它可以让你使用并分享 全世界开发者的（例如 JavaScript）代码。 Yarn 能够快速、安全、 并可靠地完成这些工作，所以你不用有任何担心。</p>
<p><a href="https://yarn.bootcss.com/docs/install#mac-stable">官网上给了好几种安装方式</a>， npm 和 brew ，不过我真的很好奇，为什么要用一个包管理器安装另一个包管理器…</p>
<p>使用方法貌似很简单，<a href="https://yarn.bootcss.com/docs/usage">看看官网</a>就好了</p>
<h1 id="观察已有项目"><a href="#观察已有项目" class="headerlink" title="观察已有项目"></a>观察已有项目</h1><p>试图 <code>yarn start</code> 的时候出了问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; yarn start</span><br><span class="line">yarn run v1.22.17</span><br><span class="line">$ react-scripts start</span><br><span class="line">/bin/sh: react-scripts: <span class="built_in">command</span> not found</span><br><span class="line">error Command failed with <span class="built_in">exit</span> code 127.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/run <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>
<p>我试着在 <a href="https://stackoverflow.com/questions/47612580/react-scripts-command-not-found/49171609">stackoverflow 上找了找</a>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; yarn upgrade</span><br><span class="line">&gt; yarn</span><br><span class="line">&gt; yarn run start</span><br></pre></td></tr></table></figure>
<p>upgrade 花了非常久，离谱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; yarn upgrade</span><br><span class="line">yarn upgrade v1.22.17</span><br><span class="line">[1/4] 🔍  Resolving packages...</span><br><span class="line">warning react-scripts &gt; webpack &gt; micromatch &gt; snapdragon &gt; source-map-resolve &gt; resolve-url@0.2.1: https://github.com/lydell/resolve-url<span class="comment">#deprecated</span></span><br><span class="line">-------</span><br><span class="line">[2/4] 🚚  Fetching packages...</span><br><span class="line">[<span class="comment">#################################################################--] 1501/1552</span></span><br><span class="line">-------</span><br><span class="line">✨  Done <span class="keyword">in</span> 277.76s.</span><br></pre></td></tr></table></figure>
<p>不错，成功了一半…</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Failed to compile.</span><br><span class="line"></span><br><span class="line">./node_modules/three-stdlib/objects/Lensflare.js</span><br><span class="line">Attempted import error: <span class="string">&#x27;FramebufferTexture&#x27;</span> is not exported from <span class="string">&#x27;three&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/przlovecsdn/article/details/82762010">继续解决</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install rimraf -g</span><br><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure>
<p>啊这，滚雪球了，退回了前一步</p>
<hr>
<p>又是面对环境的一天，麻了</p>
<p><a href="https://github.com/nvm-sh/nvm#installing-and-updating">照着过程走了一圈</a></p>
<p>先是安装 <code>nvm</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install node <span class="comment"># &quot;node&quot; is an alias for the latest version</span></span><br><span class="line">nvm install 14.7.0 <span class="comment"># or 16.3.0, 12.22.1, etc</span></span><br></pre></td></tr></table></figure>
<hr>
<p>寄了，之前装错了版本，执行了默认语句会装最新版本，还得卸了重装</p>
<p>卸载又卸不了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; nvm uninstall v17.4.0</span><br><span class="line">nvm: Cannot uninstall currently-active node version, v17.4.0 (inferred from v17.4.0).</span><br></pre></td></tr></table></figure>
<p>还是<a href="https://stackoverflow.com/questions/38775287/nvm-cannot-uninstall-currently-active-node-version">万能的 Stack Overflow</a> 救了我</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; nvm deactivate</span><br><span class="line">/Users/zhaochen20/.nvm/*/bin removed from <span class="variable">$&#123;PATH&#125;</span></span><br><span class="line">/Users/zhaochen20/.nvm/*/share/man removed from <span class="variable">$&#123;MANPATH&#125;</span></span><br><span class="line">&gt; nvm uninstall v17.4.0</span><br><span class="line">Uninstalled node v17.4.0</span><br></pre></td></tr></table></figure>
<p>不得不说，没有 <code>conda</code> 这样的环境管理器，简直太糟糕了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; nvm install 14.7.0</span><br><span class="line">Downloading and installing node v14.7.0...</span><br><span class="line">Downloading https://nodejs.org/dist/v14.7.0/node-v14.7.0-darwin-x64.tar.xz...</span><br><span class="line"><span class="comment">######################################################################### 100.0%</span></span><br><span class="line">Computing checksum with sha256sum</span><br><span class="line">Checksums matched!</span><br><span class="line">Now using node v14.7.0 (npm v6.14.7)</span><br><span class="line">&gt; node -v</span><br><span class="line">v14.7.0</span><br></pre></td></tr></table></figure>
<p>最后还是寄了</p>
<hr>
<p>最后换到了根目录重新 git clone 了一次<del>就</del>解决了</p>
<hr>
<h1 id="2-月-2-日"><a href="#2-月-2-日" class="headerlink" title="2 月 2 日"></a>2 月 2 日</h1><p>因为 pull 冲突又删库重新 clone 了一次</p>
<hr>
<p>之后还细碎的解决了一些问题，比如：</p>
<p><img src="https://pic.imgdb.cn/item/61fa35e82ab3f51d91e514e3.jpg" alt=""></p>
<p>原因是没有切换到 dev 分支</p>
<p>以及：</p>
<p><img src="https://pic.imgdb.cn/item/61fa360b2ab3f51d91e5370b.jpg" alt=""></p>
<p>原因是 yarn 没有加载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @mui/styles</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="路线设计"><a href="#路线设计" class="headerlink" title="路线设计"></a>路线设计</h1><p>现在的工作是设计自然的线路，当然不能是直线。</p>
<h2 id="News-gt-About"><a href="#News-gt-About" class="headerlink" title="News -&gt; About"></a>News -&gt; About</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//News</span></span><br><span class="line">camera.position.set(-<span class="number">30</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// camera.fov = 60 // FIXME</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// About</span></span><br><span class="line">camera.position.set(-<span class="number">80</span>, <span class="number">0</span>, -<span class="number">20</span>)</span><br><span class="line">camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这里是 News 和 About 的参数</p>
<p>平稳移动，试试看沿着坐标轴去滑动呢？</p>
<p>大概滑动 8 个中间场景？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0, 100, 0, 0, 0) -&gt; (-55, 0, 100, 0, -Math.PI / 36, 0) -&gt; (-80, 0, 100, 0, -Math.PI / 18, 0) -&gt; (-80, 0, 70, 0, -Math.PI / 12, 0) -&gt; (-80, 0, 40, 0, -Math.PI / 9, 0) -&gt; (-80-&gt; 0, 10, 0, -Math.PI * 5 / 36, 0) -&gt; (-80, 0, -20, 0, -Math.PI / 6, 0)</span><br></pre></td></tr></table></figure>
<hr>
<p>得了，这个方案直接搞了个穿墙术，瞎扯淡！</p>
<p>不是我说，这个方案设计很不科学，至少你先摸清楚 x, y, z 坐标的意义是啥吧，这么直接做不就是飞天遁地吗？</p>
<hr>
<p>很神奇，以位于 (0, 0, 0) 视角时为例：</p>
<ul>
<li>参数 3 增大往后走</li>
<li>参数 1 增大向右走</li>
<li>参数 2 增大向上走</li>
</ul>
<p>那么，为了避免穿墙而行，这个方案就明确多了</p>
<p>目标位移：$(-30, 0 ,100)\to(-80,0,-20)$</p>
<p>总的效果是向前走了又向左走了，如果不想传过左侧的墙，那就先向前走，再向左走</p>
<p>因此改变下思路</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0 ,100) -&gt; (-30, 0, 80) -&gt; (-30, 0, 60) -&gt; （-30， 0， 40） -&gt; (-30, 0, 20) -&gt; (-30, 0, 0) -&gt; (-30, 0, -20)</span><br></pre></td></tr></table></figure>
<hr>
<p>不行，这么走直接撞墙，先向着右边走一点，再往前，再往左</p>
<p>经过我的测算，参数一是 -17 最好，完美的缝隙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0 ,100) -&gt; (-27, 0, 80) -&gt; (-24, 0, 60) -&gt; （-21， 0， 40） -&gt; (-18, 0, 20) -&gt; (-17, 0, 0) -&gt; (-17, 0, -20) -&gt; (-20, 0 , -20) -&gt; (-40, 0, -20) -&gt; (-60, 0, -20) -&gt; (-80, 0, -20)</span><br></pre></td></tr></table></figure>
<hr>
<p>试了试，很完美！</p>
<p>接下来加上旋转参数，<del>就硬转吧？</del></p>
<p>根据我的理解，既然是走动，只在最后到达了休息区后，在转动参数好了，所以只给最后 4 步改变旋转角度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0 ,100， 0， 0， 0) -&gt; (-27, 0, 80， 0， 0， 0) -&gt; (-24, 0, 60， 0， 0， 0) -&gt; （-21， 0， 40， 0， 0， 0） -&gt; (-18, 0, 20， 0， 0， 0) -&gt; (-17, 0, 0， 0， 0， 0) -&gt; (-17, 0, -20， 0， 0， 0) -&gt; (-20, 0 , -20， 0， -Math.PI / 24， 0) -&gt; (-40, 0, -20， 0， -Math.PI / 12， 0) -&gt; (-60, 0, -20， 0， -Math.PI / 8， 0) -&gt; (-80, 0, -20， 0， -Math.PI / 6， 0)</span><br></pre></td></tr></table></figure>
<p>试了试，个人觉得完美</p>
<h2 id="About-gt-Research"><a href="#About-gt-Research" class="headerlink" title="About -&gt; Research"></a>About -&gt; Research</h2><p>目标变换：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// // About</span><br><span class="line"> camera.position.set(-80, 0, -20)</span><br><span class="line"> camera.rotation.set(0, -Math.PI / 6, 0)</span><br><span class="line"></span><br><span class="line"> // Research</span><br><span class="line"> camera.position.set(-45, 0, 210)</span><br><span class="line"> camera.rotation.set(0, Math.PI / 9, 0)</span><br></pre></td></tr></table></figure>
<p>这个跨度有点大，结果上是向右走且向后走了</p>
<p>但是直接后退得连穿过两堵墙，所以先向右走到合理的位置，然后再退，再转？</p>
<p>先回到<code>(-17, 0, -20， 0， 0， 0)</code>这个位置，试一试路径，直接后退。</p>
<p>我超，不得不说好得很，其实不是我的路径设计的多好，而是 AIR 的装修公司早就安排好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-80, 0, -20， 0， -Math.PI / 6， 0) -&gt; (-60, 0, -20， 0， -Math.PI / 8， 0) -&gt; (-40, 0, -20， 0， -Math.PI / 12， 0) -&gt; (-20, 0 , -20， 0， -Math.PI / 24， 0) -&gt; (-17, 0, -20， 0， 0， 0) -&gt; (-17, 0, 20, 0, 0, 0) -&gt; (-17, 0, 40, 0, 0, 0) -&gt; (-17, 0, 80, 0 , 0, 0) -&gt; (-17, 0, 120, 0, 0, 0 ,0) -&gt; (-17, 0, 160, 0, 0, 0) -&gt; (-17, 0, 200, 0, 0, 0) -&gt; (-20, 0, 210, 0, 0, 0) -&gt; (-35, 0, 210, 0, Math.PI / 18, 0) -&gt; (-45, 0, 210, 0, Math.PI / 9, 0)</span><br></pre></td></tr></table></figure>
<p>突然觉得自己可能傻了</p>
<blockquote>
<p>我们最后实现的效果是，我给定两个点，实现走过去，而且缓慢的旋转对吧，所以一条直线，如果我不旋转镜头，只需要给定起点和终点就好了？</p>
</blockquote>
<p>中间不需要那么多点的，一条线拉通就好了？</p>
<p>总之，上面那条路挺对的，没问题</p>
<h2 id="Research-gt-People"><a href="#Research-gt-People" class="headerlink" title="Research -&gt; People"></a>Research -&gt; People</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Research</span><br><span class="line">    camera.position.set(-45, 0, 210)</span><br><span class="line">    camera.rotation.set(0, Math.PI / 9, 0)</span><br><span class="line"></span><br><span class="line">    // People</span><br><span class="line">    camera.position.set(-20, -5, -30)</span><br><span class="line">    camera.rotation.set(0, -Math.PI / 12 * 5, 0)</span><br></pre></td></tr></table></figure>
<p>直观的效果是向前走，然后向右走</p>
<p>还是考虑走到 <code>(-17, 0, -20， 0， 0， 0)</code> 然后再微调</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-45, 0, 210, 0, Math.PI / 9, 0) -&gt; (-35, 0, 210, 0, Math.PI / 18, 0) -&gt; (-20, 0, 210, 0, 0, 0)-&gt; (-17, 0, 200， 0， 0， 0) -&gt; (-17, 0, -20, 0, 0, 0)</span><br></pre></td></tr></table></figure>
<p>ok，目前看来一切顺利，接下来：<code>(-17, 0, -20, 0, 0, 0) -&gt; (-20, -5, -30, 0, -Math.PI / 12 * 5, 0)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-17, 0, -20, 0, 0, 0) -&gt; (-18, -1, -22, 0, -Math.PI * 1 / 12, 0) -&gt; (-19, -2, -24, 0, -Math.PI * 2 / 12, 0) -&gt; (-20, -3, -26, 0, -Math.PI * 3 / 12, 0) -&gt; (-20, -4, -28, 0, -Math.PI * 4 / 12, 0) -&gt; (-20, -5, -30, 0, -Math.PI * 5 / 12, 0)</span><br></pre></td></tr></table></figure>
<h2 id="People-gt-Join-Us"><a href="#People-gt-Join-Us" class="headerlink" title="People -&gt; Join Us"></a>People -&gt; Join Us</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// People</span><br><span class="line">   camera.position.set(-20, -5, -30)</span><br><span class="line">   camera.rotation.set(0, -Math.PI * 5 / 12, 0)</span><br><span class="line"></span><br><span class="line">   // Join Us</span><br><span class="line">   camera.position.set(-40, -3, 80)</span><br><span class="line">   camera.rotation.set(0, Math.PI * 5 / 24, 0)</span><br></pre></td></tr></table></figure>
<p>直观的移动：向左，向后</p>
<p>还是考虑走到 <code>(-17, 0, -20， 0， 0， 0)</code> ，然后后退，然后微调</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-20, -5, -30, 0, -Math.PI * 5 / 12, 0) -&gt; (-20, -4, -28, 0, -Math.PI * 4 / 12, 0) -&gt; (-20, -3, -26, 0, -Math.PI * 3 / 12, 0) -&gt; (-19, -2, -24, 0, -Math.PI * 2 / 12, 0) -&gt; (-18, -1, -22, 0, -Math.PI * 1 / 12, 0) -&gt; (-17, 0, -20, 0, 0, 0)</span><br></pre></td></tr></table></figure>
<p>接下  <code>(-17, 0, -20， 0， 0， 0) -&gt; (-40, -3, 80, 0 , Math.PI * 5 / 24, 0)</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-17, 0, -20， 0， 0， 0) -&gt; (-17, 0, 80， 0， 0， 0) -&gt; (-17, 0, 80， 0， Math.PI * 1 / 24， 0) -&gt; (-20, -1, 80， 0， Math.PI * 2 / 24， 0) -&gt; (-30, -2, 80， 0， Math.PI * 3 / 24， 0)  -&gt; (-35, -3, 80， 0， Math.PI * 4 / 24， 0) -&gt; (-40, -3, 80, 0 , Math.PI * 5 / 24, 0)</span><br></pre></td></tr></table></figure>
<h2 id="Join-Us-gt-News"><a href="#Join-Us-gt-News" class="headerlink" title="Join Us -&gt; News"></a>Join Us -&gt; News</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// Join Us</span><br><span class="line">camera.position.set(-40, -3, 80)</span><br><span class="line">camera.rotation.set(0, Math.PI * 5 / 24, 0)</span><br><span class="line"></span><br><span class="line">//News</span><br><span class="line">camera.position.set(-30, 0, 100)</span><br><span class="line">camera.rotation.set(0, 0, 0)</span><br><span class="line">// camera.fov = 60 // FIXME</span><br></pre></td></tr></table></figure>
<p>直观效果：往右走然后往后走</p>
<p>路线都好说了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-40, -3, 80, 0, Math.PI * 5 / 24, 0) -&gt; (-38, -2, 85, 0, Math.PI * 4 / 24, 0) -&gt; (-36, -1, 90, 0, Math.PI * 3 / 24, 0) -&gt; (-34, -1, 95, 0, Math.PI * 2 / 24, 0) -&gt; (-32, 0, 97, 0, Math.PI * 1 / 24, 0) -&gt; (-30, 0, 100, 0, Math.PI * 0 / 24, 0)</span><br></pre></td></tr></table></figure>
<h2 id="News-gt-Research"><a href="#News-gt-Research" class="headerlink" title="News -&gt; Research"></a>News -&gt; Research</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    //News</span><br><span class="line">    camera.position.set(-30, 0, 100)</span><br><span class="line">    camera.rotation.set(0, 0, 0)</span><br><span class="line"></span><br><span class="line">// Research</span><br><span class="line">    camera.position.set(-45, 0, 210)</span><br><span class="line">    camera.rotation.set(0, Math.PI * 1 / 9, 0)</span><br></pre></td></tr></table></figure>
<p>直观效果：往后走，往左走</p>
<p>直接后退得穿墙，所以先走到  <code>(-17, 0, 100, 0, 0, 0)</code> 然后后退到 <code>(-17, 0, 210, 0, 0, 0)</code> 接下来微调旋转即可？</p>
<p>算了，不如一步到位(X</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0, 100, 0, 0, 0) -&gt; (-17, 0, 100, 0, 0, 0) -&gt; (-17, 0, 210, 0, 0, 0) -&gt; (-45, 0, 210, 0, Math.PI * 1 / 9, 0) </span><br></pre></td></tr></table></figure>
<p>看着其实也自然</p>
<h2 id="About-gt-People"><a href="#About-gt-People" class="headerlink" title="About -&gt; People"></a>About -&gt; People</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// About</span><br><span class="line"> camera.position.set(-80, 0, -20)</span><br><span class="line"> camera.rotation.set(0, -Math.PI / 6, 0)</span><br><span class="line"></span><br><span class="line"> // People</span><br><span class="line"> camera.position.set(-20, -5, -30)</span><br><span class="line"> camera.rotation.set(0, -Math.PI * 5 / 12, 0)</span><br></pre></td></tr></table></figure>
<p>直观效果：向左向前罢了</p>
<p>设计路线都好说好说！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-80, 0, -20, 0, -Math.PI / 6, 0) -&gt; (-70, -1, -20, 0, -Math.PI / 12, 0) -&gt; (-60, -2, -20, 0, -Math.PI * 0 / 12, 0) -&gt; (-50, -3, -20, 0, -Math.PI * 2 / 12, 0) -&gt; (-40, -4, -25, 0, -Math.PI * 3 / 12, 0) -&gt; (-30, -5, -27, 0, -Math.PI * 4 / 12, 0) -&gt; (-20, -5, -30, 0, -Math.PI * 5 / 12, 0)</span><br></pre></td></tr></table></figure>
<h2 id="Research-gt-Join-Us"><a href="#Research-gt-Join-Us" class="headerlink" title="Research -&gt; Join Us"></a>Research -&gt; Join Us</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Research</span><br><span class="line">    camera.position.set(-45, 0, 210)</span><br><span class="line">    camera.rotation.set(0, Math.PI * 1 / 9, 0)</span><br><span class="line"></span><br><span class="line">Join Us</span><br><span class="line">    camera.position.set(-40, -3, 80)</span><br><span class="line">    camera.rotation.set(0, Math.PI * 5 / 24, 0)</span><br></pre></td></tr></table></figure>
<p>直观感觉：向前走</p>
<p>为了避免穿墙，先走到  <code>(-17, 0, 210, 0, 0, 0)</code> 然后前进到 <code>(-17, 0, 80, 0, 0, 0)</code> 接下来微调旋转</p>
<p>路线设计：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（-45, 0, 210, 0, Math.PI * 1 / 9, 0 -&gt;（-30, 0, 210, 0, Math.PI * 1 / 18, 0）-&gt; (-17, 0, 210, 0, 0, 0) -&gt; (-17, 0, 80, 0, 0, 0) -&gt; (-20, 0, 80, 0, Math.PI * 1 / 24, 0) -&gt; (-25, -1, 80, 0, Math.PI * 2 / 24, 0) -&gt; (-30, -2, 80, 0, Math.PI * 3 / 24, 0)  -&gt; (-35, -3, 80, 0, Math.PI * 4 / 24, 0) -&gt; (-40, -3, 80, 0, Math.PI * 5 / 24, 0) </span><br></pre></td></tr></table></figure>
<h2 id="People-gt-News"><a href="#People-gt-News" class="headerlink" title="People -&gt; News"></a>People -&gt; News</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  // People</span><br><span class="line">  camera.position.set(-20, -5, -30)</span><br><span class="line">  camera.rotation.set(0, -Math.PI * 5 / 12, 0)</span><br><span class="line"></span><br><span class="line">//News</span><br><span class="line">  camera.position.set(-30, 0, 100)</span><br><span class="line">  camera.rotation.set(0, 0, 0)</span><br></pre></td></tr></table></figure>
<p>直观感觉：往后走，然后微调</p>
<p>首先走到 <code>(-17, 0, -30, 0, -Math.PI * 1 / 12, 0)</code> 然后后退到 <code>(-17, 0, 100, 0, -Math.PI * 1 / 12, 0)</code>，然后微调</p>
<p>路线设计：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-20, -5, -30, 0, -Math.PI * 5 / 12, 0) -&gt;（-17, -3, -30, 0, -Math.PI * 3 / 12, 0）-&gt;（-17, -0, -30, 0, -Math.PI * 1 / 12, 0）-&gt; (-17, -0, 100, 0, -Math.PI * 1 / 12, 0) -&gt; (-30, -0, 100, 0, -Math.PI * 0 / 12, 0) </span><br></pre></td></tr></table></figure>
<h2 id="Join-Us-gt-About"><a href="#Join-Us-gt-About" class="headerlink" title="Join Us -&gt; About"></a>Join Us -&gt; About</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    // Join Us</span><br><span class="line">    camera.position.set(-40, -3, 80)</span><br><span class="line">    camera.rotation.set(0, Math.PI * 5 / 24, 0)</span><br><span class="line"></span><br><span class="line">// About</span><br><span class="line">    camera.position.set(-80, -0, -20)</span><br><span class="line">    camera.rotation.set(0, -Math.PI * 1 / 6, 0)</span><br></pre></td></tr></table></figure>
<p>直观感觉：前进且往右走</p>
<p>避免穿墙即可，路线如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-40, -3, 80, 0, Math.PI * 5 / 24, 0) -&gt; (-29, -1, 80, 0, Math.PI * 2 / 24, 0) -&gt; (-17, -0, 80, 0, Math.PI * 0 / 24, 0) -&gt; (-17, -0, -20, 0, Math.PI * 0 / 24, 0) -&gt; (-20, -0, -20, 0, Math.PI * 0 / 24, 0) -&gt; (-50, -0, -20, 0, -Math.PI * 1 / 12, 0) -&gt; (-80, -0, -20, 0, -Math.PI * 1 / 6, 0)</span><br></pre></td></tr></table></figure>
<h1 id="路径总结"><a href="#路径总结" class="headerlink" title="路径总结"></a>路径总结</h1><h2 id="News-gt-About-1"><a href="#News-gt-About-1" class="headerlink" title="News -&gt; About"></a>News -&gt; About</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0 ,100， 0， 0， 0) -&gt; (-18, 0, 20， 0， 0， 0) -&gt; (-17, 0, 0， 0， 0， 0) -&gt; (-17, 0, -20， 0， 0， 0) -&gt; (-20, 0 , -20， 0， -Math.PI / 24， 0) -&gt; (-80, 0, -20， 0，-Math.PI / 6，0)</span><br></pre></td></tr></table></figure>
<h2 id="About-gt-Research-1"><a href="#About-gt-Research-1" class="headerlink" title="About -&gt; Research"></a>About -&gt; Research</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-80, 0, -20，0，-Math.PI / 6， 0) -&gt; (-20, 0, -20， 0， -Math.PI / 24， 0) -&gt; (-17, 0, -20， 0， 0， 0) -&gt; (-17, 0, 200, 0, 0, 0) -&gt; (-20, 0, 210, 0, 0, 0) -&gt; (-35, 0, 210, 0, Math.PI / 18, 0) -&gt; (-45, 0, 210, 0, Math.PI / 9, 0)</span><br></pre></td></tr></table></figure>
<h2 id="Research-gt-People-1"><a href="#Research-gt-People-1" class="headerlink" title="Research -&gt; People"></a>Research -&gt; People</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-45, 0, 210, 0, Math.PI / 9, 0) -&gt; (-35, 0, 210, 0, Math.PI / 18, 0) -&gt; (-20, 0, 210, 0, 0, 0)-&gt; (-17, 0, 200， 0， 0， 0) -&gt; (-17, 0, -20, 0, 0, 0) -&gt; (-20, -4, -28, 0, -Math.PI * 4 / 12, 0) -&gt; (-20, -5, -30, 0, -Math.PI * 5 / 12, 0)</span><br></pre></td></tr></table></figure>
<h2 id="People-gt-Join-Us-1"><a href="#People-gt-Join-Us-1" class="headerlink" title="People -&gt; Join Us"></a>People -&gt; Join Us</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-20, -5, -30, 0, -Math.PI * 5 / 12, 0) -&gt; (-17, 0, -20， 0， 0， 0) -&gt; (-17, 0, 80， 0， 0， 0) -&gt; (-40, -3, 80, 0 , Math.PI * 5 / 24, 0)</span><br></pre></td></tr></table></figure>
<h2 id="Join-Us-gt-News-1"><a href="#Join-Us-gt-News-1" class="headerlink" title="Join Us -&gt; News"></a>Join Us -&gt; News</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-40, -3, 80, 0, Math.PI * 5 / 24, 0) -&gt;  (-30, 0, 100, 0, Math.PI * 0 / 24, 0)</span><br></pre></td></tr></table></figure>
<h2 id="News-gt-Research-1"><a href="#News-gt-Research-1" class="headerlink" title="News -&gt; Research"></a>News -&gt; Research</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-30, 0, 100, 0, 0, 0) -&gt; (-17, 0, 100, 0, 0, 0) -&gt; (-17, 0, 210, 0, Math.PI * 1 / 18, 0) -&gt; (-45, 0, 210, 0, Math.PI * 1 / 9, 0) </span><br></pre></td></tr></table></figure>
<h2 id="About-gt-People-1"><a href="#About-gt-People-1" class="headerlink" title="About -&gt; People"></a>About -&gt; People</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-80, 0, -20, 0, -Math.PI / 6, 0) -&gt; (-20, -5, -30, 0, -Math.PI * 5 / 12, 0)</span><br></pre></td></tr></table></figure>
<h2 id="Research-gt-Join-Us-1"><a href="#Research-gt-Join-Us-1" class="headerlink" title="Research -&gt; Join Us"></a>Research -&gt; Join Us</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">（-45, 0, 210, 0, Math.PI * 1 / 9, 0) -&gt; (-17, 0, 210, 0, 0, 0) -&gt; (-17, 0, 80, 0, 0, 0) -&gt; (-40, -3, 80, 0, Math.PI * 5 / 24, 0) </span><br></pre></td></tr></table></figure>
<h2 id="People-gt-News-1"><a href="#People-gt-News-1" class="headerlink" title="People -&gt; News"></a>People -&gt; News</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-20, -5, -30, 0, -Math.PI * 5 / 12, 0) -&gt;（-17, -0, -30, 0, -Math.PI * 1 / 12, 0）-&gt; (-17, -0, 100, 0, -Math.PI * 1 / 12, 0) -&gt; (-30, -0, 100, 0, -Math.PI * 0 / 12, 0) </span><br></pre></td></tr></table></figure>
<h2 id="Join-Us-gt-About-1"><a href="#Join-Us-gt-About-1" class="headerlink" title="Join Us -&gt; About"></a>Join Us -&gt; About</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(-40, -3, 80, 0, Math.PI * 5 / 24, 0) -&gt; (-17, -0, 80, 0, Math.PI * 0 / 24, 0) -&gt; (-17, -0, -20, 0, Math.PI * 0 / 24, 0) -&gt; (-80, -0, -20, 0, -Math.PI * 1 / 6, 0)</span><br></pre></td></tr></table></figure>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">x, y, z</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>( z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z;  camera.position.set(-<span class="number">30</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">100</span> - <span class="number">200</span> * tmp); camera.rotation.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.5</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.4</span>;  camera.position.set(-<span class="number">18</span> + <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">20</span> - <span class="number">200</span> * tmp);  camera.rotation.set(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.5</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; camera.position.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">1</span> ) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; camera.position.set( -<span class="number">20</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z;  camera.position.set(-<span class="number">80</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; camera.position.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.5</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = z- <span class="number">0.5</span>; camera.position.set(-<span class="number">17</span> - <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">1</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; camera.position.set(-<span class="number">18</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">20</span> + <span class="number">200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>( z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z; camera.position.set(-<span class="number">80</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; camera.position.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.5</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; camera.position.set(-<span class="number">17</span>, -<span class="number">20</span> + <span class="number">2200</span> * tmp, <span class="number">0</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.5</span>; camera.position.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">200</span> + <span class="number">100</span> * tmp, <span class="number">0</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; camera.position.set(-<span class="number">20</span> - <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">35</span> - <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>; camera.position.set(-<span class="number">45</span> + <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; camera.position.set(-<span class="number">35</span> + <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.5</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; camera.position.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">210</span> - <span class="number">100</span> * tmp, <span class="number">0</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.5</span>; camera.position.set(-<span class="number">17</span>, <span class="number">200</span> - <span class="number">2200</span> * tmp, <span class="number">0</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; camera.position.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; camera.position.set(-<span class="number">20</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">24</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.1</span>) &#123;<span class="keyword">let</span> tmp = z; camera.position.set(-<span class="number">45</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.2</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.1</span>; camera.position.set(-<span class="number">35</span> + <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.2</span>; camera.rotation.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">210</span> - <span class="number">100</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">200</span> - <span class="number">2200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.8</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">7.5</span> * tmp, - <span class="number">10</span> * tmp, -<span class="number">20</span> - <span class="number">20</span> * tmp); camera.rotation.set(<span class="number">0</span>, - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.8</span>) / <span class="number">2</span>; camera.position.set(-<span class="number">20</span>, -<span class="number">4</span> - <span class="number">10</span> * tmp, -<span class="number">28</span> - <span class="number">20</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">4</span> / <span class="number">12</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.2</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">2</span>; camera.position.set(-<span class="number">20</span>, -<span class="number">5</span> + <span class="number">10</span> * tmp, - <span class="number">30</span> + <span class="number">20</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.2</span>; camera.position.set(-<span class="number">20</span> + <span class="number">7.5</span> * tmp, -<span class="number">4</span> + <span class="number">10</span> * tmp, -<span class="number">28</span> + <span class="number">20</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">4</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">2200</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.8</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; camera.rotation.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">200</span> + <span class="number">100</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.9</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.8</span>; camera.position.set(-<span class="number">20</span> - <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = z - <span class="number">0.9</span>; camera.position.set(-<span class="number">35</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">4</span>; camera.position.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span> + <span class="number">100</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">1000</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>; camera.position.set(-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span>  tmp =(z - <span class="number">0.3</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> - <span class="number">1000</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>)/<span class="number">4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, -<span class="number">20</span> - <span class="number">100</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; camera.position.set(-<span class="number">40</span> + <span class="number">100</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span> + <span class="number">200</span> * tmp);  camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp/ <span class="number">2.4</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; camera.position.set(-<span class="number">30</span> - <span class="number">100</span> * tmp,  -<span class="number">30</span> * tmp, <span class="number">100</span> - <span class="number">200</span> * tmp);  camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">4</span>; camera.position.set(-<span class="number">30</span> + <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">100</span> + <span class="number">1100</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span> - <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>; camera.position.set(-<span class="number">45</span> + <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">210</span> - <span class="number">1100</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; camera.position.set(-<span class="number">80</span> + <span class="number">600</span> * tmp,  -<span class="number">50</span> * tmp, - <span class="number">300</span> * tmp);  camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">0.4</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; camera.position.set(-<span class="number">20</span> - <span class="number">600</span> * tmp,  -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span> + <span class="number">300</span> * tmp);  camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">0.4</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">4</span>; camera.position.set(-<span class="number">45</span> + <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">0.9</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">210</span> - <span class="number">1300</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>; camera.position.set(-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> + <span class="number">1300</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>); camera.rotation.set(<span class="number">0</span>, + <span class="built_in">Math</span>.PI * tmp / <span class="number">0.9</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">4</span>; camera.position.set(-<span class="number">20</span> + <span class="number">30</span> * tmp, -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">30</span> + <span class="number">1300</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span> - <span class="number">130</span> * tmp, -<span class="number">0</span>, <span class="number">100</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span> * <span class="number">1</span> /<span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>;  camera.position.set(-<span class="number">30</span> + <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">100</span> - <span class="number">1300</span> * tmp); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z -<span class="number">0.6</span>) / <span class="number">4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">30</span> * tmp, -<span class="number">50</span> * tmp, -<span class="number">30</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span> - <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.4</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">4</span>; camera.position.set(-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.7</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> - <span class="number">1000</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span> - <span class="number">630</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI * tmp / <span class="number">0.6</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span>(z &lt;= <span class="number">0.3</span>) &#123;<span class="keyword">let</span> tmp = z / <span class="number">3</span>; camera.position.set(-<span class="number">80</span> + <span class="number">650</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>); camera.rotation.set(<span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">0.6</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">0.6</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; camera.position.set(-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">1000</span> * tmp); camera.rotation.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(z &lt;= <span class="number">1</span>) &#123;<span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; camera.position.set(-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>); camera.rotation.set(<span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp/ <span class="number">2.4</span>, <span class="number">0</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="一些后续"><a href="#一些后续" class="headerlink" title="一些后续"></a>一些后续</h1><ul>
<li>最后对路径进行了大型删改，简而言之就是线性化了很多，否则编写太多分段函数，实在是自己吃亏</li>
<li>对于 git 的新理解——正常的工程都是 master 作为发布版本，然后 dev 作为开发版本，实际开发是对 dev 动刀。然后想要合并，是先开分支合并到 dev 上，完全确定了再由项目负责人合并到 master，从来没有轻易合并到 master 的情况</li>
<li>大概的流程是——本地开新分支，commit，本地merge进dev，push</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62026f222ab3f51d913d9d3b.jpg" alt=""></p>
<ul>
<li><p>解决方法<code>echo &quot;.idea/&quot; &gt;&gt; .gitignore    git rm --cached .idea</code></p>
</li>
<li><p>实际上，我直接吧这个文件删了。。。</p>
</li>
<li><p>最后的效果</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SmoothPathGenerate = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="function">(<span class="params">z</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> inner = SmoothPathGenerateInner(x, y)</span><br><span class="line">  <span class="keyword">if</span> (z &lt; <span class="number">1</span>) &#123; <span class="keyword">return</span> inner(z) &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="keyword">return</span> inner(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> SmoothPathGenerateInner = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="function">(<span class="params">z</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x === y) &#123; alert(<span class="string">&#x27;Not allowed!&#x27;</span>) &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z; <span class="keyword">return</span> [-<span class="number">30</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">100</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.5</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; <span class="keyword">return</span> [-<span class="number">18</span> + <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">20</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.5</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; <span class="keyword">return</span> [-<span class="number">20</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z; <span class="keyword">return</span> [-<span class="number">80</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.5</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.4</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.5</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">10</span> * tmp, <span class="number">0</span>, <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; <span class="keyword">return</span> [-<span class="number">18</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">20</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z; <span class="keyword">return</span> [-<span class="number">80</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.3</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI / <span class="number">24</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">2200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.8</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">200</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.9</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.8</span>; <span class="keyword">return</span> [-<span class="number">20</span> - <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.9</span>; <span class="keyword">return</span> [-<span class="number">35</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.1</span>) &#123; <span class="keyword">let</span> tmp = z ; <span class="keyword">return</span> [-<span class="number">45</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.2</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.1</span>; <span class="keyword">return</span> [-<span class="number">35</span> + <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.2</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">210</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">200</span> - <span class="number">2200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.6</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; <span class="keyword">return</span> [-<span class="number">20</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">24</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.1</span>) &#123; <span class="keyword">let</span> tmp = z; <span class="keyword">return</span> [-<span class="number">45</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.2</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.1</span>; <span class="keyword">return</span> [-<span class="number">35</span> + <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.2</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">210</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">200</span> - <span class="number">2200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.8</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, - <span class="number">40</span> * tmp, -<span class="number">20</span> - <span class="number">80</span> * tmp, <span class="number">0</span>, - <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.8</span>) / <span class="number">2</span>; <span class="keyword">return</span> [-<span class="number">20</span>, -<span class="number">4</span> - <span class="number">10</span> * tmp, -<span class="number">28</span> - <span class="number">20</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">4</span> / <span class="number">12</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.2</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">2</span>; <span class="keyword">return</span> [-<span class="number">20</span>, -<span class="number">5</span> + <span class="number">10</span> * tmp, - <span class="number">30</span> + <span class="number">20</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.2</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, -<span class="number">4</span> + <span class="number">40</span> * tmp, -<span class="number">28</span> + <span class="number">80</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">4</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">2200</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.8</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.7</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, <span class="number">0</span>, <span class="number">200</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.9</span>) &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.8</span>; <span class="keyword">return</span> [-<span class="number">20</span> - <span class="number">150</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = z - <span class="number">0.9</span>; <span class="keyword">return</span> [-<span class="number">35</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">1000</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> - <span class="number">1000</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, -<span class="number">50</span> * tmp, -<span class="number">20</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; <span class="keyword">return</span> [-<span class="number">40</span> + <span class="number">100</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span> + <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; <span class="keyword">return</span> [-<span class="number">30</span> - <span class="number">100</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">100</span> - <span class="number">200</span> * tmp, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">30</span> + <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">100</span> + <span class="number">1100</span> * tmp, <span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">45</span> + <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">210</span> - <span class="number">1100</span> * tmp, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">18</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">1.8</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; <span class="keyword">return</span> [-<span class="number">80</span> + <span class="number">600</span> * tmp, -<span class="number">50</span> * tmp, -<span class="number">20</span> - <span class="number">100</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">0.4</span>, <span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tmp = z / <span class="number">10</span>; <span class="keyword">return</span> [-<span class="number">20</span> - <span class="number">600</span> * tmp, -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span> + <span class="number">100</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">0.4</span>, <span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Research&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">45</span> + <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">9</span> - <span class="built_in">Math</span>.PI * tmp / <span class="number">0.9</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">210</span> - <span class="number">1300</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;Research&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> + <span class="number">1300</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">280</span> * tmp, <span class="number">0</span>, <span class="number">210</span>, <span class="number">0</span>, + <span class="built_in">Math</span>.PI * tmp / <span class="number">0.9</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;People&quot;</span> &amp;&amp; y === <span class="string">&quot;News&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">20</span> + <span class="number">30</span> * tmp, -<span class="number">5</span> + <span class="number">50</span> * tmp, -<span class="number">30</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">12</span> + <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">30</span> + <span class="number">1300</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">12</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;News&quot;</span> &amp;&amp; y === <span class="string">&quot;People&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">30</span> + <span class="number">130</span> * tmp, <span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">100</span> - <span class="number">1300</span> * tmp, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">30</span> * tmp, -<span class="number">50</span> * tmp, -<span class="number">30</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * <span class="number">1</span> / <span class="number">12</span> - <span class="built_in">Math</span>.PI * <span class="number">4</span> * tmp / <span class="number">1.2</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;Join Us&quot;</span> &amp;&amp; y === <span class="string">&quot;About&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.4</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">40</span> + <span class="number">230</span> * tmp, -<span class="number">3</span> + <span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> / <span class="number">24</span> - <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.7</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.4</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, <span class="number">80</span> - <span class="number">1000</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.7</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">630</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI * tmp / <span class="number">0.6</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x === <span class="string">&quot;About&quot;</span> &amp;&amp; y === <span class="string">&quot;Join Us&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (z &lt;= <span class="number">0.3</span>) &#123; <span class="keyword">let</span> tmp = z / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">80</span> + <span class="number">650</span> * tmp, <span class="number">0</span>, -<span class="number">20</span>, <span class="number">0</span>, -<span class="built_in">Math</span>.PI / <span class="number">6</span> + <span class="built_in">Math</span>.PI * tmp / <span class="number">0.6</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (z &lt;= <span class="number">0.6</span>) &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.3</span>) / <span class="number">3</span>; <span class="keyword">return</span> [-<span class="number">17</span>, <span class="number">0</span>, -<span class="number">20</span> + <span class="number">1000</span> * tmp, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="keyword">let</span> tmp = (z - <span class="number">0.6</span>) / <span class="number">4</span>; <span class="keyword">return</span> [-<span class="number">17</span> - <span class="number">230</span> * tmp, -<span class="number">30</span> * tmp, <span class="number">80</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">5</span> * tmp / <span class="number">2.4</span>, <span class="number">0</span>]; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上从美学角度理解，这些参数都是移动速度，所以很多场景到 Research 的速度都是最大的——2200——延长移动时间来减速，提升美学效果</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>实验室</tag>
      </tags>
  </entry>
  <entry>
    <title>GitKraken 使用文档</title>
    <url>/2022/01/29/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/gitkraken/</url>
    <content><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><ul>
<li><p>由于我用的是 mac ，可能略微有区别，但是问题应该不大。</p>
</li>
<li><p>软件没有汉化版，凑合着用。</p>
</li>
<li><p>点开软件后突然要求我重新生成 ssh key，给我吓了一跳。貌似绕不过这一层，于是决定重新生成了 key，然后确定了实验室的服务器还能用，并且在 github 上添加了自己新的 key。</p>
</li>
<li><p>然后一同初始化，最后我选择了更图形化的界面。</p>
</li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>受到了<a href="https://www.bilibili.com/video/BV1KD4y1S7FL?spm_id_from=333.999.0.0">这个视频的启发</a>才觉得试试 gitkraken</li>
<li>个人感觉比较方便，github 和 gitlab 都能用。貌似之前用 github desktop，对 gitlab 支持不太行，而且就没有可视化，就帮用户节约了命令行</li>
<li>克隆还是比较方便，可视化程度相当好</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f504d12ab3f51d91384f91.jpg" alt=""></p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaDoc 使用规范</title>
    <url>/2022/01/28/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/javadoc/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Javadoc 是 Sun 公司提供的一个技术，从程序源代码中抽取类、方法、成员等注释形成一个和源代码配套的 API 帮助文档。</p>
<p>Javadoc 使用的 “doc comments” 格式是记录 Java 类的事实上的行业标准。一些 <a href="https://zh.wikipedia.org/wiki/集成开发环境">IDE</a>，如 <a href="https://zh.wikipedia.org/wiki/IntelliJ_IDEA">IntelliJ IDEA</a>、<a href="https://zh.wikipedia.org/wiki/NetBeans">NetBeans</a> 和 <a href="https://zh.wikipedia.org/wiki/Eclipse">Eclipse</a>，可以自动生成Javadoc HTML 。许多文件编辑器帮助用户生成 Javadoc 源代码并使用 Javadoc 信息作为程序员的内部引用。</p>
<p>Javadoc 还提供了用于创建 doclet 和 taglet 的 API ，允许用户分析 Java 应用程序的结构，这就是 JDiff 如何生成两个 API 版本之间发生变化的报告。</p>
<p>Javadoc 不影响 Java 的性能，因为在编译时会删除所有注释。编写注释和 Javadoc 是为了更好地理解代码，从而更好地维护代码。</p>
<h1 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h1><p>编写文档注释的基本结构是将它们嵌入到 <code>/**.</code> 中。Javadoc 写在项目旁边，没有任何分隔换行符。请注意，任何 import 语句必须在类声明之前。类声明通常包括：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import statements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>     姓名  &lt;address @ example.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>    1.6   （程序的当前版本号）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>       1.2    （加入该类时程序的版本号）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// class body</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h1><p>对于方法，有如（1）所示的简洁的一行描述来解释项目的作用；接下来是（2）所示的更长的描述，该描述可以跨越多个段落并且是可有可无的；最后，第（3）部分列出接受的输入参数和方法的返回值。所有的Javadoc都被视为 HTML ，因此多个段落部分由 “\<p\>“ 段落符号分隔。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简短的单行描述。                                                  （1）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 更长一些的描述可以写在这里。                              （2）</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * 在HTML段落分隔的连续段落中还可以有更多注释。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  variable 描述文本。                               （3）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  描述文本。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">methodName</span> <span class="params">(...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// method body with a return statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="变量注释"><a href="#变量注释" class="headerlink" title="变量注释"></a>变量注释</h1><p>包含了对变量的简短描述即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对变量的描述。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> debug = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>不建议在单个文档注释中定义多个变量。这是因为 Javadoc 读取每个变量并将它们分别放置到生成的 HTML 页面，其中包含为所有字段复制的相同文档注释。</p>
<p>也即避免如下的 javadoc ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 点对 (x,y) 的水平和垂直距离</span><br><span class="line"> */</span><br><span class="line">public int x, y;      // 避免这样的做法</span><br></pre></td></tr></table></figure>
<p>而应该写为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点的水平距离。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 点的垂直距离。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> y;</span><br></pre></td></tr></table></figure>
<h1 id="Javadoc-标签表"><a href="#Javadoc-标签表" class="headerlink" title="Javadoc 标签表"></a>Javadoc 标签表</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">标签&amp;参数</th>
<th style="text-align:center">用途</th>
<th style="text-align:center">适用于</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>@author</strong> <em>John Smith</em></td>
<td style="text-align:center">描述作者。</td>
<td style="text-align:center">类、接口、枚举</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@docRoot</strong>}</td>
<td style="text-align:center">表示从任何生成的页面生成的文档的根目录的相对路径。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@version</strong> <em>版本</em></td>
<td style="text-align:center">提供软件版本，每个类或接口最多一个。</td>
<td style="text-align:center">类、接口、枚举</td>
</tr>
<tr>
<td style="text-align:center"><strong>@since</strong> <em>起始</em></td>
<td style="text-align:center">描述此功能首次存在的时间。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@see</strong> 参考</td>
<td style="text-align:center">提供指向其他文档元素的链接。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@param</strong> <em>名称 描述</em></td>
<td style="text-align:center">描述方法的一个参数。</td>
<td style="text-align:center">方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@return</strong> <em>描述</em></td>
<td style="text-align:center">描述返回值。</td>
<td style="text-align:center">方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@exception</strong> <em>类 描述</em> <strong>@throws</strong> <em>类 描述</em></td>
<td style="text-align:center">描述可能从此方法抛出的异常。</td>
<td style="text-align:center">方法</td>
</tr>
<tr>
<td style="text-align:center"><strong>@deprecated</strong> 描述</td>
<td style="text-align:center">描述一个过时的方法。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@inheritDoc</strong>}</td>
<td style="text-align:center">从被覆盖的方法复制描述。</td>
<td style="text-align:center">覆盖方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@link</strong> <em>参考</em>}</td>
<td style="text-align:center">链接到其他符号。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@linkplain</strong> <em>参考</em>}</td>
<td style="text-align:center">与{@link}相同，但链接的标签以纯文本显示，而不是代码字体。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@value</strong> <em>#STATIC_FIELD</em>}</td>
<td style="text-align:center">返回静态成员的值。</td>
<td style="text-align:center">静态成员</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@code</strong> <em>文本</em>}</td>
<td style="text-align:center">在代码字体中格式化文字文本，等同于<code> &#123;@literal&#125; </code>。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@literal</strong> <em>文本</em>}</td>
<td style="text-align:center">表示文本，随附的文本被解释为不包含HTML标记或嵌套的javadoc标记。</td>
<td style="text-align:center">类、接口、枚举、成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@serial</strong> <em>文本</em>}</td>
<td style="text-align:center">在Javadoc注释中用于默认的可序列化字段。</td>
<td style="text-align:center">成员</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@serialData</strong> <em>文本</em>}</td>
<td style="text-align:center">记录writeObject()或writeExternal()方法写入的数据。</td>
<td style="text-align:center">成员、方法</td>
</tr>
<tr>
<td style="text-align:center">{<strong>@serialField</strong> <em>文本</em>}</td>
<td style="text-align:center">记录ObjectStreamField组件。</td>
<td style="text-align:center">成员</td>
</tr>
</tbody>
</table>
</div>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name <span class="variable">getNotice</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author <span class="variable">lzy</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since </span>3.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;auth, skipNum&#125;</span> <span class="variable">event</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>content no use</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns </span>对应userID的userInfo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">&#x27;wx-server-sdk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  <span class="attr">env</span>: <span class="string">&#x27;tsinganswering-7g39oqpq3204684c&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> db = cloud.database();</span><br><span class="line"><span class="keyword">const</span> collectionName = <span class="string">&#x27;Notice&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> skipNum = <span class="number">0</span></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line"><span class="built_in">exports</span>.main = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  skipNum = event.skipNum</span><br><span class="line">  <span class="keyword">return</span> db.collection(collectionName)</span><br><span class="line">  .aggregate()</span><br><span class="line">  .sort(&#123;</span><br><span class="line">    <span class="string">&#x27;ptime&#x27;</span>: -<span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .skip(skipNum)</span><br><span class="line">  .limit(<span class="number">20</span>)</span><br><span class="line">  .end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>答疑坊</tag>
        <tag>编程规范</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>非暴力沟通 part 1</title>
    <url>/2022/01/27/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E9%9D%9E%E6%9A%B4%E5%8A%9B%E6%B2%9F%E9%80%9A_22_01_27/</url>
    <content><![CDATA[<h1 id="译序"><a href="#译序" class="headerlink" title="译序"></a>译序</h1><h2 id="Arun-Gandhi"><a href="#Arun-Gandhi" class="headerlink" title="Arun Gandhi"></a>Arun Gandhi</h2><ul>
<li>上个世纪四十年代，我在南非度过了童年。作为有色人种，生活在执行种族隔离政策的南非并不是很有意思的事情。在那里，肤色随时都有可能给你带来无情的刺激。<strong>十岁那年，我被白人打了，他们认为我太黑了。接着，黑人又打了我，他们认为我太白了。</strong>这样的耻辱或许会让任何人想要报复社会。</li>
<li>我们认为，只有打人、鞭挞、杀人以及战争才算是暴力，然而“隐蔽的暴力”与“身体的暴力”相比更为有害。这会激怒受害者，使他们做出暴力反抗。如果看不到这点，我们为促进和平所做的努力，要么徒劳无果，要么昙花一现。</li>
</ul>
<h1 id="让爱融入生活"><a href="#让爱融入生活" class="headerlink" title="让爱融入生活"></a>让爱融入生活</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><ul>
<li><p>听到批评时，我们一般会申辩、退缩或者反击。然而，一旦专注于彼此的观察、感受与需要，而不反驳对方，我们便能发现内心的柔情。对自己和他人产生全新的体会，这样将最大程度地避免暴力。</p>
</li>
<li><p>通过强调倾听——倾听自己及他人，非暴力沟通培育彼此的尊重、关注与爱，使人乐于互助。</p>
</li>
</ul>
<h2 id="非暴力沟通的四个要素"><a href="#非暴力沟通的四个要素" class="headerlink" title="非暴力沟通的四个要素"></a>非暴力沟通的四个要素</h2><ul>
<li>观察——清楚地表达观察结果，而不判断或是评估。</li>
<li>感受——表达感受，例如受伤、害怕、喜悦、开心…</li>
<li>需求——叙述怎样的需求导致了之前的感受。</li>
<li>请求——明确告知他人，我们期待哪些行动来满足我们。</li>
</ul>
<h1 id="是什么蒙蔽了爱？"><a href="#是什么蒙蔽了爱？" class="headerlink" title="是什么蒙蔽了爱？"></a>是什么蒙蔽了爱？</h1><h2 id="道德批判"><a href="#道德批判" class="headerlink" title="道德批判"></a>道德批判</h2><ul>
<li><p>不幸的是，以这样的方式提出主张，很可能会招来敌意，使我们的愿望更难得到满足。即使他们接受批评，做出让步，通常也是不心甘情愿的，说他们出于恐惧或内疚来迎合我们。或迟或早，我们将会发现对方不再那么友好。当然他们也付出了代价，屈服于外部或内部的压力，很可能使他们心怀怨恨，并厌恶我们。</p>
</li>
<li><p>重要的是，我们不要将价值判断与道德判断混为一谈。</p>
</li>
<li><p>暴力的根源来源于人们忽视彼此的感受和需要，而将冲突归咎于对方——至少大部分的暴力根源都是如此。不管是语言，精神或者身体的暴力，还是家庭，部落以及国家的暴力。冷战期间，我们看到了这种思维的危害性，美国领导人把前苏联看作是致力于摧毁美国生活方式的邪恶帝国。前苏联领导人将美国人看作是试图征服他们的帝国主义压迫者，双方都没有承认内心的恐惧。</p>
</li>
</ul>
<h2 id="进行比较"><a href="#进行比较" class="headerlink" title="进行比较"></a>进行比较</h2><h2 id="回避责任"><a href="#回避责任" class="headerlink" title="回避责任"></a>回避责任</h2><ul>
<li>我们对自己的思想，情感和行动负有责任，可是人们广泛的使用<strong>“不得不”</strong>这一短语。  显然，这种表达方式淡化了个人责任。</li>
<li>而<strong>你让我</strong>是人们常用的另一个短语，这种表达方式忽视了我们情感的内在需求。</li>
<li>人类的灭亡却是因为现代人唯唯诺诺、缺乏责任感、毕恭毕敬地服从各种命令。我们所看到的悲剧和马上就要看到的更大悲剧并非是世界上反抗的人、不服从的人增多了，而是唯命是从、听话的人越来越多。</li>
<li>一旦意识到我们不是自己的主人，我们就成了危险人物。</li>
</ul>
<h2 id="强人所难"><a href="#强人所难" class="headerlink" title="强人所难"></a>强人所难</h2><ul>
<li>我们大多数的人使用的语言倾向于评判、比较、命令和指责，而不是鼓励我们倾听彼此的感受和需要。</li>
<li>我相信异化的沟通方式的基础是性恶论。长期以来，我们强调人性本恶，以及通过教育来控制天性。这导致的我们对自己的感受和需要常常心存疑虑，以至于不愿意去体会自己内心的世界。</li>
<li>异化的沟通方式源自等级社会或专制社会，同时也支撑着他们。对于国王、沙皇、贵族来说，将臣民训练得具有奴隶般的精神状态，符合他们的利益。“不应该”和“不得不”等表达方式，特别适合这一目的、让他们越是习惯于评定是非，他们也越倾向于追随权贵来获得正确和错误的标准。</li>
<li>一旦专注于自身的感受和需要，我们就不再是好奴隶和好属下。</li>
</ul>
<h1 id="区分观察与评论"><a href="#区分观察与评论" class="headerlink" title="区分观察与评论"></a>区分观察与评论</h1><h2 id="序言-1"><a href="#序言-1" class="headerlink" title="序言"></a>序言</h2><ul>
<li>非暴力沟通并不要求我们保持完全的客观，而不做任何评论。他只是强调区分观察和评论的重要性。将观察和评论混为一谈，人们将倾向于听到批评，甚至会产生逆反心理。</li>
</ul>
<h2 id="人类智力的最高形式"><a href="#人类智力的最高形式" class="headerlink" title="人类智力的最高形式"></a>人类智力的最高形式</h2><ul>
<li>不带批评的观察是人类智力的最高形式。——印度哲理家克里希那穆提( J. Krishnamurti)</li>
</ul>
<h2 id="区分观察和评论"><a href="#区分观察和评论" class="headerlink" title="区分观察和评论"></a>区分观察和评论</h2><h3 id="常见的错误表达"><a href="#常见的错误表达" class="headerlink" title="常见的错误表达"></a>常见的错误表达</h3><ul>
<li>使用的语言没有体现出评论的人对其评论负有责任。</li>
<li>把对他人思想，情感或愿望的推测当做唯一的可能。</li>
<li>把预测当做事实。</li>
<li>缺乏依据。</li>
<li>评价他的能力时，把评论当做事实。</li>
<li>使用形容词和副词时，把评论当做事实。</li>
</ul>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li>非暴力沟通的第一个要素是观察。将观察和评论混为一谈，别人就会倾向于听到批评并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。他提倡在特定的时间和情境中进行观察并清楚地描述观察结果，例如他会说”欧文在过去五场比赛中没有进一个球“，而不是说”欧文真是个差劲的前锋“。</li>
</ul>
<h1 id="体会和表达感受"><a href="#体会和表达感受" class="headerlink" title="体会和表达感受"></a>体会和表达感受</h1><h2 id="被压抑的心灵"><a href="#被压抑的心灵" class="headerlink" title="被压抑的心灵"></a>被压抑的心灵</h2><ul>
<li><p>我在美国学校学习了 21 年，却想不起有什么人问过我的感受。人们认为感受是无关紧要的，重要的是各种权威主张的”正确思想“，于是我们被鼓励服从于权威，而非倾听自我。逐渐地，我们习惯于思考”人们期待我怎么做？”</p>
</li>
<li><p>在家庭中，如果家庭成员无法表达情感，那是很悲哀的一件事。西部音乐的代表人瑞巴·麦克英特尔在她父亲去世后写了一首歌：《我所不知道的最伟大的人》——这首歌引起了许多人的共鸣，他们渴望与父亲沟通情感，却又做不到。</p>
</li>
</ul>
<h2 id="区分感受和想法"><a href="#区分感受和想法" class="headerlink" title="区分感受和想法"></a>区分感受和想法</h2><ul>
<li>当我们说“我觉得”，我们常常并不是在表达感受，而是在表达想法。例如有时我们会说，“我觉得这并不公平”，在这句话当中，“我觉得”换为“我认为”更为恰当。</li>
<li>还有一些词语表达的是想法，而非感受。例如被抛弃、被羞辱、被虐待、被打扰、被拒绝、不受重视、被束缚、被欺负、无人理睬、得不到支持、无人赏识、被利用、被贬低。</li>
</ul>
<h2 id="建立表达感受的词汇"><a href="#建立表达感受的词汇" class="headerlink" title="建立表达感受的词汇"></a>建立表达感受的词汇</h2><ul>
<li>需求得到满足时：兴奋，喜悦，欣喜，甜蜜，精力充沛，兴高采烈，感激，感动，乐观，自信，振作，振奋，开心，高兴，快乐，愉快，幸福，陶醉，满足，欣慰，心旷神怡，喜出望外，平静，自在，舒适，放松，踏实，安全，温暖，放心，无忧无虑。</li>
<li>需求没有得到满足时：害怕，担心，焦虑，忧虑，着急，紧张，心神不宁，心烦意乱，忧伤，沮丧，灰心，气馁，泄气，绝望，伤感，七彩悲伤，恼怒，愤怒，烦恼，苦恼，生气，厌烦，不满，不快，不耐烦，不高兴，震惊，失望，困惑，茫然，寂寞，孤独，郁闷，难过，悲观，沉重，麻木之疲，力尽，萎靡不振，疲惫不堪，昏昏欲睡，无精打采。尴尬，惭愧，内疚，妒忌，遗憾，不舒服。</li>
</ul>
<h1 id="感受的根源"><a href="#感受的根源" class="headerlink" title="感受的根源"></a>感受的根源</h1><h2 id="听到不中听的话：四个选择"><a href="#听到不中听的话：四个选择" class="headerlink" title="听到不中听的话：四个选择"></a>听到不中听的话：四个选择</h2><ul>
<li><p>非暴力沟通强调，感受的根源在于我们自身。我们的需要和期待，以及对他人言行的看法，导致了我们的感受。</p>
</li>
<li><p>听到不中听的话，我们有四个选择：</p>
<ol>
<li>认为自己犯了错</li>
<li>指责对方</li>
<li>了解我们的感受和需求</li>
<li>用心体会他人的感受和需求</li>
</ol>
</li>
<li><p>如果我们想利用他人的内疚，我们通常采取的办法是，把自己的不愉快感受归咎于对方。</p>
</li>
<li><p>看到父母的痛苦，孩子可能会感到内疚，并因此调整行为来迎合他们。遗憾的是，这种调整只是为了避免内疚，而非出于对学习的热爱。</p>
</li>
<li><p>在以下的表达方式中我们常常忽略了感受与自身的关系：</p>
<ol>
<li>只提及相关的事情。</li>
<li>只提及他人的行为。</li>
<li>指责他人。</li>
</ol>
</li>
<li><p>我们可以通过“我（感到）…因为我…”这种表达方式来认识感受与自身的关系：</p>
<ol>
<li>看到公司的海报出现拼写错误，我很不高兴，因为我重视公司的形象。</li>
<li>你没把饭吃完，妈妈感到失望，因为妈妈希望你能健康成长。</li>
<li>老板说话不算数，我很生气，因为我希望有个长假去探望亲人。<h2 id="非暴力沟通需要：生命健康成长的要素"><a href="#非暴力沟通需要：生命健康成长的要素" class="headerlink" title="非暴力沟通需要：生命健康成长的要素"></a>非暴力沟通需要：生命健康成长的要素</h2></li>
</ol>
</li>
<li><p>批评往往暗含期许。对他人的批评实际上间接表达了我们尚未满足的需要。如果一个人说”你从来不理解我“，他实际上渴望得到理解。如果太太说”这个星期你每天都工作到很晚，你喜欢工作，不喜欢我“，那反映了她看重亲密关系。</p>
</li>
<li>如果我们通过批评来提出主张，人们的反应常常是申辩或者反击。反之，若我们直接说出需要，其他人就有可能做出积极的回应。</li>
<li>不幸的是，大部分人并不习惯从需要的角度来思考问题。在不顺心时，我们倾向于考虑别人有什么错。例如，如果孩子把外套放在了沙发上，而没有挂在衣柜里，我可能会说他们是懒虫。如果同事们不听从我们的建议，我们也许会指责他们不负责任。</li>
<li>根据我长期以来的经验，一旦人们开始谈论需要而不指责对方，他们就有可能会找到办法来满足对方的需要。以下是一些我们每个人都有的基本需求：<ol>
<li>自由选择( Autonomy )：选择梦想目标或是方向，自由制定计划来实现这些梦想目标和方向。</li>
<li>庆祝( Celbration )：庆祝生命的创造力，已经梦想的实现，纪念人生的失落，亲人的离世，或是梦想的破灭。</li>
<li>言行一致( Integrity )：真诚，创造，意义，自我肯定。</li>
<li>滋养身体( Physical Nurturance )：空气，食物，运动，免于病毒、细菌、昆虫及肉食性动物的伤害，休息，住所，触碰，水。</li>
<li>玩耍( Play )：乐趣，欢笑。</li>
<li>情意相通( Spiritual Communion )：美，和谐，激励，秩序，平静。</li>
<li>相互依存( Interdependence )：接纳，欣赏，亲密关系，社区体贴，成长，安全感，倾听，诚实，爱，信心，尊重，支持，信任，理解</li>
</ol>
</li>
<li>非暴力沟通把需要看重是有助于生命健康成长的要素，而不是某种具体的行为。一种要素是否当做需要，关键在于它能否促进生命的健康成长。</li>
</ul>
<h2 id="难以承受的痛苦"><a href="#难以承受的痛苦" class="headerlink" title="难以承受的痛苦"></a>难以承受的痛苦</h2><ul>
<li>社会并不鼓励我们表达个人需要，对于妇女而言尤其如此。长期以来，妇女的形象和自我牺牲联系在一起，一旦把照顾他人当做最高职责，她们也就会倾向于忽视个人的需要。</li>
</ul>
<h2 id="从“情感的奴隶”到“生活的主人”"><a href="#从“情感的奴隶”到“生活的主人”" class="headerlink" title="从“情感的奴隶”到“生活的主人”"></a>从“情感的奴隶”到“生活的主人”</h2><ul>
<li>对于大多数人而言个人的成长一般会经历三个阶段。<h3 id="情感的奴隶"><a href="#情感的奴隶" class="headerlink" title="情感的奴隶"></a>情感的奴隶</h3></li>
<li>在这个阶段，我们相信自己上，为他人负责，让他人快乐是我们的义务，如果别人不高兴，我们就会感到不安，觉得自己有责任，做点什么死尸，我们特别容易把亲人当做是负担。</li>
<li>显然，这会伤害到彼此的关系。我们常听人这样谈论亲密关系，“我真的害怕与人亲近，每次看到伴侣处于痛苦之中，我就极为沮丧，感到窒息，甚至认为自己是一个囚犯，于是我想要尽快摆脱这段关系。”</li>
<li>许多人认为爱情就是牺牲自己来满足爱人的需要。刚谈恋爱时，他们对于恋人的关心是自发的，那是彼此的相处，是那么的惬意、融洽和美好。然而随着关系变得严肃，他们开始为自己有责任，让情人过的开心，于是爱情开始变得沉重起来。</li>
<li>一旦面临这样的情形，我就会承认在恋爱中无法丧失独立性。“如果恋人过的很糟糕，我就会认为自己做的不够好，我可能会由于不堪重负而提出分手。”</li>
<li>然而，如果意识不到，感受的根源在于自身，我可能会指责恋人，“你太依赖我了，我能力有限，我们分手吧。”</li>
<li>此时如果我的朋友能够倾听我的痛苦，他也许会说：你认为你必须照顾好我。这让你觉得自己失去了自由，是吗？”如果他反过来指责我，“我的要求过分了吗？”那么我们的关系就可能陷入僵局，甚至难以维系。</li>
</ul>
<h3 id="面目可憎"><a href="#面目可憎" class="headerlink" title="面目可憎"></a>面目可憎</h3><ul>
<li>在这个阶段，我发现为他人的情绪负责，牺牲自己迎合他人，代价实在很大。想到日子过得这么憋屈，我们可能会愤怒，此时如果遭遇他人的痛苦，我们可能会无动于衷，甚至反过来指指责对方将自己的问题关联到我们身上。</li>
</ul>
<h3 id="生活的主人"><a href="#生活的主人" class="headerlink" title="生活的主人"></a>生活的主人</h3><ul>
<li>在这个阶段，我们乐于帮助他人，是出于爱，而非出于恐惧，内疚或是惭愧，但是自由而快乐的行为。此时我们意识到，虽然我们对于自己的意愿，感受和行动负有完全的责任，但无法为他人负责。我们还发现人与人相互依存，损人无法真正利己。非暴力沟通，正是想帮助们既表达自己，又关心他人。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>非暴力沟通</tag>
      </tags>
  </entry>
  <entry>
    <title>Life Was Out Of Ordinary</title>
    <url>/2022/01/27/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/life%20was%20out%20of%20ordinary/</url>
    <content><![CDATA[<h1 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h1><blockquote>
<p>你抛出的问题像是你自己给他们讲了一些情况，一些前情，让他们在这个前情下思考问题。且不说你给的符不符合真实情况，他们很难有代入感，这也是甚至有人觉得徒增迷茫的原因</p>
</blockquote>
<p>这篇文章的阅读者基本是成外的学弟学妹们。</p>
<p>如果你在阅读过程中感到不适，作为作者，我为此感到抱歉，并请你立即关闭这份文档。</p>
<p><strong>如果你是成外竞赛班的同学，请你直接阅读前言部分，不必再阅读警告部分。</strong></p>
<hr>
<p>好的，现在阅读警告的同学都是没有参加过高中五大学科竞赛的成外学弟学妹们。</p>
<p>坦诚说，我并不确定提前给你们讲述这些事情是否合适，就像那天我在群里转发<a href="https://survivesjtu.gitbook.io/survivesjtumanual/">《上海交通大学生存手册》</a>一样。</p>
<p>事后想来，虽然据我所知，国内顶级的若干大学，在各种意义上的运行逻辑的确如同交大生存手册和我下文将描述的那样，但是我不确定当你读到这些文字的时候，你是否有准备去面对它，有去能力去理解它，甚至在未来进入大学后有勇气在大学和这个世界的运行逻辑共存。</p>
<p>所以我必须强调，这份文档需要你有如下能力再来阅读：</p>
<ul>
<li>基本的缓解焦虑的能力</li>
<li>（倘若发生价值观被颠覆）与人沟通寻求帮助的能力</li>
</ul>
<p>如果你不具备上述这两种能力且你并没有参加过竞赛，那么请你将<a href="https://survivesjtu.gitbook.io/survivesjtumanual/">《上海交通大学生存手册》</a>一书收藏在你的 QQ 或者微信收藏夹里，然后高考结束后哪怕放弃你期待了一辈子的高三假期，也要以对待高考语文默写的态度，逐字逐句阅读<a href="https://survivesjtu.gitbook.io/survivesjtumanual/">《上海交通大学生存手册》</a>这本书。</p>
<p>收藏完成后，请把”高考结束后，阅读交大生存手册“这个事项 和 ”局部最优并不一定是全局最优”这句话 存入你的备忘录，然后优雅地关闭这个文档。</p>
<p>如果你认为你具备上述能力，那么欢迎你阅读这份文档。但是我需要再次声明</p>
<blockquote>
<p>这份文档主要是我是为成外竞赛班的学弟学妹所写的，夹杂着许多我对中学教育的反思，其中大学和中学差异的部分还有专业选择部分私以为给非竞赛同学读一读也会有所帮助。然而本文的口吻仍然主要是写给竞赛同学的，所以难免对非竞赛同学不太友善，为此致以歉意。</p>
<p>满纸荒唐言，一把辛酸泪，希望读完之后能对你有所启发</p>
</blockquote>
<p>最后，非竞赛的同学请直接从”life was out of ordinary“一段开始即可。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>请仔细阅读这一段话，并且将他们刻在你的脑海里。<strong>这段话的意义绝对远大于你奉为圭臬的《四大力学》，或是《格林伍德》。</strong></p>
<p>随着时间的推移，你会越发明白这段话对你人生意味深远。</p>
<blockquote>
<p> 各位同学们，在本书的开始，我不得不遗憾地告诉大家一个消息。国内绝大部分大学的本科教学，不是濒临崩溃，而是早已崩溃。在此，我无意争论是否复旦、中科大、或者清华、北大是否比我们崩溃的更少一些——这种争论是没有意义的。我只是看到了无数充满求知欲、激情、与年轻梦想的同学们，将要把自己的四年青春，充满希望与信任地交给大学来塑造，这使我心中非常不安。——<a href="https://survivesjtu.gitbook.io/survivesjtumanual/">《上海交通大学生存手册》</a></p>
</blockquote>
<h1 id="你既不比他们强，更不比他们高贵"><a href="#你既不比他们强，更不比他们高贵" class="headerlink" title="你既不比他们强，更不比他们高贵"></a>你既不比他们强，更不比他们高贵</h1><p>今年成外情系母校的一大主题是——大学之后，竞赛带给你了什么，又让你失去了什么？</p>
<p>不得不说，拿到这个题目，我的想法与大多数学生会不太一样，毕竟我绝不是一个竞赛意义的传统成功人士。实际上，严格意义上，我和我少数几个同学是我们那一届少数的竞赛意义上的失败者。不过，对于我而言，也是对于我的高中同届同学们而言，竞赛的成功与否，在你度过了这段时间后，或者说，最多你度过了高中生涯后，便是过往云烟。</p>
<p>从我周围大多数竞赛选手的现状看来，那些你在中学阶段无比崇拜的所谓竞赛大神，亦或是你在中学阶段置若珍宝的这段竞赛的经历，当你上了大学后，便会越发觉得他们一文不值。</p>
<p>学过竞赛并不意味着你高贵于那些你可能很鄙视的“不敢追求梦想的高考生”——<strong>你既不比他们强，更不比他们高贵，你不过是在中学阶段主动或者被动地选择了一条小众一些的道路罢了</strong>。实际上，从统计学意义来讲，如果你大学的专业和竞赛学科并不强相关，那么你的量化指标也好，非量化能力也好，和高考的同学并无本质区别——甚至从我个人角度看来，我周围学习过竞赛的同学在体育和政治课上普遍比较糟糕。</p>
<p>谈了这么多，尽管你可能认为你现在读到的文字不过是一个竞赛失败者的自我辩护，然而我仍然想说的是——<strong>你首先得明白，你不过是主动或者被动地选择了竞赛这一条小众许多的路罢了。你不比别人优秀，你也不比别人更强，你也只是你，一个普通的你罢了</strong>。</p>
<p>然而，竞赛仍然会带给你一些独特的体味，这些体味的价值，在以十年为单位的人生片段上，可能意义会远大于那些你奉为圭臬的竞赛生的那些功成名就。</p>
<h1 id="你能够更清楚地认知真实的自我"><a href="#你能够更清楚地认知真实的自我" class="headerlink" title="你能够更清楚地认知真实的自我"></a>你能够更清楚地认知真实的自我</h1><p>首先，我明白，我的这些话大概率是写给成外那些已经选择了竞赛的中学生。所以，无论你出于什么原因选择了竞赛，主动或是被动，我首先得祝福你——<strong>你选择了一条能够更加认知自我的道路，我也由衷为你的勇气而感到敬佩</strong>，因为强基之后的竞赛更加是勇敢者的游戏。</p>
<p>然而，我的祝福到此为止，<strong>因为这件事本身的价值仅仅于此，他并不高贵</strong>，说的直白一些——很大程度上你不得不承认这不过是一种升学方式。<strong>以及，竞赛更谈不上伟大</strong>——你在竞赛中接触到的学科知识，比起真正系统而严谨的科学研究只能算是小孩子的过家家罢了。</p>
<p>我已经无数次疯狂的向你贬低竞赛的价值，只是希望你能够理解，这件事情本身——<strong>站在十年为单位的人生旅途上，意义仅仅于此。</strong></p>
<p>如果你暂时能够接受这点，哪怕你不认同，那么欢迎你继续读下去。如果你觉得写下这段文字的人一直在扯淡，那么我很乐意告诉你——</p>
<blockquote>
<p>刚才这段文字不过是我的猫趁我睡觉时，随意地敲击键盘而生成的一串二进制文本串罢了</p>
</blockquote>
<p>请你赶快忘掉他们，然后看到屏幕右上角的 X 符号，退出这篇推送。(当然，如果你是 Mac 用户，请点击屏幕左上角的 X 符号，然后退出。不过中学阶段的 Mac 用户毕竟是极其少数)</p>
<hr>
<p>OK ，既然你愿意继续读下去，那么我再来讲讲我的观点：竞赛最深远的意义包括也仅仅限于——</p>
<blockquote>
<p>你能够更清楚地认知真实的自我。</p>
</blockquote>
<h1 id="life-was-out-of-ordinary"><a href="#life-was-out-of-ordinary" class="headerlink" title="life was out of ordinary"></a>life was out of ordinary</h1><h2 id="可预见的巨大冲击"><a href="#可预见的巨大冲击" class="headerlink" title="可预见的巨大冲击"></a>可预见的巨大冲击</h2><p>回到开头，如果你读到了这里，想必你已经认真地理解了我在开篇引用的<a href="https://survivesjtu.gitbook.io/survivesjtumanual/">《上海交通大学生存手册·立志篇》</a>的第一段话。(实际上，我是个善良的人。毕竟哪怕我在第二段就劝退的那些人，我也让他们认真地理解了开篇的那些话)</p>
<p>而这段话，实际上是我立论的基础——<strong>在你们升入大学以后，大学代价高昂的高度自由氛围会对每个人产生极大的冲击。然而承受这些冲击的绝非是你的老师或是辅导员，也大概率不要是你的家人。</strong></p>
<p>首先承受冲击的人不是你的大学老师。上了大学，你的老师和你的关系断然不同于高中，大概率他们开设的某一门课会有数百学生选修，而你不过是其中一员。绝大多数的大学老师，我很遗憾地告知你——极其有可能仅仅是一个为给你打分的工具人，而你却会为了“某某某老师给分好不好”这样的事情而陷入大学无休止的内耗。</p>
<p>其次，承受冲击的人不是你的辅导员。大学的辅导员绝非你高中的班主任那般和你关系密切，关心的你学习和生活——至少我认为竞赛班的班主任都是成外最优秀也是最关心学生的老师。实际上辅导员的工作仅仅是收发通知，然后尽力确保学生不会自杀，能够毕业就行。然而哪怕如此，我所就读的清华大学计算机系每年自杀的学生仍然维持在 3 人左右。而毕业——你要看清楚，我并不是说取得优秀成绩而后毕业，我说的仅仅是毕业——至少在大一学年，我所得知全年级退学的人超过 6 人。</p>
<p>最后，我最不希望的是，我们成外的学生毕业后面对人生的迷茫和巨大改变需要家长来为你承受冲击——我虽然也并不觉得成外的学生在平均值意义上会有多么的优秀——我只是希望你，读到这段文字的成外竞赛班的同学，当你长大后应该承担起自己的社会责任，而不当“妈宝”“啃老族”是基本要求。因此，如果你非要你的父母来为你承担这份可预见的巨大冲击，那么是你的选择，我无权干预，不过我希望大多数成外的学生至少能做到不必像中学那般依赖于父母亲人——实际上父母可能早已并不年轻，人到中年也多少有些身体不适。哪怕做不到为他们分担负担，也希望你能够基本生活独立。</p>
<h2 id="一个必须亲自做选择且为自己的选择全权负责的成年人"><a href="#一个必须亲自做选择且为自己的选择全权负责的成年人" class="headerlink" title="一个必须亲自做选择且为自己的选择全权负责的成年人"></a>一个必须亲自做选择且为自己的选择全权负责的成年人</h2><p>是的，在你升入大学，成年以后，你的选择和行为将全权由你负责，在法定意义上如此，我也希望你能够意识到这一点——<strong>你即将成为一个必须亲自做选择且为自己的选择全权负责的成年人。</strong></p>
<p>而高中竞赛的核心意义在于——你能够更加清晰地认知自己，随后基于此做出选择。</p>
<h2 id="认知自己"><a href="#认知自己" class="headerlink" title="认知自己"></a>认知自己</h2><p>我为什么说你需要认知自己，这个答案并不复杂。因为做出选择有成本，有收益，更有风险。</p>
<p>设想下，如果你初中数学从来没有及格过，每次都是全班倒数第一，你大概率不会选择，也不能选择数学竞赛。如果你初中从来没接触过信息学，你甚至对编程毫无兴趣，你也大概率不会走入机房成为 OIer。</p>
<p>是的，<strong>你现在的选择，必然是基于你对以往自己的认知而做出的</strong>。哪怕这个选择纯粹是被动的，但是你都走上竞赛这条路了，如果你在竞赛上毫无造诣，你的竞赛教练也会让你离开竞赛，赶快去高考。</p>
<p>所以，尽管你可能没有意识到，然而你过去的选择和以后的选择都必须要基于你对自身的认知，否则这个选择会风险极大，而大概率承受风险的人是你自己。</p>
<p>基于这个观点，我不得不为我国现行的高中教育感到悲哀——为了太多太多的社会原因，我们的高中教育在高考这个共同的选拔机制下，很难让人清晰的认知自我。</p>
<p>实际上，我个人认为，我们现行的高考体制都奉行着一个原则——<strong>拿下高考，再谈人生</strong>。我个人认为，对于社会、学校或是班级而言，这个想法是正确的。然而，很遗憾，这样的想法可能会对个人的发展产生很大的不利影响。因为这样的想法，完全是基于对自身除了分数之外没有任何其他的认知。而高考，他就是这么奇妙——你完全不需要对自己的能力有太多了解就能参与这场上千万中学生的狂欢。</p>
<p>说到底，高考这条路还是有 ordinary way 的。选择本科出国的人毕竟不多，而哪怕读文科还是读理科，都有数十万的人和你选择同一条道路，在你之前也有过上百万的学长学姐走过这条路。</p>
<p>高考——这条路太清晰了，以至于如果你一直是个认真踏实的高考生，你从高一入学第一次月考考试到你在某一年的 6 月 8 日下午 5 点伴随着 one man’s dream 的钢琴乐结束高中生涯的整个过程都是清晰的，几乎不需要你去探索。你只需要按照着前人和老师给你指明的路按部就班的走下去，你就会有一个底线不低，高线不差的统计学意义的好结果。</p>
<p>这样的路的好处我已经叙述过了——在统计学意义上，底线不低，高线不差。以及，如果你有一些基本的社会学理念，你能够知道，这条路有利于为仍然欠发达的中国社会稳定地输出具有一定基本知识水平的下一代劳动力。相比于世界上其他奉行精英建制派教育的资本主义经济体，我国高考制度培养出的下一代劳动力可能并没有格外突出的创造力，然而其可靠程度和稳定性更强，且培养成本更低。更进一步，如果你对中国近现代史有所认识的话，你不得不感叹高考的标准化选拔对整体中国社会的贡献，虽然可能对于接受这套教育逻辑的人不见得是好事。</p>
<p>然而，这样的路是有缺点的——太确定了，没有任何需要你探索的地方。高考考察的同一门学科，上了大学之后面目全非的比比皆是。如果你学习化学竞赛，你自然明白高考化学相比大学化学不过是阉割后的种马。如果你学习物理竞赛，你也知道高中物理不过是对复杂的物理问题同时加以千万个极其不合理的假设。</p>
<p>然而，如果你学习高考，你很难知道一个学科的真实面貌是什么。</p>
<p>就拿我个人的经历而言，我自己认为在初高中，面对中高考，我的物理水平都还不错。然而事实绝非如此，我在物理上大概率造诣平平。甚至于上了大学，我有时发现自己会对中学时较为感兴趣的物理产生生理性的厌恶，以至于我大概率不会从事硬件相关的计算机研究。</p>
<p>我会产生这样的生理性厌恶可能某种程度上和我的大学物理老师相关，但是更大程度上应该是我自己的原因。我上了大学才意识到我不适合学习物理，可惜在中学阶段我从来没有这种认识。实际上，在你们面对高考时，你们的物理老师基本会希望你们的物理分数为 110 分，因为全国卷实在难度不高，考到 110 分虽然绝非容易，然而绝对可以追求，这比 120 分的语文简单太多。</p>
<p>可以见得，高考这件事本身难度不太高，每个人都能够尽量在除了语文之外的学科上追求满分。而这，会给你迷之自信——我适合这门学科。</p>
<p>实际上，我不得不说，就我个人而言——我不适合大多数学科。</p>
<p>我不适合生物和化学，这是我高中学习化学竞赛时得知的。我不适合物理，这是我上了大学后学了清华的大学物理 B 后得知的。我也不适合数学，这是我上了大学后学了清华的高等线性代数选讲后得知的…</p>
<p>然而我又是个幸运儿，我现在的专业是计算机科学与技术，我发现自己还比较喜欢这个领域，虽然谈不上天赋过人，然而至少比我在生物上的天赋强。</p>
<p>我在高中结束时，在完全不了解自己是否擅长计算机科学这个学科之前，就抓阄一般的选择了这个专业。很幸运，我难得运气好了一次，这次我意外开盲盒抽中了一个令我难能满意的结果。然而，如果让我再选择一次，在填志愿之前，我一定好好的仔细思索清楚自己擅长什么，哪怕我没法亲身去体会，也该多找人问问。否则，完全根据高考情况选择一个专业的风险是很大的。</p>
<p>而这，正是高考教学的最大问题——</p>
<blockquote>
<p>它营造了一种什么都适合你的假象，而你很大概率会在完全不了解自己的情况下根据高考分数，用脚投票，选择一个专业</p>
</blockquote>
<p>更加可怕的是，随着强基计划的深入推行，甚至会有越来越多高考学生进入强基的队伍。我并不是对强基计划有强烈的批判，只是不得不强调——强基计划是高度科研导向的，也几乎无法转专业。在普通高考学生尚且没有对一门学科产生正确合理的认知的时候，他就可能出于升学的需求选择了某门传统学科的强基计划。</p>
<p>在清华，我见到非常多强基的同学，他们在高中对于自己的专业学科没有一丝认识，甚至还认为自己能像高考一样轻松在这门学科上取得几近满分，随后出于各种原因加入了强基计划。与我同届的同学，强基计划退学者不下 11 人，而对自己专业感到完全无法接受者也不在少数。</p>
<p>总而言之，我很遗憾地告知大家，因为认知不足而用脚投票选择专业这件事几乎发生在全国大多数的人身上，这很危险，但是每年都在重复上演。</p>
<blockquote>
<p>我只是看到了无数充满求知欲、激情、与年轻梦想的同学们，将要把自己的四年青春，充满希望与信任地交给大学来塑造，这使我心中非常不安。</p>
</blockquote>
<h2 id="高考和竞赛的区别"><a href="#高考和竞赛的区别" class="headerlink" title="高考和竞赛的区别"></a>高考和竞赛的区别</h2><p>说了这么多高考的优点与缺点，那么我来谈谈竞赛。</p>
<p>再次重申我的观点——</p>
<blockquote>
<p> 学习竞赛，你能够更清楚地认知真实的自我</p>
</blockquote>
<p>因为竞赛的知识体系更为庞大，不确定性远远高于高考，规范程度这些远不及高考。前人的路就算走了很多了，面对几乎无限的竞赛考纲，仍然还有太多的事情需要你亲自去探索。</p>
<p>而探索的过程，才是最宝贵的，因为通过这件事情，有希望让你清晰地认识到自己。路都要自己走，你没什么能够参考的，这才是竞赛的价值，也是竞赛的缺点。</p>
<p>拿我个人举例，我高中有幸在王江老师门下学习过两年的化学竞赛。在这个过程中，我对自己产生了如下认识。</p>
<ul>
<li>我的悟性不高。这是从学习有机的过程中发现的。有机长期都是我的弱项，哪怕我做了福山 B 和中有，刷了一堆合成书，我的有机还是一塌糊涂，最后初赛也输在了有机上。</li>
<li>我的毅力惊人。这是学习元素的过程中发现的。我高二花了 113 天从头到尾抄了一边《格林伍德》，几乎每个重点的结构我都有亲自画过，这给予了我不错的绘图能力。而且在这个过程中，我发现自己处理这种难度不大，但是体量巨大的工作上是有一定优势的。</li>
<li>我的交际能力较强。这是高中参加几次化学培训时发现的。我当时和全国不少其他地区的化竞生成为了朋友。他们有的进了集训队去了北大化院，有的和我一样竞赛平平无奇参加了高考，但是我们现在都是挺好的朋友。</li>
<li>我的整理和规划能力较强。这也是高中学习化竞的时候发现的。在清华，这种能力也让我获益匪浅。<a href="https://cloud.tsinghua.edu.cn/d/629d34437a39481183c1/">此处附上我高中整理的一些资料</a>。 </li>
</ul>
<p>还有不少，不去举例子了。</p>
<h2 id="既然如此，那就去探索"><a href="#既然如此，那就去探索" class="headerlink" title="既然如此，那就去探索"></a>既然如此，那就去探索</h2><p>嗯，我说了这么多，希望你能够从中有自己的体会。我说的话当然可能是错的，甚至毫无意义，然而——</p>
<blockquote>
<p>满纸荒唐言，一把辛酸泪</p>
</blockquote>
<p>这是我自己的体会，也希望你能够珍惜学习竞赛的过程，多去探索自我。当然，如果你已经高三了，结束了竞赛生涯，那么希望你能够总结得失，把这笔宝贵的人生经历化为你下一阶段的人生智慧。</p>
<p>思考下，学习竞赛有没有让你认识到自己适合什么样的学习方法，适合什么样的学习节奏等等，以及考虑下自己真正适合什么样的人生选择。</p>
<p>反思下，自己是否在学习竞赛的过程中犯过什么错误。过去已经无法更改了，但是仍然希望你能总结过去的教训，助你接下来走的更远。当然，也不必为了以前的错误而遗憾悔恨，这没有意义。</p>
<blockquote>
<p>你只有一生这么短</p>
<p>既然如此，那就多去探索</p>
</blockquote>
<h1 id="读者反馈"><a href="#读者反馈" class="headerlink" title="读者反馈"></a>读者反馈</h1><h2 id="匿名读者-Alice"><a href="#匿名读者-Alice" class="headerlink" title="匿名读者 Alice"></a>匿名读者 Alice</h2><blockquote>
<p>竞赛确实可以让我们更深入地了解一个学科，就我而言，我当初也是因为喜欢几何所以坚定地选择了数学竞赛，我也一度认为自己将来肯定选数学系。但大半年后当我真正接触了代数，数论，组合，以及朱老介绍过拓扑等一些高数知识（还有一位做几何研究的宋教授科普）后，我才知道我所喜欢的“几何”不过是平面里点线圆的基础变化，离真正的大学的几何差了十万八千里。再加上我对代数，数论感觉一窍不通，终于否定了自己将来做理论研究的方向。</p>
<p>我的父母一直热衷于让我走计算机方面的专业，因为就业前景好，顺应时代发展需要。但我也因为对计算机专业的一无所知而充满畏惧和抗拒。我不确定计算机对我来说是像几何一样简单有趣还是像政史地一样背死了也上不了班平。对于不学竞赛的人而言，兴趣似乎根本不被考虑在选择里面，或者说他们所谓的兴趣不过是常规考试得高分带来的成就感罢了。</p>
<p>不过从初三正式开始学竞赛到现在，我认为竞赛带给我的最重要的就是一个平和的心态。一方面是在考试上（这一点相信所有竞赛教练在洗脑的时候都说过了），临场的调整、应变能力确实有很大的提升（虽然数竞考试经常心态崩溃挂零）；另一方面应该算是在性格上了，作为外地生的我从小就是要强的性格，对成绩排名异常看重，总会拿别人的分数来做比较。但这一年多（被不停吊打）的经历让我现在能在考差的时候做好自己该做的事，以平和的心态面对自己的失败。</p>
<p>我不确定自己的竞赛是走到底，还是今年九月份就退赛学高考，但我相信这八个月停课的时间足够让我看清自己，基于自己的实力和兴趣去做选择</p>
</blockquote>
<h2 id="匿名读者-Bob"><a href="#匿名读者-Bob" class="headerlink" title="匿名读者 Bob"></a>匿名读者 Bob</h2><blockquote>
<p>感觉其实对于我们没有进省队的人来讲真的都有很多共鸣，我是学物理的，我们这一届被给予厚望却考的最撇，现在其实也真的在想当时对物理一腔热血到现在对物理已经没有了感觉，想着去学其他热门专业，不仅对我，其他同学也是这样（除了少数人），当时xag老师说过的最多的话就是“希望物理竞赛的大学去学物理，从事物理研究，而不是去学计算机和金融”但现在好像事与愿违了</p>
</blockquote>
<h2 id="一位普通高考考生-Carol"><a href="#一位普通高考考生-Carol" class="headerlink" title="一位普通高考考生 Carol"></a>一位普通高考考生 Carol</h2><blockquote>
<p>我或许也想说两句。<br>的确，竞赛现在的路子比以往难走多了，我们这一届赶上了所有的变革，也几乎见证了成外物竞的兴衰。再看看大家，几乎都没有达到自己的期望。但是如果问我们后悔吗，应该大家的心底都是同样的否定回答。<br>虽然有些教练一味的唯结果论有时让你怀疑自己，但是身在局中，你会发现物竞带给你的除了或大或小的升学机会，更多的是在三年中对你的性格塑造和面对问题的态度，更重要的，学会如何对自己负责。<br>在竞赛中，你深刻的发现教练的学科或竞赛能力不足，你会收到来自各方面的建议或是要求，这时候就需要你的判断和分析，来找到一条你认可的道路，这大概才是高中竞赛最宝贵的财富罢<br>在此感谢我们的三年物理教练，是他的大胆放手，才让我们得以触及高中物竞的可贵。也请仍然在役的同学们评估自己，再评估自己的道路，至少保证你回顾这段路时，或有遗憾，但无后悔</p>
</blockquote>
<h2 id="匿名读者-Dave"><a href="#匿名读者-Dave" class="headerlink" title="匿名读者 Dave"></a>匿名读者 Dave</h2><blockquote>
<p>我自己不是一个竞赛生，甚至不是一个理科生，但是也确实在初三跟王江老师学过一段时间化竞，当然最后明白对化学的喜爱不等于我真的有对化学学习的天赋而果断放弃。</p>
<p>点进文章是因为上次看了上交生存手册，算是一定程度上颠覆了我对大学生活的追求——进入一个不错的综合性大学作为平台，随便选择一个专业尽力学好（当然是在我自认为对所有人文社科专业感兴趣的前提下）。文章关于强基的部分给我印象很深，高二的我对强基的不成熟想法是高考考不好的保底选择，理所应当地把文史哲基础学科当成我的精神追求，读完文章后的我在反省，自己关于和大学教育的适配想法是否过于理想主义。</p>
<p> 过高考这座独木桥的时候，我们都自然而然养成了对分数过于敏感的毛病，尽管我现在对老师们拿来警告我们的“失败案例”尽量保持客观态度，还是难以避免对一年后无法进入清北的恐惧。国家基于对人才都需要进行顶层设计的调整，我们这样的中学生大多还是“稀里糊涂”地想着进入大学就好了，路总会有人为你规划的，想着和以前一样努力就能取得好的结果，迷茫吗？迷茫。唯一希望的是能多接触这样的思考，让自己在高考道路前行的时候更坚定更有力量，不致迷失自我。</p>
</blockquote>
<h2 id="匿名读者-Eve"><a href="#匿名读者-Eve" class="headerlink" title="匿名读者 Eve"></a>匿名读者 Eve</h2><blockquote>
<p> 抱歉 一直忘记回复了 也不知道怎么回复好 我本身语言表达能力不太好(ﾉД`) 我不是学竞赛的 就是一个普通高考生 我身边朋友也很少有学竞赛的 之前对竞赛生的印象就是成绩好 假期少 课程多 压力大…看完你这篇文章也算刷新了我对竞赛的理解吧 竞赛生比传统高考生多学到的不仅是知识 还有自我认知能力 自我调节能力等等 你们的心路历程也是普通高考生无法体会到的<br>我也曾因为某次考试的某一学科取得了不错的成绩而认为自己还挺适合学这门学科 后来发现我们现在学习的课本上的学科知识相比这个学科的全貌来说还是太片面了 且只是冰山一角<br>学习也好 生活也好 前方的路都是充满了未知的 还有很多东西待我们去探索 很喜欢你文中的一句话:“不必为了以前的错误而遗憾悔恨”<br>最后 谢谢你的分享！</p>
</blockquote>
<h2 id="匿名读者-Francis"><a href="#匿名读者-Francis" class="headerlink" title="匿名读者 Francis"></a>匿名读者 Francis</h2><blockquote>
<p>非竞赛生，但是看了您的这份文档后仍然受益良多。中学时期我总是有些“唯分数论”，认为哪科分考得高自己就擅长哪科，也自然地偏向这一科。比如，在学校的考试中我的化学成绩还比较好，曾经一度以为自己适合从事化学研究，但是看了这篇文章后想了一下，高中化学熟悉了套路，就比较容易拿高分，而我其实并不能很好地理解化学原理，比如有机结构复杂时难以理解各类反应的发生，工业实验题无法想通为什么要这么做，大多数时候都要靠老师教授。原来我的天赋并不在这里。您的文章引导我们思考自己真正擅长什么，而不是根据分数来定自己的就业方向，沦为高考的祭品。</p>
</blockquote>
<h2 id="匿名读者-Grace"><a href="#匿名读者-Grace" class="headerlink" title="匿名读者 Grace"></a>匿名读者 Grace</h2><blockquote>
<p>讲的比较涣散，但条理清楚 算是一种科普性质的浅谈？我相信对高一高二的学生是很有用的</p>
<p>就是对于没有竞赛经历的人估计看完就完了，期间谈到的心理问题，说实话我感觉这种文章对于绝大部分人是没意义的</p>
<p>文章心态问题那部分比较🉑️，鉴于之前见过四中一些冲到北大数院就觉得自己牛完了的，有的人还瞎掺合学生会，我觉得提前帮他们认清自我是好事，以免到大学被吊起来打心态崩</p>
<p>学竞赛有一定水平的 有经历有见识</p>
<p>这种事情见怪不怪了</p>
</blockquote>
<h2 id="匿名读者-Hans"><a href="#匿名读者-Hans" class="headerlink" title="匿名读者 Hans"></a>匿名读者 Hans</h2><blockquote>
<p>学长文档中对高考的反思确实深刻，先高考后人生的问题确实是每一个高考生最大的迷惘。就集中体现在填志愿，绝大多数都是浏览着长长的专业目录，很多天面对那些看名字就不了解的专业，最后还是听父母or社会热潮填报个志愿（我当时也是这样，虽然看了很多某乎、b站关于一些专业的介绍，在慕课雨课堂上浅尝过一些专业的几门专业课，但我依旧迷茫不知道，选择怎什么）。</p>
<p>我这个假期也跟我的几个学弟学妹吃过饭，他们就是选了保送，有去清北复旦上交的。但是他们几乎不能坚定的说出选择保送的理由</p>
<p>但是先高考后人生，也确实是在这个阶段的局部最优解</p>
</blockquote>
<h2 id="匿名读者-Isabella"><a href="#匿名读者-Isabella" class="headerlink" title="匿名读者 Isabella"></a>匿名读者 Isabella</h2><blockquote>
<p>非竞赛生来谈谈这三年在体制下接受教育的感受<br>我对物理有近乎宗教一般的奇妙感情。物理在我看来是很美的，简洁地解释世界，给人思维的乐趣。我记得我初三时候的理想，就是大学进物理系搞理论研究（现在看来是不可能了）。但最终还是没能走物竞这条路，现在想来多是后悔。对于那些真正对知识有兴趣，有热情的同学来说，竞赛（就算没能走到底）的好处还应该在于有更多的可能去接触一个高考考纲之外的更广阔的世界，有更多的机会去自我塑造，有更少的可能会得到“这个东西不考。”这样的回答。<br>引用费曼自传里的一段话，“我看不出任何人怎么可能从这种自体繁殖式的体制中受到教育，在这种体制中，大家考试过关，再去教别人考试过关，但没人理解任何东西。”<br>我对物理的热情在这三年里几乎被消磨干净了。高二有一段时间甚至觉得在学校学不到东西，天天摆烂，看书。从小说，杂文到哲学论文都被我找来看过。<br>我现在意识到受教育本身还是一个自我塑造的过程，不能全怪外界的局限。<br>马上就要高考了，自己的目标也从原来的清晰变成了现在的迷茫，但我没有去怀疑的时间，只能不断前进。很喜欢学长的一句话“既然如此，那就去探索”，因为爱与智慧。</p>
</blockquote>
<h2 id="匿名读者-Jason"><a href="#匿名读者-Jason" class="headerlink" title="匿名读者 Jason"></a>匿名读者 Jason</h2><blockquote>
<p>赵学长您好，我是18级4班的学生，现在是通过强基计划进入大学学习。我并没有通过成外最初的竞赛选拔，所以只是进入了成外一个普普通通的实验班学习。在我的班级上也有几位退出竞赛学习转入实验班的同学。坦白来说，我十分羡慕参加过竞赛学习的同学，因为他们学习了我不曾学习的知识。和很多同龄人一样，我也对高考、分数以及大学有过很多迷茫，但是当我在一定程度上认识到了我们国家的社会现状并结合自己的理想后，我认为我自己参加强基计划是一个正确的选择。我所选择的学校、专业都是我认可的，尽管我的高考分数比我的专业在四川招生的分数（非强基）高了接近50分。对于高中的各个学科，我倒是没有觉得自己“适合”哪一个学科，我清楚的认识到了我“不适合“哪一个学科（可能这也是为什么我没能进入清北复交学习的原因吧）。对于强基，我还是认为它给我们学生提供的不仅仅是一个升学的机会，更多的是一个选择改变的机会，也许有的人比较一般最终只改变了自己和家庭，但也许有的人选择了正确的方向改变了国家和世界呢？以上这些，可能有的比较肤浅，有的比较理想化，可能也是因为我现在只是一个大一学生吧</p>
</blockquote>
<!--Kate、Louis-->
<h2 id="匿名读者-Kate"><a href="#匿名读者-Kate" class="headerlink" title="匿名读者 Kate"></a>匿名读者 Kate</h2><blockquote>
<p>另外作为非竞赛生，我对竞赛的印象就是这是一条给有天赋的人走的路，但这条路不是捷径，仅仅是让这部分人多一个选择而已，听学长竞赛可以提升自我认知的作用，那么我觉得应该是难能可贵的在升学时期提升眼界的好机会。在今天看到这篇文章之前，我都在给我家里初高中的亲戚孩子讲一定尝试走竞赛或者保送的路，如果有办法绕过硬拼高考，一定要尽力去尝试，这些是基于我自己对过去经历的反响，这样的应试制度我的感受就是对结果的不安和对过程的忧虑，我希望他们能绕过去吧，就像现在我也在全力争保研名额，但是我也有决心和行动力为考研尽全力，就我的自我反响来看，我也许对这样考试分数的模式有debuff，我打内心不想再经历一次</p>
</blockquote>
<h2 id="匿名读者-Louis"><a href="#匿名读者-Louis" class="headerlink" title="匿名读者 Louis"></a>匿名读者 Louis</h2><blockquote>
<p>语言的贫瘠表达不出我内心的震撼     但看了文章之后我以后在选专业前会去了解更多的信息吧 之前对选专业很迷茫，现在更迷茫了</p>
</blockquote>
<h2 id="匿名读者-Margaret"><a href="#匿名读者-Margaret" class="headerlink" title="匿名读者 Margaret"></a>匿名读者 Margaret</h2><blockquote>
<p>迟到的阅读感受，我来啦</p>
<p>本人是非竞赛生，一名普普通通的理科狗。其实之前对竞赛生有过一点点了解，认为竞赛生成绩很好但是仍然有非常大的压力，所以我对竞赛生是很佩服的，因为抗住压力选择竞赛这场未知赌注是需要莫大勇气，恒心的，读完学长的文章更有这种感受。</p>
<p>其次再谈到学长所写的大学部分，这是远远超出我的预期的（虽然读之前也有一定心理建设）让我感觉到了冲击之下必须的责任担当。</p>
<p>最后看到高考部分，的确高中学的知识与大学相差甚远，高中某一科的成绩也并不代表着大学对应科目的复杂和融会贯通，不过转念一想国家也别无他法，高考虽然有槽点，可它仍然是对于个人融入更大更高平台的跳板（虽然对个人而言是不利的也无法因此真正认知自我）。以上也只是我个人的一些看法，也很感谢学长这篇走心的言论，很喜欢最后的一句话“你只有一生这么短 既然如此 那就多去探索”。</p>
<p>祝新年快乐！</p>
</blockquote>
<h2 id="匿名读者-Nathan"><a href="#匿名读者-Nathan" class="headerlink" title="匿名读者 Nathan"></a>匿名读者 Nathan</h2><blockquote>
<p>内容虽然感觉有些不集中 但是文字直击心灵 让我产生了很多思考<br>比如对于专业的认知这一点 的确给我了一些警示 毕竟在真正接触该学科前我们得到的信息是千疮百孔 不完整的 在真正做出选择时或许也是迷迷糊糊 所以的确 切勿轻易被高中学习成绩或是大势左右<br>但同时我想这些问题也可以尽量去避免的 其实作为一个高考生 我参加了许多国际生云集的活动比赛项目 功利来讲 对我的升学并不会起关键作用 但是在其中 我发现了自己对于经济的极高兴趣 发现了自己喜欢逻辑表达 喜欢去领导 安排统筹 喜欢挑战 解决问题 擅长人际交往 这些都对我认识自己起到了重要的作用 我想它们也是在为我在未来专业选择 甚至是就业铺设道路<br>看完文章后有很多想法 就其中一点浅谈 也许稚嫩而不成熟 但真实</p>
</blockquote>
<h2 id="匿名读者-Olivia"><a href="#匿名读者-Olivia" class="headerlink" title="匿名读者 Olivia"></a>匿名读者 Olivia</h2><blockquote>
<p>感觉学长们讲得很好，尤其是站在一个过来人的立场上，认真的劝说后辈学弟学妹们仔细考虑所要选择的道路。竞赛并不神秘，也不高贵，更可能带来很大的风险，因为自从强基计划出台后，通过竞赛获得降分的成功的概率变得相当低。这种情况下学弟学妹们的确需要仔细考虑未来选择的路。</p>
<p> 但是另一方面，说竞赛和竞赛学到的知识一无是处，这显然是不对的。在我看来，竞赛其实是一种大趋势下的激励手段，它的最终目的，理论上来说，还应当是教育。在我学习竞赛的过程中，和很多来自不同省份的学生有过接触，有一件事给我印象十分深刻。我在浙江省学军中学参加决赛，只是出于好奇，我问给我们带队的志愿者同学（高一）：“你们年级有多少人学竞赛啊？”他的回答却让我相当震惊，他说每年高一学军中学都会有70%以上的人选择参加一门竞赛，有些人甚至会参加好几门，当然后面会不断地退出，能坚持到高三的人是很少的。一开始我也感觉很不理解，怎么有这么多人去学竞赛呢，这不是瞎搞吗。但是后来我慢慢理解了，这是一种趋势，北京，上海，深圳等一线城市的优秀中学里面，很多都有大学先修课程，提前教你一些大学物理啊，微积分啊等等。</p>
<p> 当然有人就会说了，这不就是某些优秀高中为了凸显自己与众不同所进行的表演吗？这就回到了最初的一个问题，竞赛的知识究竟有没有用？上了大学以后，我越发地感受到，竞赛的知识是远远不够的，以微积分为例，我在高中都学了那么久了，还反复地在竞赛中运用，那是不是上了大学就不用学了呢？我发现并不是，仍旧有很多内容是我不知道的，仍有题是我不会做的。所以我相信，即使是国家集训队的选手，到了大学不好好学习，成绩一样会一落千丈。</p>
<p> 但是竞赛的知识就完全没用了吗？这其实就是先修教育和大学教育的侧重点不同。以物理竞赛为例，如果仔细分析过它的发展历程就会发现，物理竞赛一直都以知识点广著称，但是早期的物理竞赛甚至连微积分都不要求。可是你连微积分都不会你能学大学物理吗？这里就要反问一句了，你真的需要很高深的数学工具去理解物理现象吗？比如一个介质球的极化情况的研究，大学物理的方法势必会引入各种复杂的矢量，搞不好会需要解拉普拉斯方程。但是竞赛的方法呢，只是想象一个球是由可以被拉开的两个球组成的罢了，这十分形象的给出了极化电荷分布的样子。这只是举了一个例子，在高中学习竞赛的时候，我们并不是真正在学习大学课程（当然随着竞争的日益激烈很多学校已经开始直接引入大学课程了，比如某外），我们学的实际上是比较粗略的，甚至很多地方使用一些独特的方法去理解的（当然学得好的那各种力学，各种理论肯定是跑不了的，不过这样的人占总数比较少）。有人可能会问了，这样的先修学习有用吗？你真正上大学的时候还不是要学一遍。</p>
<p> 实际上是很有用的，我个人认为，它的用处不是为了你在大学的某一次期末考试能拿到一个较高的分数。它的主要意义有三点：</p>
<p> 1、大致了解，形成结构，便于发现：为什么竞赛或者先修学习知识面广但却不精呢（这里指平均水平，非大佬）？因为不需要。不是每个人最后都会学物理，也不是每个人都擅长于理论。这个过程中最关键的是形成一个大体的结构，比如物理是怎么发展来的，物理有哪些基本原理，有哪些分类，一些现象我该怎么去理解等等。有些东西也许你并不一定要精通，但是能够了解一定会大有所益。在上清华以后，我发现其实这算是一种共识，很多次，不同的老师都跟我们强调，你将来研究的东西，或者做的事业，可能只是很窄很窄的一个角，但你一定要了解你的领域的其他人在做什么，对更广阔的其他领域也要有一个了解，否则你也做不好你的专业。这大概就是为什么未央书院要出未央工程导论这门课了（笑）。</p>
<p> 2、理解更快，迅速上手：其实这也是我上大学以来一个很深的体会，隔壁未央软件的一个同学曾经评另一个从小学信息竞赛的同学：“每次我们学新东西吧，他也没学过。但是他上手很快，可能我们这没基础的俩小时还整不明白呢，他五分钟就会用了。”很多新事物，如果你曾经接触过与之相似的事物的话，理解起来会非常迅速。但是有人可能会问了，这又能有多大影响呢？确实，一个人究竟学没学懂这件事很难证明。我个人的感觉主要有两个，一个是上了大学感觉时间很紧，另一个是中国的大学教育仍然有点填鸭（现在才大一，可能还经历的不够多？）老师上课按照教材讲，讲完了会有课后作业，有些课有习题课，然后就是期中期末，然后就没了。考试考过了能够代表一个人学过了吗？又究竟什么才是学过了呢？我也不知道，但至少，我认为能够理解的更快更多总是好的。</p>
<p>3、竞赛对心态的磨练，我看这一点前面的学长说的都比较多了，我也就不多说了，更平和啊，抗压能力更强等等。</p>
<p> 最后，竞赛本身究竟发挥的是一个什么样的作用呢？我觉得，它真正起到的，就是一个驱动力。抛开一些发达地区的重点中学的教学实验不谈，像我们西南地区，或者是一些普通学校，如果不是以竞赛为理由，我们真的有机会接触更多的知识吗？如果没有竞赛所带来的升学收益，我们学校会出巨资建一个设备齐全的物理实验室吗？我们这里每一个学竞赛的人都或多或少遇到过阻力吧。别去学那些乱七八糟的玩意，你应该一心一意弄高考。是啊，对绝大部分的学生来说，高考是唯一的出路，高考的那几分就决定了你的命运。但是认认真真学了三年高考你的高考就一定会好吗？我个人觉得，其实很多竞赛带来的问题并不是竞赛本身的问题，而是利益的问题。比如黑幕，比如停课搞竞赛，很明显竞赛的初衷是在学好课内的基础上抽出时间去进行拓展学习。但是现在竞争如此激烈，你不停课，别人停了，你又怎么办呢？当然这些只是我的一些个人看法，对我来说，很痛心的一点就是看着竞赛所带来的利益让我们有了更好的条件，但是竞赛本身又在被利益所影响，37届物理竞赛之后，物理竞赛决赛的实验也受到影响变成了笔试，而实验对科学研究的重要性不言而喻。这下似乎竞赛离它教育的本质似乎又偏的更远了。不管怎么说，希望之后它能越来越好吧。</p>
</blockquote>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>社工</tag>
        <tag>成外</tag>
        <tag>情系母校</tag>
      </tags>
  </entry>
  <entry>
    <title>答疑坊小程序开发记录</title>
    <url>/2022/01/26/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/tsing_ans/</url>
    <content><![CDATA[<h1 id="TODO-list"><a href="#TODO-list" class="headerlink" title="TODO list"></a>TODO list</h1><ul>
<li>参考答疑坊统计工作流程中的统计相关  , 导出小程序成立以来的答疑坊统计用完整字段版的订单数据. 了解统计数据中列名的实际含义.</li>
<li>参考答疑坊统计工作流程中的工时统计, 得到一份和参考样例一样的志愿者工时统计文档. 并思考阅读工时统计云函数的源代码.</li>
<li>参考 Git 使用规范中的代码提交规范, 在代码 readme.md 中的 developer 添加上自己的名字, 并在 git 上完成提交. </li>
<li>登录<a href="https://mp.weixin.qq.com/wxamp/index/index?lang=zh_CN&amp;token=166930175">https://mp.weixin.qq.com/wxamp/index/index?lang=zh_CN&amp;token=166930175</a> 微信开发者平台, 了解数据统计中 UV ,  PV 的概念, 探索平台的统计功能, 按你心目中的重要程度选出三个统计字段记录下来, 并说明原因. </li>
<li>参考小程序发布流程,  仔细阅读某个 js 文件, 对该 js 文件中出现的所有函数编写 javadoc 格式的注释, 提交体验版, 在微信开发者平台上进行发版.</li>
<li>场景题: 如果你负责运行维护小程序. 此时志愿者群有人反馈答疑订单中心无法正常打开, 一直显示请稍等, 你会如何进行应急处理?(没有标准答案, 旨在激发大家思考) </li>
<li>场景题: 如果你需要实现一个功能开关, 用户可以在小程序上开启或关闭某功能, 你该如何在现有代码基础上编写前端代码以及进行相应数据库的改动?(没有标准答案, 旨在激发大家思考)</li>
</ul>
<h1 id="全部数据库导出"><a href="#全部数据库导出" class="headerlink" title="全部数据库导出"></a>全部数据库导出</h1><p>不得不说这个开发平台的可视化功能挺好的，大概瞎找了下，估计是这个数据库——</p>
<p><img src="https://pic.imgdb.cn/item/61f386dc2ab3f51d91c6842c.jpg" alt=""></p>
<p>出题人都写了：</p>
<ul>
<li>云开发数据库Order集合csv格式导出语句</li>
</ul>
<hr>
<p>这个貌似是导出语句，不过为什么和我理解的 bash 语句不太一样？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">subjectID,courseID,abstract,state,online,actionRec.atime,actionRec.ptime,actionRec.ftime,feedback.period,feedback.suggestion</span><br></pre></td></tr></table></figure>
<p>管他的，导出试试</p>
<hr>
<p>orz，我明白了，那个不是 bash 语句，而是需要导出的字段</p>
<p>这个是导出 order 数据库集合</p>
<p><img src="https://pic.imgdb.cn/item/61f387f32ab3f51d91c7a746.jpg" alt=""></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">ordercnt,actionRec.pAuthenData.realName,actionRec.pAuthenData.studentID,actionRec.pAuthenData.department,actionRec.aAuthenData.realName,actionRec.aAuthenData.studentID,actionRec.aAuthenData.department,subjectID,courseID,abstract,state,online,actionRec.atime,actionRec.ptime,actionRec.ftime,feedback.period,feedback.suggestion</span><br></pre></td></tr></table></figure>
<p>这个是所有完整字段，其实看个名字能差不多知道意思吧..</p>
<hr>
<p>导是导出来了，不过…</p>
<p><img src="https://pic.imgdb.cn/item/61f389922ab3f51d91c94d51.jpg" alt=""></p>
<p>行，聪明的我还是找到了<a href="https://developers.weixin.qq.com/community/develop/article/doc/000e0afcdb80c88ace4acf1f956413">解决办法</a></p>
<hr>
<p>寄了，刚才那个办法不太对，<a href="https://blog.csdn.net/weixin_43887789/article/details/92562784">我换一个</a></p>
<p><img src="https://pic.imgdb.cn/item/61f38b6e2ab3f51d91cb3a09.jpg" alt=""></p>
<p>用记事本打开就对了，emmm</p>
<p>然后，硬改为 txt ，新建一个 excel 表格，导入这个 txt 。</p>
<p><img src="https://pic.imgdb.cn/item/61f38c142ab3f51d91cbc997.jpg" alt=""></p>
<p>注意之后选择分隔符号</p>
<p><img src="https://pic.imgdb.cn/item/61f38c512ab3f51d91cc0835.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f38c9e2ab3f51d91cc50bd.jpg" alt=""></p>
<p>看上去成功了，不过少了非常多数据，我再倒腾下</p>
<hr>
<p>突然理解了，貌似数据量太大了，没法一次导入。那导入数据差不多结束了，之后再找雷哥问问吧，总觉得欠了点啥。</p>
<h1 id="工时统计"><a href="#工时统计" class="headerlink" title="工时统计"></a>工时统计</h1><p><del>西馆的网，你妈不活了！</del></p>
<p>遇到第一个开发问题，系统死活提醒我什么 node modules 未安装</p>
<p><a href="https://developers.weixin.qq.com/community/develop/doc/000a0e6c9287583567a8645075e400?highLine=NODE%20moduleS%E6%9C%AA%E5%AE%89%E8%A3%85&amp;jumpto=comment&amp;commentid=00022af228c808c569a8c6d8d560">解决方案</a></p>
<p>大概的思路是找到这个云函数的本地文件夹，然后在终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>我不太懂，这个究竟 install 了什么，但是总之跑起来了。</p>
<hr>
<p>挺离谱的，上面那个问题每换一个函数就得重新执行一次。</p>
<hr>
<p>我的评价是，寄</p>
<p><img src="https://pic.imgdb.cn/item/61f397cd2ab3f51d91d616b1.jpg" alt=""></p>
<p>感觉是什么奇怪的变量没有配置好</p>
<p>先不管了，继续做 git 问题</p>
<hr>
<p><img src="https://pic.imgdb.cn/item/61f3c1a12ab3f51d91021d27.jpg" alt=""></p>
<p>Emmm，雷哥说的貌似也没解决…</p>
<h1 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h1><p>不得不说，雷哥推荐的视频讲的蛮好，<a href="https://space.bilibili.com/372313671">附带上他的主页</a></p>
<p>大概是重新理解了自动解决冲突和手动合并的关系。</p>
<hr>
<p>简单复习了下 git ，貌似 readme 里面没有 developer ，手动加了一个，还给后几个同学留了位置</p>
<p><img src="/Users/zhaochen20/Library/Application%20Support/typora-user-images/image-20220128154259394.png" alt=""></p>
<h1 id="统计字段"><a href="#统计字段" class="headerlink" title="统计字段"></a>统计字段</h1><h2 id="UV-Unique-visitor"><a href="#UV-Unique-visitor" class="headerlink" title="UV (Unique visitor)"></a>UV (Unique visitor)</h2><p>是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。<br>一天内同个访客多次访问仅计算一个UV。</p>
<h2 id="IP-Internet-Protocol"><a href="#IP-Internet-Protocol" class="headerlink" title="IP (Internet Protocol)"></a>IP (Internet Protocol)</h2><p>独立IP是指访问过某站点的IP总数，以用户的IP地址作为统计依据。00:00-24:00内相同IP地址之被计算一次。</p>
<h2 id="UV与IP区别"><a href="#UV与IP区别" class="headerlink" title="UV与IP区别"></a>UV与IP区别</h2><p>如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则IP数+1,UV数+2。由于使用的是同一台电脑，所以IP不变，但使用的不同账号，所以UV+2</p>
<h2 id="PV-Page-View"><a href="#PV-Page-View" class="headerlink" title="PV (Page View)"></a>PV (Page View)</h2><p>即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个PV。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。</p>
<h2 id="VV-Visit-View"><a href="#VV-Visit-View" class="headerlink" title="VV (Visit View)"></a>VV (Visit View)</h2><p>用以统计所有访客1天内访问网站的次数。当访客完成所有浏览并最终关掉该网站的所有页面时便完成了一次访问，同一访客1天内可能有多次访问行为，访问次数累计。</p>
<h2 id="PV与VV区别"><a href="#PV与VV区别" class="headerlink" title="PV与VV区别"></a>PV与VV区别</h2><p>如：你今天10点钟打开了百度，访问了它的三个页面；11点钟又打开了百度，访问了它的两个页面，则PV数+5,VV数+2.</p>
<h2 id="我理解的统计重要程度"><a href="#我理解的统计重要程度" class="headerlink" title="我理解的统计重要程度"></a>我理解的统计重要程度</h2><ol>
<li>UV</li>
<li>VV</li>
<li>PV</li>
</ol>
<p>感觉一共就四个数据量，然后 IP 吧，我觉得这玩意儿不靠谱，因为我自己访问一个网页基本也有好几个 IP，我的两台电脑，我的 pad，我的手机，<del>还别说电脑上还有梯子</del></p>
<h1 id="小程序发布流程"><a href="#小程序发布流程" class="headerlink" title="小程序发布流程"></a>小程序发布流程</h1><p><a href="https://zh.wikipedia.org/zh-sg/Javadoc">javadoc</a>——看着就好高级，甲骨文的遗产了</p>
<p>这里带上<a href="https://zhaochenyang20.github.io/2022/01/28/%E5%89%8D%E5%90%8E%E7%AB%AF/javadoc/">我博客里的链接</a></p>
<p><img src="https://pic.imgdb.cn/item/61f3ed052ab3f51d912eb7e5.jpg" alt=""></p>
<p>姑且改了下，感觉雷哥的 js 都有注释，我就不好意思再改了，添加了个无关痛痒的 since 标签，接下来试图发布版本。</p>
<hr>
<p>首先填写文档</p>
<p>居然偶然间发现了雷哥没有写版本日志(X</p>
<p><img src="https://pic.imgdb.cn/item/61f3ef7e2ab3f51d91316f99.jpg" alt=""></p>
<p>补上了之后发现一个小问题，我没在版本管理里面发现我的版本…</p>
<p><img src="https://pic.imgdb.cn/item/61f3efb92ab3f51d9131b2d1.jpg" alt=""></p>
<p>不过确实帮助自己熟悉了一次业务吧</p>
<p><del>可能还是 JS 太菜了，看不懂代码</del></p>
<h1 id="如何应急处理"><a href="#如何应急处理" class="headerlink" title="如何应急处理"></a>如何应急处理</h1><ul>
<li>如果你负责运行维护小程序. 此时志愿者群有人反馈答疑订单中心无法正常打开, 一直显示请稍等, 你会如何进行应急处理？</li>
</ul>
<p>老实说，这个问题是我能想到最基本、最可能出现的问题了。让我来的话：</p>
<ul>
<li>需要答疑的双方都对答疑界面进行截图，然后将双方的截图直接提交给我，我在修复 bug 后手动添加到数据库里</li>
<li>另一方面，随时对数据库进行备份，防止自己在紧张的 debug 过程中误删</li>
</ul>
<p>应急之后：</p>
<ul>
<li>至少应该在公告上道歉，然后附带一个文章链接说明为什么会出现这个错误，留给懂相关技术的同学讨论</li>
</ul>
<h1 id="功能开关"><a href="#功能开关" class="headerlink" title="功能开关"></a>功能开关</h1><ul>
<li>如果你需要实现一个功能开关, 用户可以在小程序上开启或关闭某功能, 你该如何<strong>在现有代码基础上</strong>编写前端代码以及进行相应数据库的改动？</li>
</ul>
<p>我的天，这个问题蛮有意思。我其实很好奇，是否能够利用类似于 hexo 这类框架的源代码实现这个功能？</p>
<p>还涉及到了代码重构问题，等我水平再高一些再来思考这个问题。</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>答疑坊</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>高三学习困惑突围</title>
    <url>/2022/01/25/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%AB%98%E4%B8%89%E5%AD%A6%E4%B9%A0%E5%9B%B0%E6%83%91%E7%AA%81%E5%9B%B4/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p>这是 2021 年的情系母校工作，现在重新 copy 了一份，拿出来分享给成外的后来人。</p>
<p>如果你还想看我对情系母校这件事情的看法，可以查看这一段的网页源代码。</p>
<!--还是觉得，情系母校这件事情，就和支教一样，每年炒冷饭就够了，自己还是应该想办法提升给人讲题的能力。-->
<!--看来下学期答疑坊得好好干了，但是这真的有助于当 TA 吗？可是现在考虑 TA 也太远了吧，走一步看一步吧。-->
<h1 id="语文议论文写作如何能得到高分"><a href="#语文议论文写作如何能得到高分" class="headerlink" title="语文议论文写作如何能得到高分?"></a>语文议论文写作如何能得到高分?</h1><p> <strong>Alan</strong>：这个问题让我回想起我一诊时惨不忍睹的语文作文。恰好高三上的寒假，我疯狂<strong>训练了一个假期</strong>的议论文写作，<strong>写完并修改了大概15篇</strong>，饶有收获。</p>
<p>个人的建议是：</p>
<p>①<strong>多加练习</strong>，特指高考真题或老师认可的质量极佳的模拟题，以及不单单是练习，<strong>反复修改</strong>到臻于自己的完美，更为重要。</p>
<p>②<strong>和老师同学交流</strong>：这点当然不仅适用于议论文写作。首先是和老师交流，直观地讲，老师负责批阅作文，能与阅卷人直接交流，何乐不为？其次，不与同学交流你永远无法得知其实他们有着许许多多奇妙的点子。我个人以前写作文就是一个无脑吹社会主义好的类型，后来与许多同学交流后才逐渐发现，其实作文题目看上去都是高大上的主题，其实在其中有着<strong>非常多的门道</strong>，绝对能够深刻地反映一个学生的思想与写作水平。</p>
<p>③<strong>他山之石，可以攻玉</strong>：印象中，我们年级最后时刻发了一本衡中的议论文写作指导，那本绝对是奇书。可以去问问我们这一届老师是否还记得那本书，为自己添置一本。<a href="https://cloud.tsinghua.edu.cn/d/629d34437a39481183c1/">我在此处附上我高三时的资料夹</a>，里面有衡中的早读材料与自己收集的议论文资料，供大家下载学习使用。</p>
<p><strong>Nick</strong>：两个字：<strong>多写</strong>。（当然<strong>写完要给老师看，然后再改，一直改到老师觉得你这篇文章有50+的水平为止</strong>。这里建议拿<strong>历年高考题</strong>来练手。最后安利一本资料：《创知路高考语文学院资料议论文写作》）</p>
<h1 id="理综时间不足如何抢救？"><a href="#理综时间不足如何抢救？" class="headerlink" title="理综时间不足如何抢救？"></a><strong>理综时间不足如何抢救？</strong></h1><p><strong>Alan</strong>：我本人没有过时间严重不足的经历，但是我的室友确实长期做不完理综题（Nick也是我的室友，嘻嘻嘻嘻）。</p>
<p>吸取总结他人经验，我能说的是：理综时间不够很多时候来自做题时<strong>不良的谨小慎微的习惯</strong>。私以为，我们学习需要培养的是基于<strong>对一类题型熟悉而产生的谨慎与细致，而不是谨小慎微</strong>。</p>
<p>我在二诊数学考试时，由于担心自己立体几何因计算错误而失分，反复立体几何题检查了3遍。最后不仅错了立体几何，导数和解几也没做出来。后来听取了数学老师的意见，了解到其实可以<strong>通过规范步骤书写，重点易错点检查来快速确保一道题的正确性</strong>。（譬如立体几何仅重点检查法向量）</p>
<p>同样的方法也适用于理综考试，反思下自己是否有一道题检查三次及以上的坏习惯，然后思考下如何<strong>在最短的时间里确定自己的计算是否有误</strong>（思考下我上文所述的<strong>重点检查点</strong>），以及<strong>培养自己对于计算的绝对把握能力</strong>。</p>
<p><strong>Deism</strong>：不用太担心啦，大家都是从时间不够一步步变得心里有数的。</p>
<p>我给出几个小方法：</p>
<p>1、<strong>定时训练并反思</strong>。物理生物化学选择题各需要多时间？物理实验题需要多少时间？化学一道大题需要多少时间？生物大题一共需要多上时间？把各种题的时间加起来是否超过理综总时间？如果超过了，哪一类题耗时过多？</p>
<p>2、<strong>有计划的刷题，逐步突破。</strong>每次可以选择一套试卷中一部分题，包括自己熟练的也包括自己不熟练的部分，不必每次都刷一套完整的卷子。熟练的部分是为了找到手感，不熟的部分是为了寻求突破。</p>
<p> <strong>Grace</strong>：我最开始就是理综时间不足的典型代表。要把理综做快做准，首先要<strong>知识点熟练</strong>。我记得刚从化竞回归的时候，知识点想不起来，甚至还有没学的，每个选择题都要卡很久，更不要说大题、实验题这些的。后来加入一轮复习，把高中内容都重新学了一遍过后，知识点这方面就要好很多了。</p>
<p>然后就是<strong>把题做熟</strong>。一轮复习结束之后进入到高强度的理综训练中，疫情期间也抓得很紧。返校过后每周至少做2套理综，平时还有各种单科练习，慢慢的手感就有了，每道题的切入很快，基本上看到题就可以想出思路。</p>
<p>当然，<strong>做题的策略</strong>也很重要，可以在平时练习的时候尝试不同的做题顺序（比如全部顺着做、按科目做等等），然后找到一个顺手的。Anyway,<strong>跳过不会的题是基本准则</strong>！（可以假定一定时间内做不出来就是不会）</p>
<p><strong>Moon</strong>：<strong>懂得放弃一些题</strong>，例如大题的最后一问，但是物理的大题建议<strong>先写写过程</strong>，因为过程分挺重的；生物<strong>简答的部分还是不要空了</strong>，但是<strong>计算题可以考虑放弃</strong>以确保其他题的收益；化学与生物同理。通过<strong>放弃一些题目争取到时间后，就专注于把题做对</strong>，而不是做快而弥补时间。</p>
<h1 id="论述原因类的化学大题失分惨重，如何解决？"><a href="#论述原因类的化学大题失分惨重，如何解决？" class="headerlink" title="论述原因类的化学大题失分惨重，如何解决？"></a><strong>论述原因类的化学大题失分惨重，如何解决？</strong></h1><p><strong>Alan</strong>：化学论述题和生物论述题在回归课本方面有着挺大区别，但是<strong>总结某类答案</strong>是共同的。我们年级使用过<strong>步步高的二轮复习资料</strong>，那本书上的原因总结题回答的很棒。可以看看能否找到那本书。</p>
<p><strong>Grace</strong>：赞同Alan，<strong>课本和复习资料都是很重要的</strong>。但是对于一些没有标准套路的化学问答题，就要根据<strong>上下文推断</strong>。<strong>高考题里面的原因题可以把答案背下来</strong>，至于一些<strong>模拟题就选择性地吸取经验</strong>咯。</p>
<p><strong>Moon</strong>：<strong>背题，掌握句式和套路之后开始试着创新</strong>，具体题目找到<strong>关键的那个变量</strong>，再套进去。</p>
<h1 id="语文论述类文本犹如看天书，是否有什么方法可提供？"><a href="#语文论述类文本犹如看天书，是否有什么方法可提供？" class="headerlink" title="语文论述类文本犹如看天书，是否有什么方法可提供？"></a><strong>语文论述类文本犹如看天书，是否有什么方法可提供？</strong></h1><p><strong>Alan</strong>：这点Nick同学能够为大家提供丰富的经验。个人的想法是：高考前很多班会买高等教育出版社出版的官方的<strong>高考试题分析</strong>。那本书上详尽地讲了近三年的每道高考题，一定要当圣经来读！！！我就是在那本书上才发现，我一直把论述文当做Yes/No question，大错特错。论述文每道题前面的<strong>题干</strong>，比如“下面关于文章论述思路的选项中，正确的是（）”你的思考方向绝对是那一句“关于文章论述思路”，所以如果你觉得某个选项有推断错误，那一定不是这道题的答案。（同样的思路也适用于文学类文本阅读的那道选择题）</p>
<p><strong>Nick</strong>：这里建议参考本人高三时自行总结的<strong>《论述类文本阅读常见设问方式》</strong>或者<strong>《现代文阅读提要》</strong>。当时我把前者发过给少部分同学，收到的反馈都很不错。对于我本人而言，自从我总结了这个东西以后，论述类文本基本上没有再错过。如果有，那只是因为题目本身不够严谨。（其实意思是说其实自行总结很重要hhhh），碰巧在Alan的清华云盘里qwq<br><strong>Moon</strong>：议论文只有<strong>两个中心</strong>：thesis（论点）和evidence（论据），围绕这两点有论证方法，论证方式等等，但一切是为了让读者读懂的，先<strong>抓住这条主线</strong>，<strong>做一个读者</strong>，才能读懂作者的意思</p>
<h1 id="生物原因论述题束手无策，如何找到突破口呢？"><a href="#生物原因论述题束手无策，如何找到突破口呢？" class="headerlink" title="生物原因论述题束手无策，如何找到突破口呢？"></a>生物原因论述题束手无策，如何找到突破口呢？</h1><p>Alan：扪心自问，生物课本你真的掌握了吗，水的五点作用你真的背完了吗？生物论述题回归教材是个必然，其他的方法和化学相似，总结某类答案，然后加入你的记忆清单。</p>
<p>Deism：三点建议。1、课本原话记忆。2、因果关系完备。3、寻找高考原题中的规律。不仅仅是考题中原因分析题的答案，还包括题干叙述、选项分支。</p>
<p>Moon：支持Deism，原话占70%，应变的部分占30%，要有大概的感觉。</p>
<h1 id="理综选择题出现弱智失误，失分惨重，如何解决？"><a href="#理综选择题出现弱智失误，失分惨重，如何解决？" class="headerlink" title="理综选择题出现弱智失误，失分惨重，如何解决？"></a><strong>理综选择题出现弱智失误，失分惨重，如何解决？</strong></h1><p><strong>Alan</strong>：什么叫做弱智失误？<strong>所有的失误都不弱智</strong>！我自己高考的时候，因为解三角形的选择题把三角形画在题边上，差点直接葬送了5分。我的理解是，<strong>要么是习惯不好，要么是没学到位</strong>，尽量少归咎于状态不好，这样很难找到提高自我的方向。把原因分析好，归于前两点，再想办法解决。（比怪罪智力因素好很多辣）</p>
<p><strong>Deism</strong>：我也说不清什么才算弱智错误，选择题错了就算弱智错误？玩笑话。<strong>即使是一个你考后能马上反应过来的错误，也不不意味着是一个弱智的错误</strong>。有一个小方法，把你认为的弱智错误写在同一个地方，用画正字的方法来<strong>记录自己错误的次数</strong>。考前担心自己犯低级错误时，就把记录在案的错误拿出来看一看。</p>
<p><strong>Grace</strong>：做理综选择题的时候不要想它值多少多少分，也不要去想自己要做得多么多么地快好留时间检查，就<strong>全身心地投入到这道题当中</strong>，按照自己以往的节奏做题就好了。在集中注意力的情况下往往不容易出现大的纰漏。</p>
<p>我个人觉得最<strong>后能留个5分钟来检查答题卡填涂</strong>就很合适（考号、每道选择题选与涂是否一致，这些错误带来的负罪感是最大的）。当然，也可以在平时生活中注意<strong>养成细心、周全的思考习惯</strong>，简单地说就是不忘事。至于怎么才能做到，可以当个清洁委员【滑稽】，这样每天都要思考是不是有灯没关饮水机插头没拔黑板没擦白板没关空调没关垃圾没倒……一定可以帮助你成为一个谨慎的人！【狗头】</p>
<h1 id="数学计算题失误，请问如何解决？"><a href="#数学计算题失误，请问如何解决？" class="headerlink" title="数学计算题失误，请问如何解决？"></a><strong>数学计算题失误，请问如何解决？</strong></h1><p><strong>Alan</strong>：首先是养成<strong>良好的草稿习惯</strong>，草稿需要具有<strong>可复查性</strong>。第二，做数学的时候不要想着“不要算错”，而是<strong>思考“我在哪儿错过，这次我肯定注意到了”</strong>。我自己就是这样不断<strong>反思</strong>，发现了自己数学的长期计算失误可能来自哪些地方。譬如立体几何的法向量计算、选修题的坐标是否写对etc…</p>
<p><strong>Grace</strong>：这个问题和理综选择题出现失误差不多，可以参考一下上个问题。</p>
<p><strong>Moon</strong>：一般是太紧张了，先放一放，等<strong>心理平稳了再算</strong>效果会好一点。</p>
<h1 id="在学习过程中经常遇到某段时间重点学习某门科目之后导致其他科目倒退的情况，该如何处理？"><a href="#在学习过程中经常遇到某段时间重点学习某门科目之后导致其他科目倒退的情况，该如何处理？" class="headerlink" title="在学习过程中经常遇到某段时间重点学习某门科目之后导致其他科目倒退的情况，该如何处理？"></a><strong>在学习过程中经常遇到某段时间重点学习某门科目之后导致其他科目倒退的情况，该如何处理？</strong></h1><p><strong>Alan</strong>：这恐怕是高三最常见的状态之一。我们很多时候会发现，自己因为学习劣势学科会导致优势学科退步。用钟俊宇同学的话来说：“那可能是你<strong>两门学科都没学好</strong>。”</p>
<p>虽然如此，我还是认为，找到<strong>关键平衡点</strong>很重要。有些同学在弥补学科劣势的同时，往往选择优势学科作业也不做的学习方式，我个人并不太认同。以及，这个问题可以多多<strong>找具体的任课老师交流</strong>，高三的老师都是很理智的，不会有很自私地只追求单科平均成绩的想法。</p>
<p><strong>Nick</strong>：很简单，做个<strong>计算题</strong>：进步的分-退步的分=净得分。净得分&gt;0，那么其他科退步也可以接受，下一阶段再“重点学习”退步科目。净得分&lt;0，建议不要“重点学习”某门科目而是<strong>均衡发展</strong>。某一门科目弱其他科目强一样不会差；很多科目弱就更谈不上什么“重点学习”，还是好好均衡用力吧。</p>
<p>（本质取决于你对于“重点学习”的定义与掌控。）</p>
<h1 id="时常感到自己一段时间的努力没有起到正面效果，反而有所退步，请问如何破除这种心理困境？"><a href="#时常感到自己一段时间的努力没有起到正面效果，反而有所退步，请问如何破除这种心理困境？" class="headerlink" title="时常感到自己一段时间的努力没有起到正面效果，反而有所退步，请问如何破除这种心理困境？"></a><strong>时常感到自己一段时间的努力没有起到正面效果，反而有所退步，请问如何破除这种心理困境？</strong></h1><p><strong>Alan</strong>：高三本质上就是和这样的心理作战。我自己有三个想法：首先是把目标区分为<strong>左侧目标和右侧目标</strong>，右侧是排名等等<strong>上层建筑</strong>；左侧则是“熟记生物选修第一章”之类的<strong>具体目标</strong>。每当我感到退步的时候，我就在想，其实我也完成了很多左侧目标，不过是我的<strong>进步还没体现出来</strong>。还是借用我语文老师的话来说，全国三卷最喜欢那些踏实勤奋、落到实处的学生。学到自己的<strong>问心无愧即可</strong>。</p>
<p>然后，我的第二个想法就非常简单粗暴。每次发现自己怎么这么拉胯，我就会想：老天啊，这都整不死我，那你还能把我怎么样？每次这么想，我就觉得自己异常的理智，能马上平复心情，投入下一场战斗。</p>
<p>最后，第三个想法是一个忠告。永远不要想着这次都这么差了，不会再差了。这样的心理宽慰会让你以为只是运气问题。这么想，下次一定会更差。<strong>解决问题的方法是：这次出问题在哪儿，我该怎么解决？</strong>高三刚开学时，我们年级的郭健康老师曾教导我：高三的本质是“考试、发现问题、解决问题、再考试、发现下一问题、再次解决问题”的循环。希望这些话能给予备受打击的高三许多希望。</p>
<p><strong>Nick</strong>：你在努力别人也在努力，没有理由说只要你努力了你就能进步。努力换来的只是进步的可能性，可能性的大小取决于努力的方向和程度。在确保方向正确的前提下，尽最大可能的努力，才有可能收获进步。当然，你也可以选择松懈，只不过你看到的会是一堆比你优秀的人比你还努力。借用我们班主任王江老师的一句话：“努力只能决定你的下限。”你所能做的只是通过持续不断的努力来把下限提高。</p>
<p><strong>Deism</strong>：你如何去衡量进步与退步？单从物理实验也可以知道，<strong>单次测量的偶然误差是很大的。</strong>椭圆学好了，圆锥曲线还会考双曲线；圆锥曲线精通了，数学也不一定分数上涨；数学到无人之境了，总分也还包括语文、英语等等。我想说的就是，<strong>实力的进步和分数的进步是不同的</strong>。只有你在这个板块炉火纯青了，分数上才能立于不败之地。<strong>检验自己的成果也应分为两部分</strong>，近期专攻部分是否提升？擅长部分是否有所退步？<strong>每一步都走稳</strong>，才能走得更远。</p>
<h1 id="语文英语这种需要积累性的学科应该怎么提升？"><a href="#语文英语这种需要积累性的学科应该怎么提升？" class="headerlink" title="语文英语这种需要积累性的学科应该怎么提升？"></a><strong>语文英语这种需要积累性的学科应该怎么提升？</strong></h1><p><strong>Nick</strong>：首先我觉得，至少对于高考来说，<strong>英语并不需要太多积累</strong>。我自我感觉英语不好，高考一样考146。单词认不到文章读不懂其实都没啥关系，只要<strong>做题做得对就行</strong>了。至于如何做题做得对？<strong>刷题</strong>！通过刷题，知道有哪些题必须怎么做（比如阅读里面喊你选best title其实就只是问文章大意），学着接受出题人的一些很脑残的想法，<strong>按照很固定的考试套路来考试</strong>，英语的分不会太低。</p>
<p>当然，以上只是为了考试而学习的<strong>无奈之举</strong>。我进入大学学习academic writing后就切身地感受到什么出来混迟早要还的（同班一个上海学生轻轻松松得A，我勤勤恳恳学一学期才勉强混个A-）。但对于目前的高三来说，<strong>分数才是最重要的</strong>。高考英语不需要素养，不需要太多积累。</p>
<p>再说说语文，现在<strong>才开始读书已经来不及了</strong>，毕竟你们都不是只学语文这一科。同样地为了分数学习语文的话，<strong>直接上套路（答题方法）就完事了</strong>。套路掌握的好随随便便稳定110+。至于想要<strong>稳定120+的话，需要学会套路，更要走出套路</strong>。但无论如何请不要天真地一味相信提高“素养”来提升语文成绩。<strong>素养决定了你的上限，套路决定了你的下限。</strong></p>
<h1 id="英语课上课讲的红对勾和语法书感觉在考试中没啥鸟用，讲的和考的无关，该怎么办？"><a href="#英语课上课讲的红对勾和语法书感觉在考试中没啥鸟用，讲的和考的无关，该怎么办？" class="headerlink" title="英语课上课讲的红对勾和语法书感觉在考试中没啥鸟用，讲的和考的无关，该怎么办？"></a>英语课上课讲的红对勾和语法书感觉在考试中没啥鸟用，讲的和考的无关，该怎么办？</h1><p><strong>Nick:</strong> 有时间就做，没时间就不做，但是<strong>不要抄</strong>（抄作业很浪费时间的，我就经常因为不做英语作业被罚站）。高考时如果英语想要追求除了作文不扣分的话还是要好好做一下的。毕竟不是每年的语法填空都很简单，完形填空也不是每个空都很轻松。</p>
<p><strong>Alan</strong>：坦诚地说，我比较认同Nick的观点，确实英语学习有的时候与考试相去甚远，甚至存在完全正交的可能。（这句话需要各位学习了线性代数才能更好地理解。）但是，英语真的是我高三学的最不功利的学科，我甚至在高三最繁忙的时候还坚持每天背四级单词一个半小时，背了活活 121 天。（太强了—来自深渊的凝视）</p>
<p>说这些的意义不是劝你把大量宝贵的时间砸在英语语法上，而是希望你去想想，<strong>你希望在英语学习中看到什么？</strong>如果你希望见到自己英语成绩的提升，那无可厚非。我的建议是，刷五三上的例题与讲解，见效比学校英语课快很多。以及我在云盘上上传了一个名叫英语的文件，那是我二诊的英语总结，希望能够对你有所帮助。</p>
<p><strong>Deism</strong>：那你觉得什么有用？你觉得有用的你又记熟了吗？会用了吗？研究考试范围的想法固然值得肯定，但也需要<strong>警惕好高骛远</strong>的心理。</p>
<p><strong>Grace</strong>：还是有用的，并且和考试<strong>有一定的关系</strong>，语法填空就会考到。掌握了总是好的，而且高三英语课全部用来做题也很枯燥嘛，学语法就当换个脑筋。反正英语课上就跟着老师好好学吧，不会出问题的。 </p>
<h1 id="英语处于125分左右的瓶颈，英语听力每次都要错四五个，怎么办？"><a href="#英语处于125分左右的瓶颈，英语听力每次都要错四五个，怎么办？" class="headerlink" title="英语处于125分左右的瓶颈，英语听力每次都要错四五个，怎么办？"></a><strong>英语处于125分左右的瓶颈，英语听力每次都要错四五个，怎么办？</strong></h1><p><strong>Alan</strong>：英语听力我的经验更多是如何快速恢复个人最高水平，在提升最高水平这一方面没有突破性经验可供参考。推荐同学<strong>找英语老师谈一谈</strong>呢！</p>
<p><strong>Grace</strong>：英语听力<strong>平时可以多练</strong>。可以在网上找一些音频，存在mp3里面，平时上学、放学、排队打饭的时候就可以听（个人觉得china daily很不错，还有VOA慢速英语、TED演讲等等）当然最好还是<strong>找一些长段的时间</strong>，过于碎片化的时间很难进入一个专注的状态。走读的同学回家也可以下一些APP来听英语（我用的是喜马拉雅）。其实平时多听英语一方面练的是<strong>捕捉词语的能力</strong>，另一方面练的是<strong>专注的能力</strong>。后者在听力考试中极其重要！在听力的时候保持高度注意力的集中对正确率的提升有很大帮助。另外也可以做一些笔记，但是不能挤占听下一题或下一遍的时间。</p>
<p><strong>Moon</strong>：<strong>背单词打基础</strong>吧，问题不在听力上。</p>
<h1 id="理综做到中途心态崩溃，怎么办？"><a href="#理综做到中途心态崩溃，怎么办？" class="headerlink" title="理综做到中途心态崩溃，怎么办？"></a><strong>理综做到中途心态崩溃，怎么办？</strong></h1><p><strong>Alan</strong>:实际上<strong>任何学科都会有做到中途心态炸裂</strong>的情况。<br>那么送给你朱世衡老师给我的教导：<strong>永远记住，在任何时候，慌张对你都是没有意义的。</strong><br>具体而言，我会<strong>马上思考，我现在还能干什么</strong>，在最短的时间内，<strong>抢救当前的局面</strong>，以及<strong>马上行动</strong>。<br>以我个人为例，我在高考数学考场上经历了最短时间内最多次的心态炸裂。<br>首先是20年的数学填选题比往年偏难。一般情况下，三卷的填选我大概35min左右能够完全拿下。结果今年的选择我在放弃了12题（直接蒙了答案）的情况下，就做了40min。可以设想下我在考场上的状态，崩溃的边缘，<strong>第一次心态爆炸</strong>。那又有什么办法呢？我想起朱老师的教导，马上缓过神来，继续作战。<br>于是我第一次<strong>强行镇定自我，完成了后面的大题</strong>。同时，分别在做完了填空、大题第一部分、选修的时候三次做12题。可惜三次都以失败告终。<br>还剩40min，<strong>统共四次都没能做出12题，心情炸裂</strong>。但是别无他法，慌张又能解决什么？马上<strong>镇定自我，完成了解析几何和导数</strong>，还剩21min。<br>虽然心中有极度的不安，我还是选择了“富贵险中求”，<strong>最后一次冲12题。终于拿了下来</strong>，长叹一口气。我看了看钟，还有14min。心情相当不平静，有种奇妙的第六感隐隐作怪。<strong>第三次强行自我镇定，开始检查。</strong><br>很快我就发现了<strong>第一个致命的错误</strong>，我的数学第七题，一道解三角形的选择题——因为自己做题习惯不好，直接将三角形画在题边上，然后选了离“7”最近的顶点——做对了，但是选错了，活生生选错了。这样的错误我当然犯过，高三某一次月考，我是班上唯一一个做对了但是选错了生物选择题的人。当时老师宽慰我，这样小概率的事件最多发生一次，于是它再次发生在了高考场上。<br><strong>第三次心态爆炸</strong>，马上调整。<br>我平时是笃信最后15min不要大改答案的，于是反复检查了四次，确信是我涂错了，将它改了过来。还剩9min，我已经慌张地握不住笔了，但是又想起了朱老的教诲。<strong>第四次自我镇定，哪怕含着泪也要继续跑。</strong><br>这一刻，在众多解答题里，检查谁，我必须做出抉择。如同前文论述，我对绝对计算的把握自以为比较好，于是在<strong>考前我是有预案的。5min检查大题就会看计算是否有问题，如果只是10min以内甚至更短，那么一定是看是否有思路上的问题。</strong><br>于是，我很快做出了选择，<strong>检查选修</strong>，因为我感到这次的选修题第一题<strong>平时训练较少，可能存在问题</strong>。这时还剩下8min。<br><strong>第二个致命失误</strong>马上就暴露了，我竟然把x轴坐标和y轴坐标写反了。这样的错误，我在刚刚竞赛结束时的九月月考上便犯过。那时还是以为这个错误这辈子不会有第二次。当我意识到这一点时，还剩6min。<br><strong>心态完全炸裂，十分的选修可能会完全丢掉。</strong><br>突然想起，<strong>第五次强行镇定自我</strong>。<br>马上<strong>三次检查</strong>，确认了自己是写反了。提笔就改，甚至那时中间过程写的字我已经完全认不清楚，但我确信，我把答案写的异常清晰，一笔一划，像是在我极其镇定的时候所写一般无二。<br>做完这一切，还剩 3 min 。<strong>强忍极度的紧张与无穷的后怕，马上检查是否考号等填写正确、选择题是否有涂错等等。</strong><br>三分钟后，打铃。我像死一样瘫在座位上，可我明白，我赢了。在短暂的两个小时内，<strong>我五次战胜了自己</strong>，虽然如此艰难，甚至运气成分太大。可是，这就是我的答案。<br>永远记住，在任何时候，慌张对你都是没有意义的。</p>
<h1 id="竞赛回归高考如何调整？"><a href="#竞赛回归高考如何调整？" class="headerlink" title="竞赛回归高考如何调整？"></a><strong>竞赛回归高考如何调整？</strong></h1><p><strong>Alan</strong>：这个问题同样是长期困扰我的问题。<br>我得叙述下我自己的情况，我是20届竞赛班的极少数两年省二选手中的一员（然而实际上20届竞赛班的省二选手们出路都很不错，本文中三位来自化学竞赛班的作者全是省二得主）。说这个并不是打算比惨，也不是告诉你“竞赛没有任何意义，还不如高考考的好”，而是想告诉大家，并不是没有拿金银牌，没有进省队，甚至没有拿到省一人生就完了。恰恰相反，前一段人生经历的结束正是下一段奇绝的开始。<strong>“九死南荒吾不恨，兹游奇绝冠平生。”</strong><br>这是我想说的第一点，<strong>忘却来时路，只念归途。</strong><br>学习方面其实前面的具体问题谈的很多了，那我谈一些具体竞赛班同学的学习调整。首先，无论竞赛学的如何，两年到三年的竞赛学习必然给予了各位<strong>远超常人的学习能力</strong>，无论是对知识的<strong>体系化梳理能力</strong>，还是到了大学更加显著的<strong>自学能力</strong>，这些不仅是陪伴你度过高三的法宝，更是你大学学习的神器。<br>具体而言，我在竞赛学习中学会了如何<strong>广泛收集资料并将他们内化</strong>，于是有了我在文末附带的那些清华云盘里的资料。我在竞赛学习过程中，学会了如何<strong>详细地看书然后整理笔记</strong>，于是在高三的学习生涯中一直保持着这一习惯，并且自以为效果不错。（在华清大学大一上的课程中，整理笔记的能力同样给予了我惊人的<strong>速成能力</strong>。）<br>总的来说，你可以忘记你在竞赛中学习的许多可能与高考体系存在矛盾的知识，但是一定要带着那些一路陪伴你度过竞赛生涯的<strong>学习能力</strong>继续上路。<br>竞赛班的老师都是宝藏。（深情表白我的老师们）这点随着高三逐渐的推进，体现得越发明显。除了熊哥带领的竞赛班天团，恐怕也没有谁能铸造成外战斗机了。遇见学习上的困惑，事无巨细，其实都可以<strong>多去请老师解惑</strong>，不要自己憋在心里。也一定不要担心老师会把你狠狠地批评一顿，我现在回想起来，他们的的确确是我高三的引路人。（我甚至对我亲爱的生物卫老师出言不逊，她依然原谅了我幼稚的行为，给予了我在生物学习上的无限动力。）<br>借用熊哥的一句话：“能量是守恒嘞！”祝愿各位一切加油。成外战斗机，fighting！<br><strong>Grace</strong>：首先<strong>忘记竞赛荣辱</strong>，竞赛过程中得到的<strong>学习能力、抗压能力</strong>才是一直伴随着你的。如果竞赛结果不太让自己满意，可以告诉自己这没有什么，未来这样的挫折不会少的，免得以后回想起来自己笑话自己（没错以毒攻毒疗法对我超管用！）。<br>然后就是<strong>好好跟着老师走</strong>。<strong>相信老师</strong>，这个时候老师的计划和你应该有很大的重叠，所以没有太大必要出来单飞。如果有空闲时间，可以自己找高考真题做，但是切记定好时间，最好整套做。</p>
<h1 id="目标院系与自身水平差异过大，如何解决？"><a href="#目标院系与自身水平差异过大，如何解决？" class="headerlink" title="目标院系与自身水平差异过大，如何解决？"></a><strong>目标院系与自身水平差异过大，如何解决？</strong></h1><p><strong>Alan</strong>：这个问题题我的答案可能不太普适。推荐去b站看一看一位成外的上交学长的视频，找一找whynot TV，会发现宝藏。<br><strong>Deism</strong>：<br>1、努力学习提高自身水平<br>2、降低目标。我知道我说的是废话hhh，但不是假话。<br>如果你倾向于前者，就应该去想如何提升自己，<strong>不必去想目标有多么遥远</strong>。我相信你的选择，加油吧。<br><strong>Moon</strong>：Rise or Fall， To be or not to be. 肯定你<strong>自己说了算。</strong><br> PS：whynot TV yyds！</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a><strong>后记</strong></h1><p>三五好友、旧日同窗、一拍即合，遂成此文。<br>直到毕业了，我才明白成外人永远不会成外人这个道理。以及非常感谢那些在我绝望无助日子里帮助过我的师长与同学们。于是我们写了这些可以说是过来人经验的奇奇妙妙，希望能够有所帮助。<br>借用黄鹄举学长的歌词：我何德何能，衷心祝愿你一切都好。<br>成外加油！</p>
<h1 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h1><p>文末附上一些个人推荐的资料etc：<br>创知路公众号是宝藏，一定要关注“创知路教育帮”这个公众号。<br>议论文写作多读读人民日报，可以关注“人民日报评论”公众号。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>社工</tag>
        <tag>成外</tag>
        <tag>情系母校</tag>
      </tags>
  </entry>
  <entry>
    <title>清华园日记——第一部</title>
    <url>/2022/01/25/%E9%9A%8F%E7%AC%94/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0/%E6%B8%85%E5%8D%8E%E5%9B%AD%E6%97%A5%E8%AE%B0--%E7%AC%AC%E4%B8%80%E9%83%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天翻完了季羡林老先生大三大四时写的《清华园日记》</p>
<ul>
<li><p>1932.9.11 “我的稿子还没登出，妈的。“</p>
</li>
<li><p>”1932.9.23 “早晨只是上班，坐得腚都痛了。”这天他还说，“德华有喜”，他念大三的时候妻子就怀孕了。</p>
</li>
<li><p>1932.12.21 “说实话，看女人打篮球……是在看大腿。附中女同学大腿倍儿黑，只看半场而返。</p>
</li>
<li><p>”1933.4.29 “因为女生宿舍开放，特别去看了一遍。一大半都不在屋里。</p>
</li>
<li><p>”1934.3.13 “没作什么有意义的事——妈的，这些混蛋教授，不但不知道自己泄气，还整天考，不是你考，就是我考，考他娘的什么东西？</p>
<p>然而，这些不过是季老先生两年日记里的边角余料——<del>虽然我承认这些东西最吸引我了</del>——更多的内容记载了他读的书，做的研究，平日的写作，经济状况，日常生活。</p>
<p>自己现在跟当年的他一样大，边看边觉得自己很菜……</p>
<p>其实他的很多吐槽都是有道理的，当时和现在的清华都有很多槽点。</p>
<p>关于那些似乎有损他形象的话，季老先生是这么说的：</p>
<blockquote>
<p>“这些话是不是要删掉呢？我考虑了一下，决定不删，一仍其旧，一句话也没有删。我七十年前不是圣人，今天不是圣人，将来也不会成为圣人。我不想到孔庙里去陪着吃冷猪肉。我把自己活脱脱地暴露于光天化日之下。”</p>
</blockquote>
<p>受此启发，我也写个日记记录下我的清华园生活，这篇文章是清华园日记的第一部，主要记录了 2022 年初的生活——大二上学期结束后的寒假。</p>
</li>
</ul>
<h1 id="1-月-24-日"><a href="#1-月-24-日" class="headerlink" title="1 月 24 日"></a>1 月 24 日</h1><ul>
<li>早晨起来背单词，然后技能文档终于发布了，其实还是蛮开心的。 oop 文档毕竟折腾了这么久，反正致谢也写了。当然，可能大多数人都是看不懂我的致谢吧，anyway，就这样吧。</li>
<li>下午在支教，起床水了个PPT，完全照抄高三的那个暑假写的东西——现在觉得，高中自己还是蛮厉害的，不过那时候讲故事的能力还不太行<!--。顺带把支教的东西 post 到了成外的群里，不过我都觉得成外要寄了，按照每三年一次轮回的经验，其实和我关系不大。今年情系母校感觉也不太行，可能大家都不太上心吧，没人去 push happy ，也没遇到一个工作能力和 wygg 一样的 editor 。-->不过到了现在我才觉得，玩微信公众号真的是太 low 了，不过大一的时候我又能明白什么呢？</li>
<li>下午去锻炼，越来越有感觉了。锻炼完了和文琦去吃了紫荆地下，还挺好吃的，下次一定。和文琦简单聊了聊出国的事情，草<ul>
<li>我也觉得阿美利卡哪儿都不好，不过切换成本太高了，而且我自己挺想去看看，理由都叙述的太多了</li>
<li>文琦的 SRT 导师就是在狗家工作然后回国卷教职的，听上去特别有意思，年后一定去和文琦一起找人家聊聊——当然，这也很有可能幸存者偏差嘛。不过感觉自己多半还是要回国的，年龄大了自然。</li>
<li><!--不过，还是那个想法。回国之前，我要是还想有后代，那必然的得孩子出生在丑国，然后有了阿美利卡国籍再说，除非大陆不舔丑国留学生了。--></li>
<li><!--反正，我觉得自己对生育的看法还是不乐观，如果要生育，至少要为孩子兜底吧。海淀区户口可比阿美利卡国籍难多了，笑他妈死了--></li>
<li><!--还和文琦聊了聊绩点，感觉周围人绩点都蛮惨的，自己也好不到哪儿去。一些平时觉得还挺不错挺卷的人一个个吃一堆 3.3 3.0 ，给我搞麻了--></li>
<li>确实，绩点都快寄了，还科研陶瓷，哎，我都不知道怎么说，反正我觉得挺惨的</li>
</ul>
</li>
<li>晚上吃完饭回来摸了摸鱼，我超，换了以前还可以吃完饭看看书，结果就纯粹摸鱼去了，麻了。摸完鱼实验室开会，感觉前端太特么难了。自己的任务也挺 fly 的，不过我都看开了，不 fly 哪能算贵系嘛</li>
<li>实验室要调参，下载新的数据集到百度的服务器上，然后写网站，搭建环境然后学习 git 规范</li>
<li>晚上闲的没事情，去读了读 n+e 的博客，看得我自闭了。哎，一方面觉得事业或者说学业太特么重要了，另一方面又在想，我草，卷这么多图个啥，也许就是个小富即安，家庭美满呢？如果是这种追求，何必为难自己先成家再立业呢？淦</li>
<li>睡前最后读了读《非暴力沟通》，感觉我没读懂精髓，读了些语言美化的方法，不过读的也快，今天晚上开始记记笔记</li>
<li><!--ok ，其实写这段文字的时候已经是 1 月 25 日早晨 8:42 ，我在等着xx。草，感觉就是不想拖了，太累了， emo ...-->
</li>
</ul>
<h1 id="1-月-26-日"><a href="#1-月-26-日" class="headerlink" title="1 月 26 日"></a>1 月 26 日</h1><ul>
<li>现在是 1 月 26 日下午 15:02，在 AIR 半摸鱼半卷。昨天白天和百度 argue 了一整天，不得不佩服中国的办事效率，好在我是从派出所听了旁边小哥的话，直接去了百度总部，否则事情还特么得闹下去。</li>
<li>不得不佩服 zhz 真特么傻逼一个，我自己的心态也变了。以前还想着感化这些底层的臭虫，现在觉得中国互联网或者说中国底层就是这样，算了，没啥值得计较的，也是他格局太小了。</li>
<li>倒是挺感谢 lsq 的，虽然我和他不熟，不过确实，我想我的价值观的确能保护自己。换回来，在 QQ 空间 yygq 估计也不太好，sigh，所以以后垃圾就往博客里倒吧。</li>
<li>说回来，我建立一个微积分 push 群，每天 push lr 和 lsq 学微积分，还有软工小组的 push ，自己的软工还没动呢。</li>
<li>现在的问题是，答疑坊那边软工没动，然后 AIR 的软工也没动，自己还偶尔心心念念搞搞情系母校，实在是没时间。</li>
<li>昨天晚上和 xpr 聊了聊天，估计这段文字反正她也看得见。反正我的观点是，感情、亲情、友情最好互不打扰，否则给自己造成不必要的麻烦。</li>
<li>瑞涵姐也上科英。那我的队友可多了，这么想来，这是我组过男女比最低的队伍了。</li>
<li><!--今天上午把小作文给 yx 看了，确实心里其实冲动不多，也算是稀疏平常？sigh，很担心这样会伤害彼此，不过我觉得一切都说不准，开学再看咯。--></li>
<li>接下来呢，不能再摸鱼了，有几个事情确定下：<ul>
<li>保持一个合适的聊天频率吧，每天别超过 2h ，否则我想会带来不幸</li>
<li>锻炼完了一定拉伸，今天痛死了</li>
<li>保持合理的饮食，感觉自己完全放飞了饮食习惯</li>
<li>多陪陪爸妈聊天</li>
<li>答疑坊的软工做起来，DDL 心态了</li>
</ul>
</li>
</ul>
<h1 id="1-月-27-日"><a href="#1-月-27-日" class="headerlink" title="1 月 27 日"></a>1 月 27 日</h1><ul>
<li>现在是 1 月 27 日晚上 19:43 ，在 lf 寝室摸鱼</li>
<li>上午起床之后背单词，送 lambda 去冬奥会。路上抬箱子还把一个轮子给砸掉了，真的很不应该，下次小心。</li>
<li>晚上去给 slvv 邮寄了春联，然后自己选了两副春联，太好看啦</li>
<li>今天爸妈也说了支持我出国念书，但是或许不要去交换了。我也觉得花钱花的多，但是对于申请 ms 和 phd 都有挺有用的，<!--再去想想鸿雁计划的事情吧--></li>
<li>今天不得不怀疑，我自己真的适合做科研吗？又被昊哥 pip 了，不过确实上周也没干啥事。都特么去干吗了呢<!------感情，百度的那帮破事，然后支教，还有情系母校-->——我特么是傻逼吧</li>
<li>实际上，我不仅怀疑我适不适合做科研，也怀疑我是不适合做产业、前天去百度的经历可以说非常恶心了，我不希望我以后工作的地方如此。</li>
<li>不过也可能是，我现在还处于啥都不清楚的状态吧，可是科研真的是这样子吗？我感觉挺迷茫的，或许会有人能指点下自己呢？</li>
<li>等义淮哥回来问问他呢？</li>
<li>今天给情系母校写了推文，哎，就这样吧。不管他们读不读，我都不干活了</li>
<li>今天上午在背单词，感觉还不错</li>
</ul>
<h1 id="1-月-28-日"><a href="#1-月-28-日" class="headerlink" title="1 月 28 日"></a>1 月 28 日</h1><ul>
<li>现在是 1 月 28 日晚上 18:46 ，在 lf 寝室摸鱼。没错，又是在 lf 寝室摸鱼。明天和 lf 约了下午的游泳，然后他三十号就回家了</li>
<li>今天上午背了单词，背了俩小时，确实很耗时间</li>
<li>下午做了做雷哥布置的答疑坊任务，感觉周围人都摆烂，没啥动静。其实也不是很耗时间，但是不得不佩服，微信开发小程序其实挺好用的，可能比 vs 这些差，但也不错</li>
<li>打算给软工小组写一写 javadoc 文档和 git 文档，用一些图形化 git 工具</li>
<li>下午在图书馆瞎逛游，借了几本美国历史、古希腊罗马历史、经济史的书，打算趁我的美国社会观察开始前多研究下</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f3ccab2ab3f51d910c457b.jpg" alt=""></p>
<ul>
<li><!--下午在图书馆，给我的感觉是，清华附中的学生比清华的学生都多。我仔细想了想，比起我，他们才算是清华园的主人。我不过是不幸地有幸在清华园度过四年青春的路人罢了，他们才是清华园的主人。反正我和这帮八旗子弟不会有，也不想有任何联系，早点毕业，早点眼不见心不烦--></li>
<li>晚上开始读新书啦！</li>
</ul>
<h1 id="1-月-29-日"><a href="#1-月-29-日" class="headerlink" title="1 月 29 日"></a>1 月 29 日</h1><ul>
<li><p>大清早起床已经是 9:12 了，吃完早饭，唠了一会儿嗑就到了 9:54，难得美好的周末，遂决意摸一摸鱼</p>
</li>
<li><p>昨天晚上从 lf 寝室回来后休息了下，和爸妈打了电话，然后写了写雷哥的作业。比我想的轻松，但是本地调试云函数还没成功。</p>
</li>
<li><p>然后和 ZGY 聊了聊天，发现周围人对于未来的规划欲望都没我强， ZGY 甚至看了我对出国美好的描述转而随性问我如何出国，emmmm</p>
</li>
<li><p>晚上边录入单词一边聊天太摸鱼了，效率和效果都不行</p>
</li>
<li><p>现在想想，接下来到开学前的英语规划吧</p>
<ul>
<li>每两天三个 chapter </li>
<li>第三天学一个 chapter</li>
<li>第三天余下时间录入四个 chapter</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: (<span class="number">25</span>/<span class="number">4</span>)*<span class="number">3</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">18.75</span></span><br><span class="line"><span class="comment"># ~~看上去非常棒！~~</span></span><br></pre></td></tr></table></figure>
<ul>
<li>昨天 random 地读了读四本书</li>
<li>《光荣与梦想》肯定不想读了，然后剩下三本都还不错，打算先读那本古罗马史</li>
<li>我决定把这个笔记公开，<del>然后不想给人看的地方就用 n + e 博客法</del></li>
</ul>
<h2 id="改变美国的时刻"><a href="#改变美国的时刻" class="headerlink" title="改变美国的时刻"></a>改变美国的时刻</h2><ul>
<li><p>我以为是从历史角度入手的，结果是从经济学角度入手的。第一章从 1900 年代的股灾开始——关于摩根如何操控美国经济命脉这件事情。我对具体的报道貌似不是特别感兴趣——这也让我怀疑自己是否真的适合潜下心来研究经济学。第一章第二篇就开始将老罗斯福忍无可忍，开始酝酿反托拉斯法。</p>
</li>
<li><p>不得不说，反垄断还是蛮有意思，纠正了我对丑国自由市场的认知，过几天这一章重点写读书笔记</p>
</li>
</ul>
<h2 id="光荣与梦想"><a href="#光荣与梦想" class="headerlink" title="光荣与梦想"></a>光荣与梦想</h2><ul>
<li>我以为那么厚一本书讲完 40 年的美国历史绰绰有余，但是翻开一看才知道我只拿到了第四册，讲述  1962 ~ 1972 的美国史。光是讲美国史就罢了，作者简直是写小说的人才，开篇讲某个总统就职，还场面描写了半天——换了中学我可能还喜欢，现在觉得有些浪费时间</li>
<li>仔细一看，作者自己说是蒙太奇，反正我觉得没法切入式的阅读——不是上下文无关文法</li>
<li>看了那么七八页的景物描写，算了，不读了。我其实更想读的是最近十年的丑国历史，或者整个 300 年间的丑国历史，结果看到这本细致入微的名著，确实不是我的菜</li>
</ul>
<h2 id="看图说经济学史"><a href="#看图说经济学史" class="headerlink" title="看图说经济学史"></a>看图说经济学史</h2><ul>
<li>这书有点日怪，我以为是认真讲经济学史，结果开篇给我讲了一章的亚历山大大帝，吹他多么 nb ，然后就没了</li>
<li>emmmm，看后面章节，还是有讲日本殖民时代经济史的，这个感觉还靠谱</li>
<li>不能说我对这本书毫无兴趣吧，只能说开篇不太吸引我</li>
</ul>
<h2 id="古希腊和罗马带给我们了什么"><a href="#古希腊和罗马带给我们了什么" class="headerlink" title="古希腊和罗马带给我们了什么"></a>古希腊和罗马带给我们了什么</h2><ul>
<li>蛮有意思一本书，我绝非一个精罗、精犹或是精美分子，读起来也算平静。</li>
<li>第一章讲了讲食物问题——可能是出于对干饭的热爱，反正我觉得不戳，也能看到一些饮食文化问题</li>
<li>居然还讲了讲暴食之罪，hhh，这个可比较有意思，下次记一记笔记</li>
<li>总体上感觉是一本社会学的书，还是蛮有意思，也比较轻松</li>
</ul>
<h1 id="1-月-30-日"><a href="#1-月-30-日" class="headerlink" title="1 月 30 日"></a>1 月 30 日</h1><h2 id="上午-10-01"><a href="#上午-10-01" class="headerlink" title="上午 10:01"></a>上午 10:01</h2><p><img src="https://pic.imgdb.cn/item/61f5eede2ab3f51d9123ef97.jpg" alt=""></p>
<ul>
<li>现在是 1 月 30 日上午 10:01，看看日历，破防了，昨天美美地进行了一个鱼的摸</li>
</ul>
<h2 id="昨天一整天"><a href="#昨天一整天" class="headerlink" title="昨天一整天"></a>昨天一整天</h2><ul>
<li><p>上午写了写日志，中午吃完饭打扫了寝室，还蛮干净的</p>
<p><img src="https://pic.imgdb.cn/item/61f5effb2ab3f51d91251b54.jpg" alt=""></p>
</li>
<li><p>中午边打扫寝室，一边听了听 b 站的历史播客，还蛮有意思，讲了讲兔子和阿美利卡干翻毛熊的故事</p>
</li>
<li>下午和 lf 去游泳</li>
<li>下午回来后倒腾了下 gitkraken 还有 yarn，现在还没有跑通，因为之前下载的 node_modules 的问题——没有虚拟环境的语言，太糟糕了</li>
<li>晚上 lf 请我吃香锅，听涛吃咖喱味，还真不错</li>
<li>和 lf 散步来聊了聊天，感觉很有共鸣，可能这就是帝都的同学见识广博吧。不过 lf 感觉还是很食人间烟火的</li>
<li>晚上田哥帮我调了调环境，我才发现 apple 的 screen sharing 很强大</li>
<li>昨天还找中加班的同学联系了下交换的花费问题，还和 wyd 聊了挺久，这个哥么很有意思，IC CS ，他说也想去读美硕来着，和我观点差不多，可以多联系吧</li>
<li>晚上发现实验室又有了好多新锅，真不戳，真不戳</li>
<li>读了读李导的总结——除了排版之外都挺打动人的，也看到了很多东北的落寞感——还和 ttn 讨论了下东北继续保持计划经济的可能，但显然这件事不可逆转</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f5f2642ab3f51d9127d002.jpg" alt=""></p>
<h2 id="下午-14-24"><a href="#下午-14-24" class="headerlink" title="下午 14:24"></a>下午 14:24</h2><ul>
<li><p>现在是 30 日下午 14:24 分，最近摸鱼摸得太严重了，然而实际上手头活还不少，orz</p>
</li>
<li><p>我把这个日记 rename 为了清华园日记，受到了季老先生的启发</p>
<p><img src="https://pic.imgdb.cn/item/61f632f92ab3f51d9167fc8e.jpg" alt=""></p>
</li>
<li><p>赵羡之啊赵羡之！你怎能如此堕落！先前订下的学习计划你都忘了吗？子曰：”吾日三省吾身。“不能再这样下去了！</p>
</li>
<li><p>上午开了两个会，一个是 discover 的网站，另一个是是 ECCV 的讨论</p>
</li>
<li><p>最近的锅：</p>
<ul>
<li>ECCV 需要读文件，然后跑实验</li>
<li>discover lab website 需要找到参数，然后实现相机移动</li>
<li>准备英文和中文的两份 CV </li>
</ul>
<blockquote>
<p>题目：华盛顿大学计算机系招收远程暑期科研实习生（自然语言处理，机器学习）</p>
<p>内容： Sheng Wang (<a href="https://homes.cs.washington.edu/~swang/">https://homes.cs.washington.edu/~swang/</a>) is an assistant professor in the Paul G. Allen School of Computer Science &amp; Engineering at the University of Washington. His group works on NLP and ML applications in biomedicine, including drug discovery, genomics, and scientific literature mining.<br>He is currently looking for (remote) undergraduate/graduate visitors in Spring/Summer 2022. If you are interested, please send an email with your CV to swang [at] cs (dot) Washington (dot) Edu.</p>
</blockquote>
<ul>
<li>科英！！！</li>
<li>锻炼！！！</li>
<li>处理发票</li>
<li>读 n + e 的博客</li>
<li>从 wyd 他们那儿摸清楚清楚交换的预算</li>
<li>挑战杯</li>
<li>torch！！！</li>
</ul>
</li>
<li><p>莫名其妙银行卡上多了 1425 元，很奇怪了。难道是技能文档的血汗钱，还是课咨委的血汗钱，还是学校的过年压岁钱——还是问清楚的好: update: 不是课咨委，貌似也不是学校给的，因为上 info 查过了</p>
</li>
</ul>
<h2 id="晚上-18-40"><a href="#晚上-18-40" class="headerlink" title="晚上 18:40"></a>晚上 18:40</h2><ul>
<li>现在是晚上 18:40，刚才锻炼完才回来，紫荆人还蛮多，本来想拍照的，但是摄像技能太差了</li>
<li>下午和一些成外的小学弟学妹们聊了聊，和我想的差不多，不断给文章添加 appendix </li>
<li>下午在学 js oop ，还和 xdjj 聊了聊——强如 xdjj ，春研去 UCSD ，感觉回国好麻烦啊，还有租房啥的</li>
<li><a href="https://overleaf.tsinghua.edu.cn/templates/">参考 xdjj 的 CV</a> ，上次奖学金答辩还是参考的人家的 PPT，打算也给自己写一个，用来投递到 UW 那边——就是觉得人家肯定需要能力特别强的学生嘛，以后也要认真科研的！</li>
<li>下午给 AIR 联系了年夜饭，去巴依老爷吃，爽死！</li>
<li>和爸妈视频了下，家人都挺支持我出国读书的，但是都说必须要回来</li>
<li><!--还是那句话，回来可以，至少子女得是阿美利卡国籍，不然太亏了--></li>
<li>上面那个 CV 链接要在校园网使用才行</li>
<li><!--架了这么久梯子，居然还不会全局模式和规则模式，草--></li>
<li>晚上发现支教的志愿居然没申请，差点就没工时了，我超，太不仔细了</li>
</ul>
<h1 id="1-月-31-日"><a href="#1-月-31-日" class="headerlink" title="1 月 31 日"></a>1 月 31 日</h1><h2 id="上午-09-00"><a href="#上午-09-00" class="headerlink" title="上午 09:00"></a>上午 09:00</h2><ul>
<li>今天是除夕，但是学校里人还蛮多的</li>
<li>一大早起床就想克服自己摸鱼的冲动，然而目前还想摸，不过考虑到两天没学英语了，都要 G 了，我超</li>
<li>早晨去紫荆，我想吃的卷饼🌯没有卖了，可恶！</li>
<li>好期待下午的年夜饭啊！！！</li>
<li>今天打算给大家写新年祝福—— Do it by myself！</li>
<li>下午去 AIR 找下六个视角，还有把 docs 9 的 js 学完</li>
<li>中午不吃饭了，睡一会儿，然后下午写祝福，写完祝福后去锻炼，锻炼完了去 AIR</li>
<li><!--昨晚和狗子聊天，ovo，好端端的咋就分了呢？突然觉得我对感情都麻了，到了好无感觉的程度--></li>
<li>昨天晚上抄英语答案，居然用了很久，这种细碎看似没有头脑的工作其实还满时间的</li>
<li>下午三点 discover lab 要开会——<del>大学生就该这样！</del></li>
<li>一定要和爸妈通视频，拍年夜饭</li>
<li>现在去填写这几天的文档了</li>
</ul>
<h2 id="下午-14-30"><a href="#下午-14-30" class="headerlink" title="下午 14:30"></a>下午 14:30</h2><ul>
<li>刷了两个 chapter 的词汇，半摸半卷吧，大概一章 1.5 h</li>
<li>现在开始给大家写祝福语，然后准备软工的会吧</li>
<li>开完会了就去锻炼，然后回来洗个澡，去 AIR——电脑都不带了，带上春联和书就好啦！</li>
<li>晚上回来读完 js 吧</li>
</ul>
<h1 id="2-月-1-日"><a href="#2-月-1-日" class="headerlink" title="2 月 1 日"></a>2 月 1 日</h1><h2 id="上午-10-40"><a href="#上午-10-40" class="headerlink" title="上午 10:40"></a>上午 10:40</h2><ul>
<li>昨天下午开完了需求讨论会，然后去自闭空间玩了玩，回来洗了个冷水澡就去巴依老爷吃年夜饭了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f89dcd2ab3f51d91750230.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f89dda2ab3f51d91750ace.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f89de42ab3f51d91751234.jpg" alt=""></p>
<ul>
<li>可惜自己不太会拍照，然后五个男同胞只顾着吃肉，太爽了！</li>
<li>可惜晚上聊天不是很多，都不太熟，感觉 AIR 的实验室还是很新，我也不太认识，不放确实表现了我交际花的能力</li>
<li>晚上去 AIR 本来想看电影，结果 b 站电视端的会员和移动端不一样，我草，退你妈，日钱！</li>
<li>昨天风特别大，骑车的时候挂死我了</li>
<li>晚上一边听拜年祭，<a href="https://zhaochenyang20.github.io/2022/01/31/%E9%9A%8F%E7%AC%94/bless/">一边写祝福</a>，印象里拜年祭还有蔡徐坤</li>
<li>发祝福发了一两个小时，直到 1 点才从 AIR 回寝室</li>
<li>想起来 ypgg 以前写的，从东主楼大半夜回宿舍的经历，颇有同感</li>
<li>下午收到了舅舅和幺妈的红包，可能对我还是挺重的，银行卡+基金都有 2.5 w 了，不必再找爸妈要钱了</li>
<li>问了问 wyd ，我理想中交换 7 w 以内能够拿下，要是交换一波能申请上硕士的奖学金，绝对是值得的</li>
<li>昨天发了不少祝福，大概能从每个人的回复里看出每个人的性格吧，比如昊哥</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f89f992ab3f51d917660c7.jpg" alt=""></p>
<ul>
<li><p>今年要是实习能有 1 w 的收入，还是要给家里弟弟妹妹们买些其他东西，挥发我枯竭的想象力</p>
</li>
<li><p>晚上一点钟看了看书，古希腊罗马那本书第一章看完了，讲了下饮食和住宿，金句不是很多，纯粹图个快乐</p>
</li>
<li><p>打开 QQ ，发现 yyb 给我打了电话，聊了一个多小时，几乎到了两点半，搞得上午 9 点才起床</p>
</li>
<li><p>聊了聊他和廖哥在南开的生活，还讨论了感情生活吧</p>
</li>
<li><!--都给我说高德森都上本垒了，我草，反正这厮死活和我也没关系，倒是心疼复旦那个菇凉-->
</li>
<li><p>说起来，昨天吃饭的时候，旁边一哥么讲了讲他的经历</p>
</li>
<li><!--某某比赛清华降一本，然后身体不舒服加上取消了自招，然后考到了山科，吐槽山东学生上 211 还是 985 要六百四五？-->
</li>
<li><p>emmmm，想了想，如果我没上清华，我估计也会这么宣传自己吧，虽然我觉得一听就很假，但是想了想，的确是如同前几天一个学妹给我讲的那样——面对上不了清北的恐惧</p>
</li>
<li><p>我又有什么资格批评人家呢，最多自己反思感慨下罢了</p>
</li>
<li><p>晚上和 lky 对接了下情系母校的事情，还是觉得——<!--他们摆烂太严重了--></p>
</li>
<li><p>还是觉得我们那一届强一些，wygg 的编辑能力感觉很厉害，我又去 push 全员，跳跳鸟就算不管事情至少也不摆烂啊，现在的成外小孩，我的评价是——<!--寄！--></p>
</li>
<li><p>说回来，和 lky 交流不太愉快，首先我们性格就不一样，其次自己的确没做到非暴力沟通</p>
</li>
<li><p>前天和一个学妹聊天也是，批评人家太狠了，虽然是双方都不会交流，但是自己责任也很大</p>
</li>
<li><!--那学妹说她报送排名第 6 只有南开读，我特么当时就很生气。首先我觉得保送排名第 6 是很强吗？反正我不觉得。其次，只有南开读，她看不起南开还要来抬高自己的身价，多少沾点…-->
</li>
<li><p>回到今天，上午起床写了写博客的 about 界面，然后记录了下各个笔记，现在已经是 11 点了，<del>打算美美地吃顿饭，然后进行一个大鱼的摸</del></p>
</li>
<li><p>我草！！！discover web！！！spectral uncertainty！！！advanced word power！！！SRT！！！概统！！！图形学！！！锻炼！！！</p>
</li>
<li><p>赵羡之啊赵羡之！你怎能如此堕落！先前订下的学习计划你都忘了吗？子曰：”吾日三省吾身。“不能再这样下去了！</p>
</li>
</ul>
<h2 id="16-18"><a href="#16-18" class="headerlink" title="16:18"></a>16:18</h2><ul>
<li>美美地进行了一个鱼的摸，上午 11:00 开始打算吃饭，结果发祝福发到了接近两点，然后一觉醒来已经接近三点了</li>
<li>起床洗漱了下，然后更新博客，然后更新了下电脑软件</li>
<li>打算学一会儿 js ，然后去锻炼</li>
</ul>
<h2 id="23-58"><a href="#23-58" class="headerlink" title="23:58"></a>23:58</h2><ul>
<li>学 js 给我学破防了，我草，异步好难！！！</li>
<li>明天说啥也要开始做项目了，不然我就寄了！！！</li>
<li>和勇哥聊了聊天，我的天，自己是不是对人的戒备心还是不够</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f959302ab3f51d91381cb4.jpg" alt=""></p>
<ul>
<li><!--感觉好像有点跑题了，我就说一句哈，就是如果你感到很容易和一个人交心，或者相谈甚欢什么的，这时候有可能你的防备心就慢慢放下了，就容易更多更深层面地吐露心声，有的情况的确是好朋友，有些情况对方只是为了套取你的一些信息和想法，所以要谨言慎行，比如说一句谎言不是独立存在的，为了掩盖这句谎言，前前后后会有很多情真意切轻松愉快的铺垫或收尾，我是不轻易和别人说这些，不同的环境，不同的话题，敏感程度不一样，仅供参考----太谨慎了也不好 容易没朋友，我觉得我以前通常给人的感觉可能比较简单真诚，后来我成熟一些就觉得想起从前的对话经常被套路，有些是同事，领导，或者对方是销售这我还理解毕竟利益相关，但是有些是亲戚，室友（非同学，毕业后合租的同龄人）之类的我就很。。。当然也不排除有些可能是我的误解，反正我看了一些历史故事加上自己的领悟就变得不单纯了。这种不单纯可以保护我（相当于一道防火墙？），也会让我不好和人做朋友很孤独。我刚才写这段你看看就好，也别很信，本身我也说不准，是不是和你现在或以后所处的环境那我更不知道，只是提供一种对人际交往的理解-->
</li>
<li><!--起因是因为自己的某篇笔记言辞激烈的批评了中国社会的一些弊病吧，然后还对贵系的硕士教育大放厥词-->
</li>
<li><p>确实用语不该如此直接，而且设的密码太弱智了，被人攻击要出大事情</p>
</li>
<li><!--sigh，勇哥突然给我说”我保存下来了“，吓死我了----当然我还是很信任他啦！-->
</li>
<li><p>晚上水了一章的英语，感觉要是速度快，的确一小时左右一篇，所以每天早晨好好学习！！！</p>
</li>
<li><p>去做古希腊那本书的笔记啦！！</p>
</li>
</ul>
<h1 id="2-月-2-日"><a href="#2-月-2-日" class="headerlink" title="2 月 2 日"></a>2 月 2 日</h1><h2 id="00：38"><a href="#00：38" class="headerlink" title="00：38"></a>00：38</h2><ul>
<li>偶尔和骚鸡打了个电话，他还是一样的骚气，头发看着特别离谱，估计上了大学就没剪过头</li>
</ul>
<h2 id="09：31"><a href="#09：31" class="headerlink" title="09：31"></a>09：31</h2><ul>
<li>昨天晚上写完了笔记，嗑了半小时杏仁啥的。我才想起来高中学的“氰化物是具有苦杏仁味的剧毒物质”还有马尔克斯写的”自然，苦杏仁的气息总勾起他对爱情不顺的结局的回忆”</li>
<li>晚上看了一个 b 站视频，讲一个哥么搞现实版的 GTA 6 ，然后被警察逮捕判刑 160 年，75 年内不得保释的故事——我的评价是：NB！</li>
<li>大晚上躺在床上睡不着，总觉得这一天缺了点啥，思前想后，发现这一天没和一个人说过话——除了微信电话，的确没和人说过话</li>
<li><!--不知如何回忆起了 ex ，突然觉得我现在的生活换做她会很开心吧。我无法理解一个人如何与世隔绝，自我封闭，而她无法理解我对陪伴的渴求。可能大家都是这样吧，没法理解彼此就散了--></li>
<li><!--不过上帝为什么这么恶毒，却要让我和她遇见彼此呢，如果这段关系对彼此都是伤害，那上帝真的是可恶至极--></li>
<li>继续学英语去了！</li>
<li>今天死也要开始给项目调参数了，不然会被骂死，不过找田哥确认下 ECCV 的事情，最迟多久…</li>
</ul>
<h2 id="15-44"><a href="#15-44" class="headerlink" title="15:44"></a>15:44</h2><ul>
<li>在图书馆半摸半学</li>
<li>下起床后给骚鸡和洪哥打了电话，给骚鸡安利了 KAUST 然后去瑞典的路线，还和洪哥聊了聊</li>
<li><!--我的观点很明确，学医救不了中国，实际上学啥都救不了中国--></li>
<li><!--成年人的观点不该是各取其半吗？我需要中国的人际关系，需要美国的高收入和中国教育向阿美利卡的跪舔--></li>
<li><!--洪哥想学神经科学然后救人类，我觉得不靠谱，他自己都心里明白，而且家里人也不支持，他也想出国来着--></li>
<li>自己在图书馆调参数，还是觉得心里欠欠的</li>
<li>快要两天没和人说过话了，果然不是很能接受这种生活</li>
<li>继续调参</li>
</ul>
<h2 id="16-25"><a href="#16-25" class="headerlink" title="16:25"></a>16:25</h2><ul>
<li>在北馆三楼的书架里四处逛游</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fa40312ab3f51d91ef0905.jpg" alt=""></p>
<ul>
<li><p>感觉对这四本书都不是特别心水，最多对那本讲述美国风景的书喜欢些，其他的书，想了想，就不必带走了</p>
</li>
<li><p>想把讲述美国风景那本书带走，也是因为想多了解下吧</p>
</li>
<li><p>说到底，我并不喜欢阿美利卡</p>
</li>
<li><p>看到许多安妮宝贝的书，我记得小时候，有人说我的文笔像安妮宝贝，翻看一看，真的挺像的</p>
</li>
<li><p>小孩子那种温柔易碎的文笔，那时候觉得特别美好，现在拿起来回温了下，就放了下去</p>
</li>
<li><p>回不去啦，也不想回去—— 也许这个社会更适合历史唯物主义者生存吧</p>
</li>
<li><p>调下参数，然后就去锻炼吧</p>
</li>
<li><!--突然想起来，端都 20 岁啦，忘了给她生日祝福，实际上感情变的太零碎了吧，初中的感情能够持续三年给含先生送生日礼物，实际上初恋也没能维持一年，没到生日之前彼此就已经永别-->
</li>
<li><!--端都管计算机叫做宇宙机-->
</li>
</ul>
<h1 id="2-月-3-日"><a href="#2-月-3-日" class="headerlink" title="2 月 3 日"></a>2 月 3 日</h1><h2 id="00-00"><a href="#00-00" class="headerlink" title="00:00"></a>00:00</h2><ul>
<li>高高兴兴的今天做完了今天的事情！啊不对，已经是昨天了</li>
<li>每天学俩英语还挺快乐</li>
<li>昨天调路线还调的不错，难度不大</li>
<li>打算看看《改变美国的时刻》就睡了！</li>
</ul>
<h2 id="10-02"><a href="#10-02" class="headerlink" title="10:02"></a>10:02</h2><ul>
<li>早晨貌似 9:18 醒的，看来一天睡 6 h 不现实，hhh</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fb380e2ab3f51d91ce6323.jpg" alt=""></p>
<ul>
<li>睡前和 lr lsq 他俩扯了会儿皮，今天研究下引体和短跑怎么练习</li>
<li>晚上读了读《改变美国的时刻》，不太符合我的期待，只能说一般般</li>
<li>我们家终于有家庭群了，哈哈哈</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fb388b2ab3f51d91cec84a.jpg" alt=""></p>
<ul>
<li>今天凌晨朝阳区地震了，我很好奇，感觉北京不该建在地震带上啊，不过旧金山都能大地震，也合理</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fb38d42ab3f51d91cf095e.jpg" alt=""></p>
<ul>
<li><p>去摘录英语了</p>
</li>
<li><p>今天把路线设计完，争取学一点 js 异步，明天开始概统了</p>
</li>
<li><p>终于把实验室的东西差不多 dd 完了，还有 torch 必须要看！</p>
</li>
</ul>
<h2 id="10-31"><a href="#10-31" class="headerlink" title="10:31"></a>10:31</h2><ul>
<li>摘录英语的时候觉得这句话说的很对：</li>
</ul>
<blockquote>
<p>A famous piece of advice: When you are furious at someone, write him or her a vitriolic letter, using the ugliest, most cutting words you can find. Read it over to make sure it’s as hateful as you want. Then tear it up and throw it away.</p>
</blockquote>
<ul>
<li>这让我想起来《你不可不知的人性》里的一句话：</li>
</ul>
<blockquote>
<p>是的，我相当原谅他们。</p>
</blockquote>
<h2 id="15-07"><a href="#15-07" class="headerlink" title="15:07"></a>15:07</h2><ul>
<li>实际上睡到 1 点就醒了，还蛮不错</li>
<li>摸鱼聊天到了 2 点，本来想写个死侍的台词合集，结果 typora 的格式化功能属实垃圾，遂放弃</li>
<li>写了个<a href="https://zhaochenyang20.github.io/2022/02/03/%E9%9A%8F%E7%AC%94/%E4%BA%94%E9%81%93%E5%8F%A3%E4%BD%93%E6%A0%A1%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E7%94%B7%E5%AD%90%E4%BD%93%E6%A0%A1%E4%BD%93%E8%82%B2%E8%AE%AD%E7%BB%83/">体育训练指南</a>，希望自己能坚持</li>
<li>起床加了两家留学中介的微信——再来人和棕榈大道，本质上就是货比三家嘛，之后再去炸一波</li>
<li>开始调路线啦！</li>
</ul>
<h2 id="19-20"><a href="#19-20" class="headerlink" title="19:20"></a>19:20</h2><ul>
<li><p>设计完了线路，下一步要实现动态效果了</p>
</li>
<li><p>在这之前，先折腾下异步好吧，球球了</p>
</li>
<li><p>晚上莫名其妙查了查 CS ranking，可能是为了之后和中介交流吧，可能现在心里的想法是：</p>
<p><code>UW ~ UIUC ~ GT ~ UCLA ~ UT-Austin ~ UCB ~UCI ~ UCSB &gt; CMU</code></p>
</li>
<li><p>偶然间翻 US NEWS 的 CS ranking，看到东北大学，还在觉得很烦</p>
</li>
<li><!--还是为了以前的破事情吧-->
</li>
<li><p>不查了，妈的，连一个能够标注学费的靠谱的 CS ranking 都没有</p>
</li>
</ul>
<h2 id="23-38"><a href="#23-38" class="headerlink" title="23:38"></a>23:38</h2><ul>
<li><p>和凯凯打了通电话，想了想，说不定以后可以去成都腾讯实习呢</p>
</li>
<li><p>吐槽了下现在中国游戏的发展现状，追忆了小时候的游戏快乐</p>
</li>
<li><p>写了个碰瓷的记录，打算碰 6 家中介的瓷</p>
</li>
<li><p>中介的钱都够我去加拿大玩一圈了，还是加拿大香多了</p>
</li>
<li><p>看廖雪峰的 blog 终于看懂了 js 的异步，不得不说，他讲的很清楚，阮一峰的博客太老了( 2012年 )，docs 9 简单了些，廖雪峰的讲的就蛮清楚</p>
</li>
<li><p>最近还是该去一次 AIR ，<del>至少找 Lee 要红包</del></p>
</li>
<li><p>突然觉得，删人好友真的挺恶心的，sigh，也没办法了吧</p>
</li>
<li><p>之前把 cpy 删了，之后估计答疑坊还要和他扯皮，好好给他道个歉</p>
</li>
<li><p>觉得恶心的是 shy 吧，上完课就把人删了，我给他发新年祝福，特么的</p>
</li>
<li><p>今天摸鱼摸的厉害，整理梳子用了半天，最后直接把梳子扔了解决时间浪费问题</p>
</li>
<li><p>继续摘录英语呗！</p>
</li>
</ul>
<h1 id="2-月-4-日"><a href="#2-月-4-日" class="headerlink" title="2 月 4 日"></a>2 月 4 日</h1><h2 id="上午-09-42"><a href="#上午-09-42" class="headerlink" title="上午 09:42"></a>上午 09:42</h2><ul>
<li><p>昨天晚上上床前和  lsq 聊了聊，稍微扯了扯时代风口的问题——说实话我觉得新能源是时代的风口，政策和技术双赢的那种，但是<!--新能源是否和能动专业挂钩我就不知道了，就像自动驾驶关乎计算机、自动化和机械，无关车辆一样--></p>
</li>
<li><p>晚上睡前继续读《改变美国的时刻》，觉得这个作者写书的年代好奇怪啊，觉着距离现代中国社会好远了，特别是他讲 20 世纪初期匹兹堡、纽约的污染问题，然后提到了”现在的“山西，我以为这书还停留在上世纪末期，结果翻到书末未看看，这是 2013 年出版的书，尽管在你清图书馆搞得纸都黄了——不过也能理解，2014 年我刚上初中的时候，成都的空气污染都挺糟糕的吧，2015 年第一次看了柴静的《穹顶之下》，那时还觉得很可怕，佩服柴静。所以 2013 年的书，写污染严重也能理解，但是中国发展还是太快了</p>
</li>
<li><!--说起来，柴静貌似也是赴美生子🐴，搞了半天，我小时候觉得鄙夷，现在觉得无奈而明智-->
</li>
<li><p>联系到碳中和的事情，时代发展太快啦</p>
</li>
<li><p>打算给昨天看的碳中和的视频做个笔记</p>
</li>
<li><p>其实《改变美国的时刻》…</p>
</li>
</ul>
<h2 id="下午-13-12"><a href="#下午-13-12" class="headerlink" title="下午 13:12"></a>下午 13:12</h2><ul>
<li>上午刚写完了”其实《改变美国的时刻》…“这句话之后，就开始碰瓷了，先是新东方，服务态度挺好的，给了我一些新的信息，启发倒是谈不上，主要是信息吧</li>
<li>新东方那边 2 月 7 日给我一些资料，<del>我正月十五之后再拒掉人家</del></li>
<li>我草，安慕希的吸管太拉垮了，喝到一半中间连接的地方脱了。。。</li>
<li>然后是棕榈大道，态度也还行，给了我一本白皮书</li>
<li>接下来是世毕盟，联系我的还是那个伍剑雄，尴尬死了，我都把人家删了，结果人家给我加了回来，给了我一些广告和白皮书</li>
<li>这部分打算单独开一个文档来记录申请经历了，万字申请回忆录吧，作为大学生活的留念，指不定以后能贡献到贵系的什么资料库吧，做成像交大生存手册那样子也不一定不行</li>
<li>今天其实饶有兴致，打算写一写碳中和和社会达尔文主义的读后感来着</li>
<li>反正按照上六休一的观点，今天提前休息了吧，晚上做两篇英语，然后今天写两篇读后感 + 给申请回忆录开个头</li>
<li>中午吃饭的时候，看了看昨天下载的体育视频，还蛮有意思，蛮有用的吧</li>
<li>果然，每天记录琐事能很大程度缓解焦虑感，真的和中介这些人聊来聊去特别焦虑</li>
<li>昨天的锻炼文档还没写，现在就去写！</li>
<li>午觉没睡着，在想好多好多事情，sigh</li>
<li>看看今天能否把 CV 也做了</li>
</ul>
<h2 id="下午-14-44"><a href="#下午-14-44" class="headerlink" title="下午 14:44"></a>下午 14:44</h2><ul>
<li>一直在写申请的博客</li>
<li>突然想起来，之前决定出国很大一个原因是，我发现自己能接受深居简出，不和人交流的生活了</li>
<li>大概是十月，我发现自己每天和人的沟通基本就是微信，然后基本每天活动范围是宿舍、桃李，最多加上东操，然后觉得自己也能过的快乐，所以出国很大的阻力没有了</li>
<li>可能现在也是这种生活吧，好几天前经常和 lf 一起玩，还期待着 ZGY 回来了一起学习，偶尔还想着找义淮哥玩。大年初一的时候觉得很寂寞无聊，结果今天觉得一切 ok，挺快乐的</li>
</ul>
<h2 id="下午-15-19"><a href="#下午-15-19" class="headerlink" title="下午 15:19"></a>下午 15:19</h2><ul>
<li><p>还在写博客</p>
</li>
<li><p>刚才 lf 来找我，我走到门口手里拿着我的抱枕，本来准备防身用的，结果开门看是他</p>
</li>
<li><p>我问他咋回来了，他说他要走了</p>
<blockquote>
<p>我车在楼下呢！</p>
</blockquote>
<p>我草，私家车，车停在紫一楼前，有驾照的北京本地人爽死了。原来真的有开车进学校的啊，哈哈哈，笑死爹了</p>
</li>
</ul>
<h2 id="晚上-19-17"><a href="#晚上-19-17" class="headerlink" title="晚上 19:17"></a>晚上 19:17</h2><ul>
<li>下午把博客更新完了，refine 了社会达尔文主义，最后放弃了碳中和那一节的笔记</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd0b852ab3f51d91859ba3.jpg" alt=""></p>
<ul>
<li>爱死了！！！！</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd0bac2ab3f51d9185c10a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61fd0bc82ab3f51d9185dd2e.jpg" alt=""></p>
<ul>
<li>和 BB 打电话聊了一个多小时，我都忘了聊了啥，总之觉得，周围人貌似就我希望对未来规划清晰</li>
<li>下午锻炼的时候 c7w 紧急发来消息，之前 oop 文档写的有( 很多 )问题，写完了日记马上去改</li>
<li>跑步的时候听了听讲 08 年的一个视频，挺有感触的，不知道为啥，听到奥运圣火在旧金山传播的时候有 5 万华人护🔥，特别感动，几近流泪</li>
<li>今天估计要进行一个大鱼的摸了，如果 fix 了 bug 后还有时间，去写下 js 的 pr，然后开始给《改变美国的时刻》写笔记</li>
<li>想起了以前<a href="https://mp.weixin.qq.com/s/pfgcKfGRZXxG9BBSg7qvxg">公众号上的出逃记</a>，感觉人生又在逃离什么奇怪的东西</li>
<li>和 zex 学长聊了聊康奈尔，我才知道康奈尔除了康村，还有 CT 啊</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd120a2ab3f51d918bbfc8.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61fd12302ab3f51d918be149.jpg" alt=""></p>
<ul>
<li>纽约岛上，环境漂亮，方便实习</li>
<li>就是贵吧？</li>
</ul>
<blockquote>
<p>2021-2022 年度 MEng CS 的学费是 $60,372，学校基础 health insurance（SHP）是 $1,710。如果住学生宿舍（The House）的话一年的租金2万多。详情可以查看 The House 官网，有不同户型。这样算下来总共 8万五千左右。生活费方面看个人需求，纽约总体消费偏高。根据你的消费习惯（自己做饭或点外卖、点中餐或点快餐），每天的吃饭消费大概 $20 - $100 不等。可以自己简单估算一下～</p>
</blockquote>
<ul>
<li>好几天( 两天 )锻炼没打卡了，都快忘了，明天可以去游泳了</li>
<li>晚上看到了 zcy9 的说说，天啊，到了 2222 年了，感觉山东还是好保守的亚子，都不能说保守了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd12d92ab3f51d918c786e.jpg" alt=""></p>
<ul>
<li><p>写体育打卡，然后去改 bug 了</p>
</li>
<li><p>做完了再想想 js ？</p>
</li>
<li><p>突然想起来，北京那你妈个冷哦，白天脚冻得莫法，去锻炼前还要把鞋子脱了靠在自闭空间的暖气片上烤烤脚，跑完步了才有感觉，脚上很舒服</p>
</li>
<li><p>昨天还挂特别大的风，我都想国骂了</p>
</li>
<li><p>北京！狗都不留！</p>
</li>
</ul>
<h2 id="晚上-20-17"><a href="#晚上-20-17" class="headerlink" title="晚上 20:17"></a>晚上 20:17</h2><ul>
<li>破防了，一年前<a href="https://docs.net9.org/languages/c-oop/reference-copy/#:~:text=%E4%BE%8B%E5%AD%90-,%E7%A6%81%E7%94%A8%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96,-1%0A%202%0A%203">我写的什么特么玩意儿</a>，自己已经完全看不懂了</li>
<li>晚上听说冬奥会的开幕式特效很炫，看来图形学还是有未来的</li>
<li>睡觉，写体育笔记，学英语，看书，睡大觉！</li>
</ul>
<h2 id="晚上-20-41"><a href="#晚上-20-41" class="headerlink" title="晚上 20:41"></a>晚上 20:41</h2><ul>
<li>终于弄完了，重新写了写博客的架构，然后准备睡一小会儿</li>
<li>麻了，和爸妈完全没法非暴力沟通</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd1f4a2ab3f51d91982003.jpg" alt=""></p>
<ul>
<li>其实我妈肯定没其他意思，为什么自己反应这么激烈呢</li>
<li>可能还是因为下午讨论学驾校的事情</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fd1fe92ab3f51d9198a176.jpg" alt=""></p>
<ul>
<li><!--这个感觉就和以前和 ex 吵架一样，以为气消了，结果还是吵得厉害，这件事结束了，积怨到下一次，很小的事情就会吵起来--></li>
<li>哎，父母亲人尚且如此，何况其他</li>
<li>我离非暴力沟通还很远诶</li>
<li>update：我觉得问题的根源是，他们总觉我考虑问题太简单，不实际，我觉得相比我的同龄人，我已经没法再实际了——毕竟哪有同龄人成天想着以后念完研究生了就业的事情，大多数人都不会考虑太久的未来吧，sigh</li>
<li>Don’t educate ur parents cuz their education made u.</li>
<li>就是低级如某些成功学书籍 高级如于蔡老师的说话之道 非暴力沟通 这些 对亲人是越没必要的</li>
</ul>
<h1 id="2-月-5-日"><a href="#2-月-5-日" class="headerlink" title="2 月 5 日"></a>2 月 5 日</h1><h2 id="凌晨-00-30"><a href="#凌晨-00-30" class="headerlink" title="凌晨 00:30"></a>凌晨 00:30</h2><ul>
<li>不得不说刷两章英语大概花了我 2 h，但是掌握不太行，先记完笔记，然后再学吧</li>
<li>晚上狗子给我说他快要回来了——也许一起学概统吧，但是我还是想先做作业，或者我去学图形学</li>
<li>明天最好去一次 AIR，其一是下午和中枢那边约了面谈，其二是想去游泳，其三是 lwx 的事情不要拖了</li>
<li>我草，真的想起来之前那个视频，莫名其妙答应一个不熟的人一件麻烦的事情——此 lwx 非彼 lwx，非要录视频露脸，就比较麻烦</li>
<li>明天，啊不对，后天，啊，不对，你知道的，就是 2 月 6 日上午和 BB 讲情系母校，晚上听骏博哥的酒井万花筒</li>
<li>明天还是打算晚上一波端掉英语</li>
<li>c7w 要回来了诶，可以去找他和义淮哥玩！</li>
<li>现在去约游泳馆的门票诶</li>
<li>复刻了高三最有感触的文章——<a href="https://www.bbc.com/zhongwen/simp/world-51612242">脱北者：囚犯与守卫一起逃出朝鲜</a></li>
<li>晚安！</li>
</ul>
<h2 id="早晨-09-27"><a href="#早晨-09-27" class="headerlink" title="早晨 09:27"></a>早晨 09:27</h2><ul>
<li>2 点多睡着的</li>
<li>睡前读了读《改变美国的时刻》，不得不说，对这本书刮目相看</li>
<li>书里面讲了讲三角工厂的事情——美国的劳资关系和工人运动</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fdd2d62ab3f51d91227a3b.jpg" alt=""></p>
<ul>
<li><p>睡前和一个成外的小学妹聊了聊，人家申请去港校，然后家里有钱，都够读美本，但是高考估计有些寄</p>
</li>
<li><p>麻了，高中的评判价值观上了大学就寄了</p>
</li>
<li><p>起床读了读棕榈大道的申请白皮书，纯粹没啥吊用</p>
</li>
<li><p>八点四十多起的床</p>
</li>
<li><p>上午写 js promise 的 pr，然后安排下接下来的事情，然后吃饭</p>
</li>
<li><p>别忘了 SRT ！！</p>
</li>
<li><p>下午去游泳，和中枢碰瓷，然后 merge 笔记</p>
</li>
</ul>
<h2 id="晚上-20-33"><a href="#晚上-20-33" class="headerlink" title="晚上 20:33"></a>晚上 20:33</h2><ul>
<li>时间过得好快啊！！</li>
<li>上午给 js 文档加了个例子，<del>当然是无偿的</del></li>
<li>下午起床先去游泳，一小时，还挺爽，实际上游泳一小时的热量消耗就 417 k，的确不比人的正常代谢高多少，试想下，一个士力架就 457 k 来着，哈哈哈，至少士力架可以当早饭</li>
<li>小心暴食之罪！</li>
<li>下午 fkd 来给我提了反馈意见，待会 merge 进去</li>
<li>游完泳回来，快手的塑料袋又裂开了，用伯阳的 502 搞了半天——下次学会了，用纸来做粘合部分，然后小心 502 沾到眼睛里</li>
<li>小心沾到眼睛里，我最开始的想法居然是害怕以后有了孩子要放到孩子够不到的地方，枪支啥的也要放到够不到的地方</li>
<li>转念想想，感觉自己也没特别想丁克来着，说到底，只是想教育摆烂吧</li>
<li>突然想起来，因为户口的原因还和妈妈吵了几句——不过我从来没听说谁出国关心国内户口的——<del>移民的巴不得没有国内户口吧</del></li>
<li>户口放到成都摆烂呗，毕竟确实出国的大部分要回国嘛，三年 opt 完了都不用考虑三抽不中了，基本就回国了吧</li>
<li>游完泳去碰瓷前洗了衣服，基本前后得 1 h</li>
<li>好几件卫衣特么更笨不想</li>
<li>jim 提醒我，那篇讲脱北的文章还是不要给人看，我也觉得，少生事端吧，毕竟以后大概率还得回国混</li>
<li>去中枢那边碰瓷，感觉讲的还行，价格 29800 ，给我打 9 折</li>
<li>坚决不买吧，我自己申请基本能 CMU ，冲大 S 的 MSCS 还是很有难度，开彩票级别的事情，不必太 care</li>
<li>中枢送了我一个美国地图，标注了各个学校</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fe73a82ab3f51d91b2ede5.jpg" alt=""></p>
<ul>
<li>我特么看了这个地图，第一反应是，我超，我怎么没找到 CMU ，查了百度才知道 CMU 在宾州，找了半天才发现宾州在纽约州下面</li>
<li>第二反应，这地图政治不正确，居然没有阿拉斯加！这和中国地图没了台湾和钓鱼岛有啥区别？—— update: yx 提醒我，不仅没有阿拉斯加，还没有夏威夷，自己想起来，不还有关岛，美术萨摩耶啥的</li>
<li>第三反应，我没学过地理，我只知道加州在西海岸，其他的啥都不知道，宾州居然在西海岸啊！</li>
<li>本来地图想挂在文琦那儿的，感觉不太好挂，而且太反动了，就没挂了</li>
<li>聊的倒还行，然后广告给了我，回宿舍，想了想就扔了，反正不去买中介</li>
<li>找 Michael 聊了聊水卢的物价</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fe75d42ab3f51d91b5250f.jpg" alt=""></p>
<ul>
<li>感觉还是很贵的，不过也能预期， wyd 给我说的，合租还会便宜些，不过考虑到室友、新冠啥的，哎，再看看吧</li>
<li>我查到一个外文系的哥们儿——倪浩坤——看看能不能联系下合租啥的</li>
<li>还和一多聊了聊回国的事情</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fe76dd2ab3f51d91b623df.jpg" alt=""></p>
<ul>
<li><p>总的预算，估计往返机票各自 5k，隔离费 1.5 w，生活费四个月每个月 1 w，大概 7 w</p>
</li>
<li><p>肯定能再节约点，而且还有一年，实习总得赚点钱吧</p>
</li>
<li><p>wyd 说，往返机票太乐观了，球球了，鸿雁计划给点赞助吧</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61fe7a202ab3f51d91b946e0.jpg" alt=""></p>
<ul>
<li>算了，这部分太复杂，写到交换准备里面</li>
<li>草，刚才情况挺崩溃的，第一是因为一多给我说的预算啥的远远超出我的想象，第二是，我加了倪浩坤的微信后，才知道我他妈一直把时间搞混了——这个太他妈致命了，而且自己对 MITACS 完全不了解，现在才开始手忙脚乱的查询信息</li>
<li>求求你以后一定多和人交流吧，不然死无葬生之地</li>
</ul>
<h1 id="2-月-6-日"><a href="#2-月-6-日" class="headerlink" title="2 月 6 日"></a>2 月 6 日</h1><ul>
<li>昨天晚上因为交换的事情搞得心烦意燥，总体上是好消息吧，至少我能确信自己能拿到不少赞助了，重点是谁的赞助吧——CSST、MITASC、UGVR</li>
</ul>
<h1 id="2-月-8-日"><a href="#2-月-8-日" class="headerlink" title="2 月 8 日"></a>2 月 8 日</h1><ul>
<li><p>2 月 7 日因为中介的事情破防了，<a href="https://zhaochenyang20.github.io/2022/02/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/2022_spring/">有了这篇文章</a></p>
</li>
<li><p>按着初心继续走吧</p>
</li>
<li><p>今天和 yy 交流了女权现状，她的观点很有意思，之后打算结合《改变美国的时刻》写个女权报告</p>
</li>
<li><p>今天写完了实验室的网站</p>
<blockquote>
<p> 谷越老师，亚勤院长，我滴任务完成啦！</p>
</blockquote>
</li>
<li><p>今天和瑞涵姐聊了聊 SRT，列了个任务表，然后考虑了要不要报道朱易</p>
</li>
<li><p>这两天狗子住在 109A ，明天毛老师要回来，还是收拾下，锁个门</p>
</li>
<li><p>紫荆人特么太多了，我草，怎么桃李还特么不开啊</p>
</li>
<li><p>紫荆二楼的铁板还不错，就是种类少了，价格和香锅差不多</p>
</li>
<li><p>昨天晚上吃狗子带的猪蹄，好吃是好吃，就是动物油凉了之后太难洗了，好在狗子用饮水机烧了热水</p>
</li>
<li><p>昨天想进听涛吃香锅，结果只准志愿者进，我焯</p>
</li>
<li><p>昨天学会了我焯这个词</p>
</li>
<li><p>昨天领取了 Lee 的红包，十个亿津巴布韦币，我焯，真的十个亿</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620296942ab3f51d9166e4aa.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620296a12ab3f51d9166f116.jpg" style="zoom:10%;" /></p>
<ul>
<li><p>兴奋了半天，本以为几大百，还打算请狗子吃 81ly，结果就这，打算吃香锅，香锅也没了</p>
</li>
<li><p>今天给几个辅导员交了总结，还要转成 word，麻烦死了</p>
</li>
<li><p>昨天出了年级排名，我焯，不过感觉自己的确麻了，第二天就觉得无所谓了</p>
</li>
<li><p>SRT 要开始冲了！！！</p>
</li>
<li><p>寒假最后几天啦！！</p>
</li>
<li><p>冲冲冲！！！</p>
</li>
</ul>
<h1 id="2-月-9-日"><a href="#2-月-9-日" class="headerlink" title="2 月 9 日"></a>2 月 9 日</h1><ul>
<li><p>大晚上和狗子聊天到了 4:30 ，才睡下</p>
</li>
<li><p>睡前居然在成外的群里围炉夜谈，讲如何规律作息，我焯</p>
</li>
<li><!--和狗子谈了很多，谈了人生经历，感情问题，还有整个东北的现状。北京真的是吸干了东北的血才发展起来的吧，太可恶了，这帮可恶的布尔乔亚-->
</li>
<li><p>早晨将近 11 点才起床</p>
</li>
<li><p>下午听了闫玲奇老师的 games 101 第一讲，讲的好，但是我摸鱼好厉害，居然完全不能专心听讲超过五分钟，一直在看手机，哎</p>
</li>
<li><p>该用 forest 督促自己了</p>
</li>
<li><p>晚上写 srt 的代码，写的心旷神怡</p>
<blockquote>
<p>整个过程写的很舒服，不得不说，对比几个月前非常不鲁棒的垃圾代码，这几个月在 AIR 的毒打极大提高了我的 python 能力</p>
</blockquote>
</li>
<li><p>督促 lr 他们写史纲，和 lf yy 聊聊天</p>
</li>
<li><p>开始恢复人间作息</p>
</li>
</ul>
<h1 id="2-月-10-日"><a href="#2-月-10-日" class="headerlink" title="2 月 10 日"></a>2 月 10 日</h1><ul>
<li>真的人间作息了，上午八点就起床了，然后很快乐</li>
<li>上午我以为昨天的文本分析出问题了，结果检查一波发现是日经新闻太拉胯</li>
<li>python 太美妙了，感觉越发喜欢 python 了</li>
<li>终于知道如何 sourece activate 然后再 conda… 了</li>
<li>学会了写 .gitignore，不过文件的命令还是有点麻了</li>
<li>两本新书到了，从初中听胥老安利的书</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62053f2c2ab3f51d91b45776.jpg" style="zoom:25%;" /></p>
<ul>
<li><p>下午搞了一个 React 入坟，虽然全局代理还是不太会，但是已经熟练的学会了换源</p>
</li>
<li><p>下午锻炼很爽，但是时间太久了，先自闭空间，再紫操 3km，最后练引体</p>
</li>
<li><p>Up to that point of my life, time had given everything that I had, I was starting to realize it also took things away. —— The Lost Trial</p>
<p><img src="https://pic.imgdb.cn/item/620540a32ab3f51d91b5d5a1.jpg" style="zoom:40%;" /></p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620540c02ab3f51d91b607da.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620540f92ab3f51d91b65009.jpg" style="zoom: 33%;" /></p>
<ul>
<li>终于开始重新背单词了</li>
</ul>
<h1 id="2-月-11-日"><a href="#2-月-11-日" class="headerlink" title="2 月 11 日"></a>2 月 11 日</h1><ul>
<li>晚上 19:34 分，我又回到了半个月前在 lf 寝室摸鱼的日子</li>
<li>上午恢复了阳间作息，虽然昨天是 2 点睡的，但是自己八点多就醒了</li>
<li>早晨起来，学 React ，感觉和 Qt 很像，学的一知半解的，打算写点不清楚的给 holder ，holder 说他要写一些 React </li>
<li>下午醒来去 6 教自习，6A 的五楼，一堆物理实验室，还挺好玩，环境不错，手机放一边，学了俩小时都没来得及摸鱼:smile:</li>
<li>本来在四楼的，结果同教室一个奇怪的女的，貌似是个博士生吧，我给她说：“师姐，我可能要读出声来，会打扰到您吗？”长这么大，第一次听到有人非常不客气的用阴阳怪气的语气给我说：“当然会啦！”，给我搞的特别无语，然后就走了</li>
<li>手机放在楼下充电，然后自己在五楼写词汇，还是挺舒服的</li>
<li>称了下体重，发现反弹很厉害，我也不懂，可能还是你清太离谱了。我发现，只要人多的时候，打饭的师傅就分不清楚半份和一份了，更分不清楚一两米饭和三两米饭，所以摄入量在波动吧</li>
<li>从六教出来日常的去锻炼，自闭空间跑了 3km，练腿，划船，没引体</li>
<li>和雷哥约了饭，听雷哥说付小姐在成都很好吃，都比较辣，下次再找人一起去，然后这次吃巴基斯坦餐厅，周末晚上</li>
<li>给几个政治老师分享了<a href="https://zhaochenyang20.github.io/2022/02/02/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%92%A2%E9%93%81%E6%98%AF%E6%80%8E%E6%A0%B7%E7%82%BC%E6%88%90%E7%9A%84/">马逆的双元革命</a></li>
<li>草，要开学了，破防了，我特么以为 22 号开学，后来想想，怎么可能在周二开学，我特么脑子进水了，其实开学是 21 号，我再过五天做完词汇，之后几天做 summary</li>
<li>明天伯阳和 c7w 就回来了，我得把伯阳的桌子清出来，后天文琦就回来了</li>
<li>进击的巨人最后一季养肥了再看吧</li>
<li>和 Michael 学长约了谈谈 CMU 和中介啥的</li>
<li>接下来把交换的信息收集和护照做了，不过今晚还是继续 React </li>
<li>给《改变美国的时刻》写笔记</li>
<li>今天六教天还不错</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62064e7f2ab3f51d918a7059.jpg" style="zoom:25%;" /></p>
<ul>
<li>路上遇见一大姐，拖箱子的方式很有意思，不过感觉转弯太危险了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62064f512ab3f51d918b3078.jpg" style="zoom:25%;" /></p>
<ul>
<li>明天要去 AIR 了，听田哥说，他被昊哥搞自闭了，我觉得明天就是我了</li>
</ul>
<h1 id="2-月-12-日"><a href="#2-月-12-日" class="headerlink" title="2 月 12 日"></a>2 月 12 日</h1><ul>
<li>上午本来想八点起床，实际上摆烂了很久，到了 9:45 才起床，麻了</li>
<li>昨晚 1.30 睡的</li>
<li>上午学英语，中午 12 点才去吃饭</li>
<li>下午去了次 AIR</li>
<li>和田哥谈了谈学术的事情，是的，感觉自己还是畏难心理太重了，我已经没有同龄人了，怎能再用“同龄人还在 XXX，我觉得我已经很好了“的借口麻痹自己，学术继续走啊</li>
<li>晚上开始学动手学深度学习，突然觉得李沐真的 NB，CMU 的博士，然后课程写的挺年轻的，以及，我很喜欢 Dive into 这个词语，Dive Into Deep Learn</li>
<li>晚饭和陈二狗一起吃的听涛香锅，居然点成了辣锅，我焯，下次一定记得咖喱！</li>
<li>和陈二狗聊了聊人生，哈哈哈，才知道李浩林是🇨🇦人，我天</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/6207cf432ab3f51d91d0b853.jpg" style="zoom:10%;" /></p>
<ul>
<li><p>明天和雷哥恰饭，跳跳鸟回来了一起去付小姐，还有韩哥</p>
</li>
<li><p>还没有锻炼，待会就去锻炼，中厅简单玩一玩</p>
</li>
<li><p>今天伯阳回来了，麻了，明天宇晨和文琦也要回来</p>
</li>
<li><p>lr 和 lsq 他俩的确厉害，成外之光了，早日建起成外的根据地吧，建立成外一直没做好的传承工作</p>
</li>
<li><p>突然好喜欢<a href="https://music.163.com/song?id=1431292823&amp;userid=499283208">夜航星</a>这首歌</p>
<blockquote>
<p>执念的鱼，提着灯闯过远洋的甄选，继续下潜</p>
<p>无需誓言，我的心像自沉的旧母舰，没入深渊</p>
<p>永别啊，我曾凝望，曾是航向的日出</p>
<p>末路残烛，容我吹熄，藏起火种，向宇宙远渡</p>
<p>点燃星，亲手点燃目光尽头的准星，让夜降临</p>
<p>让陨石重启如萤火虫闪烁的飞行，破灭魂灵</p>
<p>点燃星，亲手点燃黑暗森林的火星，蒙昧初醒</p>
<p>而我却轻声告别这新生的黎明</p>
<p>执念的鱼，孤独着闯过自然的甄选，文明岸边</p>
<p>无需誓言，我的心像重启的旧母舰，去星云巅</p>
<p>永别啊，我曾凝望，曾是航向的日出</p>
<p>末路残烛，容我吹熄，藏起火种，向宇宙远渡</p>
<p>我是星，利剑开刃寒光锋芒的银星，绝不消隐</p>
<p>不回顾永难再折返的故园的光阴，决意前进</p>
<p>我是星，我愿投身前途未卜的群星，为梦长明</p>
<p>让希望做我无声永存的墓志铭</p>
<p>我是星，利剑开刃寒光锋芒的银星，绝不消隐</p>
<p>不回顾永难再折返的故园的光阴，决意前进</p>
<p>点燃星，亲手点燃黑暗森林的火星，蒙昧初醒</p>
<p>而我却轻声告别这新生的黎明</p>
</blockquote>
</li>
</ul>
<h1 id="2-月-13-日"><a href="#2-月-13-日" class="headerlink" title="2 月 13 日"></a>2 月 13 日</h1><ul>
<li>昨晚 11 点锻炼完了去 624B 洗澡，然后下楼和 C7W 聊了聊，聊了几乎一个小时</li>
<li>上午 9 点起床，写了写深度学习，然后下了大雪，去操场散步，和 Michael 学长聊天，讲了讲 CMU 和 Stanford，不得不说 Standford 不愧是业界最强的 MSCS，听说和 CMU 这种就业大校区别挺大，感觉这几年 CMU 的 connection 越来越不如想象吧，可能大家都是奔着 FLAG 去的。 Michael 学长给我讲了讲， CMU 最强的应该是实验室和教学质量，以及那么多载入史册的科研成果，而不是就业数据，反而 CMU 很喜欢对外宣传就业数据。Michael 学长讲了讲和 Stanford 的学生的交流，和斯坦福人谈朝鲜战争，谈创业，谈浪潮之巅和数学之美，而 CMU 的人谈刷题和 package，emmmm，我个人还是很喜欢前者的，就看自己的能力和机遇啦！</li>
<li>谈完了就去锻炼了，忘了带手表，拍了拍照，作为记录</li>
<li>中午回来都 1 点了，收拾下寝室，然后睡了一觉，醒来宇晨就回来了</li>
<li>我让他们帮我把快递的柜子拿回来，然后我就先去 AIR 了</li>
<li>昨晚还没下雪，结果早晨下了很大的雪，我在雪里跨越大洋和 Michael 学长聊天，<a href="https://www.bilibili.com/video/BV1HR4y1L71o?share_source=copy_web">游导在雪地求婚成功</a>，破防了</li>
<li>今天北京雪很大，走路还好，用脚扫雪的时候袜子湿了，麻了，骑车就破防了，下次知道带伞骑车直接用手托住伞，不要背在肩上</li>
<li>放几张照片，我自己拍的，和 xpr 的金毛</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620937eb2ab3f51d91f73a43.jpg" style="zoom:25%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620938032ab3f51d91f75065.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6209381b2ab3f51d91f767c0.jpg" style="zoom:10%;" /></p>
<ul>
<li>下午去 AIR 继续搞深度学习，显然开始变得干货起来了，所以学的慢了些</li>
<li>为了不折腾 jupyter 搞了半天，最后发现在雷系群里问人挺方便的</li>
<li>不得不说，自己的 Python 代码真的很舒服了</li>
<li>晚上吃完晚饭回来后 de 了一会才解决小 bug，还是 typing 和 torch 没用好</li>
<li>晚上回来了收拾了床，换了被子，四个人一起换，快多了，而且方便，就是被套被我撕裂开了点</li>
<li>晚饭雷哥请我吃的巴基斯坦餐，一开始觉得挺少的，实际上还可以，放几张图</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620938f22ab3f51d91f82ee4.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6209390b2ab3f51d91f844a2.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/6209391f2ab3f51d91f86623.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620939372ab3f51d91f877be.jpg" style="zoom:10%;" /></p>
<ul>
<li>香米饭还挺好吃的，感觉和以前吃过的阿富汗餐厅很像，挺不错，价格还行</li>
<li>和雷哥聊天很开心，本来以为聊未来，结果聊过去，聊了许久，啊哈哈哈</li>
<li>他提出让集训队全部必须强基的鬼才点子，教育部部长该让他当——不能考多了，只能考一点点</li>
<li>早饭吃的伯阳之前冬季马拉松的方便面，很好吃，貌似叫老范家啥的</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620939dd2ab3f51d91f904b8.jpg" style="zoom:10%;" /></p>
<ul>
<li><p>锻炼完了和付二狗聊天，聊了聊马子乔学长的事情，人家 CMU MS 和 UMich PhD 选了后者，我不知道密歇根啥水平，感觉是我就选前者了，自己觉得和付二狗聊天语气也不太行，orz，下次改正</p>
</li>
<li><p>宇晨和伯阳晚上打马里奥游戏，麻了，我去龙飞寝室勾画的单词</p>
</li>
<li><p>今天的好活：</p>
<blockquote>
<p>圣经咏唱<br>“你说 109A，一科一科，挂过多少科了，改过么呢？换汤不换药啊，人家李兆麟也有理由说的，我带的是什么人，我带的是研究生啊，你这批人是什么人啊，你叫我带。”“ 109A 现在什么水平，就这么几个人，你赵晨阳什么的都在搞机器学习，他能搞吗？搞不了！没这个能力知道吗？”“再下去要挂网原了，网原完挂软工，再挂数电，接下来没的挂了。”<br>（而当酒井宣传中心的同学提到从另一方面来说，109A 是备战 2022 年春季学期最早的寝室时，龙飞几乎还没等同学把话说完，就做双手作揖状、十分无奈表示）“哎哟，谢天谢地了，谢天谢地，你像这样的学生本身就没有打好基础，你能跟我保证在春季或者秋季这样关键的学期他能赢啊！务实一点，我劝你们，把自己摆烂的这个理念先搞懂，王文琦带的蛮好的，你把他去换了干什么，你在大二上得个绩点 3.1，你倒告诉我怎么解释，脸都不要了。”</p>
</blockquote>
<p>  <img src="https://pic.imgdb.cn/item/62093aa02ab3f51d91f9a7a3.jpg" style="zoom:35%;" /></p>
</li>
<li><p>搞得像开车，实际上是我的 Ivue 的壁纸</p>
</li>
<li><p>早晨和妈妈聊天感觉自己做的不好</p>
</li>
<li><p>她关心我需要推荐信，但是说需要院士推荐信，我说这是傻逼说的，她说是她的想法，哎，关心我的事情很感激了，何必和他们交流的时候言语那么锋芒呢，对他们是，对其他人不也是吗？</p>
</li>
<li><p>雷哥给我讲了讲租房子的梯度很大，上班通勤大家都很恼火，不过非互联网公司朝九晚五，互联网还要加班，还有房屋的均摊面积，破防了，焯</p>
<h1 id="2-月-14-日"><a href="#2-月-14-日" class="headerlink" title="2 月 14 日"></a>2 月 14 日</h1></li>
<li><p>昨天和 Michael 学长聊天时，我给他说，中介让我觉得我要是不去他们那儿我就完蛋了，他说：“每当我担心自己完蛋了的时候，我就在想，我是今晚没床睡了还是今天没饭吃了？”</p>
</li>
<li><p>破防了，现在是晚上 23:47，还是 lf 寝室摸鱼</p>
</li>
<li><p>昨晚没太睡好，晚上最后一次看表是 2:45，早晨 9 点才醒过来</p>
</li>
<li><p>昨天晚上去找 rcq 聊了聊，我问他回来干嘛，他特么给我说——回来过节，我淦，破防了，真特么过节——“不会真的有人寒假还要学吧？”“不会真的有人情人节还要学吧？”——破防了，破防了</p>
</li>
<li><p>昨晚看书，看了一会儿台灯没电了，然后手机手电筒挑灯夜战，简直回到了初二的时候</p>
</li>
<li><p>昨天看的是《民主的细节》的《咱们美国工人有力量》，也是讲工会、资本和工人关系的，很不错。感觉刘瑜的书没那么贬低中国，还是挺好玩的</p>
</li>
<li><p>想起来昨天和雷哥走在路上，他说每个国家都有自己的政治正确。比如你在美国不敢骂 Niger，但是你敢在游戏里入侵 FBI，在中国你敢让黑人滚出广州，但是不敢骂政府</p>
</li>
<li><p>早晨 9 点多起来，不想去香山了，又特么懒了，然后骑车去食堂吃了早饭，早饭吃的紫荆的面，还算好吃也好看，但是相对你清的物价，算很贵了，7 元一碗清汤面，离谱</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7c122ab3f51d9109df33.jpg" style="zoom:10%;" /></p>
<ul>
<li>和爸爸打了电话，瞎扯了一会儿，还和妈妈聊了聊冰墩墩的设计师很成功，雪容融好拉胯</li>
<li>早晨本来想去六教，结果走到一半，路上见到一张学生卡，用雪把卡擦了一下，手上有水，就没法戴手套，于是走路去了自闭空间，还很暖和，学了一个半小时就学完了今天的英语，再过两天就完了，还得把 summary 做了，不然开学要寄了</li>
<li>那张卡，居然主人报废的可勤快了，说不定以后去越研讨间还能用</li>
<li>不过我他么都单身到毕业了，还约个啥研讨间啊？</li>
<li>今天 pyq 过节的人不太多，还知道了之前有一对分了，分的好！</li>
<li>中午吃完饭，听睡前消息，回寝室摸鱼，摸完了闲的没事，翻了翻百度云的照片存档，我焯，看到了从 17 年到 22 年的照片，很神奇，百度云估计是按照图片的 meta_data 来存日期的，因为我看见我 18 年的照片里还混进去了估计是我 ex 的 18 年的照片吧，突然就觉得，以前还是熟悉的陌生人，现在觉得就是陌生的陌生人，还挺好奇自己当初是哪只眼睛瞎了，我焯</li>
<li>看了看以前的照片，和人的合照，给我的感觉是，脸变长了，头发长了，脸没那么圆了，看着那张我和裴坚的合照，发现那时候脸是圆的，真的特别圆</li>
<li>莫名其妙很好奇自己这几年究竟啥改变了，啥没变，被谁影响了等等</li>
<li>下午起床觉得很 down，妈的，他们三个去颐和园，居然没叫上我，给我说——”你不是去卷了吗？“——我焯，破防了</li>
<li>down 嘛，心情不好，学了学浅层学习，然后学了 1.5 h，就开始摸鱼了，和 yx 聊了聊天，感觉没有很强烈的感情，甚至没有感情，都怀疑自己丧失了对人类的感情了</li>
<li>要开学了，明天把两个表做了吧，免得开学麻烦</li>
<li>下午锻炼，昨天估计睡姿不好，小腿疼，没太练起来，本来打算回来洗被套，还是没洗，回来摸鱼，摸到 7.30 睡到 8.17 然后写了写浅层学习，还因为特别傻逼的 bug 卡了很久，搞到服务器上也没弄好，后来发现真的傻逼到家了，打错字了</li>
<li>晚上听了听闫玲奇老师的图形学第二课，很水，讲线代，然后开发的会就没管了，摸鱼去了</li>
<li>bug 四处求助，先是雷系的群，没人回答，吃相不好，然后科协群没人回答，xd 和 wwq 私下和我聊了，反正没解决服务器上的问题，倒是 AIR 群里，昊哥回复了</li>
<li>把头像换回了 18 年的头像，心情反复吧，又到了以前迷茫的时刻，看了看 mashplant 的博客，青春伤痕文学，和我的感觉很像</li>
<li>大晚上的，<a href="https://mp.weixin.qq.com/s/rETDdszbbu1hirIXIwYEbA">看到湾区卷到了世界冠军</a>，真不错，反正我打算出国摆烂，子女拿着美国国籍回国接受教育 </li>
<li>放几张图吧</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7a362ab3f51d91080100.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/620a7a492ab3f51d91081418.jpg" style="zoom:10%;" /></p>
<ul>
<li>破防了，2022 年情人节，我听闫玲奇老师2020年情人节讲的课，还在课上祝我情人节快乐，都知道自己要寡很久了，无所谓了</li>
<li>吃完饭看见 hcj 和他 npy，突然有些羡慕，又觉得没啥，我眼神示意他，没打招呼，他没看出我，我就走了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7aa82ab3f51d91086f49.jpg" style="zoom:45%;" /></p>
<ul>
<li>昨晚还和安娜聊了天，她说星火选拔焦虑，出国费用焦虑，然后我说我去加拿大交换，她说没去加拿大看过出生的侄女很遗憾，搞了半天，就我在国外没亲没故的，麻了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7c4d2ab3f51d910a1c8c.jpg" style="zoom:25%;" /></p>
<ul>
<li>给 yx 整的活，她没要我的红包，我没要她的</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7b242ab3f51d9108f103.jpg" style="zoom:25%;" /></p>
<ul>
<li>情人节没啥意思，没人秀恩爱，也没人分手，推送也不整活</li>
<li>我训练了自己的第一个人工智障，虽然按照 lf 说的可以由解析解，但是自己还是蛮高兴</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7b8f2ab3f51d91095e52.jpg" style="zoom:15%;" /></p>
<ul>
<li>和文琦看了看 apple 商店，感觉 ipad Air 只有 64G 和 256G，带上笔和 128G 的 ipad Pro 11 寸差不多了，都是 7k CNY，狗都不买</li>
<li>听说 Monterey 能够把 ipad 做外界显示器，感觉挺鸡肋的，是啊，我 pad 就做个笔记，管那么多呢，别消费主义抬头了</li>
<li>话说，我存了都 3W CNY 了</li>
<li>说这话，已经到元宵节了，狗子给我发了祝福，好开心，我给爸妈发了祝福</li>
<li>妈妈在家人群里发了我小时候的照片，好怀念诶</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7df02ab3f51d910be5a9.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620a7e302ab3f51d910c24f9.jpg" style="zoom:10%;" /></p>
<ul>
<li>感觉那时候爸爸头发都还很黑，现在白发都多了，自己穿像个女娃，哎，该多陪陪亲人的</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a7eb92ab3f51d910cb63c.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/620a7ef42ab3f51d910ceb51.jpg" style="zoom:10%;" /></p>
<ul>
<li>感觉应该是妈妈用手机拍的相册，那时候照片真的珍贵吧，颇有一种木心从前慢的感觉，那时候听说公务员出差还要在皮包里带上爱人的相片，真的很美好吧</li>
<li>让我想起来之前和跳跳鸟说的，我们生活在一个上了床也不会有什么结果的时代，小时候听的却是一吻就天荒地老的童话，所以我觉得朋友圈这些基本没一个走的久的，京沪离婚率都高到 30% 了</li>
<li>这个照片估计在青苹果幼儿园拍的，勾起了一些自己绝对想不到的场景记忆，还挺好玩，那些彩旗倒是记忆很深，我记得小学回去看，那儿就只有军区医院的标本室了，还看到极性婴儿标本，看了就破防了，现在都觉得看人体标本很恶心</li>
<li>昨天还听马逆讲了中国器官捐献的问题，要是我在国内发展，就去登记器官捐献，要是留在阿美利卡，也去登记吧</li>
<li>不过那时候估计都是转基因动物器官了？</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620a80aa2ab3f51d910ea5bd.jpg" style="zoom:10%;" /></p>
<ul>
<li><p>这张照片背景还很清晰，感觉那时候的广场和现在变了很多吧，看着照片里脸特别圆，和今天翻的 19 年和裴坚的合照一样，但是脸是逐渐拉长了，焯</p>
</li>
<li><p>晚上才发现我们的 SRT 下学期结束，但是大创要到 23 年 5 月，我焯，都可以写进简历了</p>
</li>
<li><p>不知道为啥，突然自己觉得，以后要多给我的孩子拍照，留下珍贵的记忆，突然反问自己，我特么怎么开始想孩子的问题了，湾区都特么卷上奥运会了，饶毅写自己的女儿，校队进了哈弗，然后被知乎大喷了，我觉得饶毅傻逼，这些学究阀阀相护，一帮傻逼，也不是什么好东西</p>
</li>
</ul>
<h1 id="2-月-15-日"><a href="#2-月-15-日" class="headerlink" title="2 月 15 日"></a>2 月 15 日</h1><ul>
<li>早晨八点多醒来了，去丁香吃的早饭，和特么监狱一样，又贵又恶心</li>
<li>吃完了去自闭空间，突发奇想，想一波歼灭所有剩下的词汇的力量，于是上午勾画了四章，晚上摘录并且<a href="https://cloud.tsinghua.edu.cn/d/2e8d18d3eb124aaf8014/">总结文档</a>到了现在</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620be5592ab3f51d913b4b9f.jpg" style="zoom:20%;" /></p>
<ul>
<li>早晨要了不少 CV，本来以为要参考的，实际上照着模板写了，哈哈</li>
<li>写中文，谷歌翻译，然后自己改，先完成英文简历，而不是中文</li>
<li>为什么不先做中文呢，因为不知道 latex 如何接受中文，焯</li>
<li>写简历写了很久，从下午开始，吃完晚饭，然后写到了 9 点，中间没睡过，麻了</li>
<li>下午开讨论会，破防了，确实对 AIR 而言我在零产出，哎，真的很难在项目里学习啊！</li>
<li>周四组回前要看完实现，嗯！</li>
<li>晚上开了答疑坊小程序的会，要写一个匿名反馈系统，开学前上线，大不了大半夜找雷哥</li>
<li>边跑步边开会，有点意思</li>
<li>感觉和雷哥交流要简短些，不过也还行</li>
<li>麻了，React 确实不属于答疑坊项目，还是好好先定下学习范围，被批评了活该</li>
<li>中午和狗子约饭，妈的，咖喱锅就要纯粹咖喱，不能加别的，否则不好吃，不过看着还可以</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620be6982ab3f51d913c8df7.jpg" style="zoom:10%;" /></p>
<ul>
<li>狂点了一堆素菜，然后还是花了五十，本想 AA ，可是狗子居然送我新年礼物！爱死了！莫吉托沐浴露，🤣，忘了拍照，他咋知道我上次游泳搞掉了沐浴露，哈哈哈</li>
<li>晚上和室友聊天，还是蛮快乐，妈的，我对计 03 比对计 06 还熟</li>
<li>还没读书呢！</li>
<li>找了几个中介、柏老师和王英老师与高中老师帮我改改 CV，棕榈大道最离谱，直接不干</li>
<li>还是高中老师好！</li>
<li>说回来，今天干了件傻事，把很多朋友的 CV 传到了车队云盘，哎，好在 lambda 提醒我，确实自己太不尊重别人隐私了</li>
<li>平平淡淡，汤圆都没吃的元宵节，给爸妈说了祝福</li>
<li>昨天幺爸问我买车位的事情，我应该用 yield 函数写 Python，虽然我劝他们买，但是我真的不觉得巴中值得住上十年，因为中小城市基本得废了，哎</li>
<li>明天跳跳鸟和 lsq 就回北京了</li>
<li>原来恩贤学长不参与开发小程序啊，麻了</li>
<li>文档写的越来越长，加载速度变慢了，看来开学得换一个文档了，不然积重难返，哈哈哈</li>
<li>明天记得两个文件写了，然后准备护照的事情，还要读文件实现！</li>
<li>明天下午去 AIR 吧！</li>
</ul>
<h1 id="2-月-16-日"><a href="#2-月-16-日" class="headerlink" title="2 月 16 日"></a>2 月 16 日</h1><ul>
<li>上午九点起床，很爽，然后和王英老师交流了下，感觉王老师很热心，可能她都忘了好多话她给我说过，hhh</li>
<li><p>王老师夸奖了我的笔记，但是我做的没她自己做的细，我和瑞涵姐聊了聊</p>
<blockquote>
<p> 不过想问问可不可以给英文解释呀[破涕为笑]然后王老师之前的词汇解释大概长这样，意义参考来源<a href="https://www.vocabulary.com/和https://www.merriam-webster.com/，[成果像这样](https://cloud.tsinghua.edu.cn/f/24d6d587e783455eb9b6/?dl=1)感觉更native一点">https://www.vocabulary.com/和https://www.merriam-webster.com/，[成果像这样](https://cloud.tsinghua.edu.cn/f/24d6d587e783455eb9b6/?dl=1)感觉更native一点</a></p>
</blockquote>
</li>
<li>中午因为考虑到晚上要恰饭，于是中午先去锻炼了！</li>
<li>早晨起来，我心爱的桃李早饭开了，我焯，爽死了！</li>
<li>下午睡到了 3 点，然后去 AIR 一半摸鱼，一半看代码，一半问了问下学期的课</li>
<li>这次学了学 <a href="https://zhaochenyang20.github.io/2022/02/16/CS/%E5%85%B6%E4%BB%96/python_decorator/">Python 的函数装饰器</a>，不得不说，我对 Python 越发喜爱</li>
<li>找了不少学长聊了聊下学期的课，铁定比上学期好些</li>
<li>加回了王昊华的好友，和她聊了聊美社文，结果她选的是美文社，焯，就是美国社会与文化 vs 美国文学与社会，说不定可以找她帮些忙</li>
<li>美社文好像还要考试，麻了，要是考试很难，他敢考我就敢退</li>
<li>可能会去选周三的词力吧，我英语学分还差三个，破防了</li>
<li>明天上午去 AIR 跑实验，中午和跳跳鸟吃比格披萨</li>
<li>和 cyd、xd、mk、qlp 约了饭</li>
<li>下午给博客加了个 feature ，参考了<a href="https://broadgeek.com/2021/12/05/928a/">这篇链接</a></li>
<li>晚上和 lsq 吃付小姐在成都，还不错，不过没咋吃东西，都聊天去了</li>
<li>这哥么比较自闭，声音比较小，需要多学习和人沟通，但是志虑忠纯啊！</li>
<li>吃完饭拍了下街道</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620d1ec12ab3f51d91d1a84b.jpg" style="zoom:10%;" /></p>
<ul>
<li>中午练了引体，手上有些感觉</li>
<li>和老蒋聊了聊中美关系和一些文化上的舔美问题，老蒋给我推荐了<a href="https://discover.lib.tsinghua.edu.cn/entrance/searchEntrance/resourceDetail?id=86THU_ALMA_CN21286765250003966&amp;search_scope=default_scope&amp;search=%E6%B8%85%E6%95%99%E5%BE%92%E7%9A%84%E7%A4%BC%E7%89%A9&amp;title=%E6%B8%85%E6%95%99%E5%BE%92%E7%9A%84%E7%A4%BC%E7%89%A9%20%3D%20%3D%20The%20puritan%20gift%20%3A%20%E9%82%A3%E4%B8%AA%E8%AE%A9%E6%88%91%E4%BB%AC%E5%9C%A8%E9%87%91%E8%9E%8D%E5%BA%9F%E5%A2%9F%E9%87%8D%E6%8B%BE%E6%A2%A6%E6%83%B3%E7%9A%84%E9%A6%88%E8%B5%A0%20triumph,%20collapse%20and%20revival%20of%20an%20American%20dream&amp;version=2&amp;frbrgroupid=381714948&amp;context=L&amp;adaptor=Local%20Search%20Engine&amp;query=any,contains,%E6%B8%85%E6%95%99%E5%BE%92%E7%9A%84%E7%A4%BC%E7%89%A9&amp;isFrbr=true">《清教徒的礼物》</a></li>
<li>记得找张导问一问护照证明的事情</li>
<li>晚上和 lf 看了<a href="https://www.bilibili.com/video/BV1tF411q7Fq?from=search&amp;seid=9721049949471080471&amp;spm_id_from=333.337.0.0"> 8848 奶奶滴手机</a>和<a href="https://www.bilibili.com/video/BV1qL4y1t7VF?from=search&amp;seid=17988494829738496403&amp;spm_id_from=333.337.0.0">重庆老冯高级特工学校</a>的鬼畜</li>
<li>麻了，马上就开学了，当初退掉美赛，现在都不知道是不是好的选择</li>
<li>今天跑步看完了<a href="https://www.bilibili.com/video/BV1fT4y1X72n?from=search&amp;seid=12458559075567151023&amp;spm_id_from=333.337.0.0">《La La Land》的影评</a>，讲的爱情故事听上去引人入胜，但是我不是很想看，可能还是不想看爱情片吧</li>
<li>借给 lsq 了我的《你不可不知的人性》和《蔡康永的说话之道》</li>
</ul>
<h1 id="2-月-17-日"><a href="#2-月-17-日" class="headerlink" title="2 月 17 日"></a>2 月 17 日</h1><ul>
<li><p>现在是晚上 19:31 分，还在开组会，开了俩小时了</p>
</li>
<li><p>晋钧学长居然从 AIR 润了，他说不想搞 CV，去做体系结构了</p>
</li>
<li><p>真的很佩服，想找他聊聊</p>
</li>
<li><p>下午去搞了搞护照的事情，还行，国际处啥都没干就挺懒政的，我们系里倒还好</p>
<blockquote>
<p> 刚才<a href="http://banshi.beijing.gov.cn/pubtask/task/1/110000000000/473a56c6-239b-4b9b-a327-92a6d01e4925.html#apply-main">出入境管理中心</a>联系我了——携带校级的交换名单（就是那个非常长的 list）+ 身份证 + 学生证（应该是那个蓝皮的小册子而不是学生卡）+ 院系证明 + 过期的护照（过期的护照需要当场销毁），穿深色衣服（西服）</p>
</blockquote>
</li>
<li><p>今天建了词力的车队，还挺好的，氛围很不错，感觉自己搞团队作战越来越擅长了</p>
</li>
<li><p>中午和跳跳鸟吃了比格披萨，感觉一般般，味道讲究，吃的也还凑合</p>
</li>
<li><!--感觉大家都不容易，跳跳鸟吃了机器学习的 2.6，happy 开门智入门 2.3，这俩都是三分的课，其实跳跳鸟把我的破事抖出去，我都不 care 的-->
</li>
<li><p>下午在实验室跑函数，不得不说，对 Python 的感觉越来越好了</p>
</li>
<li><p>下午和棕榈大道联系了下，感觉人家还挺喜欢我的条件的，我得讲好故事，不够他们的 offer show 真的不如其他的机构</p>
</li>
</ul>
<h1 id="2-月-18-日"><a href="#2-月-18-日" class="headerlink" title="2 月 18 日"></a>2 月 18 日</h1><ul>
<li><p>这两天都非常累，主要是参加棕榈的答辩了，说实话，突然接到通知，我觉得还行</p>
</li>
<li><p>麻了，先别写文档了，给这个日记说再见了，开一个新的吧</p>
</li>
<li><p>这几天要做的事情，按照先后次序：</p>
<blockquote>
<p>明天新闻稿件</p>
<p>AIR 作图</p>
<p>明天中午cyd 约饭</p>
<p>晚上和雷哥写程序</p>
<p>复盘开学前的信息</p>
<p>总结恰饭的事情</p>
<p>留心护照</p>
</blockquote>
</li>
<li><p>向这个寒假说再见了</p>
<blockquote>
<p>I know you tried</p>
<p>我知道你尽力了</p>
<p>I know you tried at your best</p>
<p>我知道你已尽你所能</p>
<p>And now it’s time to put this all to rest</p>
<p>是时候给一切划上休止符</p>
<p>Minutes pass and those days seem long ago</p>
<p>分秒流逝 过往遥不可及</p>
<p>Oh, oh</p>
<p>A distant voice</p>
<p>远处传来</p>
<p>One that I used to know</p>
<p>我曾熟悉的声音</p>
<p>There’s a force and it’s tryin’ to drag me down</p>
<p>有一股力量妄图使我消沉</p>
<p>Down…</p>
<p>If you go then I’m goin’ with you now</p>
<p>若你离去 我将与你同行</p>
<p>Don’t look back</p>
<p>不要回头</p>
<p>Nothin’ left to see</p>
<p>没什么值得回望</p>
<p>Just leave the shadows in the past</p>
<p>就让灰暗归于过往</p>
<p>If I let it go</p>
<p>若我任你离去</p>
<p>Can I shake this feelin’?</p>
<p>能否消除此刻的感觉？</p>
<p>Oh oh oh</p>
<p>Just like that</p>
<p>就像这样</p>
<p>Tomorrow’s one day that I’m never getting back</p>
<p>明天我就要踏上不归路</p>
<p>I can feel you, though</p>
<p>但我还是能感觉到你</p>
<p>Wake me from this dreamin’</p>
<p>将我从这场梦中唤醒</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>Anyway</tag>
        <tag>你清</tag>
        <tag>清华园日记</tag>
      </tags>
  </entry>
  <entry>
    <title>高三学习与考试的心态</title>
    <url>/2022/01/24/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%AB%98%E4%B8%89%E5%BF%83%E6%80%81/</url>
    <content><![CDATA[<h1 id="学习心态"><a href="#学习心态" class="headerlink" title="学习心态"></a>学习心态</h1><h2 id="努力去争取"><a href="#努力去争取" class="headerlink" title="努力去争取"></a>努力去争取</h2><ul>
<li>大多数机会，绝非他人会直接递到你手中，需要你自己去寻找。比如发现了数学参数方程这一块有问题，切需寻尽一切途径，老师，同学，师兄师姐，去努力探讨下，究竟该怎么改变自己的劣势。这是在知识点上。</li>
<li>还有很多其他方面，譬如港大的申请，新春课堂（PKU)的报名等等，(我印象中最深的就是是我因为自己没有关注，错过了少年班报名的事）,机会需要你自己去寻觅。寻得的机会需要你自己去把握，尽你的全力去实现！</li>
</ul>
<h2 id="积极去改变"><a href="#积极去改变" class="headerlink" title="积极去改变"></a>积极去改变</h2><ul>
<li>其二是积极去改变，我的班主任老师每每教导我，高三的本质是不断发现问题并解决问题的循环。平时学习与每次考试都会暴露出新的问题，或大或小。但我的建议是发现问题，立即改正。千万不要抱着“这个问题一辈子不会考第二次的心态，学它干啥”的暴毙心态去学习，不然真的你会发现高考场上你会应为基本功不扎实而当场去世。臂如我的curiosity就写错了，而其实考前我是知道这一块的单词我印象模糊，考到会错的。很遗憾我没有在考前解决问题，留下了一些遗憾。</li>
<li>另外就是发现问题后，你要坚信，只要拼死了做，一切学习问题本身都可以改变。举两个自己的例子。第一就是我高一高二生物学的很差，成都市统考分科考单科只有70+的水平，生物不是拖我后腿，是砍掉我后腿，确实是我所有学科里最渣的一门。高三回去生物也炸裂了很久一段时间，比如一诊只有69分，再次把我的后腿砍掉了。然后我还是想办法吧，比如我找了很多师兄师姐与我们卫老师问方法问题，从头到尾啃教材，每一页都看过，把教材习题答案几乎全部抄上了书，早读课敲掉英语学生物（这当然不是劝你翘课,还是那句话，自己负责自己的决定，做决定后要与老师商量好）etc……就这样把生物硬生生抬到了我觉得比较满意的成绩。</li>
<li>第二个例子是我的语文作文,我平时在学校考试作文一般只有45分左右，考完一诊发现我的语文突破不了120。于是我苦练作文，一个寒假写了并修改了17篇。然后找了不少人交流作文，作文不断的写，不断的改，总之高考语文分数确实满意。重点是，积极去改进。你的老师们（谁都可以是你的老师）最多骂你一顿，最后必定把问题讲清楚的。你只要确信，自己一直在解决问题的路上，那么问题就不是问题。</li>
</ul>
<h2 id="乐观去接受"><a href="#乐观去接受" class="headerlink" title="乐观去接受"></a>乐观去接受</h2><ul>
<li><p>这里我要陈述我的观点——学习本身的问题永远比心态问题好解决。坦诚说，我本身就是个心态很不好的人。本质上，我不是个乐观的人。但是到了后来，心态不好的时候，得找点让自己坚持的理由。比如我完成了几大心里建设。首先认识到，高考考的再差，上了大学，只要自己肯努力亿点必定会有很棒的结果。</p>
</li>
<li><p>第二就是，我每每拿自己的理想来鞭策自己，每次心态不好，就问问自己，难道清华的学生就这点能耐，这点破事就把清华学子掀翻了？并且实在难受时我会看一些大学的宣传片，同时意外提升了一些语文水平，比如之前清华宣传片里的苟日新，日日新，又日新我便用在了高考作文里。</p>
</li>
<li><p>统而言之，调整好自己的心态。如果我们把目标设为通过高三收获一个更好的自己，那么我们就永不失败。总之，乐观接受一切可能发生的结果。</p>
</li>
<li><p>最后，记得给自己一点魄力和信念。寻找到一个值得你拼尽全力，一往无前的目标。</p>
</li>
</ul>
<h1 id="考场心态"><a href="#考场心态" class="headerlink" title="考场心态"></a>考场心态</h1><h2 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h2><ul>
<li>高三倒数第四次周考我们数学考了一道解几，证明两条直线夹角位直角。通式通法是证明斜率乘积或者向量相点乘为0。但我当时的知识体系有问题，我证明一个RT△ABC，其中A为直角且AH为BC边上的高，那么</li>
</ul>
<script type="math/tex; mode=display">
RT\triangle ABC:\frac{1}{(AB)^2}+\frac{1}{(AC)^2}=\frac{1}{(AH)^2}</script><ul>
<li>这其实是一个基本结论，初二学了勾股定理就可以用了，高二学椭圆的内接菱形基本结论也用过，我在五月月考中被这个结论暴打了一次，于是我疯狂在倒数第四次周考中使用，解几拿了4分。拿到分数数学老师当然让我复盘一下</li>
<li>我当然也会抱怨老师，瞎改卷子让我蒸发了八分，但我还是要复盘，我找改卷子的老师询问了扣分的地方。老师告诉我他对我的卷子还有印象，我是全年级唯一用这法的人，而且写的确实很失败，老师觉得应该让我长教训，要么不用，要么用好，于是扣了我八分，接下来两个小时他手把手教我如何写这方法，给我重新补了下通式通法——最基本的想法，全国卷最喜欢的想法。</li>
<li>我们一直强调全国卷不难，其实他的本质就是考四个字——通式通法，没有旁门左道</li>
<li>这是那晚我的收获，我损失了八分，好好听了老师的劝告，完善了在解几这一块的基本体系，同时对高考的考察有了更深了解，一点不亏</li>
</ul>
<h2 id="心理建设"><a href="#心理建设" class="headerlink" title="心理建设"></a>心理建设</h2><ul>
<li><p>我二诊的例子，由于我考完一诊后数学信心爆棚，寒假刷了一个寒假解几和导数，以为数学无敌了，结果开学考试数学解几和导数炸了，立体几何还错了，然后在二诊的时候，我心态极度谨小慎微，12题没做出来，每个基础的解答题还疯狂做完就检查，浪费了巨量时间，立体几何还错了，还有30分钟才做最后三道大题，还有25分钟做解几和导数，心态炸裂当场去世。</p>
</li>
<li><p>这还只是考场上的问题，更严重的是，我考完了就知道自己数学死了，还和我的好朋友谈了谈难度，他说二诊数学比较简单，我当时有点慌，但还不是特别难受，毕竟他水平确实比我高很多，可我还是忐忑的很，我又问了问我的好哥们儿。实话实说，他数学确实不如我，结果他给我说，为自己没拿满分而可惜</p>
</li>
<li><p>我心态彻底炸了，没法复习没法吃饭没法休息，不想考了，我觉得比较在手的数学没了，然后我到办公室找老师，结果被物理老师和数学老师骂了一顿， 骂了两个小时，然后我心情就好了，晚上跑了步洗个澡，都没复习理综就睡了</p>
</li>
<li><p>当时想的就是，反正数学就这样了，理综和英语放开去考就可以了，结果第二天理综考的不错，英语考出人生巅峰（全市前五），然后数学比平时低15分，理综和英语填了回来，总分跟平时差不多</p>
</li>
<li><p>那天得到的教训就是，以前口口声声说不准对答案，但我的内心依然忐忑，我通过问难度这种方式变相对答案，实际上害了自己的心态。</p>
</li>
<li><p>我便有了一条新的心理建设，不能任何形式的对答案，包括直接对，间接问难度等等</p>
</li>
<li><p>这当然是有用的，高考的时候我的语文就感觉不好，但是忍着没对，数学最后9分钟改了15分的题，我还是忍着没对，含着眼泪都没对。</p>
</li>
<li><p>最后结果证明我是对的——对答案百害无一利。并且二诊还让我明白了我数学老师的话——任何时候慌张对自己一定不利的。这是支撑我高考数学9分钟含泪改15分的源泉，这也是考试复盘的收获。</p>
</li>
</ul>
<h2 id="最后关头"><a href="#最后关头" class="headerlink" title="最后关头"></a>最后关头</h2><ul>
<li>如果真的发生了你从未设想过的情况——你会怎么做？</li>
<li>发生任何不利情况，都能快速的处理，尽可能减少损失</li>
</ul>
<blockquote>
<p>实际上<strong>任何学科都会有做到中途心态炸裂</strong>的情况。<br>那么送给你朱世衡老师给我的教导：<strong>永远记住，在任何时候，慌张对你都是没有意义的。</strong><br>具体而言，我会<strong>马上思考，我现在还能干什么</strong>，在最短的时间内，<strong>抢救当前的局面</strong>，以及<strong>马上行动</strong>。<br>以我个人为例，我在高考数学考场上经历了最短时间内最多次的心态炸裂。<br>首先是20年的数学填选题比往年偏难。一般情况下，三卷的填选我大概35min左右能够完全拿下。结果今年的选择我在放弃了12题（直接蒙了答案）的情况下，就做了40min。可以设想下我在考场上的状态，崩溃的边缘，<strong>第一次心态爆炸</strong>。那又有什么办法呢？我想起朱老师的教导，马上缓过神来，继续作战。<br>于是我第一次强行镇定自我，完成了后面的大题。同时，分别在做完了填空、大题第一部分、选修的时候三次做12题。可惜三次都以失败告终。<br>还剩40min，<strong>统共四次都没能做出12题**</strong>，心情炸裂<strong>。但是别无他法，慌张又能解决什么？马上</strong>镇定自我，完成了解析几何和导数<strong>，还剩21min。<br>虽然心中有极度的不安，我还是选择了“富贵险中求”，</strong>最后一次冲12题。终于拿了下来<strong>，长叹一口气。我看了看钟，还有14min。心情相当不平静，有种奇妙的第六感隐隐作怪。</strong>第三次强行自我镇定，开始检查。<strong><br>很快我就发现了</strong>第一个致命的错误<strong>，我的数学第七题，一道解三角形的选择题——因为自己做题习惯不好，直接将三角形画在题边上，然后选了离“7”最近的顶点——做对了，但是选错了，活生生选错了。这样的错误我当然犯过，高三某一次月考，我是班上唯一一个做对了但是选错了生物选择题的人。当时老师宽慰我，这样小概率的事件最多发生一次，于是它再次发生在了高考场上。
</strong>第三次心态爆炸<strong>，马上调整。<br>我平时是笃信最后15min不要大改答案的，于是反复检查了四次，确信是我涂错了，将它改了过来。还剩9min，我已经慌张地握不住笔了，但是又想起了朱老的教诲。</strong>第二三次自我镇定，哪怕含着泪也要继续跑。<strong><br>这一刻，在众多解答题里，检查谁，我必须做出抉择。如同前文论述，我对绝对计算的把握自以为比较好，于是在</strong>考前我是有预案的。5min检查大题就会看计算是否有问题，如果只是10min以内甚至更短，那么一定是看是否有思路上的问题。<strong><br>于是，我很快做出了选择，</strong>检查选修<strong>，因为我感到这次的选修题第一题</strong>平时训练较少，可能存在问题<strong>。这时还剩下8min。
</strong>第二个致命失误<strong>马上就暴露了，我竟然把x轴坐标和y轴坐标写反了。这样的错误，我在刚刚竞赛结束时的九月月考上便犯过。那时还是以为这个错误这辈子不会有第二次。当我意识到这一点时，还剩6min。
</strong>心态完全炸裂，十分的选修可能会完全丢掉。<strong><br>突然想起，</strong>第四次强行镇定自我<strong>。<br>马上</strong>三次检查<strong>，确认了自己是写反了。提笔就改，甚至那时中间过程写的字我已经完全认不清楚，但我确信，我把答案写的异常清晰，一笔一划，像是在我极其镇定的时候所写一般无二。<br>做完这一切，还剩3min。</strong>强忍极度的紧张与无穷的后怕，马上检查是否考号等填写正确、选择题是否有涂错等等。<strong><br>三分钟后，打铃。我像死一样瘫在座位上，可我明白，我赢了。在短暂的两个小时内，</strong>我五次战胜了自己**，虽然如此艰难，甚至运气成分太大。可是，这就是我的答案。<br>永远记住，在任何时候，慌张对你都是没有意义的。</p>
</blockquote>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>社工</tag>
        <tag>成外</tag>
        <tag>情系母校</tag>
      </tags>
  </entry>
  <entry>
    <title>2021秋季学期大型采访活动感谢信</title>
    <url>/2022/01/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A4%A7%E5%9E%8B%E9%87%87%E8%AE%BF%E6%B4%BB%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="致计算机系课咨委受访者的答谢信——大型采访活动"><a href="#致计算机系课咨委受访者的答谢信——大型采访活动" class="headerlink" title="致计算机系课咨委受访者的答谢信——大型采访活动"></a>致计算机系课咨委受访者的答谢信——大型采访活动</h1><h1 id="亲爱的受访同学："><a href="#亲爱的受访同学：" class="headerlink" title="亲爱的受访同学："></a>亲爱的受访同学：</h1><p>感谢您参与计算机系课咨委开展的第一轮基础情况调研！第一轮基础情况调研提供的信息，在我们创立初期的工作中发挥了基石作用。关于近期基于第一轮基础情况调研的结果开展的工作，我们向您做如下的汇报：</p>
<h3 id="撰写调研报告，与教学主管老师讨论。"><a href="#撰写调研报告，与教学主管老师讨论。" class="headerlink" title="撰写调研报告，与教学主管老师讨论。"></a>撰写调研报告，与教学主管老师讨论。</h3><blockquote>
<p>依据第一轮基础情况调研的内容，我们撰写了系课咨委的第一份报告《关于计算机系所谓“内卷“的讨论和建议》，在12月2日的系领导接待日上和系里主管教学工作、学生工作的老师进行了讨论。</p>
</blockquote>
<h3 id="制定章程草案，拟定初步工作计划"><a href="#制定章程草案，拟定初步工作计划" class="headerlink" title="制定章程草案，拟定初步工作计划"></a>制定章程草案，拟定初步工作计划</h3><blockquote>
<p>根据我们对第一轮基础情况调研结果的分析、结合系领导接待日时老师的反馈，我们拟定了系课咨委章程草案和初步工作计划，通过审批后将尽快正式发布。章程草案中，系课咨委的宗旨是“凝聚师生合力，推动教学改进”，主要职责包括“广泛开展调研、促进师生交流、长效监督反馈。”</p>
</blockquote>
<h3 id="针对重点课程-，启动下一轮调研。"><a href="#针对重点课程-，启动下一轮调研。" class="headerlink" title="针对重点课程 ，启动下一轮调研。"></a>针对重点课程 ，启动下一轮调研。</h3><blockquote>
<p>综合实际情况，下一阶段我们将把精力集中在计算机组成原理、计算机网络原理两门地位重要的课程上，详细调研同学们对这两门课程的意见建议，并和教学团队展开沟通。如果您关于这两门课程有更多想说的，也欢迎联系我们。</p>
</blockquote>
<p>此外，近期还将利用计算机系为课咨委提供的经费，为您发放相应补助。</p>
<p>计算机系课咨委成员 赵晨阳敬上</p>
<p>2021.1.21</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>贵系改革</tag>
        <tag>课咨委</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>2021秋季学期计原网原访谈感谢信</title>
    <url>/2022/01/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/2021%E7%A7%8B%E5%AD%A3%E5%AD%A6%E6%9C%9F%E8%AE%A1%E5%8E%9F%E7%BD%91%E5%8E%9F%E8%AE%BF%E8%B0%88/</url>
    <content><![CDATA[<h1 id="致计算机系课咨委受访者的答谢信-2021秋季学期计原网原访谈"><a href="#致计算机系课咨委受访者的答谢信-2021秋季学期计原网原访谈" class="headerlink" title="致计算机系课咨委受访者的答谢信 - 2021秋季学期计原网原访谈"></a>致计算机系课咨委受访者的答谢信 - 2021秋季学期计原网原访谈</h1><h1 id="致计算机系课咨委受访者的答谢信"><a href="#致计算机系课咨委受访者的答谢信" class="headerlink" title="致计算机系课咨委受访者的答谢信"></a>致计算机系课咨委受访者的答谢信</h1><p>亲爱的同学：</p>
<p>感谢您参与了计算机系课咨委开展的关于计算机组成原理、计算机网络原理的调研！这是我们第一次尝试针对具体课程做调研和反馈，您的参与帮助了我们磨合初始的工作流程。关于基于这两门课程的初步调研结果开展的工作，我们向您做如下的汇报：</p>
<h2 id="撰写调研报告"><a href="#撰写调研报告" class="headerlink" title="撰写调研报告"></a>撰写调研报告</h2><p>借助访谈提纲，我们共收集了16名同学关于计原、网原课程反馈，撰写了两篇调研报告。报告中的部分结论如下：</p>
<p>大部分同学能在“造计算机“大实验中获得成就感，但部分同学对大实验负面反馈强烈，产生负面反馈的点包括评分公平性和明确性、不适应硬件编程、团队合作不顺畅等；部分选择软件、应用方向的同学认为计原课程对自己未来起到的帮助有限，影响学习积极性；网络原理的课程讲授较为枯燥、同学们出勤和听课不积极；网络原理的路由器实验设计获得了同学们的普遍好评；一些同学在备考网络原理时采取大量背诵的方式，体验较差；部分同学对网络原理课程的价值意义地位不清楚，影响学习积极性；一些同学希望能从网原课上学到一些更加“实用“的知识；</p>
<h2 id="进行汇报反馈"><a href="#进行汇报反馈" class="headerlink" title="进行汇报反馈"></a>进行汇报反馈</h2><p>秋季学期我们在十四周周三和计算机组成原理的教学团队进行交流（刘卫东老师等参与），十五周周一和计算机网络原理的教学团队进行交流（徐明伟老师等参与）。之后我们还和系教学办公室的老师交流了调研反馈的情况。</p>
<p>在交流中，我们和老师助教们进行了坦诚热烈的讨论，也了解了老师助教们的一些考虑。</p>
<p>总体而言，目前我们的调研成果，覆盖面和代表度还有一定欠缺，这是我们经验不足、工作不够细致所导致的。（如仅覆盖了16名同学，未采取科学随机的采样方法选择访谈对象，报告行文不够严谨等），还不足以说服教学团队做出较大的改动，但有一些容易采取的措施被采纳了。</p>
<p>被采纳的建议如：在和计原老师交流时，我们建议公布书面作业答案；和网原老师沟通时，针对同学们不清楚网络原理课程的价值意义地位、老师们认为网原课不应当过分拘泥于具体的技术知识，我们建议老师在网原课上介绍计算机系网络方向的其他课程，让同学们更清楚网原课在网络知识体系中的地位、清楚想了解网络方向的更多知识应该学习哪些课程。</p>
<p>在交流中，老师们也提出了自己关心的问题，希望我们下一步能够开展调研，从而课程有可能做对应的改进。如计原老师希望了解同学们不参与实验辅导课的原因、同学们希望获得什么形式的实验辅导，网原老师希望调研能同时给出更加整体的态势（如同学们的整体满意率）和更加具体的建议（如某个同学对某个环节很具体的改进意见）。</p>
<h2 id="下一步工作计划"><a href="#下一步工作计划" class="headerlink" title="下一步工作计划"></a>下一步工作计划</h2><p>下一步调研计划以问卷形式进行。我们正在基于上一轮调研反馈结果编写问卷、和计原网原的助教老师沟通确定问卷具体内容和发放形式。预计近日将发放问卷。</p>
<p> 计算机系课咨委 赵晨阳敬上</p>
<p>2022年1月23日</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>贵系改革</tag>
        <tag>课咨委</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>这不完美的童话</title>
    <url>/2022/01/23/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/Call%20Me%20A%20Fool/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1c0b928e946307135bc22f4d89e10071e9ecb543d642ff3422a09c0bf5ff38a7"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>Anyway</tag>
      </tags>
  </entry>
  <entry>
    <title>Preparations for Summer 2022 or 2023</title>
    <url>/2022/01/21/%E5%87%BA%E5%9B%BD/Summer%20research/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa6f1930f995d5016e877c74e3ec6d82a3b7ceb292cdbebbbbc26c70d76fd52d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>暑研</tag>
        <tag>人生规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Euivariant &amp; Invariant</title>
    <url>/2022/01/20/%E7%A3%95%E7%9B%90/equivariant/</url>
    <content><![CDATA[<p>这次的项目里，主要是围绕着 CV 的 equivariant 和 invariant 展开， 总结下两者的性质。</p>
<h1 id="等变性-equivariant"><a href="#等变性-equivariant" class="headerlink" title="等变性 equivariant"></a>等变性 equivariant</h1><p>对于一个函数，如果你对其输入施加的变换也会同样反应在输出上，那么这个函数就对该变换具有等变性。</p>
<script type="math/tex; mode=display">
f(g(x))=g(f(x))</script><p>则 f 对变换 g 具有等变性。</p>
<p>而在此次项目中，我们将验证这一图像识别对于如下变换具有等变性：</p>
<ul>
<li>平移</li>
<li>旋转</li>
<li>拉伸</li>
</ul>
<p>为了达到这个目的，即将更换测试集为遥感数据集。因为从人类的角度观察，人站在地面上而天空在上方，湖水在下方，这是一个具有物理意义的图像。然而如果旋转之后——例如湖水在上而天空在下——此类图像就没有物理意义。为此，项目需要将数据集迁移为遥感数据集。因为从太空中遥感地球的图像，实际上是和上下左右无关的平面图，怎么转变都具有物理意义。</p>
<h1 id="不变性-invraiant"><a href="#不变性-invraiant" class="headerlink" title="不变性 invraiant"></a>不变性 invraiant</h1><p>对于一个函数，如果对其输入施加的某种操作丝毫不会影响到输出，那么这个函数就对该变换具有不变性。</p>
<script type="math/tex; mode=display">
f(x)=f(x')=f(g(x))</script><p>则 f 对变换 g 具有不变性。</p>
<h1 id="与-CNN-的关系"><a href="#与-CNN-的关系" class="headerlink" title="与 CNN 的关系"></a>与 CNN 的关系</h1><p>CNN 中的卷积操作中的参数共享使得 CNN 对平移操作有等变性，而一些池化操作对平移有近似不变性。</p>
<p>先来说前者， 我们举个很简单的例子，我们都知道 CNN 的第一层往往可以解释为一些简单的线条处理，比如竖直/水平线条检测等等，那么如果图像平移，显然并不会影响到这一层线条检测的功能，但是其输出也会做相应平移。</p>
<p>后者的之所以说是近似不变性，是因为池化层并非能保持完全不变，例如我们使用 max 池化，只要变换不影响到最大值，我们的池化结果不会收到影响，对于一个<code>NxN</code>的 filter ，只有一个值的变动会影响到输出， 其他的变换都不会造成扰动。 平均池化的近似不变性就稍弱些。这里池化的其实是一个非常强的先验，等于是忽视了这一步维数约简带来的信息损失而保证了近似不变性。</p>
<p>我们换个角度来说， CNN 是既具有不变性，又具有等变性。 可以这么理解，如果我们的输出是给出图片中猫的位置，那么我们将图片中的猫从左边移到右边，这种平移也会反应在输出上，我们输出的位置也是从左边到右边，那么我们则可以说 CNN 有等变性；如果我们只是输出图片中是否有猫，那么我们无论把猫怎么移动，我们的输出都保持”有猫”的判定，因此体现了 CNN 的不变性。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>支教工作文档——英语课</title>
    <url>/2022/01/18/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E6%94%AF%E6%95%99%E5%B7%A5%E4%BD%9C%E6%96%87%E6%A1%A3%E2%80%94%E2%80%94%E8%8B%B1%E8%AF%AD%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="英语组备课思路与总结文档"><a href="#英语组备课思路与总结文档" class="headerlink" title="英语组备课思路与总结文档"></a>英语组备课思路与总结文档</h1><p><strong>填写人——赵晨阳</strong></p>
<h1 id="初步构思"><a href="#初步构思" class="headerlink" title="初步构思"></a>初步构思</h1><ul>
<li>通过三节课程的时间，讲评<code>2019</code>年与<code>2020</code>年的全国三卷英语，并按照题型展开一些学习方法</li>
<li>赵晨阳负责<code>2020</code>年的全国三卷</li>
<li>罗淇负责<code>2019</code>年全国三卷</li>
</ul>
<h1 id="具体计划"><a href="#具体计划" class="headerlink" title="具体计划"></a>具体计划</h1><ul>
<li>提前在课前一天以内重新完成试卷，并结合答案思考讲评方式</li>
<li>提前两天让学生完成课堂重点讲解部分的题目——已经布置为作业</li>
<li>推荐相关的学习资料——<code>to be attached...</code></li>
</ul>
<h1 id="作业布置"><a href="#作业布置" class="headerlink" title="作业布置"></a><strong>作业布置</strong></h1><p><strong>各位亲爱的同学：</strong></p>
<p>这份文件是本周英语作业的一部分。如你们所见，这是<code>2020</code>年的全国三卷考题，同时也是我做过最后一套完整的高考试题。</p>
<p>经典的书籍，常读常新，而经典的试题——高考试题，更是如此。</p>
<p>为了命制一份为国家选贤举能的英语试题，诸多的高校教授需要辛苦钻研数月之久，反复斟酌更改上百次，才能做到试题有新意而不偏不倚，有选拔度而不难不怪。</p>
<p>从这个角度，我个人对于<code>2020</code>年的全国三卷试题较为满意。我个人认为这是一套质量上乘，而且能够为同学们之后的学习或者复习提供启发的试卷。</p>
<p>出于这些考虑，我和罗淇志愿者的主要授课思路是结合高考试题本身，精讲每一道题目，并以题目为基础进行展开，向同学们介绍一些基本的解题方法，诸如：</p>
<ul>
<li>如何精准的完成快速阅读题目</li>
<li>主旨大意阅读题的解题思路</li>
<li>完形填空的回环相扣法</li>
<li>词性转换的注意事项</li>
</ul>
<p>为此，我刻意将<code>2020</code>年全国三卷的试题进行了删改，留下了将重点讲解的部分。而其他部分——例如作文和听力，将主要介绍训练方法。希望同学们能够将这些题目在周四上课之前完成，并且参考我给出的答案进行批改和自主反思。如果对于答案仍然还有不理解的地方，则可以在课前单独发消息给我，我会在课堂上重点讲解。</p>
<p>期待与同学们共度美好的英语课堂。</p>
<p>赵晨阳</p>
<p><code>2022</code>年<code>1</code>月<code>18</code>日</p>
<p>于清华<code>AIR</code></p>
<h1 id="开场白"><a href="#开场白" class="headerlink" title="开场白"></a>开场白</h1><p>各位同学，大家好，欢迎来到今天的英语课堂，我是清华大学计算机系大二的赵晨阳，家乡在四川汶川，非常高兴能够给大家带来一次英语课。</p>
<p>课程正式开启前，我先说明一下，本次课程全程都有回放，并且课后我会将我的讲义发送至课程群中，因此大家不用担心课上没有完全地记下笔记，只用尽量的听懂我在讲什么，以及及时的提问即可。</p>
<p>那么课程正式开始。</p>
<p>首先，我已经提前非常多天向各位同学做过课程预告，也非常感谢大家能在课前按时完成了作业并且进行了批改。从大家反馈的情况来看，整体还是非常不错的。看得出来大家有在英语上进行思考和练习。</p>
<p><strong>此处举例子！</strong></p>
<p>这是非常良好的习惯，也是我个人认为在高考英语上取得胜利的关键因素。也就是积极的思考，充分的练习。</p>
<p>思考与练习，这两句话听上去非常的稀疏平常，然而我可以负责任地告诉大家，在你们高中余下的学习生活当中，课程完成之后，你们做的大多数的事情都集中在练习上，而英语尤其如此。</p>
<p>由于英语学科本身考查的内容与课本并没有太大的关系，很多的老师喜欢完全脱离课本，彻底进行题海战术来提升大家的英语水平，而疏忽了对于学生思考的引导。这样做是否对于提升英语成绩有用呢？我的结论是，当然是有用的，然而是有限的。</p>
<p>有用，当然是因为量变带来质变，这个道理在各个领域都是正确的。然而其作用，可能随着你做题的数量增大而却越来越微乎其微，用经济学的角度来解释，也即英语学科刷题的边际效益下降的非常快。我们会很快的发现，题型似乎出现大量的重复，甚至题干都仿佛只字未改。然而上次你印象中的答案可能会与这次相去甚远。这点尤其体现在完形填空题型上，会有非常多的同学纠结，在上一次我做的某道题目当中，这个做法是对的，那么请问为什么在这里他不对了？</p>
<p>越到了后期，如果不进行及时的反思，这样的问题会越堆积越多，然而疑问尚且没有解决，新的题又接撞而至，如此陷入刷题的恶性循环。也许对于词性转换这样灵活度不太高的题目，刷题的边际效应下降不会如此明显。然而现在英语考试的趋势是逐渐增大对学生理解能力的考察要求，也即类似阅读，完形填空此类的题目，分数会越来越重，难度会越来越大。因此，这就需要我们及时意识到，必须避免陷入盲目刷题的陷阱，更应该及时进行思考与总结。</p>
<p>从这一点来看，我对之前同学们提出的问题表示赞许。可以看出，大家正在积极地对这门学科展开思考。而思考与理解，才是高考英语选拔的最为核心的能力。</p>
<p>好的，前面叙述了这么多思考与练习的关系，我们现在开始正式的进入题题目讲解部分。我会结合题目的讲解来讲述一些基本的英语学习方法与做题技巧。</p>
<h1 id="阅读方法"><a href="#阅读方法" class="headerlink" title="阅读方法"></a>阅读方法</h1><h2 id="快速阅读题"><a href="#快速阅读题" class="headerlink" title="快速阅读题"></a>快速阅读题</h2><h3 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h3><p>也即第一道阅读题，顾名思义既然他叫做快速阅读那么重视道题的核心就是快速扫描信息，如果扫描没法解决，再理解文段。</p>
<p>而速度是如何得到的？这正是此类文章的特点，文段之间没有太大的相互性，前文是否理解，我甚至前文是否有读过，都不影响你对后文的理解。</p>
<p>因此假设文本有六个语段，分别是六篇广告。然而题干只涉及到了前五则广告，这意味着第六篇广告是不用读的。这样就达到了快速阅读的效果。</p>
<p>基于此，我的做题方法是——快速浏览这一文段的所有题目题干，然后根据题干要求来反向扫描文本的关键信息，给出答案。</p>
<p>注意什么是扫描？扫描的意思并不是说读一遍，而是仅仅用眼睛看一遍，甚至不需要也最好不必理解。扫描时，只用确定题干中的关键信息的两点信息：</p>
<ul>
<li>出现过几次？</li>
<li>在文中的哪出现过？</li>
</ul>
<p>如果关键词只出现过一次，那么有99%以上的概率可以确定答案就是在这则语段当中选择。反之，如果出现过多次，则可能需要细读文本。这时才进入第二个核心能力，快速扫描没法确定答案，那么就需要理解，然后对比，选出更为恰当的选项。</p>
<p>从这个角度上来看，这套卷子的快速阅读题是偏简单的。</p>
<p>因为题干中所有的关键信息仅出现过一次并且就是正确答案。</p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>具体而言，第二十一题，题意非常明显，也就是比较第一则广告与第二则广告的共同特点。</p>
<p>这道题并没有很明确的原文关键词，但是已经完全限定了范围。</p>
<p>我们只需要注意到店一则广告语，第二则广告的关键信息都提到了 monument 一词。而且分别对 monuments 的修饰是 historical 与 Roman。结合来看，这二者都是非常有历史文化的古迹，所以说选择 A 项。</p>
<p>第 22 题，我们确定的关键词是professor Thorp之后，只需要快速扫描找出 professor Thorp 是在哪儿出现的，而出现了几次。快速的扫描文章一遍，我们发现这个人他只在第三则广告出现过，因此非常幸运，我们连第三则广告的内容都不用细读，就知道一定是选择第则文章的相关内容，也即 C 项。</p>
<p>最后 23 题，他的关键词是Tunisian tour，很明显对应着最后一个广告。我们将四个选项代入第四个语段。发现只有 B 选项出现在第四个广告当中，我们甚至不用理解最后一个广告他说了什么就能肯定选项 B 为正确答案。</p>
<h2 id="科技、人文与记叙文"><a href="#科技、人文与记叙文" class="headerlink" title="科技、人文与记叙文"></a>科技、人文与记叙文</h2><h3 id="方法论-1"><a href="#方法论-1" class="headerlink" title="方法论"></a>方法论</h3><p>对于余下的四三篇科技人文、记叙一类的阅读题，我的做法和大家可能不太一样。一般而言，我会先仔细阅读这篇文章的第一段，然后开始读题干，将题干勾画完全确定关键词之后，再反过来细读文章。</p>
<p>这么做的好处在于，阅读第一段之后，我大概能够知道文章可能会讲些什么。然后这个时候阅读题目，我们能根据题目，进一步推测文章的主要内容，把握文本的全貌。用文言文来表达就是，虽不至矣，亦不远矣。</p>
<ul>
<li>很多时候有些题会考察诸如文章第一段作用是什么一类的题型。这时候，只读第一段便可以完成这样的题目，而且不会受到后面文章的影响。</li>
<li>而且第一段往往内容非常的简短，很快就可以读完并且理解清楚。只读第一段，便可对文章全貌有所了解，这样类似于快速阅读的做法，对于提升我们的做题速度和准确度仍然是非常好的</li>
</ul>
<p>因此我个人非常推荐这样的做题方法，长期这样训练也可以练出自己做题的节奏。</p>
<p>具体到这三篇文章里面，我们来看看第一道题。</p>
<h3 id="主旨大意题的做题方法"><a href="#主旨大意题的做题方法" class="headerlink" title="主旨大意题的做题方法"></a>主旨大意题的做题方法</h3><ul>
<li>反复询问自己，如果是我是作者，写这个题目，我会写什么？</li>
<li>逐个比照选项，想清楚这件事情</li>
<li>对比原文内容和你想写的是否一致，一致的才是答案</li>
</ul>
<h3 id="B-篇"><a href="#B-篇" class="headerlink" title="B 篇"></a>B 篇</h3><p>首先B篇的第一段它字数比较长，我们快速的读一遍。<br>这句话他先讲了一部电影，rise of the planet of the apes，然后这个电影上线了。又说，很多的animal activists聚集在了好莱坞之前。</p>
<p>然后他马上说这些人聚在一起不是为了 Throw red paint on fur coat wearing film stars而是为了Praising the film makers for not using real apes。</p>
<p>就我们读的时候可能很不理解什么叫做through red paint on，但是，阅读能力告诉我们这句话不是重点，因为一般的重点都是放在但是之后的。</p>
<p>而这篇文章但是就是instead之后，这些动物保护主义者说要感谢，制片人没有使用真正的猿猴。</p>
<p>然后至于这些rise of the planet of the apes以及through red paint on这些东西，你可能都不知道它的真正意思，你就能够大概了解清楚这篇文章是在讲什么，是在讲动物保护。</p>
<p>知道他在讲动物保护那就够了，然后第一段读完了，我们就可以来开始阅读题干。</p>
<p>第24题的题干，就像我说的，显然他很明确地就在考察第一段的内容，为什么这些动物保护主义者会聚集在好莱坞之前。然后这个也很明显就是选D选项——表达感谢，和原文是完全相同的。</p>
<p>然后第25题告诉我们，应该重点去关注第2段，它的主旨大意是什么？</p>
<p>第26题，希望我们注意到第3段中的短语keeping taps on是什么意思。意思就是至少我们需要详细的阅读第三段，并且理解了段落大意才好做作答。</p>
<p>然后最后一道题，询问我们能从最后一段推测出动物演员的什么特征。那么这个答题范围也锁得很死，就是好好阅读最后一段就行了。</p>
<p>从这个角度我们通过阅读第1段，然后读题，快速的把这篇文章的做题点和答案出现的位置都切分出来了。</p>
<p>剩下的无非就是按部就班的完成。</p>
<p>然后文章第2段无非就是讲这个队伍用了动作捕捉技术，然后来产生影像，最后看着像真正的猿猴一样。显然第 25 题，讲的就是如何产生数字猿猴，显然选择B选项。</p>
<p>然后我们看这个第三段他讲了什么。他首先说我们这儿有一个不盈利的组织，这个组织监控着制片人是如何对待动物的。前文说了监控之后，马上就提到了is keeping tabs on more than 2000 productions this year.也能给我们充分的理由相信，此题选择D，也就是仔细的监管着。</p>
<p>最后，第四段。原文大意是指并不是在工作室这样能够监控到的地方能够可能存在动物虐待，而是人们看不到的地方可能存在动物虐待。最核心就是——动物演员可能会被虐待。所以这道题选择A选项。</p>
<p><strong>最后稍微解释下猩球崛起和红染料的事情。</strong></p>
<h3 id="C-篇"><a href="#C-篇" class="headerlink" title="C 篇"></a>C 篇</h3><p>还是先读第一段，第一段非常简短，阐述了年轻人买不起房子，然后老年人害怕孤独，所以说很多的家庭选择住在一块。</p>
<p>然后现在我们来阅读题干，题干第1道题是问的一个细节题，谁住在最底层。第2题也是一个细节题，关于Nick的态度。第3题询问作者的论述的基础。最后一道题询问整篇文章的主题内容。</p>
<p>我们差不多知道的这篇文章会有什么人出现，以及讲述的是一个什么样的事情，然后就带着这些想法开始做题。</p>
<p>第28题非常显然，第3段最后一句话说Rita在ground floor有很多房间，那么就是说Rita主要使用ground floor。</p>
<p>然后第29题这里问Nick的态度，然后我们看nick他说过什么话呢，他说我是否推荐啊，我非常推荐，然后我还觉得这个东西work well，那显然，Nick的态度是非常积极正面的。</p>
<p>第30题，他问作者的论述是基于什么，然后我们通读全文，发现出现了非常多的数字，那么很显然作者的论述是基于公开数据的，所以第30题选择C项。</p>
<p>然后第31题他说这个文段主要是关于什么的，嗯，然后这个题就挺明显吧，就是说在英国的一种新居住潮流。</p>
<h3 id="D-篇"><a href="#D-篇" class="headerlink" title="D 篇"></a>D 篇</h3><p>最后是一篇科技类的文章。</p>
<p>首先来读文章第1段，文章第1段说人类是进化的产物，但是这不仅仅是这十几亿年进化的产物。所以这里就产生一个疑惑，难道是说是那个进化时还会更长吗，比如说上百亿年，还是说人类在这几千年的时间之内也会进化。然后紧接着第2句话就是说，其实人类在这几千年的时间内也在进化，其实我们就知道这篇文章应该是讲人类的进化其实在近期内也有发生。</p>
<p>然后，我们开始阅读题干。第1题就像我之前说过，他会马上就上来问你第1段有什么作用？既然都读了第1段，就顺便把这道题做了。然后遍历一遍，就只有B选项比较符合题意，就是说人类的进化其实在这几千年也有发生，这是一个关于人类进化的新知识，所以这道题选择B选项。</p>
<p>33题是一个细节题问，你这个人种他在哪建房子？第34题也是一个细节题问，你为什么这个年轻的人会感到很惊讶？35题是一个主旨大意题，询问我们一个合适的标题。</p>
<p>通读全文然后开始做题，首先第33题他问我这个Bajau他们在哪修房子，很显然原文当中有提到过，他们是修房子在船上或者在礁岩上。所以这道题选择远离海滩，D选项。</p>
<p>然后第34题问你，为什么年轻的研究人员感到吃惊，因为当时也有提到过，他第1次感到吃惊，是因为发现这些人能够潜水潜的非常厉害，也就是说他们能够在水下待非常之久，所以34题选择C项。</p>
<p>最后35期问你文章合适的标题是什么？嗯，纵观全文，全文一开始讲了一些进化的事情那，就结合一个具体的人种来讲了进化这个事情，而且还提到了这个人种，它并没有适应空气或者适应陆地，而是适应了海洋，所以综合来看，我们可以认为这篇文章的标题应该是要提到适应的海洋净化等等巨型，所以我们选择A项，也就是说适应了海洋的人体吧。</p>
<h1 id="完形填空与七选五"><a href="#完形填空与七选五" class="headerlink" title="完形填空与七选五"></a>完形填空与七选五</h1><h2 id="完形方法论"><a href="#完形方法论" class="headerlink" title="完形方法论"></a>完形方法论</h2><p>关于完形的话，我能给出一种做题的方法，就是回环相扣。</p>
<p>也就是说在第一遍做题的时候，我们最好能够做到边读边做，但是做完了之后一定通读一遍，是否有什么不合适的地方。然后如果觉得不合适再进行更改。</p>
<p>完形的练习方法，我个人认为只需要掌握一个核心。每当遇到一个错误，请思考别人为什么是对的，而不是思考我为什么是错的。</p>
<p>从语料学的角度来看完形经常陷入的问题，就是有两个都正确答案，但是会有一个更加正确。</p>
<p>很多同学会纠结，我认为我的答案也是正确的，为什么不能给分？</p>
<p>然而对比一下，可能就会发现标准答案选的这个东西，它更加符合语境。从某种意义上来讲，这也是希望各位同学不必钻牛角尖太过纠结于某一个选项，而是把握一种宏观的感觉。</p>
<h2 id="七选五方法论"><a href="#七选五方法论" class="headerlink" title="七选五方法论"></a>七选五方法论</h2><p>七选五和完形填空方法差不多，边读边做，核心是承前启后，要么承前，要么启后，要么两者都可以，也就是——选择逻辑上和上下文相关的。</p>
<p>最后，第一遍完成后，注意回环相扣，再通读检查一遍，确认无误即可。</p>
<h2 id="七选五题解"><a href="#七选五题解" class="headerlink" title="七选五题解"></a>七选五题解</h2><p>比如说说第三十六题。前面一句话是说warm house party is the chance for friends and family to congratulate the person on the new home。</p>
<p>就是说这个派对是用来欢迎新搬来的住户。紧接着36句后面一句话就是说同时也是很好的一个机会，来让这个环境充满着爱与乔迁礼物。</p>
<p>然后对比一下，可能比较合适的选项是B选项和F选项。</p>
<p>B选项是说这是一个很好的机会，你能给他们带点礼物，然后F项是说同时这是一个很好的机会，来看一看新搬来的住户长什么样子。</p>
<p>这时候可能就觉得很奇怪，感觉E选项和B选项都可以。</p>
<p>那我们就先不用确定接着读下去。</p>
<p>接着看第37题，37题跟着这个第2段都是在讲什么一些人会注册一些礼物啊，然后什么样的礼物比较合适，有什么常见的礼物等等。</p>
<p>那么显然第2段是和礼物有关系的，这样我们就可以看到B选项应该非常合适这一段。也就是B选项它阐述了。给新搬来的住户带礼物是非常传统的。</p>
<p>从而我们可以认为第37题选B，那么36题就应该选择E。</p>
<p>然后看第三十八题，38题后面这句话说这种行为是非常受欢迎的，因为这样一个house warming party可能并没有足够多的食物。</p>
<p>关键是我们看C选项，C选项说你同时也可以带一些食物或者饮料来，那么这句话很好地承接了后面这句话，所以我们认为38题选择C选项非常合适。</p>
<p>然后最后看这个三十九题。前文说有时候可能搬来的这些住户房子还没有落好，所以有些参加派对的人会被叫去帮忙搬箱子。然后这个时候就看感觉A选项很合适，因为就是前面说的一个some time，就是说这个事情并不是经常发生嘛，然后a选项就讲了，这个事情不太经常发生，而且也没有比A选项更合适的了。</p>
<p>最后一题40题，然后我们看最后一段，他大概讲的就是house warming party的历史，他说就是因为很早以前人们会带着燃烧着的火把去新房子作为礼物。</p>
<p>然后为什么要这么做呢？G选项就回答了，就是因为你带着火把去就能够照亮他们的房子，帮助这家人过冬，然后所以说G选项非常的合适，我们就选择G。</p>
<h2 id="完型题解"><a href="#完型题解" class="headerlink" title="完型题解"></a>完型题解</h2><p>这篇完形整体上来看是一个非常简单的记叙文。</p>
<p>首先作者开始介绍背景as a business women，我非常关心我的顾客。</p>
<p>那么就可以感觉到，这篇文章应该是围绕着顾客和我的关系来展开的。</p>
<p>然后就是说，就像大家都想的那个样子，会有人drive you mad，然后让我们来选这个人是谁？很显然这就是customer对吧？</p>
<p>第41题前面这个句子是说，就如同大多数我们会产生感情的人一样，谁谁谁drive you mad。</p>
<p>这个谁就是41这个空，显然是选customer。</p>
<p>接下来他说这个顾客们会突然闯进来，然后说他们的包掉了。</p>
<p>所以42题应该选saying就是说出他们的包掉了。</p>
<p>然后43题他们会发誓，自己一定是忘在了changing room，里面制造很多的混乱，最后finally发现原来是被忘在自己的车里面。</p>
<p>然后45题又开始了一个新的话题。就是说他们会尝遍店铺里面的所有衣服，然后他们却只想要一款这个店里从来没有的衣服，然后这款衣服它只有这一个店里唯独没有的颜色。</p>
<p>每到这个时候我的售货员们就会非常的抓狂，但是我总会劝着他们要保持什么，这个时候就要联系到我们的生活经验是吧，比如我们去一般的大的商场，这社会应该都是面带微笑，面如春风，然后看待着我们所以说47题应该是keep smiling。</p>
<p>之后48题开始讲了一个具体的例子，他说我记住有一个特别的顾客，然后说这个特别的顾客，那么48题就是选择，他为什么特别这一个特别我们就可以理解一下，难道是careless就是不小心吗？他说polite特别的礼貌或者说generous特别的慷慨。结合后文来看，应该是这个顾客比较难缠，那么应该选择difficulty就是D选项。</p>
<p>随后四十九题，他就开始讲具体怎么的难缠，他说他对于几乎所有事情都不满意，然后说任何事情都不对。</p>
<p>最后第50问，表达了我感到非常的什么什么，他之后却变成我们的一个常客。</p>
<p>就是他这样前面对于我们的服务都这么的不满意，最后他居然变成了我们的常客，这当然会让我感到非常的惊讶，所以说第五十问选择surprised非常合适。</p>
<p>然后第51问他说过了一段时间，他解释为什么他会一开始表现这么的difficult。</p>
<p>然后第51问，他就为之前自己非常不讲礼貌来道歉了。</p>
<p>他说那段时间他和他刚和他的丈夫分开，然后独自一人住在一个工具里面，因此他就认为很多事情难以对付，于是他把这样的情绪排解到了其他人身上。</p>
<p>这件事情就教会我了一课。并且我也给之后所有我的商场里面的工作人员讲这件事情。</p>
<p>接下来是第56题，do not take it personally。这句话首先我个人而言，其实这是一句在英文里面蛮常用的口语，也就是说不要，太片面的思考一个人的问题。也就是说一个人的问题可能不只是他本身，还有可能是他背后的社会啊，家庭啊等等原因，然后这其实是一个很常见的短语。所以第56题，其实其他的都没有这个do not take it personally合适。</p>
<p>接下来说如果一个顾客他非常的rude，就想啊，也许他正在度过一段不好的时光，嗯，可能他的丈夫和他在吵架，也可能他的孩子身体并不是很好，这57题的well是指身体好的意思。</p>
<p>永远把自己的情绪降下来，并且不要让自己的自我意识 get in the way。</p>
<p>Get in the way的意思就是说放飞自我吧，大概就是这个意思</p>
<p>然后接下来两个空，如果你这么干了的话，你可能就很难去，处理和顾客的关系，然后这样也会毁灭每个人的一天。</p>
<h1 id="词性转换"><a href="#词性转换" class="headerlink" title="词性转换"></a>词性转换</h1><h2 id="方法论-2"><a href="#方法论-2" class="headerlink" title="方法论"></a>方法论</h2><p>最后是词性转换的问题，词性转换有很多同学会陷入一种误区，就是把文段的填词变成了逐句的填词。</p>
<p>这些我们必须要理解一下，既然他给出了这一整个段落，而不是只给出你一个句子，这必然是有一定的意义的，否则为什么这个题不改变成初中一样的按句子填词呢？</p>
<p>因此我必须要纠正一些常见的误区，大家务必要读完整个语段。</p>
<p>具体到这道题的话，其实这个题也非常的简单。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>第61题说在古代中国有住的一个画家，这个画家他的画呀，这个非常的栩栩如生。</p>
<p>我们读者就像是告诉我们这个whose painting was almost lifelike，所以说这个填whose也非常正确。</p>
<p>然后说这个画家他的评价非常的高，然后他的成就让他非常的自豪，或者说有些骄傲吧。</p>
<p>之后有一天这个国家的国王啊，想要去给自己弄个自画像，于是国王召集了全国所有的画家，送上他们最好的作品。</p>
<p>所以说62问填finest。</p>
<p>于是我们开辟这个画家，他非常的自信，他非常坚信自己会被chosen对吧，他会被选择。</p>
<p>这里既然是被选择，那么就是he would be chosen。</p>
<p>然后最后他把他的画作交给国王的时候，这个国王他笑了嗯国王说，呀，你应该去丽江转一转，说不定你就可以有一些新的启发。</p>
<p>于是画家满载着curiosity，他背上了包，然后就走了。</p>
<p>当他在路上，问这些居住在山谷里面的人，到哪儿才能找到世界上最传奇的画家，他们都笑了，然后向他们指向这条河流。显然这里是用pointed表示过去时对吧？</p>
<p>那天早晨他听到了传声，然后他坐了出去去寻找这个知名的画家，所以说这里是表示目的，也就是说to find。</p>
<p>随着这个船它缓慢的移动，优雅的在河流上漂浮，他感到，无言表达世间的至美。</p>
<p>然后第69问，他说，他看见这些漂浮着的雾气和云彩环绕着这些山顶，所以这里选择surrounding表示，主动做一个什么事情。</p>
<p>最后一句话就说，画家明白自己应该保持谦逊，然后这个世界上最伟大的艺术家在地球就是，大自然。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>英语</tag>
        <tag>社工</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript part 2</title>
    <url>/2022/01/18/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/javascript_part_2/</url>
    <content><![CDATA[<p><del>正好科协<code>doc9</code>要上线了，作为内测玩家，我先学一学…</del></p>
<p><a href="https://docs.net9.org/languages/javascript/"><code>doc9</code>的<code>JS</code>链接</a></p>
<h1 id="JavaScript-的变量与变量类型"><a href="#JavaScript-的变量与变量类型" class="headerlink" title="JavaScript 的变量与变量类型"></a>JavaScript 的变量与变量类型</h1><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>JavaScript 语言之中声明变量的关键字有三个，分别为 <code>var, let, const</code>。从字面意义上来看，<code>const</code> 用于声明常量，而 <code>var, let</code> 则用于声明变量。在 <code>var, let</code> 选取的问题上，编者建议尽量全部使用 <code>let</code> 关键字声明变量以防止混乱，具体原因可以参照讲解 JavaScript 函数部分的<strong>变量提升</strong>注解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> weakType = <span class="number">0</span>;</span><br><span class="line">weakType = <span class="string">&quot;You are a string now!&quot;</span>; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>
<ul>
<li>获取数据类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> testNum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> testNum); <span class="comment">// &quot;number&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h2><p>JavaScript 语言的判等运算符有 <code>==, ===</code> 两种，判不等运算符也相应地有 <code>!=, !==</code> 两种。编者建议完全使用 <code>===, !==</code> 来代替 <code>==, !=</code>，这是因为后者在比较之前可能会发生强制类型转换，而这种转换通常不必要且难以理解。另一方面，前者则会进行严格的值比较，不进行类型转换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="literal">true</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> === <span class="literal">true</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2><p>JavaScript 语言之中的数字不区分整数和浮点数，统一使用浮点数表示。所以除法没有类似 C/C++ 的向下取整的性质。</p>
<p>部分数学相关的函数、常数均可以使用内置对象 <code>Math</code> 调用。</p>
<p>然而，涉及到精确的数学计算的时候一定要注意浮点数误差问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI; <span class="comment">// 3.141592653589793</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">5</span> / <span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.sin(<span class="built_in">Math</span>.PI); <span class="comment">// 1.2246467991473532e-16</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a><code>NaN</code></h3><p>在判定一个值是否是 <code>NaN</code> 的时候<strong>不能</strong>使用运算符 <code>===</code>，而应当使用 <code>isNaN</code> 函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;2.4&quot;</span>); <span class="comment">// false, &quot;2.4&quot; can be converted to 2.4</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;No&quot;</span>); <span class="comment">// true, &quot;No&quot; can never be converted to legal number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">true</span>); <span class="comment">// false, true can be converted to 1</span></span><br></pre></td></tr></table></figure>
<p>我们在代码之中很少直接写出 <code>NaN</code> 字面量，但是我们依然需要注意各种运算可能产生的 <code>NaN</code>，并且合理使用 <code>isNaN</code> 函数进行分支判定，以防止程序出现 bug。</p>
<h3 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a><code>Infinity</code></h3><p><code>Infinity</code> 代表无穷大，如果运算结果超出了 JavaScript 能处理的范围，则会得到 <code>Infinity</code>。<code>Infinity</code> 所参与的算术运算也一般符合数学直觉，如果涉及到不定式（零乘以无穷大、无穷大减无穷大等）则会得到 <code>NaN</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line">-<span class="number">1</span> / <span class="number">0</span>; <span class="comment">// -Infinity</span></span><br><span class="line"><span class="number">1e100000</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="number">0</span> / <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> + <span class="number">1</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> - <span class="number">1</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> * <span class="number">2</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="literal">Infinity</span> / <span class="number">3</span>; <span class="comment">// Infinity</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> * <span class="number">0</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">Infinity</span> - <span class="literal">Infinity</span>; <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="literal">Infinity</span> === <span class="literal">Infinity</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span>; <span class="comment">// &quot;ab&quot;</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.charAt(<span class="number">0</span>); <span class="comment">// &quot;h&quot;</span></span><br><span class="line"><span class="string">&quot;hello, Mike&quot;</span>.replace(<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Mart&quot;</span>); <span class="comment">// &quot;hello, Mart&quot;</span></span><br><span class="line"><span class="string">&quot;hello, Mike&quot;</span>.indexOf(<span class="string">&quot;Mike&quot;</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.substring(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// &quot;l&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>这种字符串不使用单引号或双引号包围，而是使用反引号包围，内部可以使用 <code>$&#123;&#125;</code> 块包围代码块，JavaScript 会计算出代码块的结果并将其转化为字符串嵌入模板之中。这个语法的好处在于不需要手写很多 <code>+</code> 来手动拼接字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="string">`The val of i + 1 is <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>.`</span>; <span class="comment">// &quot;The val of i + 1 is 2.&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串加法"><a href="#字符串加法" class="headerlink" title="字符串加法"></a>字符串加法</h3><p>JavaScript 允许任意变量和字符串相加。而最常用的是字符串在加号左侧，其他变量在加号右侧的形式，这种运算的逻辑是将其他变量转化为字符串后进行字符串拼接。</p>
<p><strong>这就诞生了一个 trick，即用一个空字符串加一个变量，就可以方便地将这个变量转化为字符串。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;4&quot;</span> + <span class="number">3</span>; <span class="comment">// &quot;43&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> + <span class="number">3</span>; <span class="comment">// &quot;3&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;</span> + <span class="literal">true</span>; <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串转为数字"><a href="#字符串转为数字" class="headerlink" title="字符串转为数字"></a>字符串转为数字</h3><p>使用 <code>parseInt</code> 和 <code>parseFloat</code> 函数，这里讲解 <code>parseInt</code> 函数。这个函数接受两个参数，第一个是需要转换的字符串，第二个是转换的进制数。不传入这个参数的时候默认根据字符串格式确定，如果以 <code>0x</code> 开头，则按照十六进制转换，其他则按照十进制转换。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;132&quot;</span>); <span class="comment">// 132</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;0x10&quot;</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;010&quot;</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;365&quot;</span>, <span class="number">10</span>); <span class="comment">// 365</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">4</span>); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>为了避免适配问题，建议使用<code>parseInt</code>函数的时候不使用其默认进制，而是手动通过第二个参数指定。</p>
<h2 id="对象和数组"><a href="#对象和数组" class="headerlink" title="对象和数组"></a>对象和数组</h2><p>对象类型是 JavaScript 语言之中最常用的复合类型，其由若干的键值对组成，每一个键值对之中值可以是任何类型的变量，同时也允许对象的嵌套。对象字面量使用花括号表示，花括号内部键值对使用逗号分隔，每一个键值对的键和值使用冒号分隔。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="attr">foobar</span>: &#123;</span><br><span class="line">        <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">b</span>: <span class="string">&quot;I am a value&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>每一个键值对之中的键称为这个对象的<strong>属性</strong>。访问给定对象的属性使用 <code>.</code> 运算符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">1</span>, &#125;;</span><br><span class="line">obj.foo; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 的数组使用中括号，各元素之间使用逗号分隔，且 JavaScript 不要求数组元素都是同一类型。访问数组的某个元素使用 <code>[]</code> 运算符。</p>
<p>JavaScript 数组有内置属性 <code>length</code>，其值为可用的最大索引数加一。</p>
<p><strong>JavaScript 数组的真正强大之处在于其内置的方法，除去常用的取索引、切片方法之外，还支持传入回调函数的遍历、映射、迭代、筛选、排序方法。</strong></p>
<p>如果有些方法会影响到原有数组而你并不想这样做，请一定要在调用方法前创建副本以防止数据丢失。此外，为了养成良好编码习惯，在使用语言内置的方法，乃至第三方库的方法的时候，一定<strong>仔细阅读文档</strong>以确定这些方法的行为符合预期且可控。</p>
<h2 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h2><p><code>undefined</code> 类型和 <code>null</code> 类型被称为空类型。两者的区别可以直观理解为“空的程度不一样”，<code>null</code> 是空的，但它是存在的，而 <code>undefined</code> 不存在，它没有被定义。</p>
<p>事实上，在实际的 JavaScript 编程之中，我们更容易遇到 <code>undefined</code>。以下情况均会得到 <code>undefined</code>：</p>
<ul>
<li>访问没有赋值的变量</li>
<li>数组越界访问</li>
<li>访问对象上不存在的属性</li>
<li>获取没有返回值的函数的返回值</li>
</ul>
<p>在 <code>undefined</code> 上访问属性会抛出错误，这个错误会在 JavaScript 编程的时候经常遇到，而且原因常常是类似如下语句的连续属性访问：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.data.propList[<span class="number">3</span>].name;</span><br></pre></td></tr></table></figure>
<p>一种解决方式是每进行一次属性访问就判定其是否获得了 <code>undefined</code>，如果是，则终止继续的属性访问。而较新的 JavaScript 语言规范之中引入了 <code>?.</code> 运算符，其作用是<strong>在这个属性访问出错的时候中断属性访问并返回 <code>undefined</code></strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.data?.propList[<span class="number">3</span>].name;</span><br></pre></td></tr></table></figure>
<p><code>?.</code> 应当出现在可能导致访问 <code>undefined</code> 的属性访问上，而非可能导致访问结果为 <code>undefined</code> 的属性访问上。</p>
<p>比如不确定不确定 <code>response</code> 是否有 <code>data</code> 属性的时候，就是不确定 <code>response.data</code> 是否为 <code>undefined</code></p>
<p>故而写为<code>response.data?.propList[3].name;</code></p>
<p>而非<code>response?.data.propList[3].name;</code></p>
<ul>
<li>你甚至可以这样尝试 <code>?.</code> 运算符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span>?.anyProp; <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure>
<h1 id="1-月-26-日"><a href="#1-月-26-日" class="headerlink" title="1 月 26 日"></a>1 月 26 日</h1><h2 id="JavaScript-的控制语句"><a href="#JavaScript-的控制语句" class="headerlink" title="JavaScript 的控制语句"></a>JavaScript 的控制语句</h2><p>JavaScript 支持的控制语句关键字包括 <code>if, else, switch, case, while, do, for</code>，其用法和 C/C++ 语言几乎完全一致。</p>
<p>过需要注意的是，涉及到条件判断的时候会发生<strong>强制类型转换</strong>（将变量强制转换为布尔值），其逻辑为：</p>
<ul>
<li><code>undefined, null, 0, NaN, &quot;&quot;, false</code> 转化为 <code>false</code></li>
<li>其余均转化为 <code>true</code>（无论是对象还是基本类型）</li>
</ul>
<p>值得注意的是布尔值类型的包装类 <code>Boolean</code> 对象，无论其表示 <code>true</code> 还是 <code>false</code>，其均会被转化为 <code>true</code>，也即：<code>new Boolean(false)</code> 为 <code>true</code>。</p>
<h2 id="JavaScript-的函数"><a href="#JavaScript-的函数" class="headerlink" title="JavaScript 的函数"></a>JavaScript 的函数</h2><h3 id="声明与调用"><a href="#声明与调用" class="headerlink" title="声明与调用"></a>声明与调用</h3><p>我们一般把 JavaScript 的函数也认为是一种变量，因为在 JavaScript 之中，函数的行为很大程度上和变量类似</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><p>实际上 JavaScript 从来不检查你函数调用是不是符合参数列表，本身 JavaScript 就不检查变量类型，实际上 JavaScript 还不检查你函数调用的时候传入的参数个数。比如说你给 <code>sum</code> 函数传入一个参数还是三个参数，其都正常工作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sum(<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>其处理逻辑为<strong>声明了却没有传入的参数当成 <code>undefined</code>，多余的参数则需要手动捕获</strong>。也就是说 <code>sum(1)</code> 在执行的时候，参数 <code>x</code> 是 <code>1</code>，而参数 <code>y</code> 是 <code>undefined</code>，结果自然是 <code>NaN</code>。</p>
<p>而捕获多余参数的方法有两种，一种是在参数列表中加入可变长参数 <code>...rest</code>。不过注意，可变长参数会被赋值为一个数组，并且在没有多于参数的时候被赋值为<strong>空数组</strong>而非 <code>undefined</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rest.length; ++i) s += rest[i];</span><br><span class="line">    <span class="keyword">return</span> x + y + s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一种是在函数之中使用 <code>arguments</code> 变量，这个变量存储了函数所接受的所有参数，并将其包装为一个数组。所以理论上甚至都不需要声明参数列表：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; ++i) s += <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然，以上两个函数还是有区别的。体现在只传入一个参数的时候，函数 1 会返回 <code>NaN</code>，而函数 2 会返回 <code>x</code>。</p>
</blockquote>
<h3 id="回调模式"><a href="#回调模式" class="headerlink" title="回调模式"></a>回调模式</h3><blockquote>
<p>回调和到处飞的匿名函数才会是你实际接触 JavaScript 工程时处理最多的。</p>
</blockquote>
<p>回调模式从表面上讲，实际就是<strong>将函数作为参数传入另一个函数</strong>。</p>
<p>我们首先需要理解什么是函数参数。当一个函数无法自己获取到某一些信息的时候，就需要通过外部将这些信息通过参数通知给函数。</p>
<p>但是有一些函数，它欠缺的不一定是“某一个变量是什么”这样的信息，它欠缺的可能是“我们需要它做什么”这样的信息。比如说我们想把 <code>sum</code> 函数拓展功能，升级为一个加减乘除都能算的函数。那么问题就出现在，我如何告诉这个函数，它应该对 <code>x, y</code> 做什么操作。</p>
<p>一种直观的解决方式是传入一个整数或者一个字符，表示这个函数应该进行什么样的运算：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">x, y, op</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>: <span class="keyword">return</span> x + y;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>: <span class="keyword">return</span> x - y;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>: <span class="keyword">return</span> x * y;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>: <span class="keyword">return</span> x / y;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但这种解决方法就需要我们事先约定 <code>op</code> 字符的值和函数进行的操作之间的关系，那为何我们不能直接告诉 <code>calculate</code> 函数它需要进行什么操作呢？</p>
<p>我们通过函数描述对数据的操作，而告诉函数它需要进行什么操作，就是<strong>将描述操作的函数作为参数传入这个函数</strong>，这个被传入到其他函数里的函数就称为<strong>回调函数</strong>。其名称可以大致理解为“这个函数现在传进去但暂且不调用，需要的时候再调用”</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">x, y, op</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> op(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">calculate(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;); <span class="comment">// 3</span></span><br><span class="line">calculate(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x - y; &#125;); <span class="comment">// -1</span></span><br><span class="line">calculate(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x; &#125;); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>关于回调函数更深层次的运用会在 JavaScript 异步部分讲解。</p>
<p>事实上，JavaScript 有关数组的各种操作几乎全都使用了回调模式，比如说遍历数组的操作:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">val, ind</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`The elem with index <span class="subst">$&#123;ind&#125;</span> is <span class="subst">$&#123;val&#125;</span>.\n`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>另外的例子还有数组的映射函数 <code>map</code>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	operation 1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * val;</span><br><span class="line">&#125;); <span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	operation 2</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; ++i) newArr.push(<span class="number">2</span> * arr[i]);</span><br></pre></td></tr></table></figure>
<p>这两种写法是等价的，但是 JavaScript 更倾向于选择前者，因为这种回调式的链条可以很方便地加长，在处理数组的时候尤其方便。</p>
<p>比如说我们需要将接收到的数据清洗格式之后筛选出合法数据并排序:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.data</span><br><span class="line">    .map(<span class="function"><span class="keyword">function</span> (<span class="params">val, ind</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            ...val,</span><br><span class="line">            <span class="attr">index</span>: ind,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val.name !== <span class="literal">undefined</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.subscriberNum - b.subscriberNum;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><p>函数既然是一个对象，那么我们也可以用一个函数返回一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIncreaser</span>(<span class="params">increment</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + increment;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> increase5 = getIncreaser(<span class="number">5</span>);</span><br><span class="line">increase5(<span class="number">10</span>); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>比如说上述的 <code>getIncreaser</code> 可以用于获取一个“数据增长器”，而具体给数据增加多少，则是这个函数接收的参数。<code>getIncreaser</code> 会把 <code>increment</code> 变量包装在其返回的匿名函数之中，这样就形成了一个<strong>闭包</strong>。闭包实际上就是一个包装了其所在环境的一些局部变量的函数。</p>
<p>函数闭包是有缺陷的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounters</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        arr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i * i); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counters = getCounters();</span><br><span class="line">counters[<span class="number">0</span>](); <span class="comment">// 9</span></span><br><span class="line">counters[<span class="number">1</span>](); <span class="comment">// 9</span></span><br><span class="line">counters[<span class="number">2</span>](); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure>
<p>这串代码原本的意思为 counters 数组存入了三个“打印机”，分别负责打印 <code>1,4,9</code>，然而函数打包成闭包的时候，只单纯存储了<strong>临时变量的引用</strong>，而到真正执行闭包函数的时候才会去访问这些临时变量的值。上面例子之中的闭包函数在真正执行的时候，所引用的 <code>i</code> 已经是 <code>3</code> 了，所以结果全为 <code>9</code>。</p>
<p><strong>闭包引用会发生变化的量是危险的</strong>：根据上面的例子，我们就已经可以看出，闭包所引用的临时变量最好是常量或确定不会发生变化的量，这样至少可以让闭包的行为可控。</p>
<p>最优雅的解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounters</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        arr.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(i * i); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counters = getCounters();</span><br><span class="line">counters[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">counters[<span class="number">1</span>](); <span class="comment">// 1</span></span><br><span class="line">counters[<span class="number">2</span>](); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>解决变量提升最好的方式就是不用 <code>var</code> !</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>当你在站在这里时</title>
    <url>/2022/01/17/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%BD%93%E4%BD%A0%E5%9C%A8%E7%AB%99%E5%9C%A8%E8%BF%99%E9%87%8C%E6%97%B6-docs9/</url>
    <content><![CDATA[<h1 id="当他站在这里时"><a href="#当他站在这里时" class="headerlink" title="当他站在这里时"></a>当他站在这里时</h1><p>2020年9月7日，他与376名计算机大类的新生一同坐在综体的长椅上，等待着即将开始的大类新生开学典礼。</p>
<p>那时的他尚不知道，从此以后，他将主动或是被迫地一路狂奔在计算机科学与技术的无尽世界里。等待他的，将是与PA鏖战的一腔孤勇、将是”奋战三星期，造台计算机“的壮志凌云，还有无数个苦于课程fly bitch设置而四处碰壁、怀疑人生的呜咽与怒吼。</p>
<p>而这，真的是他渴望的生活吗？</p>
<p>本应稳扎稳打，提升自身编程水平的程设大作业，却因为大一上学期没有学习过oop而寸步难行；本应是工程启蒙的小学期，却不得不面对三周内Python、Java、Qt的轮番轰炸，而枯坐在屏幕之前痛苦万分…</p>
<p>不，这绝对不是他渴求的生活。</p>
<h1 id="当他们站在这里时"><a href="#当他们站在这里时" class="headerlink" title="当他们站在这里时"></a>当他们站在这里时</h1><p>2021年9月13日，他们与71名酒井科协的成员一同围聚在明理楼，期待着新的一年，崭新的科协生活。</p>
<p>不知何处传来了细碎的讨论——“小学期纯粹fly bitch，过了就好了”，“后面还有软工等着呢”，“这算啥离谱的，以后还有造机等着你fly”…</p>
<p>原来，不只是他苦于无人引导的学习曲线啊！</p>
<p>细碎的讨论汇集成了连片的吐槽与埋怨。他低声谈道“或许，我们能够做些什么？”</p>
<p>一声轻叹，三五好友，一拍即合。</p>
<p>酒井科协技能文档项目应运而生。</p>
<h2 id="一个人可以走得更快，但一群人可以走得更远"><a href="#一个人可以走得更快，但一群人可以走得更远" class="headerlink" title="一个人可以走得更快，但一群人可以走得更远"></a>一个人可以走得更快，但一群人可以走得更远</h2><p>网络部技能小组的组员们，在加入小组之前，各自都有编写文档或是博客的经验。有人在暑假苦练BeatifulSoup4，写下笔记，帮助一众好友顺利爬虫；有人在春季学期爆肝112小时写下近十万字的oop学习笔记分享至课程issue…</p>
<p>的确，一个人走，很快便可在特定领域搭建起一顶雨棚，为过路人遮挡风雨。</p>
<p>然而，一群人走，我们能够走的更远。从markdown入门到TypeScript入坟，从基于课程的oop文档到面向新一代底层语言的Rust指南，从课程本身到超脱课程的千千万万…</p>
<p>每个人的思考，不同的学习曲线汇聚起来。个体凝聚为队伍，在计算机科学的浩瀚中，助力每一个人，更是助力此后文档的读者，走向更宽广的天地。</p>
<h1 id="当你站在这里时"><a href="#当你站在这里时" class="headerlink" title="当你站在这里时"></a>当你站在这里时</h1><p>2022年1月19日，伴随着新一届智能体大赛的开展，<a href="https://docs.net9.org/">技能引导文档</a>经过多次调整，承载着文档编写小组组员的热忱与期许，最终出现在了你的面前。</p>
<p><strong>从2021年9月立项以来，<a href="https://docs.net9.org/">技能引导文档项目</a>，已经走过了如下旅程：</strong></p>
<ul>
<li><code>JavaScript + TypeScript</code>文档——钱厚德</li>
<li><code>Markdown</code>教程——徐默涵</li>
<li>酒井科协暑培整理——高焕昂、安一帆、孙讯</li>
<li><code>OOP</code>课程学习笔记——赵晨阳</li>
</ul>
<p><strong>并且根据未来的编写需求，划分了如下功能区：</strong></p>
<ul>
<li>课程引导——目前已全面涵盖了OOP课程与程序设计基础课程</li>
<li>基本技能——git入门、markdown入门、linux入门等等</li>
<li>编程语言——现代C++语言、Python语言基础、JavaScript语言基础等等</li>
<li>前端框架——React框架入门、现代React框架、SwiftUI与IOS入门</li>
<li>人工智能与机器学习——Pytorch入门、对抗搜索</li>
<li>资源链接——书目推荐、外部链接</li>
</ul>
<p><strong>部分页面展示如下：</strong></p>
<p><img src="https://pic.imgdb.cn/item/61e677532ab3f51d91035d60.jpg" alt="readme" style="zoom: 27%;" /></p>
<p><img src="https://pic.imgdb.cn/item/61e6779c2ab3f51d9103a43b.jpg" alt="git入门" style="zoom: 25%;" /></p>
<p><img src="https://pic.imgdb.cn/item/61e678082ab3f51d9104455b.jpg" style="zoom:26%;" /></p>
<p>正值智能体开赛之际，我们将正式上线目前已有的所有文档，希望能能够为这份文档的读者提供力所能及的帮助。</p>
<h2 id="But-I-can-only-show-you-the-door"><a href="#But-I-can-only-show-you-the-door" class="headerlink" title="But I can only show you the door"></a>But I can only show you the door</h2><p>而亲爱的读者，当你站在这里时。</p>
<p>我们希望这份文档不仅是一份学习资料，而是无声的导师——你能够从中获得计算机科学学习的启发，也能够看到前人在学习的路程上所绕过的弯路。希望在这些基础上，能够帮助你走得更快，也更远。</p>
<ul>
<li>如果你是一字班同学——欢迎你阅读保姆级的<code>OOP</code>课程学习笔记，提前预习下学期的<code>OOP</code>课程，打下扎实的面向对象编程思维基础。</li>
<li>如果你是零字班同学——欢迎你重拾科协暑培的宝贵资料，并且在<code>JavaScript +TypeScript</code>上更上一层楼。</li>
</ul>
<blockquote>
<p>纸上得来终觉浅，绝知此事要躬行。</p>
</blockquote>
<p>希望这份饱含编写者心血的文档，能够在你以后的学习生涯中，点燃热忱的火炬，陪伴着每一位计算机科学世界的探险者力行致远。</p>
<h2 id="You-have-to-walk-through-it"><a href="#You-have-to-walk-through-it" class="headerlink" title="You have to walk through it"></a>You have to walk through it</h2><p>虽然技能文档的初衷是希望弥补课程一些不合理的设计并对课程之外的世界做一指引，然而，正如黑客帝国中所言——</p>
<blockquote>
<p><strong>But I can only show you the door.</strong></p>
<p><strong>You have to walk through it.</strong></p>
</blockquote>
<p>我们只会介绍一种主题最基本的入门内容，并会就后续的扩展学习给出一些相应的指导。</p>
<p><strong>保持自身对知识的追求，不断锻炼自己利用搜索引擎解决问题的能力，才是更加重要的。</strong></p>
<h1 id="appendix"><a href="#appendix" class="headerlink" title="appendix"></a>appendix</h1><ul>
<li>如果你也怀有用自己的学习历程为后人点燃火炬的热忱，也欢迎你加入技能引导文档小组，或者参考<a href="https://docs.net9.org/notes/reader/">读者须知</a>与<a href="https://docs.net9.org/notes/editor/">编写者须知</a>进行有偿的PR</li>
<li>目前项目组已经为引导文档划定了技能分区蓝图，然而出于编辑团队的能力与时间有限，部分内容的开展仍然缓慢。如若你对功能区中较高层内容有所了解，非常欢迎你加入我们<del>(我们将提供有竞争力的薪资水平)</del></li>
<li>我们深知所涉猎知识的狭窄，而计算机科学仍在高速发展。因此非常欢迎你通过<a href="https://www.wjx.cn/vj/mL2D5cz.aspx">这一问卷链接</a>，向我们分享你对技能文档还有什么期待——诸如课程有什么资料难以寻得，以及还期待什么技能</li>
</ul>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>贵系改革</tag>
        <tag>社工</tag>
        <tag>酒井科协</tag>
      </tags>
  </entry>
  <entry>
    <title>SRT</title>
    <url>/2022/01/17/CS/%E5%85%B6%E4%BB%96/SRT/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a3afc24db098db20ef114df1e6b63efc5e8f2b6e2090ccc2a7839c7a041d4cd2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2022春季</tag>
        <tag>2022寒假</tag>
        <tag>Python</tag>
        <tag>OOP</tag>
        <tag>2021秋季</tag>
        <tag>爬虫</tag>
        <tag>BeautifulSoup</tag>
      </tags>
  </entry>
  <entry>
    <title>蔡康永的说话之道	1.16</title>
    <url>/2022/01/16/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E8%94%A1%E5%BA%B7%E6%B0%B8%E7%9A%84%E8%AF%B4%E8%AF%9D%E4%B9%8B%E9%81%93_1_16/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/16/t5WIUFgKhAzBrZ6.jpg" alt="Photo by Timo Wagner _BxtP30g-g3c_.jpg"></p>
<ul>
<li>在高手面前，装懂是没有用的，只会自曝其短。最好就是珍惜遇到高手的机会，把道理搞清楚。</li>
<li>只要对方初次见面时报了名字，你就应该也报上你的名字，即使对方是国家元首。</li>
<li>东张西望就能被别人看到的东西，当然是对方最希望被别人看到的东西，可能也是最渴望被人提到或者问起的东西。</li>
<li>桌面相框上或者计算机的桌面展示着什么照片，通常是最明显的线索。如果放着他和商业巨贾的合照，那你可以夸奖他人脉广阔，什么都能解决；如果照片是他亲爱的子女，那你自然该问候他的宝贝子女安好，并且夸奖他家公子、千金看起来好优秀好聪明一类的。</li>
<li>透过这样的自问自答，你正在训练自己站在对方的角度思考问题的能力。</li>
<li>演讲的人要舍生处地地以台下观众的立场来想，这才是演讲最有用的原则。</li>
<li>人能够集中精神听事情的时间单位大约为<code>15</code>分钟。经验表明，每<code>15</code>分钟，讲清楚，且只讲清楚一件事。</li>
<li>所有这些高高在上的，类似神明、君王、老大、总裁的人物，是不会和你推心诉苦的。反之，会和你诉苦的人，才是吧你当做平等的人看待的，才愿意和你交朋友。</li>
<li>你看小动物，例如幼狮、狼崽，会在和同伴打打闹闹的时候，常常不设防备地把咽喉、胸腹这些容易受到伤害的部位暴露在玩伴的面前，这样就能相互取得信任，培养家族合作猎食的默契。</li>
<li>如果初次和同学见面，就能嘲笑自己腰上的肥肉，嘲笑自己讲话的口音，绝对比较容易交到朋友。</li>
<li>树敌时最可怕的资产，拥有的越多，你死的越快。</li>
<li>如果你只是客人之一，而不是主客，那你最好不必把着主人讲话。你最好当个融入派对气氛的好客人，大方地参加别人的谈话，欣赏音乐、美食，随便谈些最近看的影视剧，谈谈大家都是如何认识主人的，这样就可以快速建立起拟合其他客人的联系了。</li>
<li>你要离席，不必惊动每一个人，也不用和大家一一握手，悄悄和主人报告一声，和特别熟的朋友再说一声，就够了。</li>
<li>找一个人帮忙的重点是大事化小，最好是把需要对方帮忙的事情拆解成很具体的，听了不会一下子就失去耐心的一个个小步骤，然后先提出最小的要求，比较不会立刻被拒绝。</li>
<li>对方骂道一个段落时，你再献上你的解决之道，让对方感觉你不是百分百的混蛋。虽然挨骂难免，但起码对方不会对你这个人彻底失去信任。</li>
<li>别人骂你一句，你回骂一句，这叫吵架；别人赞美你一句，你赞美别人一句，这叫社交。别人赞美你一句，你只是很有礼貌的说一说谢谢，这也不错，但也只是礼貌罢了。</li>
<li>人就是这么喜欢自己的名字，当别人给你写电子邮件、跟你讲电话时，如果三不五时提起你的名字，你专心且认同的程度就会大大提高。</li>
<li>做社会运动的高手，在为弱势群体争取权益的时候，有个很重要的做法，就是让冷漠的社会大众认识这个弱势群体的某一个人——认得他的脸，叫得出他的名字。</li>
<li>如果初次和别人相遇，对谈话的方向没什么把握，那就不妨根据对周围环境的观察来加以推测，应该比较能抓对方向。</li>
<li>唱<code>KTV</code>时，如果有这么一个人，懂得帮朋友点歌，懂的安排歌曲的顺序，懂得帮一直没唱到歌的人插播，懂得有时候选些特别搞笑或者有话题的歌给包厢里的人唱或者听，这个人也知道谁失恋需要治疗，谁一定要大后一首脏话歌来骂他的老板，这些八面玲珑的安排，当然会使得包厢里的气氛令人尽兴。</li>
<li>偶尔为自己在乎的朋友们创造这样的聚会来聊天，会让大家觉得你是很温暖，很够意思的朋友。</li>
<li>我建议可以多练习几次，就像煮菜很有节奏也大概练过的人，几次亲自下厨请客后，就能达到及时上菜，又能坐下来陪朋友吃一阵子的境界了。</li>
<li>如果你练习不来，也没什么，就让比较有天分的人来掌握气氛就好了。就像只负责吃的人，只要懂得一直夸奖菜品美味，不唱歌的人只听歌或是吃点心的人，只要每首歌过后都用力拍手，也是很上道的。</li>
<li>练习关心别人，而且表现出你的关心，我觉得是非常值得的。因为你生命中必须有你最在乎的人，你才会活的有滋味。而对那些你最在乎的人，你一定会关心，而且更重要的是，把你的关心表现出来，让他们收到。</li>
<li>讲话时，只要使用太多的业界术语，流露出太多业界的习性，一般人听起来，都会闻到一股不够生活、不够真心的气味。</li>
<li>这的确是个很好的情人节礼物，因为里面有很多心意。你若是常常说话的人，就会发现，如果你讲了具体的事情，而非抽象的道理，听的人比较爱听，也比较容易听得懂，记得住。</li>
<li><strong>永远爱你很抽象，因为没人知道永远是什么。爱你到海枯石烂比较具体，但是海枯石烂也没有人见过。白头偕老就具体多了，上了年纪的人牵手过街，是很温暖的感觉。</strong></li>
<li>五十二张礼券，一个礼拜用一张，这就非常具体，一听就很甜蜜。</li>
<li>语言的存在本来是为了让你能够和其他人连接在一起。可惜很多人只顾着自己使用语言，却不在乎别人的感受。</li>
<li>语言最美的时候，就在于我们通过语言感受到了彼此的需要，确认了彼此的存在。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>蔡康永的说话之道</tag>
      </tags>
  </entry>
  <entry>
    <title>Advanced Word Power</title>
    <url>/2022/01/15/Lecture/Advanced%20Word%20Power%20Winter/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/17/Oux8C9R1ifZ2MYh.jpg" alt=""></p>
<h1 id="词汇表格"><a href="#词汇表格" class="headerlink" title="词汇表格"></a>词汇表格</h1><ul>
<li><p>这是 chapter 1 到 chapter 3 的词汇</p>
</li>
<li><p>跪了，每个 unit 看上去只有 10 个生词，不过对我几乎是 50 个</p>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>affinity</td>
<td>a preference</td>
</tr>
<tr>
<td>dresser</td>
<td>食衣柜、碗柜</td>
</tr>
<tr>
<td>dresser drawer</td>
<td>带抽屉的工作台</td>
</tr>
<tr>
<td>fledgling</td>
<td>new</td>
</tr>
<tr>
<td>hackneyed</td>
<td>worn-out</td>
</tr>
<tr>
<td>incessant</td>
<td>nonstop</td>
</tr>
<tr>
<td>snore</td>
<td>打呼噜</td>
</tr>
<tr>
<td>resort</td>
<td>度假胜地，手段，常去，诉诸</td>
</tr>
<tr>
<td>stark</td>
<td>完全的</td>
</tr>
<tr>
<td>opulence</td>
<td>riches(财富，荣华富贵一类)</td>
</tr>
<tr>
<td>proximity</td>
<td>(物理意义上的)接近</td>
</tr>
<tr>
<td>sagacious</td>
<td>intelligent</td>
</tr>
<tr>
<td>supplant</td>
<td>to replace</td>
</tr>
<tr>
<td>dictator</td>
<td>独裁者</td>
</tr>
<tr>
<td>seize</td>
<td>夺取</td>
</tr>
<tr>
<td>unassailable</td>
<td>undeniable</td>
</tr>
<tr>
<td>voluminous</td>
<td>large</td>
</tr>
<tr>
<td>Trip over</td>
<td>绊倒</td>
</tr>
<tr>
<td>hatch</td>
<td>舱口；孵化、策划</td>
</tr>
<tr>
<td>stale</td>
<td>陈旧的</td>
</tr>
<tr>
<td>trite</td>
<td>平庸老套的</td>
</tr>
<tr>
<td>bulky</td>
<td>庞大的；体积大的；笨重的</td>
</tr>
<tr>
<td>tote</td>
<td>携带，手提</td>
</tr>
<tr>
<td>crow</td>
<td>报晓，啼叫；乌鸦</td>
</tr>
<tr>
<td>fondness</td>
<td>溺爱</td>
</tr>
<tr>
<td>senator</td>
<td>参议员</td>
</tr>
<tr>
<td>mail-order</td>
<td>邮购的</td>
</tr>
<tr>
<td>meatloaf</td>
<td>烤肉卷</td>
</tr>
<tr>
<td>waist</td>
<td>腰部</td>
</tr>
<tr>
<td>seams</td>
<td>缝合处</td>
</tr>
<tr>
<td>crotch</td>
<td>分叉处</td>
</tr>
<tr>
<td>saddle</td>
<td>马鞍</td>
</tr>
<tr>
<td>Bell-bottoms</td>
<td>喇叭裤</td>
</tr>
<tr>
<td>swept</td>
<td>扫除</td>
</tr>
<tr>
<td>blunt</td>
<td>钝的、不锋利的；使…迟钝</td>
</tr>
<tr>
<td>brusque</td>
<td>blunt</td>
</tr>
<tr>
<td>dispassionate</td>
<td>Unemtional(没有主观情感)</td>
</tr>
<tr>
<td>effervescent</td>
<td>lively, bubbling with high spirits</td>
</tr>
<tr>
<td>Federal Reserve</td>
<td>联邦储蓄</td>
</tr>
<tr>
<td>dreary</td>
<td>阴沉的</td>
</tr>
<tr>
<td>stardom</td>
<td>明星身份</td>
</tr>
<tr>
<td>rave</td>
<td>胡言乱语，盛赞</td>
</tr>
<tr>
<td>indefatigable</td>
<td>never getting tired</td>
</tr>
<tr>
<td>enrage</td>
<td>暴怒</td>
</tr>
<tr>
<td>lunatic</td>
<td>疯子</td>
</tr>
<tr>
<td>misanthrope</td>
<td>an antisocial person</td>
</tr>
<tr>
<td>morose</td>
<td>gloomy(情绪低落的)</td>
</tr>
<tr>
<td>frantic</td>
<td>狂乱的</td>
</tr>
<tr>
<td>nonchanlance</td>
<td>lack of concern</td>
</tr>
<tr>
<td>awarness</td>
<td>察觉，意识</td>
</tr>
<tr>
<td>uneasiness</td>
<td>不轻松</td>
</tr>
<tr>
<td>stroll</td>
<td>闲逛，漫步</td>
</tr>
<tr>
<td>befriend</td>
<td>待人友善的</td>
</tr>
<tr>
<td>progeny</td>
<td>Offspring(后代)</td>
</tr>
<tr>
<td>stoic</td>
<td>坚韧的，禁欲的</td>
</tr>
<tr>
<td>vet</td>
<td>兽医</td>
</tr>
<tr>
<td>beagle</td>
<td>小猎犬</td>
</tr>
<tr>
<td>nail</td>
<td>固定</td>
</tr>
<tr>
<td>voracious</td>
<td>greedy</td>
</tr>
<tr>
<td>exhilareted</td>
<td>高兴，兴奋</td>
</tr>
<tr>
<td>curt</td>
<td>草率的，简要的，粗暴的</td>
</tr>
<tr>
<td>ravenous</td>
<td>极饿的，极度的</td>
</tr>
<tr>
<td>insatiable</td>
<td>贪得无厌的</td>
</tr>
<tr>
<td>sullen</td>
<td>低沉的</td>
</tr>
<tr>
<td>weary</td>
<td>疲倦的</td>
</tr>
<tr>
<td>ill at ease</td>
<td>不安而拘束的</td>
</tr>
<tr>
<td>humming</td>
<td>低声吟唱</td>
</tr>
<tr>
<td>sulky</td>
<td>愠怒的</td>
</tr>
<tr>
<td>vowed</td>
<td>誓言</td>
</tr>
<tr>
<td>novocain</td>
<td>一种麻醉剂</td>
</tr>
<tr>
<td>clan</td>
<td>宗族</td>
</tr>
<tr>
<td>gerbil</td>
<td>沙鼠(南非)</td>
</tr>
<tr>
<td>rodent</td>
<td>啮齿动物</td>
</tr>
<tr>
<td>hamster</td>
<td>仓鼠</td>
</tr>
<tr>
<td>nibble</td>
<td>小口啃咬</td>
</tr>
<tr>
<td>editorial</td>
<td>主笔的</td>
</tr>
<tr>
<td>manipulate</td>
<td>熟练操作</td>
</tr>
<tr>
<td>vein</td>
<td>静脉，纹理</td>
</tr>
<tr>
<td>brimming</td>
<td>溢出</td>
</tr>
<tr>
<td>dismissal</td>
<td>解雇，开除</td>
</tr>
<tr>
<td>senation</td>
<td>感知</td>
</tr>
<tr>
<td>quest</td>
<td>追寻</td>
</tr>
<tr>
<td>resemble</td>
<td>类似于</td>
</tr>
<tr>
<td>bumpy</td>
<td>崎岖的</td>
</tr>
<tr>
<td>saw</td>
<td>锯</td>
</tr>
<tr>
<td>cord</td>
<td>绳</td>
</tr>
<tr>
<td>firewood</td>
<td>柴火</td>
</tr>
<tr>
<td>dusting</td>
<td>拂尘</td>
</tr>
<tr>
<td>bouncy</td>
<td>活跃的</td>
</tr>
<tr>
<td>sniffle</td>
<td>吸鼻子</td>
</tr>
<tr>
<td>hobble</td>
<td>蹒跚</td>
</tr>
<tr>
<td>committed</td>
<td>忠诚的</td>
</tr>
<tr>
<td>coalesce</td>
<td>to merge to form one whole</td>
</tr>
<tr>
<td>dye</td>
<td>活性染料</td>
</tr>
<tr>
<td>smear</td>
<td>弄脏，涂片，涂上，诽谤</td>
</tr>
<tr>
<td>groan</td>
<td>呻吟，抱怨</td>
</tr>
<tr>
<td>extravagant</td>
<td>奢侈的</td>
</tr>
<tr>
<td>internal combustion engine</td>
<td>内燃机</td>
</tr>
<tr>
<td>decadence</td>
<td>a decline</td>
</tr>
<tr>
<td>glowing</td>
<td>😳脸红，燃红，热情</td>
</tr>
<tr>
<td>exotic</td>
<td>奇异的，吸引人的，进口非本地的</td>
</tr>
<tr>
<td>exemplary</td>
<td>excellent</td>
</tr>
<tr>
<td>shriek</td>
<td>尖叫</td>
</tr>
<tr>
<td>exuberance</td>
<td>joy, high-spirted enthusiasm</td>
</tr>
<tr>
<td>incidental</td>
<td>secondary(附属的)</td>
</tr>
<tr>
<td>spree</td>
<td>狂欢</td>
</tr>
<tr>
<td>compulsive</td>
<td>极其有趣的</td>
</tr>
<tr>
<td>insolvent</td>
<td>破产</td>
</tr>
<tr>
<td>urge</td>
<td>力促，强烈欲望</td>
</tr>
<tr>
<td>debt</td>
<td>账单，债务</td>
</tr>
<tr>
<td>memos</td>
<td>备忘录</td>
</tr>
<tr>
<td>rinds</td>
<td>外壳，剥壳</td>
</tr>
<tr>
<td>wilt</td>
<td>枯萎</td>
</tr>
<tr>
<td>parsimonious</td>
<td>stingy(吝啬的)</td>
</tr>
<tr>
<td>prodigal</td>
<td>铺张浪费</td>
</tr>
<tr>
<td>decent</td>
<td>得体的</td>
</tr>
<tr>
<td>surreptitious</td>
<td>暗中，偷偷摸摸的</td>
</tr>
<tr>
<td>tin</td>
<td>锡</td>
</tr>
<tr>
<td>crepe</td>
<td>绉绸</td>
</tr>
<tr>
<td>newlywed</td>
<td>新婚</td>
</tr>
<tr>
<td>scratchy</td>
<td>衣服粗糙，书写潦草的</td>
</tr>
<tr>
<td>itchy</td>
<td>发痒</td>
</tr>
<tr>
<td>wriggle</td>
<td>蠕动</td>
</tr>
<tr>
<td>fidgeting</td>
<td>坐立难安</td>
</tr>
<tr>
<td>drive you nuts</td>
<td>让人发疯</td>
</tr>
<tr>
<td>squeeze</td>
<td>压榨</td>
</tr>
<tr>
<td>writhe</td>
<td>squirm(蠕动)</td>
</tr>
<tr>
<td>thrifty</td>
<td>节约，茂盛，成功</td>
</tr>
<tr>
<td>miserly</td>
<td>吝啬的</td>
</tr>
<tr>
<td>reckless</td>
<td>轻率的</td>
</tr>
<tr>
<td>imitation</td>
<td>模仿</td>
</tr>
<tr>
<td>praiseworthy</td>
<td>值得嘉奖的</td>
</tr>
<tr>
<td>penniless</td>
<td>没钱的</td>
</tr>
<tr>
<td>magnet</td>
<td>磁石</td>
</tr>
<tr>
<td>stained</td>
<td>污染的</td>
</tr>
<tr>
<td>sneak</td>
<td>鬼鬼祟祟，打小报告</td>
</tr>
<tr>
<td>rub</td>
<td>擦</td>
</tr>
<tr>
<td>lavish</td>
<td>浪费</td>
</tr>
<tr>
<td>mash</td>
<td>浆糊</td>
</tr>
<tr>
<td>goo</td>
<td>糊状物</td>
</tr>
<tr>
<td>blurt</td>
<td>突然说出</td>
</tr>
<tr>
<td>fat-cat</td>
<td>暴发户</td>
</tr>
<tr>
<td>aluminum</td>
<td>铝</td>
</tr>
<tr>
<td>foil</td>
<td>箔</td>
</tr>
<tr>
<td>sly</td>
<td>狡猾</td>
</tr>
<tr>
<td>dime</td>
<td>一元硬币                                     </td>
</tr>
</tbody>
</table>
</div>
<h1 id="1月16日"><a href="#1月16日" class="headerlink" title="1月16日"></a>1月16日</h1><p><img src="https://s2.loli.net/2022/01/16/yz9NHWAXIFC1r3P.png" alt="1月16日打卡"></p>
<h1 id="1月17日"><a href="#1月17日" class="headerlink" title="1月17日"></a>1月17日</h1><p>一些英语上的想法。</p>
<h2 id="中长期规划"><a href="#中长期规划" class="headerlink" title="中长期规划"></a>中长期规划</h2><h3 id="托福"><a href="#托福" class="headerlink" title="托福"></a>托福</h3><p>按照目前的打算，先把下个学期的词汇的力量上完再考虑托福是否应该在国内考，还是去加拿大的时候再考。</p>
<p>至于学习资料，这个太多了。</p>
<ul>
<li><p><code>Rick</code>那儿还有鸿雁的资料，然后<a href="https://cloud.tsinghua.edu.cn/d/b109f58239b6427b85e3/">鸿雁的录屏</a>还在车库里。</p>
</li>
<li><p>相信王英老师的课还是能带给我很多启发。</p>
</li>
</ul>
<p>余下的就启发搜索了。</p>
<h3 id="GRE"><a href="#GRE" class="headerlink" title="GRE"></a><code>GRE</code></h3><p>按照这几年<code>GRE</code>越来越寄的趋势，属实是不打算单独练<code>GRE</code>。可能看情况，最早<code>22</code>年暑假把<code>GRE</code>考掉，最迟<code>23</code>年暑假，在加拿大或者回国后考出来。当然，如果<code>GRE</code>纯粹没用，那就水掉</p>
<h3 id="多领国"><a href="#多领国" class="headerlink" title="多领国"></a>多领国</h3><p>参考<a href="https://uwaterloo.ca/future-students/admissions/english-language-requirements"><code>waterloo</code>的交换语言要求</a>，按说<code>120</code>分多领国有手就行。</p>
<p><strong><code>!important</code>，水卢甚至没有说清楚多久之前提交语言成绩。开学之后一定和国际处、水卢那边好好确认。</strong></p>
<h2 id="课程规划"><a href="#课程规划" class="headerlink" title="课程规划"></a>课程规划</h2><h3 id="美社文"><a href="#美社文" class="headerlink" title="美社文"></a>美社文</h3><p>据悉是一门大水课，讲课的老爷子很温和。貌似有<code>pre</code>和做<code>essay</code>。理论上，我和<a href="https://zcy.moe/"><code>zcy9</code></a>一起组课，问题不会很大。</p>
<p>另外，整个成外还是能给我很多帮助的。最不济，可以找王昊华问问。</p>
<h3 id="词汇的力量"><a href="#词汇的力量" class="headerlink" title="词汇的力量"></a>词汇的力量</h3><p>虽然叫这个名字，但我断言，和词汇关系是不大的。</p>
<p>从目前王英老师给的消息来看，预估工作量至少是每周<code>3~5h</code>左右，如果我不想被科英的期末考试为难的话，应该提前开始规划。</p>
<p>这里先把目前想到的、能做的事情归纳好。</p>
<p>接下来几天找王英老师问一问。</p>
<h4 id="final-check背诵"><a href="#final-check背诵" class="headerlink" title="final check背诵"></a><code>final check</code>背诵</h4><p>参考<code>advanced work power</code>一书，在每一个<code>unit</code>之后有一篇<code>final check</code>。王英老师已经把音频附在了<a href="https://cloud.tsinghua.edu.cn/d/53303252f64542d39c5d/">清华云</a>上。</p>
<p>大致思路是每天一个<code>unit</code>，耗时在半小时到一小时，然后趁着空闲去听一听<code>final check</code>。</p>
<p>经验表明，<code>final check</code>这样的东西，最好背了就忘掉，所以个人感觉不应该背太多。不如就以此找找感觉，主要去刷词汇，背诵倒是放到开学之后，毕竟寒假可以主力动刀软工等等。</p>
<h4 id="criminal-minds"><a href="#criminal-minds" class="headerlink" title="criminal minds"></a><code>criminal minds</code></h4><p>反正是看美剧，看着图个快乐？</p>
<p>或许还可以把黑客帝国三部曲看完。</p>
<h4 id="附带上自己总结的老师的寒假作业"><a href="#附带上自己总结的老师的寒假作业" class="headerlink" title="附带上自己总结的老师的寒假作业"></a>附带上自己总结的老师的寒假作业</h4><blockquote>
<ul>
<li><a href="https://cloud.tsinghua.edu.cn/d/53303252f64542d39c5d/">补充词汇(12,000+)Final Checks (MP3)</a> </li>
<li><p>【特别提示】请同学们一定听熟了再背，绝对事“一”功“十”倍！！！</p>
</li>
<li><p><a href="https://cloud.tsinghua.edu.cn/d/3b9512aff738429b84b4/">《剑桥听力故事》</a>（MP3）（2个）</p>
</li>
<li><p>【特别提示】两个故事的文本会于本月底发给大家链接，也请同学们（尤其是来自高考不重视听力的省份的同学）一定要听，如果你又听不懂，又觉得浪费时间的话，那我只能说“呵呵”啦？！</p>
</li>
<li><p>三本课本，这个我自己<a href="https://cloud.tsinghua.edu.cn/d/4b1a3c54634c436b9bc7/">放在了<code>213-cracker</code>上</a></p>
</li>
<li><p><a href="https://cloud.tsinghua.edu.cn/d/93ce0e5f329742dcad67/">Criminal Minds S01 - S15 （共323 集）</a></p>
</li>
<li><p>【特别提示】从S01E01到S15E10，我开设的四门课里的各种级别的词汇反反复复被用到，所以从语言习得的角度，个人以为Criminal Minds绝对是最好的美剧！所以请同学们一定要花时间去看哈！加油！！！</p>
</li>
<li><p><a href="https://cloud.tsinghua.edu.cn/d/e4560248cc8b488e9013/">Mindhunters （S01 - S02）</a></p>
</li>
<li>【特别提示】Mindhunters 讲的是Criminal Minds里的FBI探员隶属的工作单位BAU的前身BSU（好像是叫这个）。S01尤其超级棒！</li>
</ul>
</blockquote>
<p><strong>高考不重视听力的省份，别骂了，别骂了…</strong></p>
<h1 id="1月21日"><a href="#1月21日" class="headerlink" title="1月21日"></a>1月21日</h1><p>今晚细细的刷一刷 unit 1</p>
<h1 id="1月23日"><a href="#1月23日" class="headerlink" title="1月23日"></a>1月23日</h1><p>最近进行了一个大鱼的摸，三天没学英语，直接 GG ，开学得请大家吃饭了。<br><img src="https://pic.imgdb.cn/item/61ed66f82ab3f51d916aabed.jpg" alt=""></p>
<p>像极了初中的 look ahead ，爷青回！</p>
<p>今天和王英老师讨论了下学习方式：</p>
<ul>
<li>不用急着背诵 final check ，从头到尾看一遍第一</li>
<li><a href="https://cloud.tsinghua.edu.cn/d/53303252f64542d39c5d/">听王英老师附带的录音</a>，反复的听，开学后还有新的材料来结合学习</li>
<li><del>单词拼写不必特别在意</del></li>
</ul>
<p>接下来几天，进行互相监督的卡的打，然后多听听录音</p>
<h1 id="1-月-24-日"><a href="#1-月-24-日" class="headerlink" title="1 月 24 日"></a>1 月 24 日</h1><p>昨天背了 chapter 2 ， 还是感觉自己背的很慢，而且没有晚上及时复习…</p>
<p><img src="https://pic.imgdb.cn/item/61ef42cf2ab3f51d91fc79eb.jpg" alt=""></p>
<h1 id="1-月-25-日"><a href="#1-月-25-日" class="headerlink" title="1 月 25 日"></a>1 月 25 日</h1><p>昨天背单词背的特别晚，背到了 26 日凌晨 1:20，我觉得这不太健康。理想的时间还是早晨背 1h，然后去吃早饭，晚上再复习 1h。</p>
<p><img src="https://pic.imgdb.cn/item/61f0f5e72ab3f51d916cf577.jpg" alt=""></p>
<p> 不得不说， C7W 和 Lambda 的作息比我还阴间。</p>
<h1 id="1-月-26-日"><a href="#1-月-26-日" class="headerlink" title="1 月 26 日"></a>1 月 26 日</h1><p>整理了词汇表。</p>
<p>不得不说，整理还是很消耗时间的，争取以后每天早晨背完后，晚上复习时整理。</p>
<h1 id="1月-27-日"><a href="#1月-27-日" class="headerlink" title="1月 27 日"></a>1月 27 日</h1><p>今日事，今日毕，直接把词汇也整理。</p>
<h2 id="chapter-4"><a href="#chapter-4" class="headerlink" title="chapter 4"></a>chapter 4</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">haste</td>
<td>仓促，轻率</td>
</tr>
<tr>
<td style="text-align:left">sentence</td>
<td>句子，命题，宣判</td>
</tr>
<tr>
<td style="text-align:left">frivolous</td>
<td>不重要的，轻佻的</td>
</tr>
<tr>
<td style="text-align:left">lighthearted</td>
<td>轻松，无忧无虑，漫不经心的</td>
</tr>
<tr>
<td style="text-align:left">heist</td>
<td>抢劫</td>
</tr>
<tr>
<td style="text-align:left">lampoon</td>
<td>讽刺</td>
</tr>
<tr>
<td style="text-align:left">circulate</td>
<td>循环</td>
</tr>
<tr>
<td style="text-align:left">humorless</td>
<td>一本正经的</td>
</tr>
<tr>
<td style="text-align:left">triplicate</td>
<td>三倍</td>
</tr>
<tr>
<td style="text-align:left">querulous</td>
<td>抱怨，爱发牢骚，易怒</td>
</tr>
<tr>
<td style="text-align:left">shaky</td>
<td>摇晃，不牢靠的</td>
</tr>
<tr>
<td style="text-align:left">discontent</td>
<td>不满意的</td>
</tr>
<tr>
<td style="text-align:left">spoiled</td>
<td>变质，损坏，溺爱</td>
</tr>
<tr>
<td style="text-align:left">deserve</td>
<td>值得</td>
</tr>
<tr>
<td style="text-align:left">reproach</td>
<td>责备，申斥，耻辱</td>
</tr>
<tr>
<td style="text-align:left">untruthful</td>
<td>不真实的，爱说谎的</td>
</tr>
<tr>
<td style="text-align:left">shift</td>
<td>轮转，轮班，替换</td>
</tr>
<tr>
<td style="text-align:left">nap</td>
<td>小睡</td>
</tr>
<tr>
<td style="text-align:left">couch</td>
<td>睡椅</td>
</tr>
<tr>
<td style="text-align:left">respite</td>
<td>time off</td>
</tr>
<tr>
<td style="text-align:left">brevity</td>
<td>briefness</td>
</tr>
<tr>
<td style="text-align:left">clemency</td>
<td>mercy in judging</td>
</tr>
<tr>
<td style="text-align:left">unaccsutomed</td>
<td>不习惯的</td>
</tr>
<tr>
<td style="text-align:left">drained</td>
<td>排水，耗尽</td>
</tr>
<tr>
<td style="text-align:left">torpor</td>
<td>drowsiness(睡意，困倦)</td>
</tr>
<tr>
<td style="text-align:left">drawsy</td>
<td>欲睡的</td>
</tr>
<tr>
<td style="text-align:left">doze</td>
<td>打盹儿</td>
</tr>
<tr>
<td style="text-align:left">rouse</td>
<td>唤醒</td>
</tr>
<tr>
<td style="text-align:left">hammock</td>
<td>吊床</td>
</tr>
<tr>
<td style="text-align:left">hostility</td>
<td>敌意，战斗</td>
</tr>
<tr>
<td style="text-align:left">drowsiness</td>
<td>睡意，困倦</td>
</tr>
<tr>
<td style="text-align:left">collision</td>
<td>碰撞，冲突</td>
</tr>
<tr>
<td style="text-align:left">unscathed</td>
<td>未受伤的</td>
</tr>
<tr>
<td style="text-align:left">lament</td>
<td>哀悼；lamented: 令人遗憾的</td>
</tr>
<tr>
<td style="text-align:left">wound</td>
<td>受伤的</td>
</tr>
<tr>
<td style="text-align:left">whine</td>
<td>发牢骚</td>
</tr>
<tr>
<td style="text-align:left">ridicule</td>
<td>再现</td>
</tr>
<tr>
<td style="text-align:left">rebuke</td>
<td>责难</td>
</tr>
<tr>
<td style="text-align:left">sluggish</td>
<td>萧条; sluggishness 懒惰</td>
</tr>
<tr>
<td style="text-align:left">theft</td>
<td>盗贼</td>
</tr>
<tr>
<td style="text-align:left">manicure</td>
<td>剪指甲</td>
</tr>
<tr>
<td style="text-align:left">shoplifting</td>
<td>从商店偷盗</td>
</tr>
<tr>
<td style="text-align:left">attic</td>
<td>雅典</td>
</tr>
<tr>
<td style="text-align:left">takeoff</td>
<td>起飞，出发，滑稽的模仿</td>
</tr>
<tr>
<td style="text-align:left">mockery</td>
<td>嘲弄</td>
</tr>
<tr>
<td style="text-align:left">wit</td>
<td>智慧</td>
</tr>
<tr>
<td style="text-align:left">pleade</td>
<td>恳求</td>
</tr>
<tr>
<td style="text-align:left">champagne</td>
<td>香槟酒</td>
</tr>
<tr>
<td style="text-align:left">irritable</td>
<td>易怒的</td>
</tr>
<tr>
<td style="text-align:left">fictional</td>
<td>虚构的</td>
</tr>
<tr>
<td style="text-align:left">goofy</td>
<td>愚笨的(唐老鸭里的高飞)</td>
</tr>
<tr>
<td style="text-align:left">folk</td>
<td>人们，民族，亲属，民间的</td>
</tr>
<tr>
<td style="text-align:left">stub</td>
<td>存根，烟蒂，树桩，断株</td>
</tr>
<tr>
<td style="text-align:left">holdup</td>
<td>持枪抢劫，交通阻塞</td>
</tr>
<tr>
<td style="text-align:left">weave</td>
<td>交织，编织，卷入</td>
</tr>
<tr>
<td style="text-align:left">lane</td>
<td>车道，小巷，航线</td>
</tr>
<tr>
<td style="text-align:left">iguana</td>
<td>一种🦎</td>
</tr>
<tr>
<td style="text-align:left">lap</td>
<td>膝盖</td>
</tr>
<tr>
<td style="text-align:left">struck</td>
<td>打击</td>
</tr>
<tr>
<td style="text-align:left">cargo</td>
<td>货运</td>
</tr>
<tr>
<td style="text-align:left">cruise</td>
<td>巡航</td>
</tr>
<tr>
<td style="text-align:left">autonomy</td>
<td>自由选择，自治</td>
</tr>
<tr>
<td style="text-align:left">integrity</td>
<td>正直；诚实，诚恳，完整，完全，完善</td>
</tr>
<tr>
<td style="text-align:left">nurturance</td>
<td>培养，养育，滋养</td>
</tr>
</tbody>
</table>
</div>
<p>被王英老师批评了每周花三到五个小时是在摸鱼。</p>
<p>orz，感觉 lambda 他们英语本来就比我强，他们三到五小时还是合理的，我还是老老实实 10 h+ 吧…</p>
<p>开学了这个文档就要被公开了，我觉得太尴尬了，那就少在这个文档整活吧…</p>
<h1 id="1-月-28-日"><a href="#1-月-28-日" class="headerlink" title="1 月 28 日"></a>1 月 28 日</h1><h2 id="chapter-5"><a href="#chapter-5" class="headerlink" title="chapter 5"></a>chapter 5</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">levity</td>
<td>lightness of manner or speech</td>
</tr>
<tr>
<td style="text-align:left">meander</td>
<td>Move aimlessly</td>
</tr>
<tr>
<td style="text-align:left">stray</td>
<td>走失，离群，误入歧途，犯罪；独自的</td>
</tr>
<tr>
<td style="text-align:left">peripheral</td>
<td>of minor importance or relevance</td>
</tr>
<tr>
<td style="text-align:left">vacillate</td>
<td>to sway indecisively between wo opinions</td>
</tr>
<tr>
<td style="text-align:left">sway</td>
<td>动摇</td>
</tr>
<tr>
<td style="text-align:left">indecisively</td>
<td>优柔寡断的</td>
</tr>
<tr>
<td style="text-align:left">eloquent</td>
<td>extremely expressive and persuasive</td>
</tr>
<tr>
<td style="text-align:left">unobtrusive</td>
<td>not readily noticeable oreye-catching</td>
</tr>
<tr>
<td style="text-align:left">jargon</td>
<td>Specialized language of people in the same profession；technical language</td>
</tr>
<tr>
<td style="text-align:left">substantiate</td>
<td>To prove the truth of; confirm; verify</td>
</tr>
<tr>
<td style="text-align:left">dearth</td>
<td>lack</td>
</tr>
<tr>
<td style="text-align:left">scarcity</td>
<td>缺乏，不足</td>
</tr>
<tr>
<td style="text-align:left">inconspicuous</td>
<td>不明显的</td>
</tr>
<tr>
<td style="text-align:left">copious</td>
<td>abundant</td>
</tr>
<tr>
<td style="text-align:left">stuf</td>
<td>材料，填充物，填塞，塞满</td>
</tr>
<tr>
<td style="text-align:left">platter</td>
<td>唱片，大浅盘</td>
</tr>
<tr>
<td style="text-align:left">persuasive</td>
<td>善于说服的，善于游说的</td>
</tr>
<tr>
<td style="text-align:left">sled</td>
<td>雪橇</td>
</tr>
<tr>
<td style="text-align:left">surplus</td>
<td>过剩的</td>
</tr>
<tr>
<td style="text-align:left">Lincoln’s gettysburg address</td>
<td>林肯著名的底斯堡演讲</td>
</tr>
<tr>
<td style="text-align:left">insult</td>
<td>侮辱，冒犯</td>
</tr>
<tr>
<td style="text-align:left">stirring</td>
<td>忙碌的，活跃的，激动人心的</td>
</tr>
<tr>
<td style="text-align:left">stir</td>
<td>搅拌，搅动，激起</td>
</tr>
<tr>
<td style="text-align:left">batter</td>
<td>击球手，猛击</td>
</tr>
<tr>
<td style="text-align:left">battered</td>
<td>磨损的，受虐待的</td>
</tr>
<tr>
<td style="text-align:left">plight</td>
<td>困境；保证，约定</td>
</tr>
<tr>
<td style="text-align:left">weighty</td>
<td>重大的，严肃的</td>
</tr>
<tr>
<td style="text-align:left">guidance</td>
<td>指导</td>
</tr>
<tr>
<td style="text-align:left">counselor</td>
<td>顾问，指导老师，律师</td>
</tr>
<tr>
<td style="text-align:left">underbrush</td>
<td>灌木丛</td>
</tr>
<tr>
<td style="text-align:left">brook</td>
<td>小溪；容忍，接受</td>
</tr>
<tr>
<td style="text-align:left">sidetrack</td>
<td>旁轨，侧线；次要地位，导入侧线，转移目标，受到干扰</td>
</tr>
<tr>
<td style="text-align:left">repeatedly</td>
<td>反复的</td>
</tr>
<tr>
<td style="text-align:left">lemon law</td>
<td>🍋法，<a href="https://zh.wikipedia.org/zh/%E6%AA%B8%E6%AA%AC%E6%B3%95">产品缺陷法</a></td>
</tr>
<tr>
<td style="text-align:left">repair bill</td>
<td>修补账单</td>
</tr>
<tr>
<td style="text-align:left">correspondence</td>
<td>信件，信函，一致，相似</td>
</tr>
<tr>
<td style="text-align:left">baptismal</td>
<td>洗礼</td>
</tr>
<tr>
<td style="text-align:left">autographed</td>
<td>亲笔签名，手迹</td>
</tr>
<tr>
<td style="text-align:left">dazzling</td>
<td>耀眼的，眼光缭乱的</td>
</tr>
<tr>
<td style="text-align:left">timid</td>
<td>胆小的，羞怯的</td>
</tr>
<tr>
<td style="text-align:left">colorless</td>
<td>无特色的</td>
</tr>
<tr>
<td style="text-align:left">vanilla</td>
<td>香草味的；平凡乏味的</td>
</tr>
<tr>
<td style="text-align:left">booth</td>
<td>货摊，电话亭</td>
</tr>
<tr>
<td style="text-align:left">tick</td>
<td>滴答</td>
</tr>
<tr>
<td style="text-align:left">wagon</td>
<td>四轮马车，推车</td>
</tr>
<tr>
<td style="text-align:left">flange</td>
<td>机械边缘</td>
</tr>
<tr>
<td style="text-align:left">sprocket</td>
<td>链齿轮</td>
</tr>
<tr>
<td style="text-align:left">secure</td>
<td>关牢</td>
</tr>
<tr>
<td style="text-align:left">giggle</td>
<td>咯咯笑</td>
</tr>
<tr>
<td style="text-align:left">hissed</td>
<td>嘘</td>
</tr>
<tr>
<td style="text-align:left">veterinarian</td>
<td>vet</td>
</tr>
<tr>
<td style="text-align:left">attorney</td>
<td>代理人</td>
</tr>
<tr>
<td style="text-align:left">jury</td>
<td>陪审团</td>
</tr>
<tr>
<td style="text-align:left">convicted</td>
<td>审判；宣判有罪</td>
</tr>
<tr>
<td style="text-align:left">penalty</td>
<td>惩罚</td>
</tr>
<tr>
<td style="text-align:left">moderator</td>
<td>主持人；宗教领袖</td>
</tr>
<tr>
<td style="text-align:left">panel</td>
<td>仪表盘，全体陪审员</td>
</tr>
<tr>
<td style="text-align:left">conservative</td>
<td>保守的，传统的</td>
</tr>
<tr>
<td style="text-align:left">navy</td>
<td>海军</td>
</tr>
<tr>
<td style="text-align:left">floral</td>
<td>花边的</td>
</tr>
<tr>
<td style="text-align:left">uneven</td>
<td>不平坦的，不相等的</td>
</tr>
<tr>
<td style="text-align:left">crop</td>
<td>农作物；庄稼；产量；平头 vt. 种植；收割；修剪；剪短 vi. 收获</td>
</tr>
<tr>
<td style="text-align:left">zucchini</td>
<td>夏季产的一种南瓜</td>
</tr>
<tr>
<td style="text-align:left">aisle</td>
<td>走廊</td>
</tr>
<tr>
<td style="text-align:left">absurdity</td>
<td>荒谬，谬论</td>
</tr>
<tr>
<td style="text-align:left">suspect</td>
<td>怀疑，嫌疑犯</td>
</tr>
<tr>
<td style="text-align:left">Maine</td>
<td>缅因州</td>
</tr>
<tr>
<td style="text-align:left">guideline</td>
<td>指导方针，准则</td>
</tr>
<tr>
<td style="text-align:left">assign</td>
<td>分配，指派，指定</td>
</tr>
<tr>
<td style="text-align:left">scare</td>
<td>缺乏，罕见</td>
</tr>
<tr>
<td style="text-align:left">dispassionate</td>
<td>公正，不带偏见</td>
</tr>
<tr>
<td style="text-align:left">capital punishment</td>
<td>死刑</td>
</tr>
<tr>
<td style="text-align:left">unbuttoned</td>
<td>解开纽扣的，无拘无束的</td>
</tr>
<tr>
<td style="text-align:left">slangy</td>
<td>好用俚语的</td>
</tr>
</tbody>
</table>
</div>
<h1 id="1-月-29-日和-1-月-30-日"><a href="#1-月-29-日和-1-月-30-日" class="headerlink" title="1 月 29 日和 1 月 30 日"></a>1 月 29 日和 1 月 30 日</h1><ul>
<li><p>麻了麻了，连续摸了两天</p>
</li>
<li><p>赵羡之啊赵羡之！你怎能如此堕落！先前订下的学习计划你都忘了吗？子曰：”吾日三省吾身。“不能再这样下去了！</p>
</li>
</ul>
<h1 id="1-月-31-日"><a href="#1-月-31-日" class="headerlink" title="1 月 31 日"></a>1 月 31 日</h1><ul>
<li>趁着除夕好好学英语，先学他两章的词汇再说！</li>
</ul>
<h2 id="chapter-6"><a href="#chapter-6" class="headerlink" title="chapter 6"></a>chapter 6</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">expedient</td>
<td><em>adj.</em> 应急有效的;权宜之计的</td>
</tr>
<tr>
<td style="text-align:left">Nazi concentration camps and death camps</td>
<td>集中营</td>
</tr>
<tr>
<td style="text-align:left">disclose</td>
<td>vt. 揭露；公开</td>
</tr>
<tr>
<td style="text-align:left">defendant</td>
<td><em>n.</em> 被告</td>
</tr>
<tr>
<td style="text-align:left">rash</td>
<td><em>n.</em> 发疹，疹子 <em>adj.</em> 太急速的；鲁莽的；轻率的</td>
</tr>
<tr>
<td style="text-align:left">lyme disease</td>
<td>莱姆病性关节炎; 暴发性紫癜;</td>
</tr>
<tr>
<td style="text-align:left">diabetes</td>
<td><em>n.</em> &lt;医&gt;糖尿病</td>
</tr>
<tr>
<td style="text-align:left">conscious of</td>
<td><em>adj.</em> 神志清醒的 意识到的; 注意到的 自觉的; 蓄意的</td>
</tr>
<tr>
<td style="text-align:left">widow</td>
<td>vt. 使成寡妇 n. 寡妇；孀妇</td>
</tr>
<tr>
<td style="text-align:left">widower</td>
<td>鳏夫</td>
</tr>
<tr>
<td style="text-align:left">slap</td>
<td>vt. 掌击；拍击；掴…的耳光；侮辱 n. 掌击；掴；侮辱；拍打声 vi. 掴；拍击 adv. 直接地；猛然地；恰好</td>
</tr>
<tr>
<td style="text-align:left">coat of paint</td>
<td>涂漆层；漆皮(汽车涂料)</td>
</tr>
<tr>
<td style="text-align:left">commit</td>
<td><em>vt.</em> 犯罪；犯错 承诺；使自己受约束 托付；交付  The  biggest hindrance to peace in the Middle East may be the acts of terrorism committed by both sides</td>
</tr>
<tr>
<td style="text-align:left">affectionate</td>
<td><em>adj.</em> 慈爱的,充满深情的,温柔亲切的</td>
</tr>
<tr>
<td style="text-align:left">kindle</td>
<td>vt. 点燃；照亮；激起 vi. 发亮；着火；激动起来</td>
</tr>
<tr>
<td style="text-align:left">lifelong</td>
<td>adj. 终身的</td>
</tr>
<tr>
<td style="text-align:left">devotion</td>
<td><em>n.</em> 奉献, 献身, 忠诚 热爱, 挚爱</td>
</tr>
<tr>
<td style="text-align:left">splendor</td>
<td>n. 光彩；显赫；壮丽</td>
</tr>
<tr>
<td style="text-align:left">promotion</td>
<td><em>n.</em> 提升，晋级 宣传；推销</td>
</tr>
<tr>
<td style="text-align:left">tug</td>
<td><em>vt. &amp; vi.</em> 用力拉；使劲拉；猛扯 <em>n.</em> 猛拉；猛拖；猛扯</td>
</tr>
<tr>
<td style="text-align:left">leash</td>
<td><em>n.</em> 拴猎狗的皮带 <em>vt.</em> 用皮带系住</td>
</tr>
<tr>
<td style="text-align:left">tabloid</td>
<td>n. 小报；药片；文摘；小型画报 adj. 小报式的；缩略的；轰动性的；扼要的</td>
</tr>
<tr>
<td style="text-align:left">conscientious</td>
<td><em>adj.</em> 认真的, 勤奋的</td>
</tr>
<tr>
<td style="text-align:left">flunk</td>
<td>vi. 失败；放弃；考试不及格 vt. 使…不及格 n. 不及格；失败   flunked out of college</td>
</tr>
<tr>
<td style="text-align:left">inspect</td>
<td>vt. 检查；视察；检阅 vi. 进行检查；进行视察</td>
</tr>
<tr>
<td style="text-align:left">hindrance</td>
<td>Obstacle: impediment</td>
</tr>
<tr>
<td style="text-align:left">impediment</td>
<td><em>n.</em> 妨碍、阻碍某事物进展或活动的人或物 身体上的某类残疾, 缺陷</td>
</tr>
<tr>
<td style="text-align:left">cognizant</td>
<td>aware</td>
</tr>
<tr>
<td style="text-align:left">expedient</td>
<td>Self-serving(自私自利的); convenient</td>
</tr>
<tr>
<td style="text-align:left">lavish</td>
<td>extravagant</td>
</tr>
<tr>
<td style="text-align:left">negligent</td>
<td>careless</td>
</tr>
<tr>
<td style="text-align:left">scrutinize</td>
<td>to examine; to inspect</td>
</tr>
<tr>
<td style="text-align:left">kindle</td>
<td>to stir up; arouse</td>
</tr>
<tr>
<td style="text-align:left">appall</td>
<td>to horrify; dismay</td>
</tr>
<tr>
<td style="text-align:left">dismay</td>
<td>n. 沮丧，灰心；惊慌 vt. 使惊慌；使沮丧</td>
</tr>
<tr>
<td style="text-align:left">ludicrous</td>
<td>laughable</td>
</tr>
<tr>
<td style="text-align:left">commiserate</td>
<td>to sympathize; express compassion</td>
</tr>
<tr>
<td style="text-align:left">compassion</td>
<td><em>n.</em> 怜悯, 同情</td>
</tr>
<tr>
<td style="text-align:left">exclaim</td>
<td><em>vt. &amp; vi.</em> 呼喊, 惊叫, 大声说</td>
</tr>
<tr>
<td style="text-align:left">rug</td>
<td><em>n.</em> 小块地毯</td>
</tr>
<tr>
<td style="text-align:left">brocade</td>
<td>n. [纺]锦缎；织锦 vt. 把图案或凸花纹织入；在…上织出图案</td>
</tr>
<tr>
<td style="text-align:left">prestigious</td>
<td><em>adj.</em> 受尊敬的, 有声望的, 有威信的</td>
</tr>
<tr>
<td style="text-align:left">satin</td>
<td><em>n.</em> 缎,缎子 <em>adj.</em> 像缎子一样光滑的</td>
</tr>
<tr>
<td style="text-align:left">ribbon</td>
<td>n. 缎带；带状物；带；（勋章等的）绶带；[军]勋表 vi. 形成带状 vt. 把…撕成条带；用缎带装饰</td>
</tr>
<tr>
<td style="text-align:left">phony</td>
<td><em>adj.</em> &lt;口&gt;假的；欺骗的 <em>n.</em> &lt;口&gt;赝品；骗人的东西 骗子</td>
</tr>
<tr>
<td style="text-align:left">mayor</td>
<td>市长</td>
</tr>
<tr>
<td style="text-align:left">tube</td>
<td>n. 管；电子管；隧道；电视机 vt. 把…装管；用管输送；使成管状 vi. [美俚]不及格；乘地铁    watch the tube</td>
</tr>
<tr>
<td style="text-align:left">promotional</td>
<td>促销的</td>
</tr>
<tr>
<td style="text-align:left">would-be</td>
<td><em>adj.</em> 想要成为的,自称自许的,自充的 <em>n.</em> 想要成为…人</td>
</tr>
<tr>
<td style="text-align:left">mount</td>
<td><em>vt. &amp; vi.</em> 登上；骑上 <em>vi.</em> 增加；上升 <em>vt.</em> 上演；配有… 发动攻击；攻击 <em>n.</em> 山峰 坐骑</td>
</tr>
<tr>
<td style="text-align:left">billboard</td>
<td><em>n.</em> &lt;主美&gt;广告牌</td>
</tr>
<tr>
<td style="text-align:left">test-market</td>
<td>试销</td>
</tr>
<tr>
<td style="text-align:left">Soft-drink</td>
<td>n. 软饮料；不含酒精的饮料</td>
</tr>
<tr>
<td style="text-align:left">chevy nova</td>
<td>雪佛兰新星(一款车)</td>
</tr>
<tr>
<td style="text-align:left">pope</td>
<td>n. 教皇，罗马教皇；权威，大师</td>
</tr>
<tr>
<td style="text-align:left">count on</td>
<td>依靠, 指望 </td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-7"><a href="#chapter-7" class="headerlink" title="chapter 7"></a>chapter 7</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">parakeet</td>
<td><em>n.</em> &lt;动&gt;长尾小鹦鹉</td>
</tr>
<tr>
<td style="text-align:left">lay off</td>
<td>vt. 解雇,停工期间,关闭,休息</td>
</tr>
<tr>
<td style="text-align:left">get around to</td>
<td>抽出时间来做……；开始考虑做……</td>
</tr>
<tr>
<td style="text-align:left">soil</td>
<td><em>n.</em> 土地；土壤；国家；粪便；务农；温床<br/><em>vt. &amp; vi.</em> 弄脏；污辱</td>
</tr>
<tr>
<td style="text-align:left">slink</td>
<td>vi. 潜逃；溜走 vt. 早产；潜逃 n. 早产的动物；鬼鬼祟祟的人 adj. 早产的；溜达</td>
</tr>
<tr>
<td style="text-align:left">exaggerate</td>
<td><em>vt. &amp; vi.</em> (使)扩大, (使)增加 夸大, 夸张</td>
</tr>
<tr>
<td style="text-align:left">deceit</td>
<td>n. 欺骗；谎言；欺诈手段</td>
</tr>
<tr>
<td style="text-align:left">vague</td>
<td>adj. 不明确的；含糊的；模糊的；暧昧的</td>
</tr>
<tr>
<td style="text-align:left">claudius</td>
<td><em>n.</em> 克劳迪亚斯(Claude的异体)(m.)</td>
</tr>
<tr>
<td style="text-align:left">midlife</td>
<td><em>n.</em> 中年</td>
</tr>
<tr>
<td style="text-align:left">algae</td>
<td>n. 藻类；海藻</td>
</tr>
<tr>
<td style="text-align:left">sew</td>
<td><em>n.</em> 缝纫,针线活 <em>n.</em> 缝纫机 <em>n.</em> 缝纫针</td>
</tr>
<tr>
<td style="text-align:left">unevenly</td>
<td><em>adv.</em> 不规则地;不平衡地 不稳定地;易变化地 不平行地;不对称地 参差不齐地</td>
</tr>
<tr>
<td style="text-align:left">discolor</td>
<td>vt. 使褪色；使变色 vi. 变色；褪色</td>
</tr>
<tr>
<td style="text-align:left">unvary</td>
<td>不变</td>
</tr>
<tr>
<td style="text-align:left">insupportable</td>
<td>adj. 不能忍受的；忍耐不住的</td>
</tr>
<tr>
<td style="text-align:left">supportable</td>
<td><em>adj.</em> 可支持的,可援助的,可忍耐的</td>
</tr>
<tr>
<td style="text-align:left">cuff</td>
<td><em>n.</em> 袖口 <em>vt.</em> 掌打, 拳打</td>
</tr>
<tr>
<td style="text-align:left">deceptiveness</td>
<td><em>adj.</em> 可能欺骗的, 导致误解的</td>
</tr>
<tr>
<td style="text-align:left">duplicity</td>
<td>deliberate deceptiveness; deceit</td>
</tr>
<tr>
<td style="text-align:left">duplicate</td>
<td><em>n.</em> 完全一样的东西, 复制品 <em>adj.</em> 完全一样的, 复制的 <em>vt.</em> 复制 复印</td>
</tr>
<tr>
<td style="text-align:left">interpretation</td>
<td><em>n.</em> 解释，说明；诠释 表演；演奏</td>
</tr>
<tr>
<td style="text-align:left">equivocal</td>
<td>open to more than one interpretation and often intended to mislead</td>
</tr>
<tr>
<td style="text-align:left">uniform</td>
<td>all or always the same; without variety</td>
</tr>
<tr>
<td style="text-align:left">contract</td>
<td>to reduce in size; become compressed</td>
</tr>
<tr>
<td style="text-align:left">clamor</td>
<td>a loud outcry; hubbub</td>
</tr>
<tr>
<td style="text-align:left">outcry</td>
<td><em>n.</em> 高声叫喊，尖叫；公开反对</td>
</tr>
<tr>
<td style="text-align:left">hubbub</td>
<td>n. 喧哗；骚动</td>
</tr>
<tr>
<td style="text-align:left">untenable</td>
<td>unable to be held or defended; insupportable(不攻自破的)</td>
</tr>
<tr>
<td style="text-align:left">stagnant</td>
<td>not moving; not flowing; montionless;   adj. 停滞的；污浊的；不景气的；迟钝的</td>
</tr>
<tr>
<td style="text-align:left">vilify</td>
<td>to make abusive statements about</td>
</tr>
<tr>
<td style="text-align:left">abusive</td>
<td><em>adj.</em> 咒骂的，滥用</td>
</tr>
<tr>
<td style="text-align:left">rescind</td>
<td>to repeal; take back</td>
</tr>
<tr>
<td style="text-align:left">repeal</td>
<td>vt. 废除；撤销；放弃；废止；否定 n. 废除；撤销</td>
</tr>
<tr>
<td style="text-align:left">irresolute</td>
<td>uncertain how to think or act; undecided</td>
</tr>
<tr>
<td style="text-align:left">courtroom</td>
<td><em>n.</em> 法庭,审判室</td>
</tr>
<tr>
<td style="text-align:left">erupt</td>
<td><em>vi.</em> 爆发, 喷发 突然发生 出疹</td>
</tr>
<tr>
<td style="text-align:left">pound</td>
<td>n. 英镑；兽栏；重击，重击声；拘留所 vt. 捣烂；敲打；监禁，拘留 vi. 连续重击，猛击</td>
</tr>
<tr>
<td style="text-align:left">gavel</td>
<td><em>n.</em> (拍卖商、会议主席或法官用的)小木槌   pound the gavel</td>
</tr>
<tr>
<td style="text-align:left">racist</td>
<td><em>n.</em> 种族歧视者</td>
</tr>
<tr>
<td style="text-align:left">fundraise</td>
<td>筹款</td>
</tr>
<tr>
<td style="text-align:left">miscalculate</td>
<td><em>vt. &amp; vi.</em> (对数字、时间等)计算错误, 算错 (对…)判断错误</td>
</tr>
<tr>
<td style="text-align:left">bill</td>
<td>n. 帐单；法案；广告；钞票；票据；清单 vt. 宣布；开帐单；用海报宣传</td>
</tr>
<tr>
<td style="text-align:left">procedure</td>
<td><em>n.</em> 程序, 步骤 手续</td>
</tr>
<tr>
<td style="text-align:left">sluggish</td>
<td>adj. 萧条的；迟钝的；懒惰的；行动迟缓的 n. 市况呆滞；市势疲弱</td>
</tr>
<tr>
<td style="text-align:left">blend</td>
<td><em>vt. &amp; vi.</em> (使)混合, (使)混杂 <em>n.</em> 混合物</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-1-日"><a href="#2-月-1-日" class="headerlink" title="2 月 1 日"></a>2 月 1 日</h1><p>麻了，今天上午在摸鱼，晚上看上去只能学一章了，Orz</p>
<h2 id="chapter-8"><a href="#chapter-8" class="headerlink" title="chapter 8"></a>chapter 8</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">doberman</td>
<td>n. 一种德国短毛猎犬；杜宾犬</td>
</tr>
<tr>
<td style="text-align:left">pit</td>
<td>n. 深坑；矿井；陷阱；（英国剧场的）正厅后排；（物体或人体表面上的）凹陷；正厅后排的观众 vt. 窖藏；使竞争；使凹下；去…之核；使留疤痕 vi. 凹陷；起凹点</td>
</tr>
<tr>
<td style="text-align:left">bull</td>
<td>n. 公牛，雄兽；买进证券投机图利者，(对股市行情)看涨的人</td>
</tr>
<tr>
<td style="text-align:left">retrieve</td>
<td><em>vt.</em> 寻回, 找回 恢复, 挽回 检索(储存的信息) 使某事物恢复旺盛状态 <em>vt. &amp; vi.</em> (指经过训练的狗)找到并衔回(被打死或打伤的鸟等)</td>
</tr>
<tr>
<td style="text-align:left">labrador</td>
<td>n. 拉布拉多（加拿大东部一地区）；一种纽芬兰猎犬</td>
</tr>
<tr>
<td style="text-align:left">stern</td>
<td>n. 船尾；末端 adj. 严厉的；坚定的</td>
</tr>
<tr>
<td style="text-align:left">folklore</td>
<td><em>n.</em> 民间传统;民间故事;民俗；形容词: folkloric 形容词: folklorish 名 词: folklorist</td>
</tr>
<tr>
<td style="text-align:left">lumberjack</td>
<td><em>n.</em> 伐木工人,木材商的佣工,短茄克衫</td>
</tr>
<tr>
<td style="text-align:left">Paul Bunyan</td>
<td>(美国传说中的)伐木巨人</td>
</tr>
<tr>
<td style="text-align:left">fictitious</td>
<td><em>adj.</em> 假的, 虚构的, 编造的, 假设的, 假装的</td>
</tr>
<tr>
<td style="text-align:left">intensive</td>
<td><em>adj.</em> 加强的, 集中的, 密集的 彻底的 加强语气的</td>
</tr>
<tr>
<td style="text-align:left">holler</td>
<td>vi. 发牢骚；叫喊；抱怨 vt. 大声叫喊 n. 叫喊</td>
</tr>
<tr>
<td style="text-align:left">distort</td>
<td>vt. 扭曲；曲解；使失真 vi. 扭曲；变形</td>
</tr>
<tr>
<td style="text-align:left">grouch</td>
<td>n. 心怀不满；不高兴的人；抱怨 vi. 发牢骚；闹脾气；抱怨</td>
</tr>
<tr>
<td style="text-align:left">grumpy</td>
<td><em>adj.</em> 脾气坏的,生气的 <em>adv.</em> 生气地</td>
</tr>
<tr>
<td style="text-align:left">companion</td>
<td><em>n.</em> 同伴, 伙伴 成双成对的物品之一</td>
</tr>
<tr>
<td style="text-align:left">hind</td>
<td><em>adj.</em> (常指动物腿)后面的,在后的 (通常与can或could连用)唠叨不停；滔滔不绝</td>
</tr>
<tr>
<td style="text-align:left">sharpen</td>
<td>vt. 削尖；使敏捷；加重；磨快 vi. 变锋利；尖锐</td>
</tr>
<tr>
<td style="text-align:left">dimwit</td>
<td>n. 傻瓜；形容词: dimwitted</td>
</tr>
<tr>
<td style="text-align:left">reassure</td>
<td><em>vt.</em> 消除恐惧或疑虑；恢复信心</td>
</tr>
<tr>
<td style="text-align:left">murky</td>
<td><em>adj.</em> 阴暗的；昏暗的 (指水)脏的；混浊的 可疑的，不可告人的 ( 陷入) 心中无数的困境( 或险境) <em>adv.</em> 阴暗地；混浊地；可疑地 <em>n.</em> 阴暗，昏暗；混浊；<strong>可疑</strong></td>
</tr>
<tr>
<td style="text-align:left">proceed</td>
<td><em>vi.</em> 前进；行进 进行；继续下去</td>
</tr>
<tr>
<td style="text-align:left">conceal</td>
<td>vt. 隐藏；隐瞒</td>
</tr>
<tr>
<td style="text-align:left">high-flown</td>
<td><em>adj.</em> 颇有野心的 夸张的</td>
</tr>
<tr>
<td style="text-align:left">authenticity</td>
<td><em>n.</em> 可靠性；确实性；真实性</td>
</tr>
<tr>
<td style="text-align:left">irritable</td>
<td><em>adj.</em> 易怒的, 急躁的</td>
</tr>
<tr>
<td style="text-align:left">obscure</td>
<td>adj. 模糊的；晦涩的；昏暗的 vt. 遮掩；使变暗；使难理解；缩 写: obs</td>
</tr>
<tr>
<td style="text-align:left">scarcity</td>
<td>n. 缺乏；不足</td>
</tr>
<tr>
<td style="text-align:left">apocryphal</td>
<td>of doubtful authenticity; not genuine</td>
</tr>
<tr>
<td style="text-align:left">desultory</td>
<td>moving from one thing to another in an unplanned way</td>
</tr>
<tr>
<td style="text-align:left">loquacious</td>
<td>very talktive</td>
</tr>
<tr>
<td style="text-align:left">affable</td>
<td>friendly; easy to get along with</td>
</tr>
<tr>
<td style="text-align:left">irascible</td>
<td>easily angered; irritable</td>
</tr>
<tr>
<td style="text-align:left">opaque</td>
<td>difficult to understand or explain; obscure; incomprehensible</td>
</tr>
<tr>
<td style="text-align:left">recapitulate</td>
<td>to summerize or repeat briefly</td>
</tr>
<tr>
<td style="text-align:left">botuse</td>
<td>slow to understanded; dull</td>
</tr>
<tr>
<td style="text-align:left">paucity</td>
<td>a scarcity; an insufficiency</td>
</tr>
<tr>
<td style="text-align:left">garbled</td>
<td>mixed up to such an extent as to be misleading or incomprehensible</td>
</tr>
<tr>
<td style="text-align:left">extent</td>
<td><em>n.</em> 长度, 面积, 范围 程度, 限度</td>
</tr>
<tr>
<td style="text-align:left">extend</td>
<td><em>vt. &amp; vi.</em> (空间、时间等)延伸；延续 <em>vt.</em> 延长；扩展；达到(某一点) 尽可能地伸开(身体某部) 给予，提供，发出</td>
</tr>
<tr>
<td style="text-align:left">fountain of youth</td>
<td>青春之泉</td>
</tr>
<tr>
<td style="text-align:left">pushover</td>
<td>n. [俚语]易于征服或控制的人；[俚语]容易打败的对手；容易做的事情</td>
</tr>
<tr>
<td style="text-align:left">demanding</td>
<td><em>adj.</em> 很费心的, 很费力的</td>
</tr>
<tr>
<td style="text-align:left">chorus</td>
<td><em>n.</em> (歌曲的)副歌 合唱, 合唱队, 歌咏队 <em>vt.</em> 合唱, 齐声背诵, 异口同声地说</td>
</tr>
<tr>
<td style="text-align:left">audition</td>
<td><em>n.</em> (对拟做演员、歌手、乐师等人的)试听, 试音 <em>vi.</em> 试音 <em>vt.</em> 试听</td>
</tr>
<tr>
<td style="text-align:left">fluid</td>
<td>adj. 流动的；不固定的；流畅的 n. 流体；液体；名 词: fluidity</td>
</tr>
<tr>
<td style="text-align:left">hop</td>
<td><em>vi.</em> 单足蹦跳, 跳跃 跳上[下] <em>vt.</em> 跃过, 跳过 搭乘 <em>n.</em> 蹦跳, 跳跃 跳舞 一次飞行的距离</td>
</tr>
<tr>
<td style="text-align:left">ramble</td>
<td>n. 漫步；漫游；随笔 vt. 漫步于… vi. 漫游；漫步；漫谈；闲逛；蔓延</td>
</tr>
<tr>
<td style="text-align:left">unread</td>
<td>adj. 未经阅读的；无学问的，读书不多的</td>
</tr>
<tr>
<td style="text-align:left">eyebrow</td>
<td>n. 眉毛 v. 为…描眉；用皱眉蹙额迫使</td>
</tr>
<tr>
<td style="text-align:left">drench</td>
<td><em>vt.</em> 使湿透 在某人(某物)上大量使用(某液体)</td>
</tr>
<tr>
<td style="text-align:left">recruit</td>
<td><em>n.</em> 新兵 (机构中的)新成员 <em>vt.</em> 招聘；吸引(新成员) 吸收某人为新成员 <em>vt. &amp; vi.</em> 招募，征募(新兵) 恢复健康，恢复体力</td>
</tr>
<tr>
<td style="text-align:left">disassemble</td>
<td><em>vt.</em> 解开,分解</td>
</tr>
<tr>
<td style="text-align:left">reassemble</td>
<td><em>n.</em> 重新组装</td>
</tr>
<tr>
<td style="text-align:left">foolproof</td>
<td><em>adj.</em> (方法、计划、系统等设计得)万无一失的,肯定成功的</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-2-日"><a href="#2-月-2-日" class="headerlink" title="2 月 2 日"></a>2 月 2 日</h1><ul>
<li>早起学一章，然后去锻炼，晚上再学一章，美滋滋！！！</li>
</ul>
<h2 id="chapter-9"><a href="#chapter-9" class="headerlink" title="chapter 9"></a>chapter 9</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Thai</td>
<td><em>n.</em> 泰国人,泰国语</td>
</tr>
<tr>
<td style="text-align:left">Wayne</td>
<td>n. 韦恩（男子名）</td>
</tr>
<tr>
<td style="text-align:left">Citizen Kane</td>
<td>The Citizen Kane 大国民 Citizen Kane overture 公民凯恩序曲 The Battle Over Citizen Kane 之外的战斗; 公民凯恩之外的战斗; Citizen Kane  公民凯恩（电影名）</td>
</tr>
<tr>
<td style="text-align:left">orchestra</td>
<td><em>n.</em> 管弦乐队</td>
</tr>
<tr>
<td style="text-align:left">tune</td>
<td><em>n.</em> 曲调, 曲子 <em>vt. &amp; vi.</em> 调音 <em>vt.</em> 调整</td>
</tr>
<tr>
<td style="text-align:left">melody</td>
<td>n. 旋律；歌曲；美妙的音乐</td>
</tr>
<tr>
<td style="text-align:left">pierce</td>
<td><em>vt. &amp; vi.</em> 刺入；刺穿；穿透</td>
</tr>
<tr>
<td style="text-align:left">sarcastic</td>
<td><em>adj.</em> 讥讽的, 讽刺的, 挖苦的</td>
</tr>
<tr>
<td style="text-align:left">icy</td>
<td>adj. 冰冷的；结满冰的；冷淡的</td>
</tr>
<tr>
<td style="text-align:left">preacher</td>
<td><em>n.</em> 说教者；鼓吹者；传道人，讲道的道士</td>
</tr>
<tr>
<td style="text-align:left">sermon</td>
<td><em>n.</em> 布道, 讲道, 说教 讲道文章 一大通教训</td>
</tr>
<tr>
<td style="text-align:left">wickedness</td>
<td><em>n.</em> 邪恶;恶事;恶毒</td>
</tr>
<tr>
<td style="text-align:left">wick</td>
<td>n. 灯芯，蜡烛芯 vt. 依靠毛细作用带走</td>
</tr>
<tr>
<td style="text-align:left">wicked</td>
<td>adj. 邪恶的；顽皮的；恶劣的；不道德的</td>
</tr>
<tr>
<td style="text-align:left">subject</td>
<td><em>n.</em> 主题；题目；问题 话题，考虑的问题 学科，科目；课程 主语，主词 <em>adj.</em> 常有[常患，常遭受]…的；倾向于…的 须服从…的；受…支配的 受约束[管辖]的，不独立的 取决于…的，有待于…的 <em>vt.</em> 使服从，征服，制伏</td>
</tr>
<tr>
<td style="text-align:left">slide</td>
<td><em>vt. &amp; vi.</em> 滑动；滑行 <em>vi.</em> 滑落，跌落 <em>n.</em> 滑行，滑落 幻灯片</td>
</tr>
<tr>
<td style="text-align:left">plaque</td>
<td><em>n.</em> 饰板,匾 &lt;医&gt;牙斑 &lt;微生物&gt;空斑</td>
</tr>
<tr>
<td style="text-align:left">grief</td>
<td><em>n.</em> 悲伤, 悲痛 悲伤的事, 悲痛的缘由</td>
</tr>
<tr>
<td style="text-align:left">major</td>
<td>adj. 主要的；主修的；重要的；较多的 n. 成年人；主修科目；陆军少校 vi. 主修</td>
</tr>
<tr>
<td style="text-align:left">violation</td>
<td><em>n.</em> 违反, 冒犯, 侵害 违反(行为、事例) 强奸</td>
</tr>
<tr>
<td style="text-align:left">reverence</td>
<td>n. 敬礼；尊严；崇敬 vt. 尊敬；敬畏</td>
</tr>
<tr>
<td style="text-align:left">grammatical</td>
<td><em>adj.</em> 语法上的;符合语法规则的 <em>adv.</em> 符合语法规则地 <em>n.</em> 符合语法规则</td>
</tr>
<tr>
<td style="text-align:left">restful</td>
<td>adj. 给人休息的；宁静的；安静的</td>
</tr>
<tr>
<td style="text-align:left">accolade</td>
<td><em>n.</em> 嘉奖；赞许 册封爵士的仪式(用剑面在肩上轻拍一下)</td>
</tr>
<tr>
<td style="text-align:left">edifice</td>
<td>a building, especially of large, imposing size</td>
</tr>
<tr>
<td style="text-align:left">infraction</td>
<td>a breaking of law or rule</td>
</tr>
<tr>
<td style="text-align:left">datribe</td>
<td><em>n.</em> 谩骂,讽刺</td>
</tr>
<tr>
<td style="text-align:left">abusive</td>
<td><em>adj.</em> 被滥用的，被误用的，被妄用的 虐待的；凌辱的；糟蹋的 骂人的, 攻击性的 毁谤的 舞弊的；腐败的 &lt;废&gt;骗人的；欺骗性的，欺诈性的 <em>adv.</em> 滥用地；虐待地；攻击性地；毁谤地；欺骗性地 <em>n.</em> 滥用；虐待；攻击；毁谤；欺骗</td>
</tr>
<tr>
<td style="text-align:left">lessen</td>
<td>vt. 使…变小；使…减轻；使…变少 vi. 减少；减轻；变小</td>
</tr>
<tr>
<td style="text-align:left">melancholy</td>
<td><em>n.</em> 忧郁, 悲哀 <em>adj.</em> 忧郁的, 悲伤的</td>
</tr>
<tr>
<td style="text-align:left">rebuke</td>
<td><em>vt.</em> 责难或指责 <em>n.</em> 非难；责难</td>
</tr>
<tr>
<td style="text-align:left">weighty</td>
<td>adj. 重的；重大的；严肃的</td>
</tr>
<tr>
<td style="text-align:left">disrespect</td>
<td><em>n.</em> 失礼,无礼 <em>vt.</em> 不尊敬,不尊重</td>
</tr>
<tr>
<td style="text-align:left">contempt</td>
<td>n. 轻视，蔑视；耻辱</td>
</tr>
<tr>
<td style="text-align:left">sacred</td>
<td>adj. 神圣的；庄严的；宗教的；神的</td>
</tr>
<tr>
<td style="text-align:left">harsh</td>
<td>adj. 粗糙的；刺耳的；严厉的；严酷的；刺目的</td>
</tr>
<tr>
<td style="text-align:left">discordant</td>
<td><em>adj.</em> 不和的，不一致的，不调和的；不谐和的</td>
</tr>
<tr>
<td style="text-align:left">assuage</td>
<td>to relieve; lessen</td>
</tr>
<tr>
<td style="text-align:left">somber</td>
<td>solemn; sad and depressing; melancholy</td>
</tr>
<tr>
<td style="text-align:left">censure</td>
<td>Blame; a rebuke</td>
</tr>
<tr>
<td style="text-align:left">gravity</td>
<td>severity; weighty importance</td>
</tr>
<tr>
<td style="text-align:left">profane</td>
<td>showing disrespect or contempt for sacred things</td>
</tr>
<tr>
<td style="text-align:left">cacophony</td>
<td>harsh, discordant sounds</td>
</tr>
<tr>
<td style="text-align:left">earplug</td>
<td>n. 耳栓</td>
</tr>
<tr>
<td style="text-align:left">nominate</td>
<td>vt. 提名；任命；指定；推荐</td>
</tr>
<tr>
<td style="text-align:left">banana splits</td>
<td>Banana Splits 香蕉船</td>
</tr>
<tr>
<td style="text-align:left">newscast</td>
<td><em>n.</em> 〈美〉新闻广播</td>
</tr>
<tr>
<td style="text-align:left">ornate</td>
<td>adj. 华丽的；装饰的；（文体）绚丽的</td>
</tr>
<tr>
<td style="text-align:left">detention</td>
<td><em>n.</em> 拘留, 扣押 监禁</td>
</tr>
<tr>
<td style="text-align:left">lecture</td>
<td>n. 演讲；讲稿；教训 vt. 演讲；训诫 vi. 讲演；讲课</td>
</tr>
<tr>
<td style="text-align:left">folly</td>
<td><em>n.</em> 愚蠢;蠢笨;愚蠢的行为、思想或做法</td>
</tr>
<tr>
<td style="text-align:left">mansion</td>
<td><em>n.</em> 宅第，公馆；大厦</td>
</tr>
<tr>
<td style="text-align:left">swear</td>
<td>vt. 发誓；咒骂 vi. 诅咒；发誓，宣誓 n. 宣誓；诅咒</td>
</tr>
<tr>
<td style="text-align:left">concert</td>
<td>n. 音乐会；和谐；一致 vt. 使协调；协同安排 vi. 协力；协调 adj. 音乐会用的；在音乐会上演出的</td>
</tr>
<tr>
<td style="text-align:left">mike</td>
<td>n. 扩音器，麦克风；话筒 vi. 使用扩音器 vt. 用扩音器传送；用窃听器窃听</td>
</tr>
<tr>
<td style="text-align:left">throb</td>
<td><em>n.</em> 体内的跳动 <em>vi.</em> 抽痛 (心脏、脉搏等)跳动</td>
</tr>
<tr>
<td style="text-align:left">senator</td>
<td><em>n.</em> 参议员</td>
</tr>
<tr>
<td style="text-align:left">graft</td>
<td>vi. 嫁接；移植；贪污 vt. 嫁接；移植；贪污 n. 嫁接；移植；渎职</td>
</tr>
<tr>
<td style="text-align:left">rural</td>
<td><em>adj.</em> 农村的</td>
</tr>
<tr>
<td style="text-align:left">dignified</td>
<td><em>adj.</em> 有尊严的, 高贵的, 显得高尚的, 庄严的</td>
</tr>
<tr>
<td style="text-align:left">senate</td>
<td><em>n.</em> 参议院, 上院</td>
</tr>
<tr>
<td style="text-align:left">woolen</td>
<td>adj. 羊毛的；羊毛制的 n. 毛织品</td>
</tr>
<tr>
<td style="text-align:left">scratch</td>
<td>n. 抓痕；擦伤；刮擦声；乱写 adj. 打草稿用的；凑合的；碰巧的 vt. 抓；刮；挖出；乱涂 vi. 抓；搔；发刮擦声；勉强糊口；退出比赛</td>
</tr>
<tr>
<td style="text-align:left">itch</td>
<td><em>n.</em> 痒 <em>vi.</em> 发痒                </td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-10"><a href="#chapter-10" class="headerlink" title="chapter 10"></a>chapter 10</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">copernicus</td>
<td><em>n.</em> 哥白尼(Nicolaus 1473-1543,波兰天文学家,现代天文学创始人)</td>
</tr>
<tr>
<td style="text-align:left">payroll</td>
<td><em>n.</em> (公司员工的)工资名单 (公司的)工资总支出; 工薪总额</td>
</tr>
<tr>
<td style="text-align:left">clerk</td>
<td>n. 职员，办事员；店员；书记；记帐员 vi. 当销售员，当店员</td>
</tr>
<tr>
<td style="text-align:left">catholic</td>
<td>adj. 天主教的；宽宏大量的 n. 天主教徒；罗马天主教</td>
</tr>
<tr>
<td style="text-align:left">priest</td>
<td>n. 牧师；神父；教士 vt. 使成为神职人员；任命…为祭司</td>
</tr>
<tr>
<td style="text-align:left">lunatic</td>
<td>adj. 精神错乱的；疯狂的；愚蠢的 n. 疯子；疯人</td>
</tr>
<tr>
<td style="text-align:left">institution</td>
<td><em>n.</em> 惯例，习俗；制度 为人熟知常在某处的人 知名人士，名流 慈善机构 建立，制定</td>
</tr>
<tr>
<td style="text-align:left">inspect</td>
<td>vt. 检查；视察；检阅 vi. 进行检查；进行视察</td>
</tr>
<tr>
<td style="text-align:left">hermit</td>
<td><em>n.</em> (尤指早期基督教的)隐居修道士; 隐士; 遁世者</td>
</tr>
<tr>
<td style="text-align:left">supplies</td>
<td>n. 物资；供应品；贮备量（supply的复数） v. 提供；供应（supply的第三人称单数）</td>
</tr>
<tr>
<td style="text-align:left">throne</td>
<td>n. 王座；君主；王权 vi. 登上王座 vt. 使登王位</td>
</tr>
<tr>
<td style="text-align:left">commoner</td>
<td>n. 自费学生；平民；下议院议员</td>
</tr>
<tr>
<td style="text-align:left">disown</td>
<td>vt. 否认；脱离关系</td>
</tr>
<tr>
<td style="text-align:left">irreverence</td>
<td><em>adj.</em> 不尊敬的</td>
</tr>
<tr>
<td style="text-align:left">dissenter</td>
<td><em>n.</em> 持异议者;持不同意见者</td>
</tr>
<tr>
<td style="text-align:left">nonconformist</td>
<td><em>n.</em> 不信奉英国国教的新教教徒 不墨守成规者</td>
</tr>
<tr>
<td style="text-align:left">enmity</td>
<td>hatred</td>
</tr>
<tr>
<td style="text-align:left">peruse</td>
<td>to examine; read with great care; vt. 详细考察；精读</td>
</tr>
<tr>
<td style="text-align:left">erroneous</td>
<td><em>adj.</em> 〈正〉错误的, 不正确的</td>
</tr>
<tr>
<td style="text-align:left">recluse</td>
<td>a person who leads a solitary life: someone who withdraws from others</td>
</tr>
<tr>
<td style="text-align:left">blasphemy</td>
<td><em>n.</em> 对上帝的亵渎,亵渎的言词〔行为〕 侮慢的言词(或行为)</td>
</tr>
<tr>
<td style="text-align:left">renounce</td>
<td><em>vt.</em> 宣布放弃</td>
</tr>
<tr>
<td style="text-align:left">languish</td>
<td><em>vi.</em> 长期受苦,受折磨 变得(越来越)衰弱 因渴望而变得憔悴或闷闷不乐</td>
</tr>
<tr>
<td style="text-align:left">incite</td>
<td>to stir up</td>
</tr>
<tr>
<td style="text-align:left">heretic</td>
<td>a person who holds unpopular or unaccecpted beliefs; dissenter; nonconformist</td>
</tr>
<tr>
<td style="text-align:left">garner</td>
<td>to collect</td>
</tr>
<tr>
<td style="text-align:left">couch</td>
<td>n. 睡椅，长沙发；卧榻；床 vi. 蹲伏，埋伏；躺着 vt. 表达；弯下；使躺下</td>
</tr>
<tr>
<td style="text-align:left">Semi-invalid</td>
<td>半病废者</td>
</tr>
<tr>
<td style="text-align:left">elope</td>
<td>vi. 潜逃；私奔</td>
</tr>
<tr>
<td style="text-align:left">portray</td>
<td><em>vt.</em> 画像；描述 扮演</td>
</tr>
<tr>
<td style="text-align:left">addict</td>
<td>n. 有瘾的人；入迷的人 vt. 使沉溺；使上瘾</td>
</tr>
<tr>
<td style="text-align:left">compliment</td>
<td><em>n.</em> 赞美(话)，恭维(话) 向…送礼以表示敬意 <em>vt.</em> 表扬；恭维</td>
</tr>
<tr>
<td style="text-align:left">hawk</td>
<td><em>n.</em> 鹰 鹰派人物, 主战派人物 <em>vt.</em> 沿街叫卖</td>
</tr>
<tr>
<td style="text-align:left">contract</td>
<td>vi. 感染；订约；收缩 vt. 感染；订约；使缩短 n. 合同；婚约</td>
</tr>
<tr>
<td style="text-align:left">Irene</td>
<td><em>n.</em> 女性名,〈希神〉和平女神 /ai’ri:n/</td>
</tr>
<tr>
<td style="text-align:left">jury</td>
<td>n. 陪审团；评判委员会 adj. 应急的</td>
</tr>
<tr>
<td style="text-align:left">revolutionary</td>
<td><em>adj.</em> 革命的 革命性的, 创新的 <em>n.</em> 革命者, 革新者</td>
</tr>
<tr>
<td style="text-align:left">Galileo Galilei</td>
<td>伽利略; 伽里略;</td>
</tr>
<tr>
<td style="text-align:left">Pisa</td>
<td>n. 比萨（意大利城市）</td>
</tr>
<tr>
<td style="text-align:left">Holland</td>
<td>n. 荷兰</td>
</tr>
<tr>
<td style="text-align:left">startle</td>
<td>vt. 使吓一跳；使惊奇 vi. 惊吓；惊跳；惊奇 n. 惊愕；惊恐</td>
</tr>
<tr>
<td style="text-align:left">pardon</td>
<td>n. 原谅；宽恕；赦免 vt. 原谅；赦免；宽恕</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-3-日"><a href="#2-月-3-日" class="headerlink" title="2 月 3 日"></a>2 月 3 日</h1><ul>
<li>按照目前的速度，估计 2 月 13 日前能够完工，终于可以向图形学和概统宣战了</li>
</ul>
<h2 id="chapter-11"><a href="#chapter-11" class="headerlink" title="chapter 11"></a>chapter 11</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">eggplant</td>
<td>n. 茄子 adj. 深紫色的</td>
</tr>
<tr>
<td style="text-align:left">plaid</td>
<td><em>n.</em> 彩格呢</td>
</tr>
<tr>
<td style="text-align:left">pant</td>
<td>vi. 渴望；喘息；气喘吁吁地说出某事 vt. 气喘 n. 气喘；喘息；喷气声</td>
</tr>
<tr>
<td style="text-align:left">pants</td>
<td>n. 裤子；短裤</td>
</tr>
<tr>
<td style="text-align:left">overdose</td>
<td><em>vt.</em> 使…用药过量 <em>n.</em> 过量用药</td>
</tr>
<tr>
<td style="text-align:left">ironclad</td>
<td>adj. 装甲的；打不破的；坚固的 n. 装甲舰</td>
</tr>
<tr>
<td style="text-align:left">clad</td>
<td>adj. 装甲的；打不破的；坚固的 n. 装甲舰</td>
</tr>
<tr>
<td style="text-align:left">disparage</td>
<td>to speak ill of; to criticize; put down</td>
</tr>
<tr>
<td style="text-align:left">mustard</td>
<td><em>n.</em> 芥; 芥末; 芥菜酱</td>
</tr>
<tr>
<td style="text-align:left">cast</td>
<td><em>vt. &amp; vi.</em> 投，掷，扔 浇铸 <em>vt.</em> 投射，加…于 分配(演戏剧等的)角色 <em>n.</em> 投，掷，抛，扔 铸造物；塑件 石膏 演员表，全体演员 <em>n.</em> 原主人不再要的衣服/casting vote决定票</td>
</tr>
<tr>
<td style="text-align:left">sparkle</td>
<td><em>vi.</em> 发火花，闪耀 (饮料)发泡 <em>n.</em> 光亮；活力；闪光</td>
</tr>
<tr>
<td style="text-align:left">zest</td>
<td>n. 风味；热心；强烈的兴趣 vt. 给…调味</td>
</tr>
<tr>
<td style="text-align:left">flat</td>
<td>adj. 平坦的；平淡的；单调的；浅的；扁平的 adv. 断然地；平直地 n. 平地；平面；公寓 vi. 变平 vt. 使变平</td>
</tr>
<tr>
<td style="text-align:left">plaque</td>
<td><em>n.</em> 饰板,匾 &lt;医&gt;牙斑 &lt;微生物&gt;空斑; presented her with a plaque: “To a peerless professor and a matchless friend.”</td>
</tr>
<tr>
<td style="text-align:left">matchless</td>
<td><em>adj.</em> &lt;书&gt;无比的;无双的;无法媲美的</td>
</tr>
<tr>
<td style="text-align:left">perceptive</td>
<td><em>adj.</em> 洞察力强的;敏锐的;理解力强的 <em>adv.</em> 洞察力强地;敏锐地 <em>n.</em> 洞察力强;敏锐;理解力</td>
</tr>
<tr>
<td style="text-align:left">repairperson</td>
<td>修理工</td>
</tr>
<tr>
<td style="text-align:left">vicious</td>
<td><em>adj.</em> 恶的, 邪恶的 残酷的, 狠毒的</td>
</tr>
<tr>
<td style="text-align:left">cutting</td>
<td>n. 切断；剪辑；开凿 adj. 严寒的；锋利的；尖酸刻薄的 v. 切开；采伐；削减（cut的ing形式）； most cutting words</td>
</tr>
<tr>
<td style="text-align:left">policy</td>
<td>n. 政策，方针；保险单</td>
</tr>
<tr>
<td style="text-align:left">audit</td>
<td>vi. 查帐；审计 n. 审计；查帐 vt. （美）旁听; audit courses in science but not in math</td>
</tr>
<tr>
<td style="text-align:left">impulsive</td>
<td><em>adj.</em> (指人或人的行为)冲动的,易冲动的 <em>adv.</em> 易冲动地 <em>n.</em> 易冲动</td>
</tr>
<tr>
<td style="text-align:left">aesthetic</td>
<td>having a sense of beauty; giving an impression of beauty</td>
</tr>
<tr>
<td style="text-align:left">ingratiate</td>
<td>to charm; win favor; make oneself agreeable; <em>vt.</em> 讨好,谄媚; ingratiate onself : please onself</td>
</tr>
<tr>
<td style="text-align:left">agreeable</td>
<td><em>adj.</em> 欣然同意的 令人愉快的, 惬意的</td>
</tr>
<tr>
<td style="text-align:left">biting</td>
<td><em>adj.</em> 尖锐刺人的；刺痛的 辛辣的；嘲讽的</td>
</tr>
<tr>
<td style="text-align:left">vitriolic</td>
<td>sharply critical; harsh; biting</td>
</tr>
<tr>
<td style="text-align:left">virtuoso</td>
<td>an expert, particularly in the arts</td>
</tr>
<tr>
<td style="text-align:left">catalyst</td>
<td><em>n.</em> &lt;化&gt;催化剂，触媒 促进因素；有感染力的人，能激发对方的人；a person or thing that brings about change</td>
</tr>
<tr>
<td style="text-align:left">proriety</td>
<td>appropriateness; correctness</td>
</tr>
<tr>
<td style="text-align:left">insipid</td>
<td>flat; tasteless; unexciting</td>
</tr>
<tr>
<td style="text-align:left">peerless</td>
<td>so superior as to be without equal; incomparable;</td>
</tr>
<tr>
<td style="text-align:left">unsurpassed</td>
<td><em>adj.</em> 未被凌驾的,非常卓越的</td>
</tr>
<tr>
<td style="text-align:left">fanciful</td>
<td>adj. 想像的；稀奇的</td>
</tr>
<tr>
<td style="text-align:left">odd</td>
<td><em>adj.</em> 奇怪的；古怪的 单的 奇数的 临时的 余下的；零头的</td>
</tr>
<tr>
<td style="text-align:left">arbitrary</td>
<td><em>adj.</em> 随意的, 主观的 专横的, 独断专行的</td>
</tr>
<tr>
<td style="text-align:left">whimsical</td>
<td><em>adj.</em> 异想天开的，闹着玩的；反复无常的</td>
</tr>
<tr>
<td style="text-align:left">furious</td>
<td><em>adj.</em> 狂怒的, 暴怒的 强烈的, 激烈的</td>
</tr>
<tr>
<td style="text-align:left">liven</td>
<td><em>vt. &amp; vi.</em> (使)有生气, 活跃 使…活跃(或活泼)起来</td>
</tr>
<tr>
<td style="text-align:left">paw</td>
<td>vt. 抓，扒；亲昵地抚摸 vi. 用爪子抓；翻找 n. 爪子；手</td>
</tr>
<tr>
<td style="text-align:left">bad-mouthing</td>
<td>说坏话</td>
</tr>
<tr>
<td style="text-align:left">sarcastic</td>
<td><em>adj.</em> 讥讽的, 讽刺的, 挖苦的</td>
</tr>
<tr>
<td style="text-align:left">barefoot</td>
<td><em>adj. &amp; adv.</em> 赤脚的〔地〕 <em>adj.</em> 赤脚的</td>
</tr>
<tr>
<td style="text-align:left">meadow</td>
<td>n. 草地；牧场; to be married barefoot in a meadow</td>
</tr>
<tr>
<td style="text-align:left">assassination</td>
<td><em>n.</em> 暗杀</td>
</tr>
<tr>
<td style="text-align:left">Austrian</td>
<td>adj. 奥地利的；奥地利人的 n. 奥地利人</td>
</tr>
<tr>
<td style="text-align:left">archduke</td>
<td>n. 大公，皇太子</td>
</tr>
<tr>
<td style="text-align:left">faction</td>
<td><em>n.</em> 组织中的小派别; 派系</td>
</tr>
<tr>
<td style="text-align:left">know-how</td>
<td><em>n.</em> &lt;口&gt;技术 实际知识;技能;本事;窍门</td>
</tr>
<tr>
<td style="text-align:left">spur-of-the-moment</td>
<td><em>adj.</em> 一时冲动的,立即的,不加思索的</td>
</tr>
<tr>
<td style="text-align:left">spur</td>
<td>n. 马刺；鼓舞，刺激；山坡 vi. 骑马疾驰；给予刺激 vt. 激励，鞭策；给…装踢马刺</td>
</tr>
<tr>
<td style="text-align:left">composer</td>
<td>n. 作曲家；作家，著作者；设计者</td>
</tr>
<tr>
<td style="text-align:left">Franz Liszt</td>
<td>Franz Liszt 弗朗兹·李斯特（匈牙利作曲家）</td>
</tr>
<tr>
<td style="text-align:left">quirky</td>
<td><em>adj.</em> 诡诈的,离奇的</td>
</tr>
<tr>
<td style="text-align:left">Edgar</td>
<td>n. 埃德加（男子名）</td>
</tr>
<tr>
<td style="text-align:left">supervisor</td>
<td><em>n.</em> 监督者, 管理者</td>
</tr>
<tr>
<td style="text-align:left">decor</td>
<td><em>n.</em> (房间、舞台等的)布置,装饰</td>
</tr>
<tr>
<td style="text-align:left">flutter</td>
<td><em>vi.</em> 飘动 (心)快速跳动 <em>vt. &amp; vi.</em> 振翼, 拍翅膀 <em>n.</em> 紧张, 激动不安</td>
</tr>
<tr>
<td style="text-align:left">silk</td>
<td>n. 蚕丝；丝绸；丝织物 adj. 丝的；丝制的；丝绸的 vi. （玉米）处于长须的阶段中</td>
</tr>
<tr>
<td style="text-align:left">free-spirited</td>
<td>自由奔放</td>
</tr>
<tr>
<td style="text-align:left">tangle</td>
<td><em>n.</em> 乱糟糟的一堆, 混乱 <em>vt. &amp; vi.</em> (使)缠结, (使)乱作一团</td>
</tr>
<tr>
<td style="text-align:left">strangle</td>
<td><em>vt.</em> 扼死；使窒息</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-12"><a href="#chapter-12" class="headerlink" title="chapter 12"></a>chapter 12</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Xmas</td>
<td><em>n.</em> &lt;口&gt;圣诞节</td>
</tr>
<tr>
<td style="text-align:left">settle</td>
<td>vi. 定居；下陷；解决；沉淀 vt. 解决；安排；使…定居 n. 有背长椅; settle the border dispute</td>
</tr>
<tr>
<td style="text-align:left">dispute</td>
<td>vt. 辩论；阻止；抗拒；怀疑 vi. 争论 n. 辩论；争吵</td>
</tr>
<tr>
<td style="text-align:left">beware</td>
<td><em>vi.</em> 谨防, 当心</td>
</tr>
<tr>
<td style="text-align:left">slash</td>
<td><em>vt. &amp; vi.</em> 挥砍；鞭打；割破 削减 <em>vt.</em> 严厉地批评[谴责]</td>
</tr>
<tr>
<td style="text-align:left">ask one right off</td>
<td>立即询问</td>
</tr>
<tr>
<td style="text-align:left">sneaky</td>
<td><em>adj.</em> 鬼祟的,卑鄙的</td>
</tr>
<tr>
<td style="text-align:left">chord</td>
<td>n. 弦；和弦</td>
</tr>
<tr>
<td style="text-align:left">grating</td>
<td>adj. 刺耳的；磨擦的 n. 格子；光栅；摩擦，摩擦声 v. 磨碎；擦响；激怒（grate的ing形式）</td>
</tr>
<tr>
<td style="text-align:left">grate</td>
<td>vt. 装格栅于；磨擦 vi. 发摩擦声 n. 壁炉；格栅</td>
</tr>
<tr>
<td style="text-align:left">slam</td>
<td><em>vt. &amp; vi.</em> 砰地关上(门或窗) <em>vt.</em> 猛烈抨击 <em>n.</em> 猛然关闭的声音</td>
</tr>
<tr>
<td style="text-align:left">platter</td>
<td>n. 大浅盘；唱片；唱机转盘</td>
</tr>
<tr>
<td style="text-align:left">rug</td>
<td><em>n.</em> 小块地毯</td>
</tr>
<tr>
<td style="text-align:left">scrub</td>
<td>n. 矮树；洗擦；擦洗者；矮小的人（或物） vt. 用力擦洗；使净化 vi. 擦洗；进行手臂消毒 adj. 矮小的；临时凑合的；次等的</td>
</tr>
<tr>
<td style="text-align:left">rub</td>
<td>vt. 擦；摩擦；惹怒 vi. 摩擦；擦；擦破 n. 摩擦；障碍；磨损处</td>
</tr>
<tr>
<td style="text-align:left">stain</td>
<td>vt. 沾污；败坏；给…着色 vi. 污染；被沾污；被染污 n. 污点；瑕疵；着色剂</td>
</tr>
<tr>
<td style="text-align:left">trace</td>
<td>vi. 追溯；沿路走 vt. 追踪，查探；描绘；回溯 n. 痕迹，踪迹；微量；迹线；缰绳</td>
</tr>
<tr>
<td style="text-align:left">merry</td>
<td><em>adj.</em> 欢乐的, 愉快的 喝得微醉的</td>
</tr>
<tr>
<td style="text-align:left">long-winded</td>
<td><em>adj.</em> 气长的,啰嗦的,冗长的</td>
</tr>
<tr>
<td style="text-align:left">flawless</td>
<td>adj. 无瑕疵的；完美的；无裂缝的</td>
</tr>
<tr>
<td style="text-align:left">circus</td>
<td>n. 马戏团；马戏</td>
</tr>
<tr>
<td style="text-align:left">pachyderm</td>
<td><em>n.</em> 大的厚皮动物(如象和犀牛) &lt;喻&gt;厚脸皮的人; 麻木不仁的人; 迟钝的人</td>
</tr>
<tr>
<td style="text-align:left">dinosaur</td>
<td><em>n.</em> 〈生〉恐龙</td>
</tr>
<tr>
<td style="text-align:left">dinosauric</td>
<td><em>adj.</em> 恐龙般大的,庞大的</td>
</tr>
<tr>
<td style="text-align:left">for their own good</td>
<td>为了自己的利益</td>
</tr>
<tr>
<td style="text-align:left">blunt</td>
<td>adj. 钝的，不锋利的；生硬的；直率的 vt. 使迟钝</td>
</tr>
<tr>
<td style="text-align:left">snub</td>
<td>vt. 冷落；严厉斥责；掐灭 n. 冷落；斥责；突然的停止 adj. 制动用的；短扁上翘的</td>
</tr>
<tr>
<td style="text-align:left">shifty</td>
<td>adj. 变化的；诡诈的；机智的</td>
</tr>
<tr>
<td style="text-align:left">labored</td>
<td>adj. 吃力的；费劲的；不自然的 v. 工作；劳动；分娩（labor的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">goodwill</td>
<td><em>n.</em> 友好, 亲善, 善意 (企业的)信誉, 声誉</td>
</tr>
<tr>
<td style="text-align:left">wipe</td>
<td>vt. 擦；涂上；消除 vi. 擦；打 n. 擦拭；用力打</td>
</tr>
<tr>
<td style="text-align:left">rebuff</td>
<td>to reject bluntly; snub</td>
</tr>
<tr>
<td style="text-align:left">devious</td>
<td>not straightforward; tricky; shifty</td>
</tr>
<tr>
<td style="text-align:left">immutable</td>
<td>never changing or varying</td>
</tr>
<tr>
<td style="text-align:left">ponderous</td>
<td>Heavy, labored; massive; lacking grace</td>
</tr>
<tr>
<td style="text-align:left">prodecessor</td>
<td>a person who comes befor another in time</td>
</tr>
<tr>
<td style="text-align:left">amicable</td>
<td>Friendly; showing goodwill</td>
</tr>
<tr>
<td style="text-align:left">static</td>
<td>not moving or progressing; still</td>
</tr>
<tr>
<td style="text-align:left">efface</td>
<td>to wipe out; erase</td>
</tr>
<tr>
<td style="text-align:left">dissonance</td>
<td>a harsh, dissagreeable combination of sounds</td>
</tr>
<tr>
<td style="text-align:left">garulous</td>
<td>talktive to an annoying degree</td>
</tr>
<tr>
<td style="text-align:left">quiz</td>
<td><em>n.</em> 问答比赛(游戏) 〈尤美〉小测验</td>
</tr>
<tr>
<td style="text-align:left">blueberry</td>
<td><em>n.</em> 越橘的一种，🫐</td>
</tr>
<tr>
<td style="text-align:left">dread</td>
<td>n. 恐惧；可怕的人（或物） vi. 惧怕；担心 vt. 惧怕；担心 adj. 可怕的</td>
</tr>
<tr>
<td style="text-align:left">fled</td>
<td>v. 消逝；逃走（flee的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">term</td>
<td>n. 学期；术语；条款；期限 vt. 把…叫做</td>
</tr>
<tr>
<td style="text-align:left">stiff</td>
<td>adj. 严厉的；呆板的；坚硬的；拘谨的；艰难的 adv. 彻底地；僵硬地 n. [俚]死尸；令人讨厌者；流通票据；劳动者 vt. 亏待侍者等 vi. 在商业上惨败</td>
</tr>
<tr>
<td style="text-align:left">concert</td>
<td>n. 音乐会；和谐；一致 vt. 使协调；协同安排 vi. 协力；协调 adj. 音乐会用的；在音乐会上演出的</td>
</tr>
<tr>
<td style="text-align:left">courtship</td>
<td><em>n.</em> 求爱期,追求期</td>
</tr>
<tr>
<td style="text-align:left">Henry Wadeworth Longfellow</td>
<td>亨利·沃兹沃思·朗费罗; 朗费罗; 美国诗人朗费罗; 亨利;</td>
</tr>
<tr>
<td style="text-align:left">scar</td>
<td><em>n.</em> 伤痕，伤疤；精神上的创伤 <em>vt.</em> 使留下伤痕</td>
</tr>
<tr>
<td style="text-align:left">veteran</td>
<td><em>n.</em> 经验丰富的人; 老兵 退伍军人</td>
</tr>
<tr>
<td style="text-align:left">puritan colony</td>
<td>清教徒殖民地</td>
</tr>
<tr>
<td style="text-align:left">plymouth</td>
<td>普利茅斯(英国港市)</td>
</tr>
<tr>
<td style="text-align:left">Massachusetts</td>
<td><em>n.</em> 马萨诸塞州 /ˌmæsə’tʃu:sits/</td>
</tr>
<tr>
<td style="text-align:left">damsel</td>
<td>n. 少女；年轻女人</td>
</tr>
<tr>
<td style="text-align:left">maiden</td>
<td>adj. 未婚的，处女的；初次的 n. 少女；处女</td>
</tr>
<tr>
<td style="text-align:left">unbeknownst</td>
<td><em>adj.</em> 〈方〉未知的,不为人知的 /‘ʌnbi’nəunst/</td>
</tr>
<tr>
<td style="text-align:left">errand</td>
<td>n. 差事；差使；使命</td>
</tr>
<tr>
<td style="text-align:left">blurt</td>
<td><em>vt.</em> 突然说出, 脱口而出</td>
</tr>
<tr>
<td style="text-align:left">indignant</td>
<td><em>adj.</em> 愤怒的, 愤慨的, 义愤的</td>
</tr>
<tr>
<td style="text-align:left">woo</td>
<td>vt. 追求；招致；向…求爱；恳求 vi. 求爱；恳求</td>
</tr>
<tr>
<td style="text-align:left">stumble</td>
<td><em>vi.</em> 绊脚 (说话、演奏等)出错 <em>n.</em> 绊脚；出错</td>
</tr>
<tr>
<td style="text-align:left">irritation</td>
<td>n. 刺激；刺激物；激怒；兴奋</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-4-日"><a href="#2-月-4-日" class="headerlink" title="2 月 4 日"></a>2 月 4 日</h1><ul>
<li>今天早晨起来，日记没写完就去碰瓷了</li>
<li>所以晚上连续背两篇</li>
</ul>
<h2 id="chapter-13"><a href="#chapter-13" class="headerlink" title="chapter 13"></a>chapter 13</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">consent</td>
<td><em>n.</em> 准许，同意，赞成 <em>vi.</em> 同意；赞成</td>
</tr>
<tr>
<td style="text-align:left">conquer</td>
<td><em>vt.</em> 攻克, 征服 破除, 克服 <em>vi.</em> 得胜</td>
</tr>
<tr>
<td style="text-align:left">daycare</td>
<td><em>adj.</em> 〈美〉日间托儿的</td>
</tr>
<tr>
<td style="text-align:left">bore</td>
<td><em>vt.</em> 令人厌烦 <em>vt. &amp; vi.</em> 挖, 掘, 钻, 开凿(洞、井、隧道等) <em>n.</em> 令人讨厌的人或事物, 麻烦</td>
</tr>
<tr>
<td style="text-align:left">pretentious</td>
<td><em>adj.</em> 狂妄的, 自命不凡的, 自负的； 名 词: pretentiousness</td>
</tr>
<tr>
<td style="text-align:left">perpetrator</td>
<td><em>n.</em> 做坏事者;犯罪者 加害者;行凶者</td>
</tr>
<tr>
<td style="text-align:left">apprehend</td>
<td><em>vt.</em> 逮捕, 拘押 理解</td>
</tr>
<tr>
<td style="text-align:left">crook</td>
<td><em>n.</em> (牧羊人或主教用的)弯拐杖 弯曲部分；弯曲处 骗子，恶棍，窃贼 罪犯，犯人 想方设法；不择手段 <em>vt.</em> 弯成钩形 <em>n.</em> 不正当行为</td>
</tr>
<tr>
<td style="text-align:left">pompous</td>
<td>adj. 浮夸的；爱炫耀的；自大的；华而不实的</td>
</tr>
<tr>
<td style="text-align:left">down-to-earth</td>
<td><em>adj.</em> 务实的; 实际的; 现实的</td>
</tr>
<tr>
<td style="text-align:left">clerk</td>
<td>n. 职员，办事员；店员；书记；记帐员 vi. 当销售员，当店员</td>
</tr>
<tr>
<td style="text-align:left">tantrum</td>
<td>n. 发脾气；发怒</td>
</tr>
<tr>
<td style="text-align:left">troop</td>
<td><em>n.</em> 军队, 部队 一群, 一队 <em>vi.</em> 成群结队地走</td>
</tr>
<tr>
<td style="text-align:left">portray</td>
<td><em>vt.</em> 画像；描述 扮演</td>
</tr>
<tr>
<td style="text-align:left">timid</td>
<td><em>adj.</em> 胆小的 羞怯的</td>
</tr>
<tr>
<td style="text-align:left">hesitant</td>
<td>adj. 踌躇的；迟疑的；犹豫不定的</td>
</tr>
<tr>
<td style="text-align:left">impassive</td>
<td><em>adj.</em> 无动于衷的, 无表情的</td>
</tr>
<tr>
<td style="text-align:left">impasse</td>
<td><em>n.</em> &lt;法&gt;绝境, 僵局, 停顿</td>
</tr>
<tr>
<td style="text-align:left">impassion</td>
<td><em>vt.</em> 激动,激起热情</td>
</tr>
<tr>
<td style="text-align:left">implore</td>
<td><em>vt.</em> 恳求或乞求(某人)</td>
</tr>
<tr>
<td style="text-align:left">McAuliffe</td>
<td>麦考利夫</td>
</tr>
<tr>
<td style="text-align:left">airborne</td>
<td>adj. 空运的；空气传播的；风媒的</td>
</tr>
<tr>
<td style="text-align:left">surrender</td>
<td><em>vt. &amp; vi.</em> 投降 <em>vt.</em> 放弃；抛弃 <em>n.</em> 投降，放弃</td>
</tr>
<tr>
<td style="text-align:left">nuts</td>
<td><em>adj.</em> 〈俚〉发疯的; 傻的 〈美俚〉热爱的; 迷恋的</td>
</tr>
<tr>
<td style="text-align:left">secretive</td>
<td><em>adj.</em> 遮遮掩掩的,守口如瓶的,秘密的</td>
</tr>
<tr>
<td style="text-align:left">colonial</td>
<td><em>adj.</em> 殖民地的, 拥有殖民地的 <em>adj.</em> 殖民主义者的</td>
</tr>
<tr>
<td style="text-align:left">protest</td>
<td><em>n.</em> 抗议；反对 <em>vt. &amp; vi.</em> 声明；抗议</td>
</tr>
<tr>
<td style="text-align:left">comply</td>
<td>vi. 答应；遵守；顺从，遵从</td>
</tr>
<tr>
<td style="text-align:left">assent</td>
<td>vi. 赞成；同意 n. 赞成；同意</td>
</tr>
<tr>
<td style="text-align:left">terse</td>
<td>adj. 简洁的，精练的，扼要的</td>
</tr>
<tr>
<td style="text-align:left">adequate</td>
<td><em>adj.</em> 充分的, 足够的 适当的, 胜任的</td>
</tr>
<tr>
<td style="text-align:left">meager</td>
<td>adj. 贫乏的；瘦的 n. 兆</td>
</tr>
<tr>
<td style="text-align:left">enslave</td>
<td><em>vt.</em> ①使成为奴隶；奴役 &lt;正&gt;使受控制；征服；制伏</td>
</tr>
<tr>
<td style="text-align:left">appease</td>
<td><em>vt.</em> 使平息；使满足</td>
</tr>
<tr>
<td style="text-align:left">pacify</td>
<td>vt. 使平静；安慰；平定</td>
</tr>
<tr>
<td style="text-align:left">bombastic</td>
<td>using high-sounding language without much meaning; <em>adj.</em> 夸夸其谈的,空洞的</td>
</tr>
<tr>
<td style="text-align:left">overblown</td>
<td>adj. 停息的,盛开过的 v. 吹散；用力吹；过分渲染</td>
</tr>
<tr>
<td style="text-align:left">aacquiesce</td>
<td>toconsent without protest; conply; assent</td>
</tr>
<tr>
<td style="text-align:left">belittle</td>
<td>to make something seem less worthy or less important; vt. 轻视；贬低；使相形见小</td>
</tr>
<tr>
<td style="text-align:left">diffident</td>
<td><em>adj.</em> 缺乏自信的,露出怯态的 <em>adv.</em> 胆怯地,踌躇地</td>
</tr>
<tr>
<td style="text-align:left">laconic</td>
<td>using as few words as possible; terse</td>
</tr>
<tr>
<td style="text-align:left">scanty</td>
<td>barely sufficient; barely adequate; meager</td>
</tr>
<tr>
<td style="text-align:left">articulate</td>
<td>well-spoken;   <em>adj.</em> 表达能力强的 口齿清楚的，发音清晰的 <em>vt. &amp; vi.</em> 清楚地表达 形成关节；(用关节)连接</td>
</tr>
<tr>
<td style="text-align:left">subjugate</td>
<td>to bring under control; enslave; conquer</td>
</tr>
<tr>
<td style="text-align:left">delineate</td>
<td>to represent in words or pictures</td>
</tr>
<tr>
<td style="text-align:left">conciliatory</td>
<td>tending to win over or appease; pacifying;   <em>adj.</em> 安抚(性)的，抚(慰)性的 调解的，调停的；和解的</td>
</tr>
<tr>
<td style="text-align:left">ethnic</td>
<td>adj. 种族的；人种的</td>
</tr>
<tr>
<td style="text-align:left">inventory</td>
<td><em>n.</em> 详细目录, 存货清单</td>
</tr>
<tr>
<td style="text-align:left">confine</td>
<td>n. 界限，边界 vt. 限制；禁闭</td>
</tr>
<tr>
<td style="text-align:left">spout</td>
<td><em>vt. &amp; vi.</em> (指液体)喷出, 涌出 滔滔不绝地讲；喋喋不休地说 <em>n.</em> 管口, 喷口 在困难中；被毁灭；丧失掉</td>
</tr>
<tr>
<td style="text-align:left">diatribe</td>
<td><em>n.</em> 谩骂,讽刺</td>
</tr>
<tr>
<td style="text-align:left">feminist</td>
<td>n. 女权主义者，女权运动者 adj. 女权主义的，主张女权的；形容词: feministic</td>
</tr>
<tr>
<td style="text-align:left">lofty</td>
<td>adj. 崇高的；高级的；高的；高傲的</td>
</tr>
<tr>
<td style="text-align:left">lay down the law</td>
<td>lay down the law 发号施令；立法</td>
</tr>
<tr>
<td style="text-align:left">edgewise</td>
<td>adv. 沿边；把刀口朝前地</td>
</tr>
<tr>
<td style="text-align:left">murmur</td>
<td><em>n.</em> 低沉、连续而不清的声音 低语声 怨言, 嘀咕 <em>vt. &amp; vi.</em> 小声说 <em>vi.</em> 发出连续而低沉的声音 私下低声抱怨</td>
</tr>
<tr>
<td style="text-align:left">snub</td>
<td>vt. 冷落；严厉斥责；掐灭 n. 冷落；斥责；突然的停止 adj. 制动用的；短扁上翘的</td>
</tr>
<tr>
<td style="text-align:left">grunt</td>
<td><em>vi.</em> (猪等)作呼噜声 (指人)发出类似的哼声 <em>vt.</em> 咕哝着说 <em>n.</em> (猪等的)呼噜声, (不满等的)嘟哝声, 哼哼声</td>
</tr>
<tr>
<td style="text-align:left">verbal</td>
<td><em>adj.</em> 词语的，言语的，字句的 口头的 动词的 <em>n.</em> 非谓语动词；非限定动词</td>
</tr>
<tr>
<td style="text-align:left">trait</td>
<td><em>n.</em> 人的个性, 显著的特点, 特征</td>
</tr>
<tr>
<td style="text-align:left">domineer</td>
<td>vi. 跋扈；作威作福 vt. 盛气凌人</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-14"><a href="#chapter-14" class="headerlink" title="chapter 14"></a>chapter 14</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">loot</td>
<td>n. 掠夺品；战利品；抢劫 vt. 抢劫，洗劫；强夺 vi. 洗劫，掠夺；抢劫</td>
</tr>
<tr>
<td style="text-align:left">penalty</td>
<td><em>n.</em> 惩罚, 处罚 不利后果, 损失</td>
</tr>
<tr>
<td style="text-align:left">villain</td>
<td>n. 坏人，恶棍；戏剧、小说中的反派角色；[口]顽童；[英口]罪犯</td>
</tr>
<tr>
<td style="text-align:left">gory</td>
<td><em>adj.</em> 沾满血污的；充满暴力和血腥的</td>
</tr>
<tr>
<td style="text-align:left">labrador</td>
<td>n. 拉布拉多（加拿大东部一地区）；一种纽芬兰猎犬</td>
</tr>
<tr>
<td style="text-align:left">retrieve</td>
<td><em>vt.</em> 寻回, 找回 恢复, 挽回 检索(储存的信息) 使某事物恢复旺盛状态 <em>vt. &amp; vi.</em> (指经过训练的狗)找到并衔回(被打死或打伤的鸟等)</td>
</tr>
<tr>
<td style="text-align:left">candidacy</td>
<td><em>n.</em> 候选人的资格(或身份)</td>
</tr>
<tr>
<td style="text-align:left">noble</td>
<td>adj. 贵族的；高尚的；宏伟的；惰性的 n. 贵族 vt. 抓住；逮捕</td>
</tr>
<tr>
<td style="text-align:left">rash</td>
<td><em>n.</em> 发疹，疹子 <em>adj.</em> 太急速的；鲁莽的；轻率的</td>
</tr>
<tr>
<td style="text-align:left">calcium</td>
<td>n. 钙</td>
</tr>
<tr>
<td style="text-align:left">wholesome</td>
<td><em>adj.</em> 有益健康的</td>
</tr>
<tr>
<td style="text-align:left">bow</td>
<td>n. 弓；鞠躬；船首 vi. 鞠躬；弯腰 vt. 鞠躬；弯腰 adj. 弯曲的</td>
</tr>
<tr>
<td style="text-align:left">censorship</td>
<td><em>n.</em> 审查员的职权;审查(制度)</td>
</tr>
<tr>
<td style="text-align:left">repent</td>
<td>vi. 忏悔；后悔 vt. 后悔；对…感到后悔 adj. [植]匍匐生根的；[动]爬行的</td>
</tr>
<tr>
<td style="text-align:left">outrace</td>
<td>vt. 胜过；超过…速度（等于outpace）</td>
</tr>
<tr>
<td style="text-align:left">foolhardy</td>
<td><em>adj.</em> &lt;贬&gt;莽撞的；有勇无谋的</td>
</tr>
<tr>
<td style="text-align:left">disturbance</td>
<td><em>n.</em> 打扰, 扰乱 骚乱, 纷乱 困扰</td>
</tr>
<tr>
<td style="text-align:left">agitation</td>
<td><em>n.</em> 激动；搅动；煽动；烦乱</td>
</tr>
<tr>
<td style="text-align:left">idealistic</td>
<td><em>adj.</em> 有理想的 理想主义的</td>
</tr>
<tr>
<td style="text-align:left">turbulence</td>
<td>violent irregularity, disturbance, or agitation, as of motion, air, or water   <em>n.</em> 气体或水的涡流 动乱,骚乱 波动 (海洋、天气等的)狂暴</td>
</tr>
<tr>
<td style="text-align:left">irregularity</td>
<td><em>n.</em> 不规则;不平整;不整齐 不规则的事物;不平整的东西 不正当的行为;违法行为;品行不端</td>
</tr>
<tr>
<td style="text-align:left">meager</td>
<td>lacking in quality or quantities; insufficient</td>
</tr>
<tr>
<td style="text-align:left">quixotic</td>
<td>Idealistic but impractical</td>
</tr>
<tr>
<td style="text-align:left">suppress</td>
<td>to put down by force:   <em>vt.</em> 压制；镇压 禁止发表，查禁；隐瞒 抑制(感情等)，忍住 阻止…的生长(或发展)</td>
</tr>
<tr>
<td style="text-align:left">anarchy</td>
<td>Lawlessness; lack of government; absence of authority or rules</td>
</tr>
<tr>
<td style="text-align:left">temerity</td>
<td>rash boldness; n. 鲁莽，冒失；蛮勇</td>
</tr>
<tr>
<td style="text-align:left">salutary</td>
<td>promoting good health; adj. 有益的，有用的；有益健康的</td>
</tr>
<tr>
<td style="text-align:left">depravity</td>
<td>Evil; moral corruption;   <em>n.</em> 堕落,腐败 恶行,堕落腐化的行为</td>
</tr>
<tr>
<td style="text-align:left">authoritarian</td>
<td>demanding or expecting total obedience</td>
</tr>
<tr>
<td style="text-align:left">predilection</td>
<td>a natural preference; tendency to like something</td>
</tr>
<tr>
<td style="text-align:left">kwashiorkor</td>
<td><em>n.</em> 夸休可尔症,恶性营养不良</td>
</tr>
<tr>
<td style="text-align:left">malnutrition</td>
<td><em>n.</em> 营养不良</td>
</tr>
<tr>
<td style="text-align:left">ailment</td>
<td>n. 小病；不安</td>
</tr>
<tr>
<td style="text-align:left">nazis</td>
<td>n. 纳粹；纳粹党人（nazi的复数）</td>
</tr>
<tr>
<td style="text-align:left">tornado</td>
<td>n. 旋风；龙卷风；大雷雨；暴风</td>
</tr>
<tr>
<td style="text-align:left">liver</td>
<td>n. 肝脏；生活者，居民</td>
</tr>
<tr>
<td style="text-align:left">broccoli</td>
<td>n. 花椰菜；西兰花</td>
</tr>
<tr>
<td style="text-align:left">spinach</td>
<td>n. 菠菜 /‘spɪnɪdʒ/</td>
</tr>
<tr>
<td style="text-align:left">segregate</td>
<td><em>vt.</em> 分开, 隔离</td>
</tr>
<tr>
<td style="text-align:left">hallway</td>
<td>n. 门厅；玄关；走廊</td>
</tr>
<tr>
<td style="text-align:left">adjective</td>
<td><em>n.</em> 形容词</td>
</tr>
<tr>
<td style="text-align:left">befuddle</td>
<td>vt. 使迷惑；使昏沉</td>
</tr>
<tr>
<td style="text-align:left">canoeing</td>
<td><em>n.</em> 划独木舟,玩独木舟 canoe <em>n.</em> 小而轻的舟, 独木舟</td>
</tr>
<tr>
<td style="text-align:left">frail</td>
<td>adj. 虚弱的；脆弱的 n. 灯心草篓；少妇；少女</td>
</tr>
<tr>
<td style="text-align:left">milkshake</td>
<td><em>n.</em> 奶昔(将牛奶或冰淇淋,以及水果或巧克力味的香料混合或搅拌至起泡的饮料)</td>
</tr>
<tr>
<td style="text-align:left">age-old</td>
<td><em>adj.</em> 古老的，久远的，存在很久的，由来已久的</td>
</tr>
<tr>
<td style="text-align:left">inborn</td>
<td>adj. 天生的；先天的</td>
</tr>
<tr>
<td style="text-align:left">enforce</td>
<td><em>vt.</em> 实施, 执行 强迫, 迫使</td>
</tr>
<tr>
<td style="text-align:left">brutal</td>
<td>adj. 残忍的；野蛮的，不讲理的</td>
</tr>
<tr>
<td style="text-align:left">decency</td>
<td>n. 正派；体面；庄重；合乎礼仪；礼貌</td>
</tr>
<tr>
<td style="text-align:left">anarchist</td>
<td><em>n.</em> 无政府主义者</td>
</tr>
<tr>
<td style="text-align:left">chaotic</td>
<td>adj. 混乱的，无秩序的；混沌的</td>
</tr>
<tr>
<td style="text-align:left">unsettle</td>
<td>vt. 使动摇；使不安定；使心神不宁 vi. 动荡不定；不安</td>
</tr>
<tr>
<td style="text-align:left">tyrant</td>
<td><em>n.</em> 专制统治者；暴君 暴君似的人；专横的人 严酷的事物，苛刻的事物 (古希腊的)僭主，僭王</td>
</tr>
<tr>
<td style="text-align:left">take a middle ground</td>
<td>采取中间立场</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-7-日"><a href="#2-月-7-日" class="headerlink" title="2 月 7 日"></a>2 月 7 日</h1><h2 id="chapter-15"><a href="#chapter-15" class="headerlink" title="chapter 15"></a>chapter 15</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">chowder</td>
<td>n. （美）杂脍；海鲜杂烩浓汤</td>
</tr>
<tr>
<td style="text-align:left">adorn</td>
<td>vt. 装饰；使生色</td>
</tr>
<tr>
<td style="text-align:left">dishonor</td>
<td><em>n.</em> 不名誉,丢脸 侮辱 丢脸的事(或人) &lt;商&gt;(票据的)拒付,拒绝承兑 <em>vt.</em> 使丢脸,使受耻辱 侮辱,不尊重 &lt;商&gt;拒付,拒绝承兑 奸污</td>
</tr>
<tr>
<td style="text-align:left">vanilia</td>
<td><em>n.</em> 香子兰;香草 香草醛；香草精 <em>adj.</em> 香草的;香草味的 平凡的;普通的;乏味的</td>
</tr>
<tr>
<td style="text-align:left">glimpse</td>
<td>n. 一瞥，一看 vi. 瞥见 vt. 瞥见</td>
</tr>
<tr>
<td style="text-align:left">flicker</td>
<td><em>vi.</em> (通常指灯光)闪烁, 摇曳</td>
</tr>
<tr>
<td style="text-align:left">nun</td>
<td>n. 修女，尼姑</td>
</tr>
<tr>
<td style="text-align:left">needy</td>
<td>adj. 贫穷的；贫困的；生活艰苦的</td>
</tr>
<tr>
<td style="text-align:left">acme</td>
<td>n. 顶点，极点；最高点</td>
</tr>
<tr>
<td style="text-align:left">ethic</td>
<td><em>n.</em> 道德规范,伦理</td>
</tr>
<tr>
<td style="text-align:left">toxic</td>
<td><em>adj.</em> 有毒的；因中毒引起的</td>
</tr>
<tr>
<td style="text-align:left">stockholder</td>
<td><em>n.</em> 股票持有者;股东</td>
</tr>
<tr>
<td style="text-align:left">clarinetist</td>
<td><em>n.</em> 吹木箫者</td>
</tr>
<tr>
<td style="text-align:left">rehearsal</td>
<td><em>n.</em> 练习, 排练, 排演</td>
</tr>
<tr>
<td style="text-align:left">toast</td>
<td>n. 烤面包；吐司；干杯 vt. 烤；敬酒；使暖和 vi. 烘，烤</td>
</tr>
<tr>
<td style="text-align:left">helpmeet</td>
<td><em>n.</em> 合作者,伙伴</td>
</tr>
<tr>
<td style="text-align:left">lobby</td>
<td><em>n.</em> 前厅, 厅堂 议会休息室 游说议员的团体 <em>vt. &amp; vi.</em> 向…进行游说[疏通]</td>
</tr>
<tr>
<td style="text-align:left">snobbish</td>
<td><em>adj.</em> 势利眼的, 谄上傲下的, 恃才傲物的</td>
</tr>
<tr>
<td style="text-align:left">indignantly</td>
<td><em>adv.</em> 愤怒地；愤慨地，愤愤不平地</td>
</tr>
<tr>
<td style="text-align:left">defile</td>
<td><em>vt.</em> 弄脏 污染 玷污,亵渎 纵列行进 <em>n.</em> 峡谷,隘路</td>
</tr>
<tr>
<td style="text-align:left">unsophisticated</td>
<td><em>adj.</em> 不复杂的; 简单的</td>
</tr>
<tr>
<td style="text-align:left">scornful</td>
<td>adj. 轻蔑的</td>
</tr>
<tr>
<td style="text-align:left">impoverish</td>
<td><em>vt.</em> 使(某人)贫穷 使(某物)贫瘠或恶化</td>
</tr>
<tr>
<td style="text-align:left">desecrate</td>
<td>to treat something wit extreme disrespect; defile</td>
</tr>
<tr>
<td style="text-align:left">evanesent</td>
<td>gradually disappearing; fading away like a vapor; <em>adj.</em> 迅速消失遗忘的;短暂的</td>
</tr>
<tr>
<td style="text-align:left">paragon</td>
<td>a model of excellence or perfection  n. 模范；完美之物；优秀之人 adj. 完美的</td>
</tr>
<tr>
<td style="text-align:left">provincial</td>
<td>limited and narrow in outlook; unsophisticated;   <em>adj.</em> 大行政区的;省的 &lt;贬&gt;褊狭的;守旧的;迂腐的 <em>n.</em> &lt;贬&gt;首都以外的人;地区居民 <em>adv.</em> 外省地;地方地</td>
</tr>
<tr>
<td style="text-align:left">usurp</td>
<td><em>vt.</em> 篡夺；霸占 盗用 <em>vi.</em> 篡夺；篡权</td>
</tr>
<tr>
<td style="text-align:left">supercilious</td>
<td><em>adj.</em> 高傲的;傲慢的 <em>adv.</em> 高傲地;傲慢地 <em>n.</em> 高傲;傲慢s</td>
</tr>
<tr>
<td style="text-align:left">indigent</td>
<td><em>adj.</em> 贫穷的,贫困的,缺少钱财的</td>
</tr>
<tr>
<td style="text-align:left">steadfast</td>
<td><em>adj.</em> 坚定的;不动摇的 不动的;不变的</td>
</tr>
<tr>
<td style="text-align:left">callous</td>
<td>adj. 起老茧的；无情的；硬结的；麻木的 vt. 使硬结；使生茧；使冷酷无情 vi. 变得冷酷无情；结茧；变硬 n. 硬皮；老茧</td>
</tr>
<tr>
<td style="text-align:left">heed</td>
<td>vi. 注意，留心 n. 注意到；留心到 vt. 注意，留心</td>
</tr>
<tr>
<td style="text-align:left">vendor</td>
<td>n. 小贩；卖主；自动售货机</td>
</tr>
<tr>
<td style="text-align:left">memorial</td>
<td><em>n.</em> 纪念碑, 纪念物</td>
</tr>
<tr>
<td style="text-align:left">venture</td>
<td>vt. 敢于 vi. 冒险；投机 n. 冒险；风险；企业</td>
</tr>
<tr>
<td style="text-align:left">shrine</td>
<td>n. 圣地；神殿；神龛；圣祠 vt. 将…置于神龛内；把…奉为神圣</td>
</tr>
<tr>
<td style="text-align:left">restless</td>
<td>adj. 焦躁不安的；不安宁的；得不到满足的</td>
</tr>
<tr>
<td style="text-align:left">pastor</td>
<td>n. 牧师 vt. 作……的牧师</td>
</tr>
<tr>
<td style="text-align:left">in black and white terms</td>
<td>毫不含糊; 白纸黑字;</td>
</tr>
<tr>
<td style="text-align:left">recliner</td>
<td>n. 斜靠著的人；躺著的人；活动躺椅（等于reclining chair）</td>
</tr>
<tr>
<td style="text-align:left">date</td>
<td><em>n.</em> (注明的)日期, 日子, 年份 时代, 年代 约定, 约会 约会的对象 <em>vt.</em> 记载日期于 鉴定…的年代 <em>vt. &amp; vi.</em> 与人约会, 相约</td>
</tr>
<tr>
<td style="text-align:left">boutique</td>
<td>n. 精品店；专卖流行衣服的小商店 adj. 精品屋的；小规模专售精品的</td>
</tr>
<tr>
<td style="text-align:left">haughty</td>
<td><em>adj.</em> 傲慢的, 目中无人的</td>
</tr>
<tr>
<td style="text-align:left">spin</td>
<td><em>vi.</em> 旋转；纺纱；吐丝；晕眩 <em>vt.</em> 使旋转；纺纱；编造；结网 <em>n.</em> 旋转；疾驰</td>
</tr>
<tr>
<td style="text-align:left">wind-up</td>
<td><em>n.</em> 结局,结尾;触怒,激怒</td>
</tr>
<tr>
<td style="text-align:left">sneer</td>
<td>vi. 嘲笑，冷笑 vt. 嘲笑，冷笑 n. 嘲笑，冷笑</td>
</tr>
<tr>
<td style="text-align:left">manual</td>
<td><em>adj.</em> 用手的, 手工的 <em>n.</em> 手册, 指南</td>
</tr>
<tr>
<td style="text-align:left">primitive</td>
<td><em>adj.</em> 原始的，早期的 简单的；粗糙的 <em>n.</em> 文艺复兴前的画家或雕刻家；早期的艺术家 原始人，原始事物</td>
</tr>
<tr>
<td style="text-align:left">toss</td>
<td>n. 投掷；摇荡；投掷的距离；掷币赌胜负 vt. 投掷；使…不安；突然抬起；使…上下摇动；与…掷币打赌 vi. 被乱扔；颠簸；辗转；掷钱币决定某事</td>
</tr>
<tr>
<td style="text-align:left">deplete</td>
<td><em>vt.</em> 〈正〉使大大的减少；使空虚</td>
</tr>
<tr>
<td style="text-align:left">ozone</td>
<td>n. 臭氧；新鲜的空气</td>
</tr>
<tr>
<td style="text-align:left">fossil</td>
<td>n. 化石；僵化的事物；顽固不化的人 adj. 化石的；陈腐的，守旧的</td>
</tr>
<tr>
<td style="text-align:left">fuel</td>
<td>vi. 得到燃料 vt. 供以燃料，加燃料 n. 燃料；刺激因素</td>
</tr>
<tr>
<td style="text-align:left">fad</td>
<td>n. 一时的爱好；时尚；一时流行的狂热</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-8-日"><a href="#2-月-8-日" class="headerlink" title="2 月 8 日"></a>2 月 8 日</h1><h2 id="chapter-16"><a href="#chapter-16" class="headerlink" title="chapter 16"></a>chapter 16</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">helium</td>
<td>n. 氦（符号为He，2号元素）</td>
</tr>
<tr>
<td style="text-align:left">exhaust</td>
<td><em>vt.</em> 弄空, 取出 用尽, 耗尽 使非常疲倦 <em>vi.</em> 排气 <em>n.</em> 排气装置, 排气管[孔] 机器排出的废气</td>
</tr>
<tr>
<td style="text-align:left">prince</td>
<td>n. 王子，国君；亲王；贵族</td>
</tr>
<tr>
<td style="text-align:left">tack</td>
<td><em>n.</em> 大头钉，平头钉 航向，换向；方法 <em>vt.</em> 用平头钉钉 附加，增补</td>
</tr>
<tr>
<td style="text-align:left">sprinkle</td>
<td>n. 少量；撒，洒 vt. 洒；微雨；散置 vi. 洒，撒；下稀疏小雨；喷撒</td>
</tr>
<tr>
<td style="text-align:left">incurable</td>
<td><em>adj.</em> 无法治愈的,不可救药的 <em>n.</em> 无法治愈,不可救药 <em>n.</em> 无法治愈,不可救药 <em>adv.</em> 无法治愈地,不可救药地</td>
</tr>
<tr>
<td style="text-align:left">toll</td>
<td>vt. 征收；敲钟 n. 通行费；代价；钟声 vi. 鸣钟；征税</td>
</tr>
<tr>
<td style="text-align:left">lenient</td>
<td>adj. 仁慈的；宽大的</td>
</tr>
<tr>
<td style="text-align:left">unyielding</td>
<td><em>adj.</em> 坚硬的,不能弯曲的,不屈的</td>
</tr>
<tr>
<td style="text-align:left">loch</td>
<td>n. 湖；海湾（狭长的）</td>
</tr>
<tr>
<td style="text-align:left">unprejudiced</td>
<td><em>adj.</em> 无偏见的, 无成见的, 公正的</td>
</tr>
<tr>
<td style="text-align:left">indisputable</td>
<td><em>adj.</em> 无可争辩的, 不容置疑的</td>
</tr>
<tr>
<td style="text-align:left">shore</td>
<td>vt. 用支柱撑住；支撑，使稳住 n. 海滨；支柱</td>
</tr>
<tr>
<td style="text-align:left">stand</td>
<td><em>n.</em> 立脚点；站立 台，座 售货处；摊 看台，观众席 主张，立场；态度</td>
</tr>
<tr>
<td style="text-align:left">expel</td>
<td>vt. 驱逐；开除</td>
</tr>
<tr>
<td style="text-align:left">brawl</td>
<td><em>n.</em> 吵架, 打架 <em>vi.</em> 打架, 争吵</td>
</tr>
<tr>
<td style="text-align:left">disguised</td>
<td>vt. 假装；掩饰；隐瞒 n. 伪装；假装；用作伪装的东西</td>
</tr>
<tr>
<td style="text-align:left">asset</td>
<td>n. 资产；有用的东西；有利条件；优点</td>
</tr>
<tr>
<td style="text-align:left">one-sided</td>
<td><em>adj.</em> 只见问题一面的,片面的</td>
</tr>
<tr>
<td style="text-align:left">retorted</td>
<td><em>vt.</em> 反驳 <em>n.</em> 反驳, 回嘴 反驳的回答</td>
</tr>
<tr>
<td style="text-align:left">plea</td>
<td><em>n.</em> 请愿, 请求 借口, 托辞</td>
</tr>
<tr>
<td style="text-align:left">spinal</td>
<td>adj. 脊骨的；脊髓的；脊柱的；尖刺的；针的 n. 脊椎麻醉</td>
</tr>
<tr>
<td style="text-align:left">tap</td>
<td>vt. 轻敲；轻打；装上嘴子 vi. 轻拍；轻击；轻叩 n. 水龙头；轻打</td>
</tr>
<tr>
<td style="text-align:left">relentless</td>
<td><em>adj.</em> 残酷的, 不留情的, 无怜悯心的</td>
</tr>
<tr>
<td style="text-align:left">vice</td>
<td>n. 缺点；恶习；老虎钳；卖淫 prep. 代替 vt. 钳住 adj. 代替的；副的</td>
</tr>
<tr>
<td style="text-align:left">rob</td>
<td>vt. 抢劫；使…丧失；非法剥夺 vi. 抢劫；掠夺</td>
</tr>
<tr>
<td style="text-align:left">resentment</td>
<td><em>n.</em> (因受虐待而)愤恨,不满,怨恨</td>
</tr>
<tr>
<td style="text-align:left">inexorable</td>
<td>not capable of being influencd; relentless</td>
</tr>
<tr>
<td style="text-align:left">parochial</td>
<td>restricted to a narrow scope or outlook; narrow-minded</td>
</tr>
<tr>
<td style="text-align:left">satirical</td>
<td>attacking human vice or foolishness through irony or wit</td>
</tr>
<tr>
<td style="text-align:left">enervate</td>
<td>to weaken; rob of strength or energy</td>
</tr>
<tr>
<td style="text-align:left">irrefutable</td>
<td>impossible to disprove</td>
</tr>
<tr>
<td style="text-align:left">pique</td>
<td>a feeling of resentment  or anger because of wounder pride;   vt. 刺激；伤害…自尊心；激怒 n. 生气；愠怒；呕气</td>
</tr>
<tr>
<td style="text-align:left">buoyant</td>
<td>able to float or rise</td>
</tr>
<tr>
<td style="text-align:left">partisan</td>
<td>strongly supporting a specific party, cause, or person</td>
</tr>
<tr>
<td style="text-align:left">marred</td>
<td>make less perfect through injury or damage</td>
</tr>
<tr>
<td style="text-align:left">incorrigiable</td>
<td>uncontrollable; not capable of being corrected or reformed</td>
</tr>
<tr>
<td style="text-align:left">spotless</td>
<td>adj. 无瑕疵的；无可挑剔的；纯洁的</td>
</tr>
<tr>
<td style="text-align:left">spectator</td>
<td><em>n.</em> 观众, 旁观者</td>
</tr>
<tr>
<td style="text-align:left">automobile</td>
<td><em>n.</em> 〈美〉汽车</td>
</tr>
<tr>
<td style="text-align:left">march</td>
<td>n. 进行曲；行军，进军；示威游行 vi. 进军；走过 vt. 迫使……前进</td>
</tr>
<tr>
<td style="text-align:left">humidity</td>
<td><em>n.</em> 湿度, 潮湿, 湿气</td>
</tr>
<tr>
<td style="text-align:left">cushion</td>
<td><em>n.</em> 垫子, 坐垫</td>
</tr>
<tr>
<td style="text-align:left">preferable</td>
<td><em>adj.</em> 更好的, 更适合的, 更可取的</td>
</tr>
<tr>
<td style="text-align:left">frosty</td>
<td><em>adj.</em> 寒冷的 盖有霜的 冷淡的,冷漠的 <em>adv.</em> 寒冷地,冷漠地 <em>n.</em> 寒冷,冷漠</td>
</tr>
<tr>
<td style="text-align:left">creed</td>
<td>n. 信条，教义</td>
</tr>
<tr>
<td style="text-align:left">affiliation</td>
<td><em>n.</em> 联系;从属关系 附属机构，隶属机构，分公司，分会，分部 接纳，入会，交往，社会交际关系 亲和性，群聚性 亲父鉴定</td>
</tr>
<tr>
<td style="text-align:left">a fit of</td>
<td>一串</td>
</tr>
<tr>
<td style="text-align:left">tragic</td>
<td>adj. 悲剧的；悲痛的，不幸的</td>
</tr>
<tr>
<td style="text-align:left">imprison</td>
<td>vt. 监禁；关押；使…下狱</td>
</tr>
<tr>
<td style="text-align:left">witchcraft</td>
<td><em>n.</em> 巫术；魔法</td>
</tr>
<tr>
<td style="text-align:left">accusation</td>
<td><em>n.</em> 指责；指控；控告 (被告发、控告的)罪名，罪状</td>
</tr>
<tr>
<td style="text-align:left">devil</td>
<td><em>n.</em> 魔鬼 家伙, 人</td>
</tr>
<tr>
<td style="text-align:left">Salem</td>
<td><em>n.</em> 塞伦</td>
</tr>
<tr>
<td style="text-align:left">torment</td>
<td>vt. 折磨，使痛苦；纠缠，作弄 n. 痛苦，苦恼；痛苦的根源</td>
</tr>
<tr>
<td style="text-align:left">chore</td>
<td>n. 家庭杂务；日常的零星事务；讨厌的或累人的工作</td>
</tr>
<tr>
<td style="text-align:left">mockery</td>
<td>n. 嘲弄；笑柄；徒劳无功；拙劣可笑的模仿或歪曲</td>
</tr>
<tr>
<td style="text-align:left">await</td>
<td>vt. 等候，等待；期待</td>
</tr>
<tr>
<td style="text-align:left">trial</td>
<td>n. 试验；磨炼；审讯；努力 adj. 审讯的；试验的</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-10-日"><a href="#2-月-10-日" class="headerlink" title="2 月 10 日"></a>2 月 10 日</h1><h2 id="chapter-17"><a href="#chapter-17" class="headerlink" title="chapter 17"></a>chapter 17</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">plead</td>
<td><em>vi.</em> 恳求，请求 <em>vt.</em> 提出…为借口[理由] <em>vt. &amp; vi.</em> 申诉；答辩；为…辩护</td>
</tr>
<tr>
<td style="text-align:left">yield</td>
<td>vt. 出产；屈服；放弃 vi. 屈服，投降 n. 收益；产量</td>
</tr>
<tr>
<td style="text-align:left">lampshade</td>
<td><em>n.</em> 灯罩</td>
</tr>
<tr>
<td style="text-align:left">fortuneteller</td>
<td><em>n.</em> 算命者,占卜者</td>
</tr>
<tr>
<td style="text-align:left">forewarn</td>
<td>vt. 预先警告</td>
</tr>
<tr>
<td style="text-align:left">name-brand</td>
<td>brand names 名牌</td>
</tr>
<tr>
<td style="text-align:left">rolls-royce</td>
<td><em>n.</em> 劳斯莱斯(罗尔斯-罗伊斯) /‘rəulz’rɔis/</td>
</tr>
<tr>
<td style="text-align:left">Dom Perignon champagne</td>
<td>唐培里侬香槟王; 唐培里侬; 香槟王; 唐·培里侬香槟王;</td>
</tr>
<tr>
<td style="text-align:left">tiffany</td>
<td>n. 丝纱罗（纱的一种）蒂凡尼灯饰</td>
</tr>
<tr>
<td style="text-align:left">scornful</td>
<td>adj. 轻蔑的</td>
</tr>
<tr>
<td style="text-align:left">hushed</td>
<td>adj. 安静的；寂静的 v. 安静；缄默；肃静（hush的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">worshipful</td>
<td><em>adj.</em> &lt;尤英&gt;可敬的,尊敬的</td>
</tr>
<tr>
<td style="text-align:left">anesthesia</td>
<td><em>n.</em> 感觉缺失,麻木 麻醉 /ˌænɪs’θiːzɪə/</td>
</tr>
<tr>
<td style="text-align:left">anesthetics</td>
<td><em>n.</em> (使局部或全身失去知觉的)麻醉剂,麻醉药 <em>adj.</em> 感觉缺失的 麻木的；麻醉的</td>
</tr>
<tr>
<td style="text-align:left">regain</td>
<td><em>vt.</em> 复得；赢回 重回，复至某地s</td>
</tr>
<tr>
<td style="text-align:left">conscious</td>
<td><em>adj.</em> 神志清醒的 意识到的; 注意到的 自觉的; 蓄意的</td>
</tr>
<tr>
<td style="text-align:left">dull</td>
<td>adj. 钝的；呆滞的；阴暗的；迟钝的；无趣的 vt. 使阴暗；缓和；使迟钝 vi. 变迟钝；减少</td>
</tr>
<tr>
<td style="text-align:left">drowsy</td>
<td><em>adj.</em> 欲睡的, 半睡的, 使人昏昏欲睡的 /‘draʊzɪ/</td>
</tr>
<tr>
<td style="text-align:left">argumentative</td>
<td><em>adj.</em> 好辩的,争论的</td>
</tr>
<tr>
<td style="text-align:left">traitor</td>
<td><em>n.</em> 卖国贼;叛徒 背叛者;背信弃义的人</td>
</tr>
<tr>
<td style="text-align:left">martini</td>
<td><em>n.</em> (一杯)马丁尼酒</td>
</tr>
<tr>
<td style="text-align:left">Martinique</td>
<td>n. 马提尼克（拉丁美洲向风群岛中部法属岛屿，首府法兰西堡）</td>
</tr>
<tr>
<td style="text-align:left">choke</td>
<td><em>vt. &amp; vi.</em> 填塞 (使)窒息</td>
</tr>
<tr>
<td style="text-align:left">trademark</td>
<td><em>n.</em> (注册)商标</td>
</tr>
<tr>
<td style="text-align:left">worldly-wise</td>
<td><em>adj.</em> 精于世故的</td>
</tr>
<tr>
<td style="text-align:left">impulsive</td>
<td><em>adj.</em> (指人或人的行为)冲动的,易冲动的 <em>adv.</em> 易冲动地 <em>n.</em> 易冲动</td>
</tr>
<tr>
<td style="text-align:left">refined</td>
<td>adj. 精炼的；微妙的；精确的；有教养的</td>
</tr>
<tr>
<td style="text-align:left">jugular</td>
<td>adj. 颈部的；咽喉的；颈静脉的 n. 颈静脉 /‘dʒʌgjʊlə/</td>
</tr>
<tr>
<td style="text-align:left">vein</td>
<td>n. 纹理；静脉（vein的复数） v. 使有脉络；使成脉络状（vein的三单形式 /ven/</td>
</tr>
<tr>
<td style="text-align:left">understate</td>
<td><em>vt.</em> 很有节制地陈述或表达(某事物) 少说,少报(某数目等)</td>
</tr>
<tr>
<td style="text-align:left">give in</td>
<td>屈服, 让步，呈交</td>
</tr>
<tr>
<td style="text-align:left">prestige</td>
<td>n. 威望，声望；声誉</td>
</tr>
<tr>
<td style="text-align:left">numbness</td>
<td>n. 麻木；麻痹</td>
</tr>
<tr>
<td style="text-align:left">flattery</td>
<td>n. 谄媚；奉承；恭维话</td>
</tr>
<tr>
<td style="text-align:left">comical</td>
<td><em>adj.</em> 好笑的, 滑稽的, 怪里怪气的</td>
</tr>
<tr>
<td style="text-align:left">polished</td>
<td>adj. 擦亮的；优美的；圆滑的 v. 擦亮（polish的过去式和过去分词）</td>
</tr>
<tr>
<td style="text-align:left">suave</td>
<td>adj. 文雅的，娴雅的；柔和的，温和的 /swɑːv/</td>
</tr>
<tr>
<td style="text-align:left">conspicuous</td>
<td><em>adj.</em> 显眼的, 明显的 /kən’spɪkjʊəs/</td>
</tr>
<tr>
<td style="text-align:left">capitulate</td>
<td>to give in; <em>vi.</em> 投降</td>
</tr>
<tr>
<td style="text-align:left">reverent</td>
<td>feeling or expressing respect or awe; adj. 虔诚的；恭敬的；尊敬的</td>
</tr>
<tr>
<td style="text-align:left">Prestigious</td>
<td>having a honored name or reputation; having pretige; <em>adj.</em> 受尊敬的, 有声望的, 有威信的</td>
</tr>
<tr>
<td style="text-align:left">stupor</td>
<td>a state of mental numbness; a daze</td>
</tr>
<tr>
<td style="text-align:left">daze</td>
<td><em>vt.</em> 使(某人)迷乱而不能做出正确反应；使茫然 使(某人)惊奇与迷惑</td>
</tr>
<tr>
<td style="text-align:left">sycophant</td>
<td>a person who tries to win favor through flattery /‘sɪkəfænt/</td>
</tr>
<tr>
<td style="text-align:left">zany</td>
<td>wildly silly or comical;   <em>adj.</em> 滑稽的, 笨的 可笑的, 荒唐的</td>
</tr>
<tr>
<td style="text-align:left">urbane</td>
<td>smooth in manner; elegant; polished; suave;   <em>adj.</em> 都市化的 彬彬有礼的；温文尔雅的 <em>adv.</em> 都市化地；彬彬有礼地；温文尔雅地</td>
</tr>
<tr>
<td style="text-align:left">premonition</td>
<td>a feeling that something bad is going to happen;</td>
</tr>
<tr>
<td style="text-align:left">egregious</td>
<td>highly noticeable in a negative way; conspicuously bad; <em>adj.</em> 极坏的;异乎寻常的</td>
</tr>
<tr>
<td style="text-align:left">cajole</td>
<td>topersuade with flattery; to sweet-talk; <em>vt.</em> (用甜言蜜语、虚假诺言等)劝诱,哄骗</td>
</tr>
<tr>
<td style="text-align:left">hit it off</td>
<td>Hit it off 一拍即合; 相处; 相处得好; 投缘;</td>
</tr>
<tr>
<td style="text-align:left">poise</td>
<td>n. 姿势；平衡；镇静 vt. 使平衡；保持…姿势 vi. 平衡；准备好；悬着</td>
</tr>
<tr>
<td style="text-align:left">courteous</td>
<td><em>adj.</em> 彬彬有礼的; 客气的</td>
</tr>
<tr>
<td style="text-align:left">hypothermia</td>
<td><em>n.</em> 低体温 /ˌhaɪpə(ʊ)’θɜːmɪə/</td>
</tr>
<tr>
<td style="text-align:left">curable</td>
<td>adj. 可医治的；可矫正的；可治愈的</td>
</tr>
<tr>
<td style="text-align:left">bench</td>
<td><em>n.</em> 长凳, 长椅</td>
</tr>
<tr>
<td style="text-align:left">benchmark</td>
<td>基准</td>
</tr>
<tr>
<td style="text-align:left">woody allen</td>
<td>伍迪·艾伦（美国艺人）</td>
</tr>
<tr>
<td style="text-align:left">slapstick</td>
<td><em>n.</em> 闹剧,趣剧</td>
</tr>
<tr>
<td style="text-align:left">stooge</td>
<td>n. 喜剧里的配角或丑角；助手；傀儡；密探 vi. 充当配角；[英俚]巡航</td>
</tr>
<tr>
<td style="text-align:left">dreamy</td>
<td>adj. 梦想的；空幻的；轻柔的；恍惚的</td>
</tr>
<tr>
<td style="text-align:left">butter up</td>
<td>对…说好话；恭维，阿谀奉承</td>
</tr>
<tr>
<td style="text-align:left">Dominic</td>
<td><em>n.</em> 多米尼克（男子名）</td>
</tr>
<tr>
<td style="text-align:left">tinfoil</td>
<td><em>n.</em> (包裹食物等用的)锡箔, 锡纸</td>
</tr>
<tr>
<td style="text-align:left">absurd</td>
<td>adj. 荒谬的；可笑的 n. 荒诞；荒诞作品</td>
</tr>
<tr>
<td style="text-align:left">disbelief</td>
<td><em>n.</em> 不相信, 怀疑</td>
</tr>
</tbody>
</table>
</div>
<p>居然还交了一条勘误给欧路，不过欧路词典真的不错！<br><img src="https://pic.imgdb.cn/item/620529ef2ab3f51d919c5b72.jpg" alt=""></p>
<h2 id="chapter-18"><a href="#chapter-18" class="headerlink" title="chapter 18"></a>chapter 18</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">juror</td>
<td>n. 审查委员，陪审员; /‘dʒʊərə/</td>
</tr>
<tr>
<td style="text-align:left">foreman</td>
<td>n. 领班；陪审团主席</td>
</tr>
<tr>
<td style="text-align:left">verdict</td>
<td><em>n.</em> (陪审团的)裁决, 裁定 (经过试验、检验或体验发表的)决定, 意见</td>
</tr>
<tr>
<td style="text-align:left">knit</td>
<td>vi. 编织；结合；皱眉 vt. 编织；结合 n. 编织衣物；编织法</td>
</tr>
<tr>
<td style="text-align:left">fuss</td>
<td>vi. 小题大作；忙乱；焦燥；焦急；无事自扰 n. 大惊小怪，大惊小怪的人；小题大作；忙乱 vt. 使烦恼，使烦忧</td>
</tr>
<tr>
<td style="text-align:left">alcoholism</td>
<td><em>n.</em> 酒精中毒</td>
</tr>
<tr>
<td style="text-align:left">inborn</td>
<td>adj. 天生的；先天的</td>
</tr>
<tr>
<td style="text-align:left">faint</td>
<td><em>vi.</em> 晕倒，昏倒 <em>adj.</em> 微弱的，模糊的，暗淡的 (体力)无力的，虚弱的；易失去知觉的，昏眩的 (动作等)无力的，似无太大效果的 <em>n.</em> 昏倒</td>
</tr>
<tr>
<td style="text-align:left">scent</td>
<td><em>n.</em> 气味，香味 香水 (动物的)臭迹，遗臭 线索 (尤指狗的)嗅觉 <em>vt.</em> (动物等)嗅出…的气味，嗅出…的存在 察觉到(坏事等的)存在；觉得有，怀疑有 使充满香味；洒香水于</td>
</tr>
<tr>
<td style="text-align:left">glorify</td>
<td>vt. 赞美；崇拜（神）；美化；使更壮丽</td>
</tr>
<tr>
<td style="text-align:left">triplet</td>
<td>n. 三个一组；[音]三连音符；三元组中的一个；三胞胎之一</td>
</tr>
<tr>
<td style="text-align:left">formless</td>
<td><em>adj.</em> 无定形的,没有形状的,形体不明的</td>
</tr>
<tr>
<td style="text-align:left">vincent van gogh</td>
<td>文森特·梵高（荷兰画家）</td>
</tr>
<tr>
<td style="text-align:left">moan</td>
<td><em>vt. &amp; vi.</em> 呻吟；悲叹 抱怨 <em>n.</em> 呻吟声悲叹声；（尤指风的）呼啸声 抱怨</td>
</tr>
<tr>
<td style="text-align:left">prejudice</td>
<td><em>n.</em> 成见, 偏见, 歧视 <em>vt.</em> 使有偏见 不利于, 损害</td>
</tr>
<tr>
<td style="text-align:left">anxiety</td>
<td>n. 焦虑；挂念；渴望；令人焦虑的事</td>
</tr>
<tr>
<td style="text-align:left">poison</td>
<td>vt. 使中毒，放毒于；败坏；污染；阻碍 vi. 放毒，下毒 n. 毒药，毒物；有毒害的事物；酒；抑制剂 adj. 有毒的</td>
</tr>
<tr>
<td style="text-align:left">constant</td>
<td><em>adj.</em> 始终如一的, 恒久不变的 不断的, 连续发生的 忠实的, 忠诚的</td>
</tr>
<tr>
<td style="text-align:left">inconsistent</td>
<td><em>adj.</em> (思想、意见等)不一致的, 不协调的 易变的, 不稳定的, 反复无常的</td>
</tr>
<tr>
<td style="text-align:left">self-possession</td>
<td><em>n.</em> 沉着;泰然自若</td>
</tr>
<tr>
<td style="text-align:left">oddity</td>
<td><em>n.</em> 奇特,古怪 怪人,怪事,怪异的事物</td>
</tr>
<tr>
<td style="text-align:left">exalt</td>
<td><em>vt.</em> 赞扬；歌颂 提升，提拔</td>
</tr>
<tr>
<td style="text-align:left">dread</td>
<td>n. 恐惧；可怕的人（或物） vi. 惧怕；担心 vt. 惧怕；担心 adj. 可怕的</td>
</tr>
<tr>
<td style="text-align:left">injurious</td>
<td><em>adj.</em> 伤害的 中伤的 不公正的</td>
</tr>
<tr>
<td style="text-align:left">lethal</td>
<td>adj. 致命的，致死的 n. 致死因子</td>
</tr>
<tr>
<td style="text-align:left">maturity</td>
<td><em>n.</em> 成熟;成熟期;发育完全 (金融)到期</td>
</tr>
<tr>
<td style="text-align:left">composure</td>
<td>calmness of mind or manner; self-possession</td>
</tr>
<tr>
<td style="text-align:left">formidable</td>
<td>very challenging; demanding</td>
</tr>
<tr>
<td style="text-align:left">aberration</td>
<td><em>n.</em> 偏差; 越轨 差错; 毛病</td>
</tr>
<tr>
<td style="text-align:left">extol</td>
<td>to praise highly; exalt</td>
</tr>
<tr>
<td style="text-align:left">elusive</td>
<td>tending to escape; hard to catch hold of or identify: <em>adj.</em> 难以捉摸的;难以找到的;不易记住的</td>
</tr>
<tr>
<td style="text-align:left">trepidation</td>
<td>alarm or dread; n. 惊恐；恐惧；忧虑；颤抖</td>
</tr>
<tr>
<td style="text-align:left">virulent</td>
<td>very injurious; lethal; deadly</td>
</tr>
<tr>
<td style="text-align:left">precocious</td>
<td>showing unusually early maturity or ability</td>
</tr>
<tr>
<td style="text-align:left">inscrutable</td>
<td>difficult to interpret or understand; puzzling; <em>adj.</em> 不可理解的;谜一样的</td>
</tr>
<tr>
<td style="text-align:left">congenital</td>
<td>existing from birth</td>
</tr>
<tr>
<td style="text-align:left">nature</td>
<td>n. 自然；性质；种类；本性</td>
</tr>
<tr>
<td style="text-align:left">vow</td>
<td><em>n.</em> 誓言 郑重宣布；许愿 <em>vt. &amp; vi.</em> 起誓，发誓 郑重宣告</td>
</tr>
<tr>
<td style="text-align:left">peer</td>
<td>vi. 凝视，盯着看；窥视 vt. 封为贵族；与…同等 n. 贵族；同等的人</td>
</tr>
<tr>
<td style="text-align:left">magnify</td>
<td>vt. 放大；赞美；夸大 vi. 放大；有放大能力</td>
</tr>
<tr>
<td style="text-align:left">blackout</td>
<td><em>n.</em> 断电;停电 新闻封锁 灯火管制(期) 暂时性眼前昏黑;突然发昏 (广播等)停止 不透光窗罩〔窗帘〕</td>
</tr>
<tr>
<td style="text-align:left">first-grader</td>
<td>一年级；第一级；一等品</td>
</tr>
<tr>
<td style="text-align:left">stalk</td>
<td>n. （植物的）茎，秆；（支持叶子、果实和花的）梗，柄；追踪；高视阔步 vt. 追踪，潜近；高视阔步 vi. 高视阔步地走；潜近，偷偷接近</td>
</tr>
<tr>
<td style="text-align:left">melody</td>
<td>n. 旋律；歌曲；美妙的音乐</td>
</tr>
<tr>
<td style="text-align:left">drift</td>
<td>n. 漂流，漂移；漂流物；趋势 vi. 漂流，漂移；漂泊 vt. 使…漂流；使…受风吹积</td>
</tr>
<tr>
<td style="text-align:left">yolk</td>
<td>n. 蛋黄；[生]卵黄；羊毛脂</td>
</tr>
<tr>
<td style="text-align:left">smallpox</td>
<td>n. 天花</td>
</tr>
<tr>
<td style="text-align:left">wipe</td>
<td>vt. 擦；涂上；消除 vi. 擦；打 n. 擦拭；用力打</td>
</tr>
<tr>
<td style="text-align:left">bright</td>
<td><em>adj.</em> 光亮的，闪光的，发光的 鲜艳的，鲜亮的 生气勃勃的，愉快的；幸福的 聪明的，伶俐的 前途光明的，有希望的</td>
</tr>
<tr>
<td style="text-align:left">pinpoint</td>
<td>vt. 查明；精确地找到；准确描述 adj. 精确的；详尽的 n. 针尖；精确位置；极小之物</td>
</tr>
<tr>
<td style="text-align:left">tremble</td>
<td>vi. 战栗；焦虑；发抖；摇晃 vt. 使挥动；用颤抖的声音说出 n. 颤抖；战栗；摇晃</td>
</tr>
<tr>
<td style="text-align:left">pass on</td>
<td>vt. 前进(通过, 传递, 死亡, 审核)</td>
</tr>
<tr>
<td style="text-align:left">pale</td>
<td>adj. 苍白的；暗淡的；无力的 n. 前哨；栅栏；范围 vt. 使变苍白；使失色；用栅栏围 vi. 变苍白；变得暗淡；失色</td>
</tr>
<tr>
<td style="text-align:left">fearsome</td>
<td><em>adj.</em> &lt;正&gt;很可怕的;十分吓人的</td>
</tr>
<tr>
<td style="text-align:left">stuff</td>
<td>n. 材料；东西；填充物；素材资料 vt. 填塞；塞满；让吃饱 vi. 吃得过多</td>
</tr>
<tr>
<td style="text-align:left">freakish</td>
<td><em>adj.</em> 异想天开的,朝三暮四的,奇特的,畸形的</td>
</tr>
<tr>
<td style="text-align:left">virtue</td>
<td><em>n.</em> 美德, 德行 优点, 长处</td>
</tr>
<tr>
<td style="text-align:left">corn laws</td>
<td>The Corn Laws 谷物法</td>
</tr>
<tr>
<td style="text-align:left">sociology</td>
<td><em>n.</em> 社会学; /səʊsɪ’ɒlədʒɪ/</td>
</tr>
<tr>
<td style="text-align:left">muster</td>
<td><em>n.</em> 集中；集合，集合的人群 能通过检阅；可以接受； 还不错 <em>vt. &amp; vi.</em> 集合，召集 <em>vt.</em> (自他人处)搜集某事物，激发，激起; /‘mʌstə/</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-11-日"><a href="#2-月-11-日" class="headerlink" title="2 月 11 日"></a>2 月 11 日</h1><ul>
<li>emmmm，summary 还没写，今天催一催队友发给我，开学前再写吧</li>
</ul>
<h2 id="chapter-19"><a href="#chapter-19" class="headerlink" title="chapter 19"></a>chapter 19</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">palm-reader</td>
<td>Mystic Meg’s Palm Reader 神秘的手相占卜者</td>
</tr>
<tr>
<td style="text-align:left">Traveled</td>
<td>adj. 富有旅行经验的；旅客多的；旅客使用的</td>
</tr>
<tr>
<td style="text-align:left">contrast</td>
<td><em>n.</em> 对比, 对照 差异, 差别 对照物, 明显的对比物 <em>vt. &amp; vi.</em> 对比, 对照</td>
</tr>
<tr>
<td style="text-align:left">adjoin</td>
<td>vi. 毗连，邻接 vt. 毗连，邻接</td>
</tr>
<tr>
<td style="text-align:left">influenza</td>
<td><em>n.</em> &lt;医&gt;流行性感冒; /ɪnflʊ’enzə/</td>
</tr>
<tr>
<td style="text-align:left">battlefield</td>
<td><em>n.</em> 战场,战地 斗争的领域</td>
</tr>
<tr>
<td style="text-align:left">commencement</td>
<td><em>n.</em> 开始, 开端 毕业典礼, 学位授予典礼</td>
</tr>
<tr>
<td style="text-align:left">dorm</td>
<td><em>n.</em> 宿舍</td>
</tr>
<tr>
<td style="text-align:left">laundry</td>
<td><em>n.</em> 洗衣店，洗衣房 洗好的衣服；待洗的衣服</td>
</tr>
<tr>
<td style="text-align:left">toe</td>
<td>脚趾；足尖 vt. 用脚尖走；以趾踏触 vi. 动脚尖；用足尖跳舞</td>
</tr>
<tr>
<td style="text-align:left">strain</td>
<td>n. 张力；拉紧；负担；扭伤；血缘vi. 拉紧；尽力vt. 拉紧；滥用；滤去；竭力</td>
</tr>
<tr>
<td style="text-align:left">intrude</td>
<td><em>vi.</em> 侵入, 侵扰, 打扰 <em>vt.</em> 把…强加于</td>
</tr>
<tr>
<td style="text-align:left">interfere</td>
<td><em>vi.</em> 干预；调停 妨碍</td>
</tr>
<tr>
<td style="text-align:left">lawsuit</td>
<td>n. 诉讼（尤指非刑事案件）；诉讼案件</td>
</tr>
<tr>
<td style="text-align:left">rule out</td>
<td>be ruled out 被排除</td>
</tr>
<tr>
<td style="text-align:left">strike</td>
<td>vi. 罢工；打，打击；敲，敲击；抓；穿透；打动 vt. 罢工；打，击；侵袭；打动；撞击，冲击；到达 n. 罢工；打击；殴打</td>
</tr>
<tr>
<td style="text-align:left">crept</td>
<td>v. 匍匐爬行（creep的过去式）</td>
</tr>
<tr>
<td style="text-align:left">opinionated</td>
<td><em>adj.</em> &lt;贬&gt;固执己见的,武断的</td>
</tr>
<tr>
<td style="text-align:left">uninformed</td>
<td><em>adj.</em> 信息不足的;情况不明的 未受教育的;无知的</td>
</tr>
<tr>
<td style="text-align:left">debilitate</td>
<td>to deprive of strength or energy</td>
</tr>
<tr>
<td style="text-align:left">clairvoyance</td>
<td>n. 千里眼；异常的洞察力</td>
</tr>
<tr>
<td style="text-align:left">deprive</td>
<td><em>vt.</em> 剥夺, 夺去, 使丧失</td>
</tr>
<tr>
<td style="text-align:left">perceive</td>
<td>vt. 察觉，感觉；理解；认知 vi. 感到，感知；认识到</td>
</tr>
<tr>
<td style="text-align:left">meddlesome</td>
<td><em>adj.</em> 好干预的;爱管闲事的</td>
</tr>
<tr>
<td style="text-align:left">meddle</td>
<td><em>vi.</em> 干涉, 干预(他人事务)</td>
</tr>
<tr>
<td style="text-align:left">scorn</td>
<td><em>n.</em> 鄙视；轻蔑 受某人鄙视的人或事物 <em>vt.</em> 轻视，蔑视 不屑做</td>
</tr>
<tr>
<td style="text-align:left">habitual</td>
<td><em>adj.</em> 习惯的, 惯常的</td>
</tr>
<tr>
<td style="text-align:left">deceptive</td>
<td><em>adj.</em> 可能欺骗的, 导致误解的</td>
</tr>
<tr>
<td style="text-align:left">clairvoyant</td>
<td>having the supposed power to see things not perceived by the normal senses</td>
</tr>
<tr>
<td style="text-align:left">officous</td>
<td>offering unwanted advice; meddlesome</td>
</tr>
<tr>
<td style="text-align:left">preclude</td>
<td>to make impossible; prevent</td>
</tr>
<tr>
<td style="text-align:left">contiguous</td>
<td>sharing an edge or a boundary</td>
</tr>
<tr>
<td style="text-align:left">obliterate</td>
<td>to destory or erase completely</td>
</tr>
<tr>
<td style="text-align:left">spurn</td>
<td>to reject or refuse with scorn</td>
</tr>
<tr>
<td style="text-align:left">taciturn</td>
<td>habitually nontalktive; uncommunicative</td>
</tr>
<tr>
<td style="text-align:left">stealthy</td>
<td>moving or acting in a  cautious, deceptive way</td>
</tr>
<tr>
<td style="text-align:left">accommordate</td>
<td>to provide with something needed; make or have room for</td>
</tr>
<tr>
<td style="text-align:left">sportscaster</td>
<td><em>n.</em> 担任比赛实况转播或说明的广播员</td>
</tr>
<tr>
<td style="text-align:left">gunpoint</td>
<td>n. 枪口</td>
</tr>
<tr>
<td style="text-align:left">council</td>
<td>n. 理事会；会议；委员会；顾问班子；地方议会</td>
</tr>
<tr>
<td style="text-align:left">thrush</td>
<td><em>n.</em> (有褐灰色斑点的)画眉鸟 &lt;美&gt;&lt;俚&gt;演唱流行歌曲的女歌手 霉菌性口炎,鹅口疮 (马的)蹄叉腐疽</td>
</tr>
<tr>
<td style="text-align:left">beard</td>
<td>vt. 公然反对；抓…的胡须 n. 胡须；颌毛 vi. [美俚]充当掩护；充当男随员</td>
</tr>
<tr>
<td style="text-align:left">wheelchair</td>
<td><em>n.</em> 轮椅</td>
</tr>
<tr>
<td style="text-align:left">ramp</td>
<td>n. 斜坡，坡道；敲诈 vi. 蔓延；狂跳乱撞；敲诈 vt. 敲诈；使有斜面</td>
</tr>
<tr>
<td style="text-align:left">reception</td>
<td><em>n.</em> 接待, 接见 招待会, 欢迎会 接待处, 服务台, 问询处 接收效果</td>
</tr>
<tr>
<td style="text-align:left">aide</td>
<td>n. 副官；助手；侍从武官;  /eɪd/</td>
</tr>
<tr>
<td style="text-align:left">bustle</td>
<td>vi. 喧闹；忙乱；充满 vt. 使忙碌；催促 n. 喧闹；活跃；裙撑；热闹的活动</td>
</tr>
<tr>
<td style="text-align:left">self-importance</td>
<td><em>n.</em> 自大, 自视过高</td>
</tr>
<tr>
<td style="text-align:left">deepvale</td>
<td>深谷</td>
</tr>
<tr>
<td style="text-align:left">vale</td>
<td>n. 谷；溪谷 int. [拉]再见；再会</td>
</tr>
<tr>
<td style="text-align:left">migraine</td>
<td><em>n.</em> &lt;医&gt;偏头痛; /‘maɪɡren/</td>
</tr>
<tr>
<td style="text-align:left">nausea</td>
<td><em>n.</em> 作呕;恶心;反胃; /‘nɔːsɪə/</td>
</tr>
<tr>
<td style="text-align:left">sufferer</td>
<td><em>n.</em> 受害者；受难者 患病者</td>
</tr>
<tr>
<td style="text-align:left">blurt</td>
<td><em>vt.</em> 突然说出, 脱口而出</td>
</tr>
<tr>
<td style="text-align:left">Gypsies</td>
<td>n. 吉普赛人；吉布赛语（Gypsy的复数）; /‘dʒipsiz/</td>
</tr>
<tr>
<td style="text-align:left">Roma</td>
<td>n. 罗马，罗马帝国; /‘rɔmə/</td>
</tr>
<tr>
<td style="text-align:left">establish</td>
<td><em>vt.</em> 建立, 成立 安置 确定, 证实</td>
</tr>
<tr>
<td style="text-align:left">Czechoslovakia</td>
<td><em>n.</em> 捷克斯洛伐克; /ˌtʃekəsləu’vɑ:kiə/</td>
</tr>
<tr>
<td style="text-align:left">notion</td>
<td>n. 概念；见解；打算</td>
</tr>
<tr>
<td style="text-align:left">wagon</td>
<td><em>n.</em> 四轮的运货马车 〈英〉铁路货车 〈美〉小手推车</td>
</tr>
<tr>
<td style="text-align:left">blacksmith</td>
<td><em>n.</em> 铁匠, 锻工</td>
</tr>
<tr>
<td style="text-align:left">carver</td>
<td><em>n.</em> 雕刻师，雕工；切肉人 切肉刀</td>
</tr>
<tr>
<td style="text-align:left">free-spirited</td>
<td>free spirit 思念; 自由灵魂; 自由精神; 轻扬茉香;</td>
</tr>
<tr>
<td style="text-align:left">outsider</td>
<td>n. 外人；无取胜希望者</td>
</tr>
<tr>
<td style="text-align:left">bandit</td>
<td><em>n.</em> 土匪, 强盗</td>
</tr>
<tr>
<td style="text-align:left">livestock</td>
<td><em>n.</em> 家畜, 牲畜</td>
</tr>
<tr>
<td style="text-align:left">emperor</td>
<td>n. 皇帝，君主</td>
</tr>
<tr>
<td style="text-align:left">fare</td>
<td><em>n.</em> 费, 票价 乘客 食物 <em>vi.</em> 吃, 进食 进展, 遭遇</td>
</tr>
<tr>
<td style="text-align:left">tolerate</td>
<td><em>vt.</em> 容许；承认 忍受；容忍</td>
</tr>
<tr>
<td style="text-align:left">estimate</td>
<td>vi. 估计，估价 n. 估计，估价；判断，看法 vt. 估计，估量；判断，评价</td>
</tr>
<tr>
<td style="text-align:left">holocaust</td>
<td><em>n.</em> 大屠杀; /‘hɒləkɔːst/</td>
</tr>
<tr>
<td style="text-align:left">agent</td>
<td>n. 代理人，代理商；药剂；特工 vt. 由…作中介；由…代理 adj. 代理的</td>
</tr>
<tr>
<td style="text-align:left">skinhead</td>
<td>n. 行为暴戾的青少年；理平头的男人</td>
</tr>
<tr>
<td style="text-align:left">neo-Nazis</td>
<td>新纳粹</td>
</tr>
<tr>
<td style="text-align:left">persecution</td>
<td><em>n.</em> 迫害或受迫害   </td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-20"><a href="#chapter-20" class="headerlink" title="chapter 20"></a>chapter 20</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">grumpy</td>
<td><em>adj.</em> 脾气坏的,生气的 <em>adv.</em> 生气地</td>
</tr>
<tr>
<td style="text-align:left">gracious</td>
<td>adj. 亲切的；和蔼的；高尚的；雅致的 int. 天哪；哎呀</td>
</tr>
<tr>
<td style="text-align:left">accusation</td>
<td><em>n.</em> 指责；指控；控告 (被告发、控告的)罪名，罪状</td>
</tr>
<tr>
<td style="text-align:left">slander</td>
<td><em>n.</em> 诽谤, 诋毁 <em>vt.</em> 造谣中伤</td>
</tr>
<tr>
<td style="text-align:left">clash</td>
<td><em>vt. &amp; vi.</em>(砰地相撞)发出撞击声 <em>vi.</em> 交锋；冲突 不合；不一致 <em>n.</em> (金属等的)刺耳的撞击声 不协调 冲突</td>
</tr>
<tr>
<td style="text-align:left">invisible</td>
<td><em>adj.</em> 看不见的; 暗藏的</td>
</tr>
<tr>
<td style="text-align:left">inharmonious</td>
<td><em>adj.</em> 不合谐的,不和睦的</td>
</tr>
<tr>
<td style="text-align:left">cramming</td>
<td>n. 塞满；填鸭式的用功；挤满 v. 把…挤满（cram的ing形式）</td>
</tr>
<tr>
<td style="text-align:left">master race</td>
<td><em>n.</em> 优等民族</td>
</tr>
<tr>
<td style="text-align:left">race</td>
<td>n. 种族，人种；家庭，门弟；属，种 vt. 和…竞赛；使急走，使全速行进；使参加比赛 vi. 比速度，参加竞赛；全速行进</td>
</tr>
<tr>
<td style="text-align:left">buckle</td>
<td>vi. 扣住；变弯曲 vt. 扣住；使弯曲 n. 皮带扣，带扣</td>
</tr>
<tr>
<td style="text-align:left">tease</td>
<td><em>vt. &amp; vi.</em> 取笑, 戏弄 <em>vt.</em> 梳理(羊毛等) <em>n.</em> 爱嘲弄他人的人</td>
</tr>
<tr>
<td style="text-align:left">affectionate</td>
<td>adj. 慈爱的,充满深情的,温柔亲切的</td>
</tr>
<tr>
<td style="text-align:left">glum</td>
<td>adj. 阴沉的；忧郁的</td>
</tr>
<tr>
<td style="text-align:left">assist</td>
<td><em>vt. &amp; vi.</em>帮助, 促进</td>
</tr>
<tr>
<td style="text-align:left">vernon</td>
<td>n. 弗农（男子名）; /‘və:nən/</td>
</tr>
<tr>
<td style="text-align:left">gust</td>
<td>n. 一阵狂风；风味；趣味 vi. 一阵阵地劲吹; /gʌst/; Die Luft der Freiheit weht</td>
</tr>
<tr>
<td style="text-align:left">scatter</td>
<td>vi. 分散，散开；散射 vt. 使散开，使分散；使散射；使散播，使撒播 n. 分散；散播，撒播</td>
</tr>
<tr>
<td style="text-align:left">mindless</td>
<td><em>adj.</em> 没有思维能力的，愚笨的，无知的 不注意的，不顾…的 <em>n.</em> 没有思维能力，愚笨，无知；不注意</td>
</tr>
<tr>
<td style="text-align:left">resentful</td>
<td><em>adj.</em> 感到愤恨的, 表示愤恨的, 憎恨的</td>
</tr>
<tr>
<td style="text-align:left">defame</td>
<td>to damage the good name or reputation of</td>
</tr>
<tr>
<td style="text-align:left">grueling</td>
<td>physically or mentally exhausting</td>
</tr>
<tr>
<td style="text-align:left">indoctrinate</td>
<td>to teach the principles of a specific point of view; <em>vt.</em> 向…灌输(信仰),<strong>教导</strong></td>
</tr>
<tr>
<td style="text-align:left">submissive</td>
<td>giving in to the authority of others; obedient</td>
</tr>
<tr>
<td style="text-align:left">sullen</td>
<td>quietly resentful; bitter</td>
</tr>
<tr>
<td style="text-align:left">thwart</td>
<td>to oppose directly; to frustrate or defeat</td>
</tr>
<tr>
<td style="text-align:left">dicordant</td>
<td>lacking agreement; lacking harmony</td>
</tr>
<tr>
<td style="text-align:left">indict</td>
<td>to charge with an offense; blame; /in’dait/ <em>vt.</em> 控告, 起诉</td>
</tr>
<tr>
<td style="text-align:left">cordial</td>
<td>warm and friendly</td>
</tr>
<tr>
<td style="text-align:left">wanton</td>
<td>Senseless; /‘wɒntən/;   <em>adj.</em> 蛮横的，放肆的，毫无道理的 恣意的；肆无忌惮的 淫乱的，放荡的 无节制的，不受约束的 不负责任的；胡乱的；反复无常的 (草木)繁茂的 嬉戏的；淘气的 <em>vi.</em> 任性；反复无常 嬉戏 生活奢侈；放肆 <em>vt.</em> 挥霍(钱财) <em>n.</em> 嬉闹的人 奢侈享乐的人 淫荡的人(尤指荡妇) <em>adv.</em> 放肆地；淫乱地；无节制地 <em>n.</em> 淫乱；放荡；无节制</td>
</tr>
<tr>
<td style="text-align:left">sauerkraut</td>
<td><em>n.</em>〈美〉德国泡菜的一种; /‘saʊəkraʊt/</td>
</tr>
<tr>
<td style="text-align:left">jury</td>
<td>n. 陪审团；评判委员会 adj. 应急的</td>
</tr>
<tr>
<td style="text-align:left">Ku Klux Klan</td>
<td>三K党; /ˌku: klʌks ˈklæn/</td>
</tr>
<tr>
<td style="text-align:left">batter</td>
<td>n. 击球手；（用鸡蛋、牛奶、面粉等调成的）糊状物；墙面的倾斜 vt. 猛击；打坏；使向上倾斜 vi. 接连猛击；向上倾斜</td>
</tr>
<tr>
<td style="text-align:left">battered</td>
<td>adj. 磨损的；弄垮的；破旧的；受到虐待的 v. 连续猛击；磨损（batter的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">meekness</td>
<td>n. 温顺；懦弱；柔和</td>
</tr>
<tr>
<td style="text-align:left">propaganda</td>
<td><em>n.</em> 宣传, 宣传运动; /prɒpə’gændə/</td>
</tr>
<tr>
<td style="text-align:left">reeducation</td>
<td>再教育</td>
</tr>
<tr>
<td style="text-align:left">torture</td>
<td>vt. 折磨；拷问；歪曲 n. 拷问；折磨；歪曲; /‘tɔːtʃə/</td>
</tr>
<tr>
<td style="text-align:left">testimony</td>
<td><em>n.</em> (法庭上证人的)证词 证明, 证据</td>
</tr>
<tr>
<td style="text-align:left">teasing</td>
<td>n. 戏弄</td>
</tr>
<tr>
<td style="text-align:left">cruelty</td>
<td>n. 残酷；残酷的行为；残忍</td>
</tr>
<tr>
<td style="text-align:left">cult</td>
<td><em>n.</em> 狂热；异教团体；宗教信仰；膜拜仪式；时髦的人（或事物）；信徒 <em>adj.</em> 受特定群体欢迎的; /kʌlt/</td>
</tr>
<tr>
<td style="text-align:left">bizarre</td>
<td>adj. 奇异的（指态度，容貌，款式等）; /bɪ’zɑː/</td>
</tr>
<tr>
<td style="text-align:left">Guyana</td>
<td>n. 圭亚那（拉丁美洲国家）; /ɡai’ænə/</td>
</tr>
<tr>
<td style="text-align:left">Indiana</td>
<td>n. 印第安纳州（美国中部的州）; /ˌindi’ænə/</td>
</tr>
<tr>
<td style="text-align:left">preach</td>
<td><em>vt. &amp; vi.</em> 讲道 劝诫；说教</td>
</tr>
<tr>
<td style="text-align:left">congregate</td>
<td><em>vt. &amp; vi.</em> (使)集合, 聚集; /‘kɒŋgrɪgeɪt/</td>
</tr>
<tr>
<td style="text-align:left">sermons</td>
<td>n. 布道辞；说教；布道（sermon的复数）; /‘sɝmən/</td>
</tr>
<tr>
<td style="text-align:left">unjust</td>
<td>adj. 不公平的，不公正的；非正义的</td>
</tr>
<tr>
<td style="text-align:left">county</td>
<td><em>n.</em> 郡, 县; /‘kaʊntɪ/</td>
</tr>
<tr>
<td style="text-align:left">congressman</td>
<td><em>n.</em> &lt;美&gt;国会议员(尤指众议员)</td>
</tr>
<tr>
<td style="text-align:left">tub</td>
<td><em>n.</em>盆, 桶 一桶的量, 一盆的量 浴盆 笨拙缓慢的船</td>
</tr>
<tr>
<td style="text-align:left">madman</td>
<td>n. 疯子，狂人；精神病患者</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-12-日"><a href="#2-月-12-日" class="headerlink" title="2 月 12 日"></a>2 月 12 日</h1><ul>
<li>早晨背单词，然后去锻炼</li>
</ul>
<h2 id="chapter-21"><a href="#chapter-21" class="headerlink" title="chapter 21"></a>chapter 21</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">chew</td>
<td>n. 咀嚼；咀嚼物 vt. 嚼碎，咀嚼 vi. 细想，深思</td>
</tr>
<tr>
<td style="text-align:left">gnaw</td>
<td><em>vt. &amp; vi.</em> 咬，啃 (使)苦恼；折磨 (长时间) 折磨某人 (长时间)危害某事物; /nɔː/</td>
</tr>
<tr>
<td style="text-align:left">pile</td>
<td>n. 堆；大量；建筑群 vt. 累积；打桩于 vi. 积累；堆积；挤</td>
</tr>
<tr>
<td style="text-align:left">scrap</td>
<td>小块（纸、布匹等）；丝毫；一丁点；残羹剩饭 <em>v.</em> 废弃；废除；取消；抛弃；报废</td>
</tr>
<tr>
<td style="text-align:left">sarcastic</td>
<td><em>adj.</em> 讥讽的, 讽刺的, 挖苦的</td>
</tr>
<tr>
<td style="text-align:left">burned-out</td>
<td><em>adj.</em> 烧坏的,疲倦不堪的</td>
</tr>
<tr>
<td style="text-align:left">filthy</td>
<td><em>adj.</em> 肮脏的；污秽的 下流的；淫秽的; /‘fɪlθɪ/</td>
</tr>
<tr>
<td style="text-align:left">chart</td>
<td><em>n.</em> 图表 航海图 唱片的每周流行榜 <em>vt.</em> 绘制地图，在图上标出 跟踪；记述</td>
</tr>
<tr>
<td style="text-align:left">chalkboard</td>
<td><em>n.</em> 黑板; /‘tʃɔːkbɔːd/</td>
</tr>
<tr>
<td style="text-align:left">commonplace</td>
<td><em>adj.</em> 普通的, 平庸的 <em>n.</em> 陈腔滥调, 老生常谈 寻常的事物, 平常的东西; /‘kɒmənpleɪs/</td>
</tr>
<tr>
<td style="text-align:left">preacher</td>
<td><em>n.</em> 说教者；鼓吹者；传道人，讲道的道士</td>
</tr>
<tr>
<td style="text-align:left">plot</td>
<td><em>n.</em> 故事情节 (秘密)计划，密谋 小块地皮 <em>vt.</em> 把…分成小块；划分 绘制；标出 <em>vt. &amp; vi.</em> 密谋</td>
</tr>
<tr>
<td style="text-align:left">flee</td>
<td><em>vi.</em> 逃走, 逃掉 <em>vt.</em> 逃离, 逃避</td>
</tr>
<tr>
<td style="text-align:left">fussy</td>
<td><em>adj.</em> 瞎忙的, 大惊小怪的; /‘fʌsɪ/</td>
</tr>
<tr>
<td style="text-align:left">bundle</td>
<td>n. 捆；束 vt. 捆 vi. 匆忙离开; /‘bʌnd(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">rhyme</td>
<td><em>n.</em> 同韵词, 押韵词 韵, 押韵 <em>vt. &amp; vi.</em> (使)押韵, 押…韵; /raɪm/</td>
</tr>
<tr>
<td style="text-align:left">accompany</td>
<td><em>vt.</em> 陪伴, 陪同 伴随…同时发生 伴奏</td>
</tr>
<tr>
<td style="text-align:left">bouquet</td>
<td>n. 酒香；花束; /bʊ’keɪ/</td>
</tr>
<tr>
<td style="text-align:left">scold</td>
<td>vi. 责骂；叱责 vt. 责骂；骂 n. 责骂；爱责骂的人</td>
</tr>
<tr>
<td style="text-align:left">stale</td>
<td><em>adj.</em> 不新鲜的；味道变坏的 无趣味的；老掉牙的 没有生气的 <em>vi.</em> 变陈旧；走味</td>
</tr>
<tr>
<td style="text-align:left">pretense</td>
<td><em>n.</em> 假装；矫饰；虚伪；做作 借口，托词 自称，自吹 炫耀 (无事实根据的)要求，虚假的理由</td>
</tr>
<tr>
<td style="text-align:left">insincerity</td>
<td><em>n.</em> 不诚实;无诚意 伪善</td>
</tr>
<tr>
<td style="text-align:left">biting</td>
<td><em>adj.</em> 尖锐刺人的；刺痛的 辛辣的；嘲讽的</td>
</tr>
<tr>
<td style="text-align:left">stinging</td>
<td>adj. 激烈的；刺人的；刺一样的; /‘stiŋiŋ/</td>
</tr>
<tr>
<td style="text-align:left">chastise</td>
<td><em>vt.</em> 严惩(某人)(尤指责打)</td>
</tr>
<tr>
<td style="text-align:left">elucidate</td>
<td><em>vt.</em> 阐明,解释; /ɪ’l(j)uːsɪdeɪt/</td>
</tr>
<tr>
<td style="text-align:left">fallacious</td>
<td><em>adj.</em> 谬误的;虚妄的;欺骗的;靠不住的; 不合逻辑的;令人失望的; /fə’leɪʃəs/</td>
</tr>
<tr>
<td style="text-align:left">assiduous</td>
<td><em>adj.</em> 专心致志的，勤勉的 照顾周到的；殷勤的 一丝不苟的; /ə’sɪdjʊəs/</td>
</tr>
<tr>
<td style="text-align:left">insurgent</td>
<td><em>adj.</em> 起义的,叛乱的 <em>n.</em> 起义,暴动,造反; /ɪn’sɜːdʒ(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">placid</td>
<td><em>adj.</em> 温和的</td>
</tr>
<tr>
<td style="text-align:left">trite</td>
<td>adj. 陈腐的；平庸的；老一套的</td>
</tr>
<tr>
<td style="text-align:left">exalt</td>
<td><em>vt.</em> 赞扬；歌颂 提升，提拔; /ɪg’zɔːlt/</td>
</tr>
<tr>
<td style="text-align:left">hypocrisy</td>
<td><em>n.</em> 伪善, 虚伪; /hɪ’pɒkrɪsɪ/</td>
</tr>
<tr>
<td style="text-align:left">caustic</td>
<td><em>adj.</em> &lt;化&gt;苛性的；腐蚀性的 尖刻的，刻薄的，挖苦的 <em>adv.</em> 刻薄地，挖苦地; /‘kɔːstɪk/</td>
</tr>
<tr>
<td style="text-align:left">speck</td>
<td>n. 污点；小颗粒；灰尘 vt. 使有斑点</td>
</tr>
<tr>
<td style="text-align:left">assist</td>
<td><em>vt. &amp; vi.</em> 帮助, 促进</td>
</tr>
<tr>
<td style="text-align:left">exterior</td>
<td>adj. 外部的；表面的；外在的 n. 外部；表面；外型；外貌</td>
</tr>
<tr>
<td style="text-align:left">conceal</td>
<td>vt. 隐藏；隐瞒; /kən’siːl/</td>
</tr>
<tr>
<td style="text-align:left">Tartuffe by Moliere</td>
<td>答尔丢夫(法国17世纪喜剧作家莫里哀所作同名喜剧中的主人公); /tɑ:’tuf/ n. 莫里哀（人名）</td>
</tr>
<tr>
<td style="text-align:left">righteous</td>
<td><em>adj.</em> 正直的，正派的 正当的；道义上无可指责的 <em>adv.</em> 正当地 <em>n.</em> 正直；正当；正义; /‘raɪtʃəs/</td>
</tr>
<tr>
<td style="text-align:left">Sullivan</td>
<td>/‘sʌlivən/</td>
</tr>
<tr>
<td style="text-align:left">dedicate</td>
<td>vt. 致力；献身；题献</td>
</tr>
<tr>
<td style="text-align:left">oversimplify</td>
<td><em>v.</em> (使)过分地单纯化</td>
</tr>
<tr>
<td style="text-align:left">controversial</td>
<td><em>adj.</em> 有争议的, 引起争议的;  /kɒntrə’vɜːʃ(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">socialist</td>
<td><em>n.</em> 社会主义者; /‘səʊʃ(ə)lɪst/</td>
</tr>
<tr>
<td style="text-align:left">communist</td>
<td><em>n.</em> 共产主义者 <em>adj.</em> 共产主义的, 信仰共产主义的; /‘kɒmjʊnɪst/</td>
</tr>
<tr>
<td style="text-align:left">Well-off</td>
<td><em>adj.</em> 顺利的,走运的,手头宽裕的,繁荣昌盛的</td>
</tr>
<tr>
<td style="text-align:left">compliment</td>
<td><em>n.</em> 赞美(话)，恭维(话) 向…送礼以表示敬意 <em>vt.</em> 表扬；恭维</td>
</tr>
<tr>
<td style="text-align:left">blush</td>
<td><em>vi.</em> 脸红 <em>n.</em> 脸红</td>
</tr>
<tr>
<td style="text-align:left">liable</td>
<td><em>adj.</em> 有法律责任的, 有义务的 易患…的, 易受…之害的 有做某事的倾向</td>
</tr>
<tr>
<td style="text-align:left">shrunk</td>
<td>v. 收缩（shrink的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">fiery</td>
<td>adj. 燃烧般的；热烈的，炽烈的；暴躁的; /‘faɪərɪ/</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-22"><a href="#chapter-22" class="headerlink" title="chapter 22"></a>chapter 22</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">stiff</td>
<td>adj. 严厉的；呆板的；坚硬的；拘谨的；艰难的 adv. 彻底地；僵硬地 n. [俚]死尸；令人讨厌者；流通票据；劳动者 vt. 亏待侍者等 vi. 在商业上惨败</td>
</tr>
<tr>
<td style="text-align:left">Dorian</td>
<td>adj. 多里安人的 n. 多里安人</td>
</tr>
<tr>
<td style="text-align:left">conventional</td>
<td><em>adj.</em> 依照惯例的, 约定俗成的, 依照传统的 常规的, 非核的</td>
</tr>
<tr>
<td style="text-align:left">precise</td>
<td>adj. 精确的；明确的；严格的; /prɪ’saɪs/</td>
</tr>
<tr>
<td style="text-align:left">sexual harassment</td>
<td>性骚扰; /ˈhærəsmənt/</td>
</tr>
<tr>
<td style="text-align:left">crude</td>
<td>adj. 粗糙的；粗鲁的；天然的，未加工的；粗略的 n. 天然的物质；原油</td>
</tr>
<tr>
<td style="text-align:left">tasteless</td>
<td><em>adj.</em> 无味的；味道差的；乏味的 无判断力、鉴赏力等的，举止粗俗的 不雅致的；庸俗的；不得体的</td>
</tr>
<tr>
<td style="text-align:left">observant</td>
<td><em>adj.</em> 善于观察的;观察力敏锐的 严守教规的; /əb’zɜːv(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">brag</td>
<td><em>vt. &amp; vi.</em> 自夸, 吹嘘</td>
</tr>
<tr>
<td style="text-align:left">Marcella</td>
<td>n. 凹凸纹细布；玛塞拉（女名）; /mɑ:’selə/</td>
</tr>
<tr>
<td style="text-align:left">overstatement</td>
<td><em>n.</em> 大话</td>
</tr>
<tr>
<td style="text-align:left">vague</td>
<td>adj. 不明确的；含糊的；模糊的；暧昧的</td>
</tr>
<tr>
<td style="text-align:left">befuddle</td>
<td>vt. 使迷惑；使昏沉; /bɪ’fʌd(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">hesitant</td>
<td>adj. 踌躇的；迟疑的；犹豫不定的; /‘hezɪt(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">keen</td>
<td><em>adj.</em> 锋利的 热衷的，热心的，渴望(做某事) 激烈的，紧张的 良好的；敏锐的，敏捷的</td>
</tr>
<tr>
<td style="text-align:left">resentment</td>
<td><em>n.</em> (因受虐待而)愤恨,不满,怨恨; /rɪ’zentm(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">abusive</td>
<td><em>adj.</em> 被滥用的，被误用的，被妄用的 虐待的；凌辱的；糟蹋的 骂人的, 攻击性的 毁谤的 舞弊的；腐败的 &lt;废&gt;骗人的；欺骗性的，欺诈性的 <em>adv.</em> 滥用地；虐待地；攻击性地；毁谤地；欺骗性地 <em>n.</em> 滥用；虐待；攻击；毁谤；欺骗</td>
</tr>
<tr>
<td style="text-align:left">prudent</td>
<td>adj. 谨慎的；节俭的；精明的</td>
</tr>
<tr>
<td style="text-align:left">Rosemary</td>
<td><em>n.</em> &lt;植&gt;迷迭香; /‘rəʊzm(ə)rɪ/</td>
</tr>
<tr>
<td style="text-align:left">unstated</td>
<td>adj. 未声明的；未明确说明的</td>
</tr>
<tr>
<td style="text-align:left">quiche</td>
<td><em>n.</em> 乳蛋饼; /ki:ʃ/</td>
</tr>
<tr>
<td style="text-align:left">yucky</td>
<td>令人讨厌的; /‘jʌkɪ/</td>
</tr>
<tr>
<td style="text-align:left">rotten</td>
<td><em>adj.</em> 腐烂的；腐朽的 道德败坏的 极坏的；极讨厌的</td>
</tr>
<tr>
<td style="text-align:left">assure</td>
<td>vt. 保证；担保；使确信；弄清楚</td>
</tr>
<tr>
<td style="text-align:left">spectator</td>
<td><em>n.</em> 观众, 旁观者</td>
</tr>
<tr>
<td style="text-align:left">headline</td>
<td><em>n.</em> 大字标题 新闻提要</td>
</tr>
<tr>
<td style="text-align:left">account for</td>
<td>对…负有责任；对…做出解释；说明……的原因</td>
</tr>
<tr>
<td style="text-align:left">distract</td>
<td>vt. 转移；分心</td>
</tr>
<tr>
<td style="text-align:left">clear-eyed</td>
<td><em>adj.</em> 视力好的,目光明亮的,头脑清晰的</td>
</tr>
<tr>
<td style="text-align:left">penetrating</td>
<td><em>adj.</em> 敏锐的，有洞察力的；聪明的 响亮的 <em>adv.</em> 敏锐地，响亮地; /‘penɪtreɪtɪŋ/</td>
</tr>
<tr>
<td style="text-align:left">pointed</td>
<td><em>adj.</em> 尖的 明显的，直截了当的 (言语)尖锐的；犀利的 <em>adv.</em> 尖地；明显地 <em>n.</em> 尖角；尖锐</td>
</tr>
<tr>
<td style="text-align:left">coarse</td>
<td>adj. 粗糙的；下等的；粗俗的; /kɔːs/</td>
</tr>
<tr>
<td style="text-align:left">vulgar</td>
<td>adj. 粗俗的；通俗的；本土的 n. [古]平民，百姓; /‘vʌlgə/</td>
</tr>
<tr>
<td style="text-align:left">conversational</td>
<td><em>adj.</em> 谈话的,会话的 健谈的,善于辞令的 口语的,适合于会话的</td>
</tr>
<tr>
<td style="text-align:left">appetite</td>
<td><em>n.</em> 欲望 胃口, 食欲</td>
</tr>
<tr>
<td style="text-align:left">discerning</td>
<td><em>adj.</em> 有识别力的;有眼力的;有洞察力的</td>
</tr>
<tr>
<td style="text-align:left">discern</td>
<td>vt. 识别；领悟，认识 vi. 看清楚，辨别</td>
</tr>
<tr>
<td style="text-align:left">incisive</td>
<td>adj. 敏锐的；深刻的；锋利的</td>
</tr>
<tr>
<td style="text-align:left">crass</td>
<td>adj. 非常的；愚钝的；粗鲁的</td>
</tr>
<tr>
<td style="text-align:left">colloquial</td>
<td><em>adj.</em> 口语的，健谈的, 会话的; /kə’ləʊkwɪəl/</td>
</tr>
<tr>
<td style="text-align:left">judicious</td>
<td><em>adj.</em> 明智的;明断的; /dʒʊ’dɪʃəs/</td>
</tr>
<tr>
<td style="text-align:left">tactless</td>
<td>adj. 不机智的；不老练的；笨拙；低情商;  /‘tæktlɪs/</td>
</tr>
<tr>
<td style="text-align:left">tacit</td>
<td><em>adj.</em> 缄默的,不说话的 暗示的,不言而喻的 不明言的,默许的 &lt;律&gt;由法律的效力而产生的,法定的</td>
</tr>
<tr>
<td style="text-align:left">prerogative</td>
<td><em>n.</em> 权利,特权 &lt;英史&gt;大主教法庭 &lt;美史&gt;总督委任组成的法庭; /prɪ’rɒgətɪv/</td>
</tr>
<tr>
<td style="text-align:left">whet</td>
<td><em>vt.</em> (在石头上)磨(刀、斧等) 引起,刺激(食欲、欲望、兴趣等) 增进某人的食欲；吊某人胃口；使人感兴趣; /wet/</td>
</tr>
<tr>
<td style="text-align:left">hyperbole</td>
<td><em>n.</em> &lt;语&gt;夸张法; /haɪ’pɜːbəlɪ/</td>
</tr>
<tr>
<td style="text-align:left">dialogue</td>
<td>n. 对话；意见交换 vi. 对话 vt. 用对话表达</td>
</tr>
<tr>
<td style="text-align:left">Aunt Myra</td>
<td>迈拉阿姨; /ˈmairə/ n. 迈拉（女子名）；米拉（小亚细亚西南部古国利西亚的城镇）</td>
</tr>
<tr>
<td style="text-align:left">solar</td>
<td>adj. 太阳的；日光的；利用太阳光的；与太阳相关的 n. 日光浴室</td>
</tr>
<tr>
<td style="text-align:left">attic</td>
<td>n. 阁楼 Attic adj. （古希腊）雅典(Athens)的</td>
</tr>
<tr>
<td style="text-align:left">hideous</td>
<td>adj. 可怕的；丑恶的</td>
</tr>
<tr>
<td style="text-align:left">comedian</td>
<td>n. 喜剧演员；滑稽人物</td>
</tr>
<tr>
<td style="text-align:left">routine</td>
<td>n. 例行公事；日常工作；程序 adj. 日常的；例行的</td>
</tr>
<tr>
<td style="text-align:left">off-color</td>
<td><em>adj.</em> 颜色不佳的,脸色不好的; tasteless</td>
</tr>
<tr>
<td style="text-align:left">salesclerk</td>
<td><em>n.</em> 店员; /‘seɪlzklɑːk/</td>
</tr>
<tr>
<td style="text-align:left">Sadie Hawkins Day</td>
<td>萨迪·霍金斯日 Sadie Hawkins Day是一个美国民间活动和，起源于Al Capp 的经典山地漫画 Li’l Abner（1934-1978），这启发了现实世界的萨迪·霍金斯事件。女性能要求男性约会或跳舞。/‘seidi/ /‘hɔ:kinz/</td>
</tr>
<tr>
<td style="text-align:left">vulgarity</td>
<td><em>n.</em> 庸俗，粗俗，粗鄙 粗野的行为；粗俗的话; /vʌl’gærɪtɪ/</td>
</tr>
<tr>
<td style="text-align:left">stutter</td>
<td><em>vt. &amp; vi.</em> 结结巴巴地说 不顺畅的工作, 时断时续地移动 <em>n.</em> 结巴, 口吃</td>
</tr>
<tr>
<td style="text-align:left">figurative</td>
<td><em>adj.</em> (用词上)形象的,比喻的 <em>adv.</em> 形象地,比喻地 <em>n.</em> 比喻; /‘fɪg(ə)rətɪv/</td>
</tr>
<tr>
<td style="text-align:left">entitle</td>
<td>vt. 称做…；定名为…；给…称号；使…有权利</td>
</tr>
<tr>
<td style="text-align:left">syllable</td>
<td><em>n.</em> 音节; /‘sɪləb(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">Meiosis</td>
<td><em>n.</em> 减数分裂,成熟分裂; /maɪ’əʊsɪs/</td>
</tr>
<tr>
<td style="text-align:left">Simile</td>
<td><em>n.</em> (使用like或as等词语的)明喻; /‘sɪmɪlɪ/</td>
</tr>
<tr>
<td style="text-align:left">metaphor</td>
<td><em>n.</em> 隐喻; /‘metəfə/</td>
</tr>
<tr>
<td style="text-align:left">euphemism</td>
<td><em>n.</em> 委婉语;委婉说法; /‘juːfəmɪz(ə)m/</td>
</tr>
<tr>
<td style="text-align:left">dysphemism</td>
<td>/‘disfimizəm/; <em>n.</em> 粗直语用法;粗直语</td>
</tr>
<tr>
<td style="text-align:left">slang</td>
<td>n. 俚语；行话 adj. 俚语的 vi. 用粗话骂 vt. 用俚语说</td>
</tr>
<tr>
<td style="text-align:left">obscenity</td>
<td><em>n.</em> 淫秽;猥亵;下流 淫秽的词语或行为; /əb’senɪtɪ/</td>
</tr>
<tr>
<td style="text-align:left">pepper</td>
<td><em>n.</em> 胡椒粉 辣椒 <em>vt.</em> 在…上撒胡椒粉；使布满 以…密击，接二连三地提问</td>
</tr>
<tr>
<td style="text-align:left">flabby</td>
<td>adj. 软弱的；松弛的；没气力的；优柔寡断的</td>
</tr>
<tr>
<td style="text-align:left">plod</td>
<td>vi. 沉重地走；辛勤工作 vt. 沉重缓慢地走 n. 沉重的步伐；辛勤工作</td>
</tr>
<tr>
<td style="text-align:left">oxymoron</td>
<td>n. [语]（修词中的）矛盾修饰法; /ˌɒksɪ’mɔːrɒn/</td>
</tr>
<tr>
<td style="text-align:left">onomatopoeia</td>
<td><em>n.</em> 拟声,拟声法; /ˌɒnə(ʊ)mætə’piːə/</td>
</tr>
<tr>
<td style="text-align:left">paronomasia</td>
<td><em>n.</em> 双关语,文字游戏; /ˌpærənə’meɪzɪə/</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-13-日"><a href="#2-月-13-日" class="headerlink" title="2 月 13 日"></a>2 月 13 日</h1><h2 id="chapter-23"><a href="#chapter-23" class="headerlink" title="chapter 23"></a>chapter 23</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">precinct</td>
<td><em>n.</em> 区域 城镇中有某种用途或受限制的地区；行人专用区 分区 界限，范围；周围地区，附近；郊区，近郊</td>
</tr>
<tr>
<td style="text-align:left">outreach</td>
<td>vt. 超越，伸出；超出…的范围 vi. 拓广，延伸 n. 扩大服务范围；延伸，拓广 adj. 扩大服务的</td>
</tr>
<tr>
<td style="text-align:left">therapist</td>
<td><em>n.</em> 治疗专家;特定疗法技师;临床医学家</td>
</tr>
<tr>
<td style="text-align:left">aye</td>
<td>n. 赞成票；投赞成票者 adv. 赞成</td>
</tr>
<tr>
<td style="text-align:left">proofread</td>
<td><em>vt.</em> 校对；校勘 <em>vi.</em> 做校对工作</td>
</tr>
<tr>
<td style="text-align:left">defend</td>
<td>vt. 防护；辩护 vi. 防守；保卫</td>
</tr>
<tr>
<td style="text-align:left">In terms of</td>
<td>就…而言,在…方面</td>
</tr>
<tr>
<td style="text-align:left">touchable</td>
<td><em>adj.</em> 可触的,可食用的</td>
</tr>
<tr>
<td style="text-align:left">mayoral</td>
<td><em>adj.</em> 市长的</td>
</tr>
<tr>
<td style="text-align:left">malfunction</td>
<td><em>n.</em> 故障, 障碍; /mæl’fʌŋ(k)ʃ(ə)n/</td>
</tr>
<tr>
<td style="text-align:left">demonstrate</td>
<td><em>vi.</em> 举行示威游行(或集会) <em>vt.</em> 说明, 演示 论证, 证明 显示, 表露</td>
</tr>
<tr>
<td style="text-align:left">overdose</td>
<td><em>vt.</em> 使…用药过量 <em>n.</em> 过量用药</td>
</tr>
<tr>
<td style="text-align:left">dosage</td>
<td>n. 剂量，用量</td>
</tr>
<tr>
<td style="text-align:left">milkweed</td>
<td><em>n.</em> 乳草属植物</td>
</tr>
<tr>
<td style="text-align:left">wart</td>
<td><em>n.</em> 疣,肉赘,瘊子 &lt;植&gt;树瘤 缺点; /wɔːt/</td>
</tr>
<tr>
<td style="text-align:left">healing</td>
<td>adj. 能治愈的 n. 康复 v. 治疗（heal的现在分词）</td>
</tr>
<tr>
<td style="text-align:left">counterfeit</td>
<td><em>n.</em> 仿制品, 伪造物; /‘kaʊntəfɪt/</td>
</tr>
<tr>
<td style="text-align:left">material</td>
<td><em>n.</em> 材料，原料 衣料 素材，资料 <em>adj.</em> 物质的；身体的；肉体的 重要的，重大的</td>
</tr>
<tr>
<td style="text-align:left">ameliorate</td>
<td><em>vt.</em> &lt;正,夸&gt;(使)改善,改进</td>
</tr>
<tr>
<td style="text-align:left">potent</td>
<td>adj. 有效的；强有力的，有权势的；有说服力的</td>
</tr>
<tr>
<td style="text-align:left">spurious</td>
<td>adj. 假的；伪造的；欺骗的; /‘spjʊərɪəs/</td>
</tr>
<tr>
<td style="text-align:left">haphazard</td>
<td><em>adj.</em> 偶然的, 随意的, 无计划的; /hæp’hæzəd/</td>
</tr>
<tr>
<td style="text-align:left">negate</td>
<td><em>vt.</em> 取消，使无效 否定；否认</td>
</tr>
<tr>
<td style="text-align:left">rigorous</td>
<td><em>adj.</em> 严密的；缜密的 严格的，严厉的</td>
</tr>
<tr>
<td style="text-align:left">therapeutic</td>
<td><em>adj.</em> 治疗(学)的;疗法的 对身心健康有益的; /ˌθerə’pjuːtɪk/</td>
</tr>
<tr>
<td style="text-align:left">intangible</td>
<td><em>adj.</em> 难以捉摸的, 难以理解的, 无法确定的 &lt;商&gt;(指企业资产)无形的</td>
</tr>
<tr>
<td style="text-align:left">assent</td>
<td>vi. 赞成；同意 n. 赞成；同意</td>
</tr>
<tr>
<td style="text-align:left">incontrovertible</td>
<td><em>adj.</em> 无可辩驳的, 不容置疑的; /ˌɪnkɒntrə’vɜːtɪb(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">mow</td>
<td>n. 草堆；皱眉；谷堆 vt. 割草；收割庄稼 vi. 割草；收割庄稼; /məʊ/</td>
</tr>
<tr>
<td style="text-align:left">lawn</td>
<td>n. 草坪；草地; /lɔːn/</td>
</tr>
<tr>
<td style="text-align:left">zoe</td>
<td>n. 生命; /zəui/</td>
</tr>
<tr>
<td style="text-align:left">diagnostic</td>
<td><em>adj.</em> 诊断的, 判断的; /daɪəg’nɒstɪk/</td>
</tr>
<tr>
<td style="text-align:left">slum</td>
<td>vi. （为猎奇或救济等）去贫民窟 n. 贫民窟；陋巷；[口]脏乱的地方</td>
</tr>
<tr>
<td style="text-align:left">grip</td>
<td><em>n.</em> 紧握，抓牢 掌握，控制 理解力，控制力 握法，手法 发夹；把手 <em>vt. &amp; vi.</em> 紧握，抓紧 吸引，引起</td>
</tr>
<tr>
<td style="text-align:left">spook</td>
<td><em>n.</em> 鬼 <em>vt.</em> 吓；吓唬</td>
</tr>
<tr>
<td style="text-align:left">defendant</td>
<td><em>n.</em> 被告</td>
</tr>
<tr>
<td style="text-align:left">prosecution</td>
<td><em>n.</em> 起诉, 诉讼 原告; /prɒsɪ’kjuːʃ(ə)n/</td>
</tr>
<tr>
<td style="text-align:left">snake oil</td>
<td>蛇油；骗人的万灵油</td>
</tr>
<tr>
<td style="text-align:left">phony</td>
<td><em>adj.</em> &lt;口&gt;假的；欺骗的 <em>n.</em> &lt;口&gt;赝品；骗人的东西 骗子</td>
</tr>
<tr>
<td style="text-align:left">tuition</td>
<td><em>n.</em> 学费 课程讲授</td>
</tr>
<tr>
<td style="text-align:left">wreck</td>
<td>n. 失事；残骸；破坏；[口]失去健康的人 vt. 破坏；使失事；拆毁 vi. 失事；营救失事船只</td>
</tr>
<tr>
<td style="text-align:left">refusal</td>
<td>n. 拒绝；优先取舍权；推却；取舍权</td>
</tr>
<tr>
<td style="text-align:left">consent</td>
<td><em>n.</em> 准许，同意，赞成 <em>vi.</em> 同意；赞成</td>
</tr>
<tr>
<td style="text-align:left">disregard</td>
<td><em>vt.</em> 不顾, 不理会, 无视 <em>n.</em> 漠视, 忽视, 蔑视</td>
</tr>
<tr>
<td style="text-align:left">sway</td>
<td>vt. 使摇动；统治；影响 vi. 摇摆；影响 n. 摇摆；统治；影响</td>
</tr>
<tr>
<td style="text-align:left">nonexistent</td>
<td><em>adj.</em> 不存在的</td>
</tr>
<tr>
<td style="text-align:left">wary</td>
<td>adj. 机警的；谨慎的；惟恐的；考虑周到的; /‘weərɪ/</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-24"><a href="#chapter-24" class="headerlink" title="chapter 24"></a>chapter 24</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">shortchange</td>
<td><em>vt.</em> (找钱时故意)少找零头,欺骗</td>
</tr>
<tr>
<td style="text-align:left">embrace</td>
<td><em>vt. &amp; vi.</em> 拥抱 <em>vt.</em> 包括；包含 接受 信奉，皈依 <em>n.</em> 拥抱，怀抱; /ɪm’breɪs/</td>
</tr>
<tr>
<td style="text-align:left">feud</td>
<td>n. 不和；封地；争执 vi. 长期不和；长期争斗; /fjuːd/</td>
</tr>
<tr>
<td style="text-align:left">weigh</td>
<td><em>vt. &amp; vi.</em> 称…的重量 <em>link v.</em> 重达 <em>vt.</em> 权衡；考虑</td>
</tr>
<tr>
<td style="text-align:left">defiance</td>
<td>n. 蔑视；挑战；反抗; /dɪ’faɪəns/</td>
</tr>
<tr>
<td style="text-align:left">flip</td>
<td>vt. 轻击；掷 vi. 用指轻弹；蹦跳 adj. 无礼的；轻率的 n. 筋斗；弹; /flɪp/</td>
</tr>
<tr>
<td style="text-align:left">deceit</td>
<td>n. 欺骗；谎言；欺诈手段; /dɪ’siːt/</td>
</tr>
<tr>
<td style="text-align:left">tomb</td>
<td><em>n.</em> 墓穴; /tuːm/</td>
</tr>
<tr>
<td style="text-align:left">haunt</td>
<td><em>vt.</em> 经常出没于 缠绕, 萦绕 <em>n.</em> 某人常去的地方; /hɔːnt/</td>
</tr>
<tr>
<td style="text-align:left">volcano</td>
<td><em>n.</em> 火山</td>
</tr>
<tr>
<td style="text-align:left">quarrelsome</td>
<td><em>adj.</em> &lt;贬&gt;(人)好争吵的,动辄争吵的</td>
</tr>
<tr>
<td style="text-align:left">fury</td>
<td>n. 狂怒；暴怒；激怒者</td>
</tr>
<tr>
<td style="text-align:left">startle</td>
<td>vt. 使吓一跳；使惊奇 vi. 惊吓；惊跳；惊奇 n. 惊愕；惊恐</td>
</tr>
<tr>
<td style="text-align:left">vietnam</td>
<td>n. 越南（南亚国家）; /ˌvjet’næm/</td>
</tr>
<tr>
<td style="text-align:left">psychiatric</td>
<td><em>adj.</em> 精神病学的;治疗精神病的; /ˌsaɪkɪˈætrɪk/</td>
</tr>
<tr>
<td style="text-align:left">giddy</td>
<td>adj. 头晕的；眼花的；令人眼花缭乱的；轻浮的 vt. 使晕眩；使眼花缭乱 vi. 眩晕；眼花</td>
</tr>
<tr>
<td style="text-align:left">prudent</td>
<td>adj. 谨慎的；节俭的；精明的</td>
</tr>
<tr>
<td style="text-align:left">pacify</td>
<td>vt. 使平静；安慰；平定</td>
</tr>
<tr>
<td style="text-align:left">soothe</td>
<td>vt. 安慰；使平静；缓和 vi. 起抚慰作用; /suːð/</td>
</tr>
<tr>
<td style="text-align:left">concession</td>
<td><em>n.</em> 承认, 允许 妥协, 让步 特许权; /kən’seʃ(ə)n/</td>
</tr>
<tr>
<td style="text-align:left">slyness</td>
<td>n. 狡猾；诡秘; /‘slainis/</td>
</tr>
<tr>
<td style="text-align:left">cunning</td>
<td>adj. 狡猾的；可爱的；巧妙的 n. 狡猾</td>
</tr>
<tr>
<td style="text-align:left">trickery</td>
<td><em>n.</em> 欺骗,哄骗,耍花招; /‘trɪk(ə)rɪ/</td>
</tr>
<tr>
<td style="text-align:left">courteous</td>
<td><em>adj.</em> 彬彬有礼的; 客气的; /‘kɜːtjəs/</td>
</tr>
<tr>
<td style="text-align:left">malicious</td>
<td><em>adj.</em> 恶意的, 恶毒的; /mə’lɪʃəs/</td>
</tr>
<tr>
<td style="text-align:left">spiteful</td>
<td>adj. 怀恨的，恶意的</td>
</tr>
<tr>
<td style="text-align:left">a band of</td>
<td>一串</td>
</tr>
<tr>
<td style="text-align:left">poker</td>
<td>n. 纸牌戏；（用棍）戳的人；拨火棍 vt. 烙制</td>
</tr>
<tr>
<td style="text-align:left">truck</td>
<td>n. 卡车；手推车；交易 vi. 以物易物；驾驶卡车 vt. 以卡车运输；交易 adj. （美）运货汽车的</td>
</tr>
<tr>
<td style="text-align:left">cruise</td>
<td>vi. 巡航，巡游；漫游 vt. 巡航，巡游；漫游 n. 巡航，巡游；乘船游览; /kruːz/</td>
</tr>
<tr>
<td style="text-align:left">altercation</td>
<td>n. 争执</td>
</tr>
<tr>
<td style="text-align:left">circumspect</td>
<td><em>adj.</em> 谨慎小心的,周到的</td>
</tr>
<tr>
<td style="text-align:left">placate</td>
<td><em>vt.</em> 安抚,抚慰,使平静; /plə’keɪt/</td>
</tr>
<tr>
<td style="text-align:left">tirade</td>
<td>n. 激烈的长篇演说; /taɪ’reɪd/</td>
</tr>
<tr>
<td style="text-align:left">guile</td>
<td><em>n.</em> 奸猾,狡诈 背信弃义,欺骗; /gaɪl/</td>
</tr>
<tr>
<td style="text-align:left">volatile</td>
<td>adj. 爆炸性的；不稳定的；挥发性的；反覆无常的 n. 挥发物；有翅的动物</td>
</tr>
<tr>
<td style="text-align:left">deference</td>
<td>n. 顺从; /‘def(ə)r(ə)ns/</td>
</tr>
<tr>
<td style="text-align:left">malevolent</td>
<td><em>adj.</em> 有恶意的;恶毒的; /mə’lev(ə)l(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">pugnacious</td>
<td><em>adj.</em> 好战的;好斗的;好挑衅的; /pʌg’neɪʃəs/</td>
</tr>
<tr>
<td style="text-align:left">impassive</td>
<td><em>adj.</em> 无动于衷的, 无表情的</td>
</tr>
<tr>
<td style="text-align:left">rehabilitation</td>
<td><em>n.</em> 修复；复兴 复职；恢复名誉，昭雪 (病残人的)康复，更新；(罪犯的)改过迁善</td>
</tr>
<tr>
<td style="text-align:left">ferocious</td>
<td><em>adj.</em> 凶猛的, 残忍的, 凶暴的; /fə’rəʊʃəs/</td>
</tr>
<tr>
<td style="text-align:left">instinct</td>
<td>n. 本能，直觉；天性 adj. 充满着的</td>
</tr>
<tr>
<td style="text-align:left">spiteful</td>
<td>adj. 怀恨的，恶意的</td>
</tr>
<tr>
<td style="text-align:left">Good-natured</td>
<td><em>adj.</em> 和蔼的,和善的</td>
</tr>
<tr>
<td style="text-align:left">pose</td>
<td>v. 摆姿势；装模作样；提出…讨论；造成，形成 n. 姿势，姿态；装模作样 vi. 摆姿势；佯装；矫揉造作</td>
</tr>
<tr>
<td style="text-align:left">prim</td>
<td>adj. 拘谨的；整洁的；呆板的 vt. 使显得一本正经；把…打扮得整整齐齐 vi. 显得一本正经</td>
</tr>
<tr>
<td style="text-align:left">sign</td>
<td>n. 符号；记号；迹象；手势 vi. 签名；签署 vt. 签署；示意</td>
</tr>
<tr>
<td style="text-align:left">hawk, hawkish</td>
<td><em>n.</em> 鹰 鹰派人物, 主战派人物 <em>vt.</em> 沿街叫卖</td>
</tr>
<tr>
<td style="text-align:left">dove, dovish</td>
<td><em>n.</em> 鸽 和平的象征</td>
</tr>
<tr>
<td style="text-align:left">Head-on</td>
<td><em>adj.</em> 正面的</td>
</tr>
<tr>
<td style="text-align:left">neat</td>
<td>adj. 整洁的；未搀水的；优雅的；灵巧的；齐整的；平滑的</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-14-日"><a href="#2-月-14-日" class="headerlink" title="2 月 14 日"></a>2 月 14 日</h1><h2 id="chapter-25"><a href="#chapter-25" class="headerlink" title="chapter 25"></a>chapter 25</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">wardrobe</td>
<td>n. 衣柜；全部戏装；行头; /‘wɔːdrəʊb/</td>
</tr>
<tr>
<td style="text-align:left">impulsive</td>
<td><em>adj.</em> (指人或人的行为)冲动的,易冲动的 <em>adv.</em> 易冲动地 <em>n.</em> 易冲动</td>
</tr>
<tr>
<td style="text-align:left">therapist</td>
<td><em>n.</em> 治疗专家;特定疗法技师;临床医学家; /‘θerəpɪst/</td>
</tr>
<tr>
<td style="text-align:left">pillow</td>
<td><em>n.</em> 枕头 用作枕头的东西</td>
</tr>
<tr>
<td style="text-align:left">homicide</td>
<td>n. 杀人；杀人犯; /‘hɒmɪsaɪd/</td>
</tr>
<tr>
<td style="text-align:left">gobble</td>
<td><em>vt. &amp; vi.</em> 狼吞虎咽地吃 <em>vi.</em> (火鸡)咯咯地叫,发出似火鸡的叫声 赶快吃 很快耗掉(尤指金钱) 吞并较小的公司等</td>
</tr>
<tr>
<td style="text-align:left">hypnotic</td>
<td>adj. 催眠的，催眠术的；易于催眠的 n. 安眠药；催眠状态的人; /hɪp’nɒtɪk/</td>
</tr>
<tr>
<td style="text-align:left">trance</td>
<td>n. 恍惚；出神；着迷，入迷 vt. 使恍惚；使发呆; /trɑːns/</td>
</tr>
<tr>
<td style="text-align:left">bunny</td>
<td><em>n.</em> 兔子</td>
</tr>
<tr>
<td style="text-align:left">imitate</td>
<td><em>vt.</em> 模仿 把…作为例子</td>
</tr>
<tr>
<td style="text-align:left">Deja vu</td>
<td>似曾相识的感觉；[心]记忆幻觉; /ˏdeɪʒɑː ˈvjuː/</td>
</tr>
<tr>
<td style="text-align:left">sensation</td>
<td><em>n.</em> 感觉, 感受 知觉 激动, 轰动</td>
</tr>
<tr>
<td style="text-align:left">comet</td>
<td>n. 彗星</td>
</tr>
<tr>
<td style="text-align:left">vow</td>
<td><em>n.</em> 誓言 郑重宣布；许愿 <em>vt. &amp; vi.</em> 起誓，发誓 郑重宣告</td>
</tr>
<tr>
<td style="text-align:left">bring on</td>
<td>引起，使发展，使出现，提出</td>
</tr>
<tr>
<td style="text-align:left">remedy</td>
<td><em>n.</em> 药品, 治疗法 补救办法, 纠正办法</td>
</tr>
<tr>
<td style="text-align:left">inconsistent</td>
<td><em>adj.</em> (思想、意见等)不一致的, 不协调的 易变的, 不稳定的, 反复无常的; /ɪnkən’sɪst(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">induce</td>
<td>vt. 引诱；[电]感应；[医]诱导；引起</td>
</tr>
<tr>
<td style="text-align:left">capricious</td>
<td><em>adj.</em> 无定见的,变幻莫测的; /kə’prɪʃəs/</td>
</tr>
<tr>
<td style="text-align:left">rectify</td>
<td>vt. 改正；[电]整流；[化]精馏</td>
</tr>
<tr>
<td style="text-align:left">discrepancy</td>
<td><em>n.</em> 差异，不符合(之处)；不一致(之处)</td>
</tr>
<tr>
<td style="text-align:left">catharsis</td>
<td><em>n.</em> 宣泄，情绪的抒发；导泻，通便；感情(受艺术的作用而起的)净化; /kə’θɑːsɪs/</td>
</tr>
<tr>
<td style="text-align:left">serene</td>
<td>adj. 平静的；清澈的；晴朗的；安详的 n. 平静；晴朗 vt. 使平静; /sɪ’riːn/</td>
</tr>
<tr>
<td style="text-align:left">ephemeral</td>
<td><em>adj.</em> 短暂的,瞬息的; /ɪ’fem(ə)r(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">retract</td>
<td>vt. 缩回；缩进；取消 vi. 缩回；缩进；撤消 n. 收缩核</td>
</tr>
<tr>
<td style="text-align:left">resolution</td>
<td><em>n.</em> 正式决定，决议 决心，决定 坚决；坚定；坚毅 解决，解答 分辨力，分辨率[度]</td>
</tr>
<tr>
<td style="text-align:left">resolve</td>
<td>vt. 决定；使…分解；决心要做…；溶解 vi. 决心；解决；分解 n. 坚决；决定要做的事</td>
</tr>
<tr>
<td style="text-align:left">baseball</td>
<td>n. 棒球运动；棒球</td>
</tr>
<tr>
<td style="text-align:left">brisk</td>
<td>adj. 敏锐的，活泼的，轻快的；凛冽的 vi. 活跃起来；变得轻快 vt. 使……活泼；使……轻快；使……兴旺</td>
</tr>
<tr>
<td style="text-align:left">lifetime</td>
<td>n. 一生；寿命；终生；使用期 adj. 一生的；终身的</td>
</tr>
<tr>
<td style="text-align:left">superstition</td>
<td><em>n.</em> 迷信, 迷信行为; /ˌsuːpə’stɪʃ(ə)n/</td>
</tr>
<tr>
<td style="text-align:left">Sir Walter Scott</td>
<td>沃尔特·司各特 Walter Scott  沃尔特·司各特爵士，第一代准男爵（Sir Walter Scott, 1st Baronet，1771年8月15日－1832年9月21日），18世纪末苏格兰著名历史小说家及诗人。</td>
</tr>
<tr>
<td style="text-align:left">recur</td>
<td>vi. 重现；复发；再来；采用；循环；递归                   </td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-26"><a href="#chapter-26" class="headerlink" title="chapter 26"></a>chapter 26</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pint</td>
<td>n. 品脱；一品脱的量；一品脱牛奶或啤酒; /paɪnt/</td>
</tr>
<tr>
<td style="text-align:left">dough</td>
<td>n. 生面团；[美俚]金钱; dəʊ/</td>
</tr>
<tr>
<td style="text-align:left">self-indulgent</td>
<td><em>adj.</em> &lt;贬&gt;放纵自己的</td>
</tr>
<tr>
<td style="text-align:left">indulgent</td>
<td><em>adj.</em> 放纵的,纵容的 <em>adv.</em> 放纵地,纵容地; /ɪn’dʌldʒ(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">absurd</td>
<td>adj. 荒谬的；可笑的 n. 荒诞；荒诞作品</td>
</tr>
<tr>
<td style="text-align:left">shrewd</td>
<td><em>adj.</em> 机灵的, 精明的</td>
</tr>
<tr>
<td style="text-align:left">Denise</td>
<td>n. 丹尼斯（女子名）</td>
</tr>
<tr>
<td style="text-align:left">distaste</td>
<td>n. 厌恶；讨厌 vt. 厌恶；不喜欢 vi. [废]不喜欢</td>
</tr>
<tr>
<td style="text-align:left">wonton</td>
<td><em>n.</em> 馄饨</td>
</tr>
<tr>
<td style="text-align:left">meatball</td>
<td><em>n.</em> 肉丸</td>
</tr>
<tr>
<td style="text-align:left">Pennsylvania</td>
<td><em>n.</em> 宾夕法尼亚州（美国州名）; /pensilˈveinjə,-niə/</td>
</tr>
<tr>
<td style="text-align:left">Dutch</td>
<td><em>adj.</em> 荷兰人的;荷兰的;荷兰语的 <em>n.</em> 荷兰语 荷兰人 酒后之勇 各付各的账；平摊费用；实行AA制</td>
</tr>
<tr>
<td style="text-align:left">shoofly</td>
<td>n. 摇动木马；派饼的一种; /‘ʃuːflaɪ/</td>
</tr>
<tr>
<td style="text-align:left">lengthy</td>
<td>adj. 漫长的，冗长的；啰唆的; /‘leŋθɪ/</td>
</tr>
<tr>
<td style="text-align:left">dragnet</td>
<td><em>n.</em> 拖网,搜索网</td>
</tr>
<tr>
<td style="text-align:left">sergeant</td>
<td>n. 军士；警察小队长；海军陆战队中士；高等律师; /‘sɑːdʒ(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">Shetland</td>
<td>n. 设得兰群岛（位于苏格兰东部的一群岛）; /‘ʃetlənd/</td>
</tr>
<tr>
<td style="text-align:left">pony</td>
<td>n. 小型马；矮种马 adj. 小型的；每日摘要的 vt. 付清 vi. 付清</td>
</tr>
<tr>
<td style="text-align:left">sturdy</td>
<td>adj. 强健的；坚定的；健全的 n. [医]羊晕倒病</td>
</tr>
<tr>
<td style="text-align:left">delicate</td>
<td>adj. 微妙的；易碎的；清淡可口的；柔和的；精美的，雅致的；纤弱的</td>
</tr>
<tr>
<td style="text-align:left">hardhearted</td>
<td><em>adj.</em> 无情的;冷酷的</td>
</tr>
<tr>
<td style="text-align:left">notorious</td>
<td><em>adj.</em> 臭名昭著的, 声名狼藉的; /nə(ʊ)’tɔːrɪəs/</td>
</tr>
<tr>
<td style="text-align:left">stubborn</td>
<td><em>adj.</em> 顽固的；固执的 难以移动、去除、医治等</td>
</tr>
<tr>
<td style="text-align:left">mule</td>
<td><em>n.</em> 骡; 骡子 〈口〉顽固的人 拖鞋</td>
</tr>
<tr>
<td style="text-align:left">drowsiness</td>
<td><em>n.</em> 睡意;假寐;困倦; /‘drauzinis/</td>
</tr>
<tr>
<td style="text-align:left">unruly</td>
<td><em>adj.</em> 蛮横的；任性的；难驾驭的；难控制的；不守规矩的 难固定的, 难以保持平整的</td>
</tr>
<tr>
<td style="text-align:left">ruly</td>
<td>adj. 有秩序的；有条不紊的</td>
</tr>
<tr>
<td style="text-align:left">self-denying</td>
<td><em>adj.</em> 克己的,献身的</td>
</tr>
<tr>
<td style="text-align:left">abstruse</td>
<td>adj. 深奥的；难懂的; /əb’struːs/</td>
</tr>
<tr>
<td style="text-align:left">aversion</td>
<td><em>n.</em> 厌恶，讨厌，反感 讨厌的人或东西 &lt;废&gt;转变方向；背离</td>
</tr>
<tr>
<td style="text-align:left">eclectic</td>
<td><em>adj.</em> 兼收并蓄的；不拘一格的；折中的，折中主义的  <em>n.</em> 兼收并蓄的人；折中派的人，折中主义者; /ɪ’klektɪk/</td>
</tr>
<tr>
<td style="text-align:left">extraneous</td>
<td><em>adj.</em> 外部的,外来的 无关的,不相干的,无联系的; /ɪk’streɪnɪəs/</td>
</tr>
<tr>
<td style="text-align:left">abstemious</td>
<td><em>adj.</em> 适中的,(尤指在吃饭、饮酒方面)有节制的 (生活等)以节制为特点的 (饮食等)简单而有节制的；节俭的，节省的 <em>adv.</em> 适中地,有节制地 <em>n.</em> 适中,有节制; /əb’stiːmɪəs/</td>
</tr>
<tr>
<td style="text-align:left">intractable</td>
<td><em>adj.</em> 难对付的，难解决的 倔强的；难管教的</td>
</tr>
<tr>
<td style="text-align:left">diminutive</td>
<td><em>adj.</em> 小得出奇的,特小的 (指后缀)表示小的 <em>adv.</em> 特小地,小型地 <em>n.</em> 微小 昵称,爱称</td>
</tr>
<tr>
<td style="text-align:left">cardinal</td>
<td>adj. 主要的，基本的；深红色的 n. 红衣主教；枢机主教；鲜红色; /‘kɑːd(ɪ)n(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">chickadee</td>
<td><em>n.</em> (美洲所产的)山雀; /‘tʃɪkədiː/</td>
</tr>
<tr>
<td style="text-align:left">pastor</td>
<td>n. 牧师 vt. 作……的牧师</td>
</tr>
<tr>
<td style="text-align:left">Hawkins</td>
<td>n. 霍金斯（姓氏）; /‘hɔ:kinz/</td>
</tr>
<tr>
<td style="text-align:left">Scotch</td>
<td>vi. 弄伤；制止转动；扑灭；镇压 n. 刻痕</td>
</tr>
<tr>
<td style="text-align:left">tape</td>
<td><em>n.</em> 带子 录音磁带；录像带 <em>vt.</em> 用带子捆起来 <em>vt. &amp; vi.</em> 录音</td>
</tr>
<tr>
<td style="text-align:left">quantum</td>
<td><em>n.</em> &lt;物&gt;量子 定量;总量 剧增；突飞猛进；重大进展</td>
</tr>
<tr>
<td style="text-align:left">vaughn</td>
<td>n. 沃恩（姓氏）; /vɔ:n/</td>
</tr>
<tr>
<td style="text-align:left">Yasmine</td>
<td>亚斯敏</td>
</tr>
<tr>
<td style="text-align:left">damp</td>
<td>vt. 使潮湿；使沮丧，抑制；使阻尼 vi. 减幅，阻尼；变潮湿 n. 潮湿，湿气 adj. 潮湿的</td>
</tr>
<tr>
<td style="text-align:left">mildew</td>
<td><em>n.</em> 霉,霉病 <em>vt. &amp; vi.</em> (使)发霉,(使)长霉; /‘mɪldjuː/</td>
</tr>
<tr>
<td style="text-align:left">fungus</td>
<td><em>n.</em> 真菌; /‘fʌŋgəs/</td>
</tr>
<tr>
<td style="text-align:left">bonsai</td>
<td>n. [日]盆栽; /‘bɒnsaɪ/</td>
</tr>
<tr>
<td style="text-align:left">porch</td>
<td>n. 门廊；走廊</td>
</tr>
<tr>
<td style="text-align:left">dollhouse</td>
<td><em>n.</em> 玩具屋,儿童游乐室</td>
</tr>
<tr>
<td style="text-align:left">retard</td>
<td><em>vt.</em> 使减速；妨碍；阻止 推迟，延迟 &lt;机&gt;使(点火)延迟 <em>vi.</em> 减慢；受到阻滞 <em>n.</em> 减速；阻滞；延迟</td>
</tr>
<tr>
<td style="text-align:left">mosquito</td>
<td>n. 蚊子; /mɒ’skiːtəʊ/</td>
</tr>
<tr>
<td style="text-align:left">penguin</td>
<td>n. 企鹅；[美俚]空军地勤人员; /‘peŋgwɪn/</td>
</tr>
<tr>
<td style="text-align:left">extraterrestrial</td>
<td><em>adj.</em> 地球外的,地球大气圈外的 <em>n.</em> 外星人; /ˌekstrətə’restrɪəl/</td>
</tr>
<tr>
<td style="text-align:left">terrestrial</td>
<td><em>adj.</em> 地球的 陆地的;陆上的;陆栖的;陆生的 人间的;尘世的 &lt;天&gt;类地行星的 <em>n.</em> 地球人;陆地生物</td>
</tr>
<tr>
<td style="text-align:left">squish</td>
<td>n. 咯吱声；挤扁 vt. 把…挤扁；压扁 vi. 发出嘎吱; /skwɪʃ/</td>
</tr>
<tr>
<td style="text-align:left">Jello</td>
<td>n. 凝胶物; /‘dʒeləu/</td>
</tr>
<tr>
<td style="text-align:left">psychiatric</td>
<td><em>adj.</em> 精神病学的;治疗精神病的</td>
</tr>
<tr>
<td style="text-align:left">flamingo</td>
<td>n. 火烈鸟; /flə’mɪŋgəʊ/</td>
</tr>
<tr>
<td style="text-align:left">opossum</td>
<td>n. [动]负鼠；[美口]装死; /ə’pɒs(ə)m/</td>
</tr>
<tr>
<td style="text-align:left">possum</td>
<td><em>n.</em> 负鼠 <em>vi.</em> 装死                                 </td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-15-日"><a href="#2-月-15-日" class="headerlink" title="2 月 15 日"></a>2 月 15 日</h1><h2 id="chapter-27"><a href="#chapter-27" class="headerlink" title="chapter 27"></a>chapter 27</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">magnitude</td>
<td><em>n.</em> 巨大; 重要性 〈天〉星等</td>
</tr>
<tr>
<td style="text-align:left">absurd</td>
<td>adj. 荒谬的；可笑的 n. 荒诞；荒诞作品</td>
</tr>
<tr>
<td style="text-align:left">rivalry</td>
<td>n. 竞争；竞赛；对抗; /‘raɪv(ə)lrɪ/</td>
</tr>
<tr>
<td style="text-align:left">saturate</td>
<td><em>vt.</em> 浸湿, 浸透 使…大量吸收或充满某物; /‘sætʃəreɪt/</td>
</tr>
<tr>
<td style="text-align:left">catholic</td>
<td>adj. 天主教的；宽宏大量的 n. 天主教徒；罗马天主教</td>
</tr>
<tr>
<td style="text-align:left">pope</td>
<td>n. 教皇，罗马教皇；权威，大师; /pəup/</td>
</tr>
<tr>
<td style="text-align:left">Catholicism</td>
<td><em>n.</em> 天主教; /kəˈθɔliˌsizəm/</td>
</tr>
<tr>
<td style="text-align:left">prom</td>
<td><em>n.</em> 正式舞会</td>
</tr>
<tr>
<td style="text-align:left">reelect</td>
<td>vt. 重选；改选</td>
</tr>
<tr>
<td style="text-align:left">patchwork</td>
<td><em>n.</em> 缝缀而成的各色布片;补缀的手工</td>
</tr>
<tr>
<td style="text-align:left">stitch</td>
<td>n. 针脚，线迹；一针 vt. 缝，缝合 vi. 缝，缝合</td>
</tr>
<tr>
<td style="text-align:left">footnote</td>
<td><em>n.</em> 脚注(列在一页末了的附注)</td>
</tr>
<tr>
<td style="text-align:left">bibliography</td>
<td><em>n.</em> (有关某一专题或某一作者的著作的)书目 书志学, 文献学; /ˌbɪblɪ’ɒgrəfɪ/</td>
</tr>
<tr>
<td style="text-align:left">splendor</td>
<td>n. 光彩；显赫；壮丽</td>
</tr>
<tr>
<td style="text-align:left">concert</td>
<td>n. 音乐会；和谐；一致 vt. 使协调；协同安排 vi. 协力；协调 adj. 音乐会用的；在音乐会上演出的</td>
</tr>
<tr>
<td style="text-align:left">arrogant</td>
<td>adj. 自大的，傲慢的</td>
</tr>
<tr>
<td style="text-align:left">inflate</td>
<td>vt. 使充气；使通货膨胀 vi. 膨胀；充气</td>
</tr>
<tr>
<td style="text-align:left">erudite</td>
<td>adj. 博学的；有学问的 n. 饱学之士; /‘erʊdaɪt/</td>
</tr>
<tr>
<td style="text-align:left">fever</td>
<td>n. 发烧，发热；狂热 vt. 使发烧；使狂热；使患热病 vi. 发烧；狂热；患热病</td>
</tr>
<tr>
<td style="text-align:left">fervor</td>
<td>n. 热情；热烈；炽热；热心</td>
</tr>
<tr>
<td style="text-align:left">engender</td>
<td><em>vt.</em> 产生(某形势或状况), 造成, 引起; /ɪn’dʒendə/</td>
</tr>
<tr>
<td style="text-align:left">laudable</td>
<td><em>adj.</em> 值得赞美的; /‘lɔːdəb(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">Painstaking</td>
<td><em>adj.</em> 极小心的；辛勤的，辛苦的</td>
</tr>
<tr>
<td style="text-align:left">pompous</td>
<td>adj. 浮夸的；爱炫耀的；自大的；华而不实的</td>
</tr>
<tr>
<td style="text-align:left">renown</td>
<td><em>n.</em> 名望; 声誉</td>
</tr>
<tr>
<td style="text-align:left">iconoclast</td>
<td><em>n.</em> 攻击传统观念的人 &lt;史&gt;反对崇拜圣像者; /aɪ’kɒnəklæst/</td>
</tr>
<tr>
<td style="text-align:left">archaic</td>
<td><em>adj.</em> 古时的,古代的,古老的 陈旧的, 已不通用的 古式的；古体的 古色古香的; /ɑː’keɪɪk/</td>
</tr>
<tr>
<td style="text-align:left">abstract</td>
<td>n. 抽象；摘要；抽象的概念 adj. 抽象的；深奥的 vt. 提取；摘要；使……抽象化 vi. 做摘要；写梗概</td>
</tr>
<tr>
<td style="text-align:left">cordless</td>
<td>n. 不用电线的 adj. 无线的（副词cordlessly）; /‘kɔːdlɪs/</td>
</tr>
<tr>
<td style="text-align:left">rotary</td>
<td><em>adj.</em> 旋转的, 转动的; /‘rəʊt(ə)rɪ/</td>
</tr>
<tr>
<td style="text-align:left">dial</td>
<td><em>n.</em> 钟(表)面；标度盘；拨号盘 <em>vt. &amp; vi.</em> 打电话，拨电话号码; /ˈdaiəl/</td>
</tr>
<tr>
<td style="text-align:left">pageant</td>
<td>n. 盛会；虚饰；游行；露天表演; /‘pædʒ(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">rant</td>
<td><em>vt. &amp; vi.</em> 夸夸其谈，大叫大嚷地以…说教 气愤地)大叫大嚷；不停地大声抱怨; /rænt/</td>
</tr>
<tr>
<td style="text-align:left">rave</td>
<td>n. 咆哮；胡言乱语；热烈赞美 vi. 咆哮；胡言乱语；狂骂 vt. 咆哮；语无伦次地说 adj. 赞扬的</td>
</tr>
<tr>
<td style="text-align:left">hostility</td>
<td><em>n.</em> 敌意, 敌对状态 战争行动, 战斗</td>
</tr>
<tr>
<td style="text-align:left">auditorium</td>
<td><em>n.</em> 观众席, 听众席 礼堂, 会堂; /ɔːdɪ’tɔːrɪəm/</td>
</tr>
<tr>
<td style="text-align:left">sweep</td>
<td>vt. 扫除；猛拉；掸去 vi. 扫，打扫；席卷；扫视；袭击 n. 打扫，扫除；范围；全胜</td>
</tr>
<tr>
<td style="text-align:left">heroine</td>
<td>n. 女英雄；女杰 adj. 英雄式的; /‘herəʊɪn/</td>
</tr>
<tr>
<td style="text-align:left">scholar</td>
<td>n. 学者；奖学金获得者; /‘skɒlə/</td>
</tr>
<tr>
<td style="text-align:left">stuffy</td>
<td>adj. 闷热的；不通气的；古板的</td>
</tr>
<tr>
<td style="text-align:left">dismiss</td>
<td>vt. 让…离开；开除；解散；解雇 vi. 解散</td>
</tr>
<tr>
<td style="text-align:left">controversy</td>
<td><em>n.</em> 争论；论战；辩论; /‘kɒntrəvɜːsɪ/</td>
</tr>
<tr>
<td style="text-align:left">approach</td>
<td><em>vt. &amp; vi.</em> 接近，走近，靠近 <em>vt.</em> 接洽，交涉；着手处理 <em>n.</em> 靠近，接近，临近 通路，入口，途径 方式，方法</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-28"><a href="#chapter-28" class="headerlink" title="chapter 28"></a>chapter 28</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">candlelit</td>
<td>adj. 点蜡烛的，烛光的，candlelit restaurant</td>
</tr>
<tr>
<td style="text-align:left">emcee</td>
<td><em>vt.</em> 担任…的主持人,主持 <em>n.</em> 司仪,主持人; /em’siː/</td>
</tr>
<tr>
<td style="text-align:left">argumentative</td>
<td><em>adj.</em> 好辩的,争论的</td>
</tr>
<tr>
<td style="text-align:left">sip</td>
<td>n. 抿；小口喝；[计]单列直插式组件 vi. 啜饮 vt. 啜</td>
</tr>
<tr>
<td style="text-align:left">vigor</td>
<td>n. 活力，精力</td>
</tr>
<tr>
<td style="text-align:left">apparent</td>
<td>adj. 显然的；表面上的</td>
</tr>
<tr>
<td style="text-align:left">malaria</td>
<td>n. 疟疾；瘴气; /mə’leərɪə/</td>
</tr>
<tr>
<td style="text-align:left">nausea</td>
<td><em>n.</em> 作呕;恶心;反胃</td>
</tr>
<tr>
<td style="text-align:left">phobia</td>
<td><em>n.</em> 恐惧, 厌恶; /‘fəʊbɪə/</td>
</tr>
<tr>
<td style="text-align:left">weary</td>
<td>adj. 疲倦的；厌烦的；令人厌烦的 vi. 厌烦；疲倦 vt. 使疲倦；使厌烦</td>
</tr>
<tr>
<td style="text-align:left">furious</td>
<td><em>adj.</em> 狂怒的, 暴怒的 强烈的, 激烈的</td>
</tr>
<tr>
<td style="text-align:left">toss</td>
<td>n. 投掷；摇荡；投掷的距离；掷币赌胜负 vt. 投掷；使…不安；突然抬起；使…上下摇动；与…掷币打赌 vi. 被乱扔；颠簸；辗转；掷钱币决定某事</td>
</tr>
<tr>
<td style="text-align:left">constitution</td>
<td><em>n.</em> 宪法, 法规, 章程 体格, 体质, 心理素质 构成方式, 构造 制定, 设立, 组成, 任命</td>
</tr>
<tr>
<td style="text-align:left">emerging</td>
<td>adj. 新兴的；出现的；形成的 v. 形成；浮现；由…中脱出；显露（emerge的ing形式）</td>
</tr>
<tr>
<td style="text-align:left">democracy</td>
<td><em>n.</em> 民主, 民主制 民主国家; /dɪ’mɒkrəsɪ/</td>
</tr>
<tr>
<td style="text-align:left">disturbance</td>
<td><em>n.</em> 打扰, 扰乱 骚乱, 纷乱 困扰</td>
</tr>
<tr>
<td style="text-align:left">descendant</td>
<td><em>n.</em> 后代, 后裔; /dɪ’send(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">rack</td>
<td>n. 行李架；拷问台；齿条 vi. 随风飘；小步跑；变形 vt. 折磨；榨取; /ræk/</td>
</tr>
<tr>
<td style="text-align:left">spinach</td>
<td>n. 菠菜; /‘spɪnɪdʒ/</td>
</tr>
<tr>
<td style="text-align:left">consent</td>
<td><em>n.</em> 准许，同意，赞成 <em>vi.</em> 同意；赞成</td>
</tr>
<tr>
<td style="text-align:left">archaeologist</td>
<td><em>n.</em> 考古学家; /ˌɑ:ki’ɔlədʒist/</td>
</tr>
<tr>
<td style="text-align:left">stadium</td>
<td><em>n.</em> (周围有看台的)露天大型运动场, 体育场; /‘steɪdɪəm/</td>
</tr>
<tr>
<td style="text-align:left">umpire</td>
<td><em>n.</em> 裁判员；仲裁人；裁决者 <em>vt.</em> 仲裁；裁判 <em>vi.</em> 做仲裁人；当裁判; /‘ʌmpaɪə/</td>
</tr>
<tr>
<td style="text-align:left">ornament</td>
<td>n. 装饰；装饰物；教堂用品 vt. 装饰，修饰; /‘ɔːnəm(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">fatigue</td>
<td>n. 疲劳，疲乏；杂役 vt. 使疲劳；使心智衰弱 vi. 疲劳 adj. 疲劳的; /fə’tiːg/</td>
</tr>
<tr>
<td style="text-align:left">soothe</td>
<td>vt. 安慰；使平静；缓和 vi. 起抚慰作用; /suːð/</td>
</tr>
<tr>
<td style="text-align:left">stubbornly</td>
<td><em>adv.</em> 倔强地;顽强地;顽固地; /‘stʌbənli/</td>
</tr>
<tr>
<td style="text-align:left">unresisting</td>
<td><em>adj.</em> 不抵抗的,不反抗的</td>
</tr>
<tr>
<td style="text-align:left">inevitable</td>
<td><em>adj.</em> 不可避免的, 必然发生的 〈非正〉总会发生的, 照例必有的, 惯常的</td>
</tr>
<tr>
<td style="text-align:left">even-tempered</td>
<td><em>adj.</em> 性情平和的;沉着的;稳重的; /‘i:vən’tempəd/</td>
</tr>
<tr>
<td style="text-align:left">sluggish</td>
<td>adj. 萧条的；迟钝的；懒惰的；行动迟缓的 n. 市况呆滞；市势疲弱; /‘slʌgɪʃ/</td>
</tr>
<tr>
<td style="text-align:left">lassitude</td>
<td>n. 疲乏；懒散；厌倦; /‘læsɪtjuːd/</td>
</tr>
<tr>
<td style="text-align:left">mollify</td>
<td><em>vt.</em> 使变软,使平静,抚慰</td>
</tr>
<tr>
<td style="text-align:left">profusion</td>
<td><em>n.</em> 大量,丰富,充沛</td>
</tr>
<tr>
<td style="text-align:left">recalcitrant</td>
<td>adj. 反抗的；反对的；顽强的 n. 顽抗者；不服从的人; /rɪ’kælsɪtr(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">surmise</td>
<td><em>n.</em> 推测,猜测 <em>vt.</em> 臆测,推断 揣测 <em>vi.</em> 猜想; /sə’maɪz/</td>
</tr>
<tr>
<td style="text-align:left">resigned</td>
<td>adj. 顺从的；已辞职的；己放弃的 v. 辞职；顺从（resign的过去分词）</td>
</tr>
<tr>
<td style="text-align:left">paradigm</td>
<td>n. 范例；词形变化表; /‘pærədaɪm/</td>
</tr>
<tr>
<td style="text-align:left">equanimity</td>
<td><em>n.</em> 平和,镇静; /ˌekwə’nɪmɪtɪ/</td>
</tr>
<tr>
<td style="text-align:left">convivial</td>
<td><em>adj.</em> 好交际的 随和的,活跃的， 欢乐的</td>
</tr>
<tr>
<td style="text-align:left">listless</td>
<td>adj. 倦怠的；无精打采的；百无聊赖的; /‘lɪs(t)lɪs/</td>
</tr>
<tr>
<td style="text-align:left">exert</td>
<td>vt. 运用，发挥；施以影响; /ɪg’zɜːt/</td>
</tr>
<tr>
<td style="text-align:left">meadow</td>
<td>n. 草地；牧场; /‘medəʊ/</td>
</tr>
<tr>
<td style="text-align:left">claw</td>
<td>n. 爪；螯，钳；爪形器具 vi. 用爪抓（或挖） vt. 用爪抓（或挖）; /klɔː/</td>
</tr>
<tr>
<td style="text-align:left">lobster</td>
<td>n. 龙虾; /‘lɒbstə/</td>
</tr>
<tr>
<td style="text-align:left">porch</td>
<td>n. 门廊；走廊</td>
</tr>
<tr>
<td style="text-align:left">statewide</td>
<td><em>adj.&amp;adv.</em> 全国的[地]</td>
</tr>
<tr>
<td style="text-align:left">navy</td>
<td>n. 海军; /‘neɪvɪ/</td>
</tr>
<tr>
<td style="text-align:left">snap out of it</td>
<td>从…中迅速恢复过来, 改变</td>
</tr>
<tr>
<td style="text-align:left">loner</td>
<td>n. 孤独的人；不合群的动物; /‘ləʊnə/</td>
</tr>
<tr>
<td style="text-align:left">lone</td>
<td>adj. 独自的；寂寞的；单身的；人迹稀少的</td>
</tr>
<tr>
<td style="text-align:left">antidepressant</td>
<td><em>n.</em> 抗抑郁剂 <em>adj.</em> 抗抑郁的; /ˌæntɪdɪ’pres(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">depressant</td>
<td><em>adj.</em> 有镇静作用的 <em>n.</em> 镇静剂; /dɪ’pres(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">Diabetes</td>
<td><em>n.</em> &lt;医&gt;糖尿病; /ˌdaɪə’biːtiːz/</td>
</tr>
<tr>
<td style="text-align:left">diabetic</td>
<td>adj. 糖尿病的，患糖尿病的 n. 糖尿病患者</td>
</tr>
<tr>
<td style="text-align:left">insulin</td>
<td>n. 胰岛素; /‘ɪnsjʊlɪn/                                 </td>
</tr>
</tbody>
</table>
</div>
<h1 id="2-月-16-日"><a href="#2-月-16-日" class="headerlink" title="2 月 16 日"></a>2 月 16 日</h1><h2 id="chapter-29"><a href="#chapter-29" class="headerlink" title="chapter 29"></a>chapter 29</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">annoyance</td>
<td><em>n.</em> 恼怒;烦恼;打扰 使人烦恼的事;讨厌的东西(或人); /ə’nɒɪəns/</td>
</tr>
<tr>
<td style="text-align:left">bluish-white</td>
<td>蓝白色</td>
</tr>
<tr>
<td style="text-align:left">belgian</td>
<td><em>n.</em> 比利时人 <em>adj.</em> 比利时的; /ˈbeldʒən/</td>
</tr>
<tr>
<td style="text-align:left">newfoundland</td>
<td>纽芬兰(岛)(加拿大一省); /ˌnju:faund’lænd/</td>
</tr>
<tr>
<td style="text-align:left">Quebec</td>
<td>n. 魁北克（加拿大港市省名）; /kwɪˈbek/</td>
</tr>
<tr>
<td style="text-align:left">preconceived</td>
<td><em>adj.</em> 预想的，先入为主的; /ˌpri:kənˈsi:vd/</td>
</tr>
<tr>
<td style="text-align:left">horoscope</td>
<td>n. 占星术；星象；十二宫图; /‘hɒrəskəʊp/</td>
</tr>
<tr>
<td style="text-align:left">radish</td>
<td><em>n.</em> (做色拉用的)小萝卜; /‘rædɪʃ/</td>
</tr>
<tr>
<td style="text-align:left">Amercian Revolution</td>
<td>American Revolution 美国独立战争</td>
</tr>
<tr>
<td style="text-align:left">lenient</td>
<td>adj. 仁慈的；宽大的</td>
</tr>
<tr>
<td style="text-align:left">easygoing</td>
<td><em>adj.</em> 脾气随和的; 温和的; /ˈi:ziˌɡəuiŋ/</td>
</tr>
<tr>
<td style="text-align:left">oppressive</td>
<td><em>adj.</em> 暴虐的，残酷的；不公平的 郁闷的，难以忍受的 <em>adv.</em> 沉重地，烦闷地; /ə’presɪv/</td>
</tr>
<tr>
<td style="text-align:left">precancerous</td>
<td><em>adj.</em> 癌症前期的; /priː’kæns(ə)rəs/</td>
</tr>
<tr>
<td style="text-align:left">tumor</td>
<td><em>n.</em> 瘤; /‘tjʊmɚ/</td>
</tr>
<tr>
<td style="text-align:left">ripper</td>
<td>n. 撕裂者；粗齿锯；裂具; /‘rɪpə/</td>
</tr>
<tr>
<td style="text-align:left">synonym</td>
<td><em>n.</em> 同义词; /‘sɪnənɪm/</td>
</tr>
<tr>
<td style="text-align:left">brutal</td>
<td>adj. 残忍的；野蛮的，不讲理的; /‘bruːt(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">kidnap</td>
<td>vt. 绑架；诱拐；拐骗</td>
</tr>
<tr>
<td style="text-align:left">lottery</td>
<td><em>n.</em> 抽彩给奖法 碰运气的事, 难于算计的事; /‘lɒt(ə)rɪ/</td>
</tr>
<tr>
<td style="text-align:left">jigsaw</td>
<td>n. 线锯；镂花锯；拼图玩具 vt. 用线锯锯; /‘dʒɪgsɔː/</td>
</tr>
<tr>
<td style="text-align:left">portray</td>
<td><em>vt.</em> 画像；描述 扮演; /pɔː’treɪ/</td>
</tr>
<tr>
<td style="text-align:left">fawn</td>
<td>vi. 奉承 n. 浅黄褐色；小鹿；小动物 adj. 浅黄褐色的 vt. 生（小鹿或小动物）; /fɔːn/</td>
</tr>
<tr>
<td style="text-align:left">servile</td>
<td><em>adj.</em> 过分屈从的；缺乏独立性的 (似)仆人的，为仆人的; /‘sɜːvaɪl/</td>
</tr>
<tr>
<td style="text-align:left">temper</td>
<td>n. 脾气；（钢等）回火；性情；倾向 vt. 调和；锻炼；使缓和；使回火 vi. 回火；调和; /‘tempə/</td>
</tr>
<tr>
<td style="text-align:left">despot</td>
<td><em>n.</em> 专制君主,专制者 暴君</td>
</tr>
<tr>
<td style="text-align:left">prodigious</td>
<td><em>adj.</em> 异常的，惊人的，奇异的；巨大的 <em>adv.</em> 异常地，惊人地；巨大地; /prə’dɪdʒəs/</td>
</tr>
<tr>
<td style="text-align:left">nefarious</td>
<td><em>adj.</em> 极坏的;恶毒的; /nɪ’feərɪəs/</td>
</tr>
<tr>
<td style="text-align:left">bossy</td>
<td>adj. 专横的；浮雕装饰的；爱指挥他人的 n. 母牛；牛犊</td>
</tr>
<tr>
<td style="text-align:left">justice</td>
<td><em>n.</em> 正义；公正，合理 法律制裁；司法；审判 法官</td>
</tr>
<tr>
<td style="text-align:left">Milton’s Paradise Lost</td>
<td>米尔顿的失乐园</td>
</tr>
<tr>
<td style="text-align:left">shorn</td>
<td>v. 抢夺（shear的过去分词） adj. 剪了毛的；被剥夺了的</td>
</tr>
<tr>
<td style="text-align:left">shear</td>
<td><em>vt.</em> 剪羊毛, 剪 <em>n.</em> 大剪刀</td>
</tr>
<tr>
<td style="text-align:left">tone down</td>
<td>使温和一些</td>
</tr>
<tr>
<td style="text-align:left">tone</td>
<td>n. 音调；音色；语气；色调 vt. 用某种调子说；增强 vi. 颜色调和；呈现悦目色调s</td>
</tr>
<tr>
<td style="text-align:left">soften</td>
<td>vt. 使变柔软；使温和；使缓和 vi. 变柔和；变柔软；减轻</td>
</tr>
<tr>
<td style="text-align:left">tyrant</td>
<td><em>n.</em> 专制统治者；暴君 暴君似的人；专横的人 严酷的事物，苛刻的事物 (古希腊的)僭主，僭王; /‘taɪr(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">villainous</td>
<td><em>adj.</em> &lt;书&gt;邪恶的;凶恶的;恶劣的;可憎的;恶棍的；恶棍似的 罪恶的;卑鄙可耻的 &lt;口&gt;坏透的;讨厌的; /‘vɪlənəs/</td>
</tr>
<tr>
<td style="text-align:left">villain</td>
<td>n. 坏人，恶棍；戏剧、小说中的反派角色；[口]顽童；[英口]罪犯</td>
</tr>
<tr>
<td style="text-align:left">credulous</td>
<td><em>adj.</em> 轻信的;易受骗的; /‘kredjʊləs/</td>
</tr>
<tr>
<td style="text-align:left">anomaly</td>
<td><em>n.</em> 异常,反常,不规则 畸形人〔物〕；异常现象 &lt;天&gt;近点角; /ə’nɒm(ə)lɪ/</td>
</tr>
<tr>
<td style="text-align:left">peculiar</td>
<td><em>adj.</em> 奇怪的, 异常的 特有的, 独具的 〈非正〉不舒服, 有病的; /pɪ’kjuːlɪə/</td>
</tr>
<tr>
<td style="text-align:left">incipient</td>
<td><em>adj.</em> 开始的,初期的; /ɪn’sɪpɪənt/</td>
</tr>
<tr>
<td style="text-align:left">aspirin</td>
<td><em>n.</em> 阿司匹林 阿司匹林药片; /‘æsp(ə)rɪn/</td>
</tr>
<tr>
<td style="text-align:left">saucer</td>
<td>n. 茶托，浅碟；浅碟形物；[口]眼睛; /‘sɔːsə/</td>
</tr>
<tr>
<td style="text-align:left">sauce</td>
<td><em>n.</em> 调味汁, 酱汁 无礼的话, 顶撞的话; /sɔːs/</td>
</tr>
<tr>
<td style="text-align:left">Term paper</td>
<td>学期报告</td>
</tr>
<tr>
<td style="text-align:left">ozymandias</td>
<td>奥兹曼迪亚斯</td>
</tr>
<tr>
<td style="text-align:left">Adversity makes one stronger, just as polishing makes jade finer.</td>
<td>艰难困苦，玉汝于成。</td>
</tr>
<tr>
<td style="text-align:left">thriller</td>
<td>n. 使人毛骨悚然的东西；使人毛骨悚然的小说；惊险小说</td>
</tr>
<tr>
<td style="text-align:left">Uriah</td>
<td>n. 尤赖亚（男子名）; /ˌjuə’raiə/</td>
</tr>
<tr>
<td style="text-align:left">prodigy</td>
<td><em>n.</em> 奇才; 天才(尤指神童); /‘prɒdɪdʒɪ/</td>
</tr>
<tr>
<td style="text-align:left">biology</td>
<td>n. 生物学；（一个地区全部的）生物</td>
</tr>
<tr>
<td style="text-align:left">sickle</td>
<td><em>n.</em> 镰刀</td>
</tr>
<tr>
<td style="text-align:left">anemia</td>
<td>n. [医]贫血；贫血症</td>
</tr>
<tr>
<td style="text-align:left">down syndrome or sickle-cell anemia</td>
<td>唐氏综合症或镰状细胞性贫血</td>
</tr>
<tr>
<td style="text-align:left">graft</td>
<td>vi. 嫁接；移植；贪污 vt. 嫁接；移植；贪污 n. 嫁接；移植；渎职</td>
</tr>
<tr>
<td style="text-align:left">transplant</td>
<td><em>vt.</em> 移植, 移种 (人)移居, 迁移 移植(器官、皮肤、头发等) <em>n.</em> (器官、皮肤、头发等的)移植 移植的器官, 移植物</td>
</tr>
</tbody>
</table>
</div>
<h2 id="chapter-30"><a href="#chapter-30" class="headerlink" title="chapter 30"></a>chapter 30</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">单词</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">hercules</td>
<td>n. 武仙座；力士；大力神; /‘hə:kjuli:z/</td>
</tr>
<tr>
<td style="text-align:left">serpent</td>
<td>n. 蛇（尤指大蛇或毒蛇）；狡猾的人; /‘sɜːp(ə)nt/</td>
</tr>
<tr>
<td style="text-align:left">bridesmaid</td>
<td><em>n.</em> 女傧相；伴娘; /‘braɪdzmeɪd/</td>
</tr>
<tr>
<td style="text-align:left">gown</td>
<td>n. 长袍，长外衣；法衣；睡袍；礼服 vt. 使穿睡衣</td>
</tr>
<tr>
<td style="text-align:left">haunt</td>
<td><em>vt.</em> 经常出没于 缠绕, 萦绕 <em>n.</em> 某人常去的地方; /hɔːnt/</td>
</tr>
<tr>
<td style="text-align:left">vast wasteland</td>
<td>A Vast Expanse Of Wasteland 一片荒郊</td>
</tr>
<tr>
<td style="text-align:left">Plug-in</td>
<td><em>n.</em> 插件程序;  /‘plʌɡ,in/</td>
</tr>
<tr>
<td style="text-align:left">chef</td>
<td>〈法〉厨师长</td>
</tr>
<tr>
<td style="text-align:left">Store-bought</td>
<td><em>n.</em> 店铺买的(非自家制的)</td>
</tr>
<tr>
<td style="text-align:left">pasta</td>
<td>n. 面团；意大利面食; /‘pæstə/</td>
</tr>
<tr>
<td style="text-align:left">spaghetti</td>
<td><em>n.</em> 意大利面条; /spə’getɪ/</td>
</tr>
<tr>
<td style="text-align:left">twofold</td>
<td>adj. 双重的；两倍的 adv. 双重地；两倍地</td>
</tr>
<tr>
<td style="text-align:left">Julius Caesar</td>
<td>尤利乌斯•凯撒（罗马共和国末期杰出的军事统帅、政治家）</td>
</tr>
<tr>
<td style="text-align:left">Barney</td>
<td>n. [口]大吵大闹；拉曳器; /‘bɑːnɪ/</td>
</tr>
<tr>
<td style="text-align:left">gratitude</td>
<td><em>n.</em> 感激, 感谢</td>
</tr>
<tr>
<td style="text-align:left">Popsicle</td>
<td>n. 棒冰（商标名）; /‘pɔpsikl/, popsicle sticks</td>
</tr>
<tr>
<td style="text-align:left">trim</td>
<td><em>vt.</em> 修剪, 整修 除去, 削减 装饰 <em>adj.</em> 整齐的, 整洁的, 匀称漂亮的 <em>n.</em> 修剪 准备就绪, 井井有条, 整整齐齐, 状态极佳; /trɪm/</td>
</tr>
<tr>
<td style="text-align:left">bulldozer</td>
<td><em>n.</em> 推土机 恐吓者；威胁者; /‘bʊldəʊzə/</td>
</tr>
<tr>
<td style="text-align:left">bulldoze</td>
<td><em>vt.</em> 恫吓；欺凌 以推土机清除</td>
</tr>
<tr>
<td style="text-align:left">spangle</td>
<td>vt. 使闪烁发光；用闪光饰物装饰 n. 亮晶晶的小东西 vi. 闪烁发光;  /‘spæŋg(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">velvet</td>
<td>n. 天鹅绒，丝绒；天鹅绒似的东西 adj. 天鹅绒的; /‘velvɪt/</td>
</tr>
<tr>
<td style="text-align:left">grimy</td>
<td>adj. 肮脏的，污秽的; /‘graɪmɪ/</td>
</tr>
<tr>
<td style="text-align:left">shag</td>
<td>n. 粗毛；粗烟丝；蓬乱一团 vt. 使杂乱；使蓬松 vi. 蓬松 adj. 有粗毛的；蓬乱的</td>
</tr>
<tr>
<td style="text-align:left">stain</td>
<td>vt. 沾污；败坏；给…着色 vi. 污染；被沾污；被染污 n. 污点；瑕疵；着色剂</td>
</tr>
<tr>
<td style="text-align:left">chandelier</td>
<td>n. 枝形吊灯; /ˌʃændə’lɪə/</td>
</tr>
<tr>
<td style="text-align:left">sleazy</td>
<td>adj. 质地薄的；[口]肮脏的；低级庸俗的；破烂的; /‘sliːzɪ/</td>
</tr>
<tr>
<td style="text-align:left">conduct</td>
<td>v. 组织，实施，进行；指挥（音乐）；带领，引导；举止，表现；传导（热或电） n. 行为举止；管理（方式），实施（办法）；引导</td>
</tr>
<tr>
<td style="text-align:left">strenuous</td>
<td><em>adj.</em> 费力的; 须用力应付的; /‘strenjʊəs/</td>
</tr>
<tr>
<td style="text-align:left">uncalled for</td>
<td>不必要的；不适当的，不适宜的；没有理由的</td>
</tr>
<tr>
<td style="text-align:left">uncalled</td>
<td>adj. 未经邀请的；未叫到的</td>
</tr>
<tr>
<td style="text-align:left">self-denial</td>
<td><em>n.</em> 自我否定;克己;忘我; /‘selfdi’naiəl/</td>
</tr>
<tr>
<td style="text-align:left">austere</td>
<td><em>adj.</em> 朴素的，无装饰的 严格的；严峻的，一丝不苟的 (指人或行为)十分简朴的，苦行的; /ɒ’stɪə/</td>
</tr>
<tr>
<td style="text-align:left">demolish</td>
<td><em>vt.</em> 摧毁；推翻；拆毁(尤指大建筑物) 〈非正〉吃光; /dɪ’mɒlɪʃ/</td>
</tr>
<tr>
<td style="text-align:left">tasteless</td>
<td><em>adj.</em> 无味的；味道差的；乏味的 无判断力、鉴赏力等的，举止粗俗的 不雅致的；庸俗的；不得体的</td>
</tr>
<tr>
<td style="text-align:left">showy</td>
<td>adj. 艳丽的；显眼的；炫耀的</td>
</tr>
<tr>
<td style="text-align:left">gaudy</td>
<td><em>adj.</em> 花哨的, 俗气的; /‘gɔːdɪ/</td>
</tr>
<tr>
<td style="text-align:left">vulgar</td>
<td>adj. 粗俗的；通俗的；本土的 n. [古]平民，百姓; /‘vʌlgə/</td>
</tr>
<tr>
<td style="text-align:left">tribute</td>
<td>n. 贡物；颂词；礼物; /‘trɪbjuːt/</td>
</tr>
<tr>
<td style="text-align:left">blameless</td>
<td><em>adj.</em> 无罪的；无可指责的，清白的</td>
</tr>
<tr>
<td style="text-align:left">reproach</td>
<td>n. 责备；耻辱 vt. 责备；申斥</td>
</tr>
<tr>
<td style="text-align:left">blithe</td>
<td>adj. 愉快的；快乐无忧的; /blaɪð/</td>
</tr>
<tr>
<td style="text-align:left">arduous</td>
<td>adj. 费力的；努力的；险峻的; /‘ɑːdjʊəs/</td>
</tr>
<tr>
<td style="text-align:left">didactic</td>
<td>adj. 说教的；教诲的; /dɪ’dæktɪk/</td>
</tr>
<tr>
<td style="text-align:left">gratuitous</td>
<td><em>adj.</em> 不必要的, 未要求的 无偿的, 免费的; /grə’tjuːɪtəs/</td>
</tr>
<tr>
<td style="text-align:left">ascetic</td>
<td>adj. 苦行的；禁欲主义的 n. 禁欲者；苦行者; /ə’setɪk/</td>
</tr>
<tr>
<td style="text-align:left">raze</td>
<td>vt. 破坏；消除；夷为平地；拆毁</td>
</tr>
<tr>
<td style="text-align:left">tawdry</td>
<td>adj. 非常华丽的；廉价而俗丽的 n. 俗丽的东西；廉价而俗丽之物; /‘tɔːdrɪ/</td>
</tr>
<tr>
<td style="text-align:left">eulody</td>
<td>n. 颂词；赞词；颂扬；悼词; /‘juːlədʒɪ/</td>
</tr>
<tr>
<td style="text-align:left">unimpeachable</td>
<td><em>adj.</em> 无可指责的;无可怀疑的;可靠的 <em>adv.</em> 无可怀疑地;可靠地; /ʌnɪm’piːtʃəb(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">deprecate</td>
<td><em>vt.</em> 不赞成, 反对; /‘deprɪkeɪt/</td>
</tr>
<tr>
<td style="text-align:left">splash</td>
<td><em>n.</em> 溅泼声 溅上的斑点 (光、色等的)斑点 溅泼的量 <em>vt.</em> 使(液体)溅起 <em>vi.</em> (指液体)溅落</td>
</tr>
<tr>
<td style="text-align:left">gruesome</td>
<td>adj. 可怕的；阴森的; /‘gruːs(ə)m/</td>
</tr>
<tr>
<td style="text-align:left">widget</td>
<td><em>n.</em> 小器具，装饰品；窗口小部件</td>
</tr>
<tr>
<td style="text-align:left">defect</td>
<td>n. 缺点，缺陷；不足之处 vi. 叛变；变节; /‘diːfekt/</td>
</tr>
<tr>
<td style="text-align:left">tribute</td>
<td>n. 贡物；颂词；礼物; /‘trɪbjuːt/</td>
</tr>
<tr>
<td style="text-align:left">chorus</td>
<td><em>n.</em> (歌曲的)副歌 合唱, 合唱队, 歌咏队 <em>vt.</em> 合唱, 齐声背诵, 异口同声地说; /‘kɔːrəs/</td>
</tr>
<tr>
<td style="text-align:left">powder-blue</td>
<td>粉蓝</td>
</tr>
<tr>
<td style="text-align:left">tuxedo</td>
<td><em>n.</em> &lt;美&gt;餐服,无尾晚礼服; /tʌk’siːdəʊ/</td>
</tr>
<tr>
<td style="text-align:left">leopard</td>
<td>n. 豹；美洲豹; /‘lepəd/</td>
</tr>
<tr>
<td style="text-align:left">lapel</td>
<td>n. 西服上的翻领; /lə’pel/</td>
</tr>
<tr>
<td style="text-align:left">demolition</td>
<td><em>n.</em> 毁坏，破坏；拆毁; /demə’lɪʃn/</td>
</tr>
<tr>
<td style="text-align:left">crumble</td>
<td><em>vt. &amp; vi.</em> (把…)弄碎, (使)碎成细屑 <em>vi.</em> 衰落, 崩溃; /‘krʌmb(ə)l/</td>
</tr>
<tr>
<td style="text-align:left">prescribe</td>
<td><em>vt. &amp; vi.</em> 开药方；指示 规定，指定遵守; /prɪ’skraɪb/</td>
</tr>
<tr>
<td style="text-align:left">antibiotic</td>
<td><em>n.</em> &lt;微&gt;抗生素, 抗菌素 <em>adj.</em> 抗生的；抗菌的</td>
</tr>
<tr>
<td style="text-align:left">sniffle</td>
<td>vi. 抽鼻涕；抽噎（等于snuffle） n. 鼻塞声；不断的吸鼻子（等于snuffle）</td>
</tr>
<tr>
<td style="text-align:left">theater</td>
<td>n. 电影院，戏院，剧场；戏剧；手术室</td>
</tr>
<tr>
<td style="text-align:left">aside</td>
<td>adv. 在旁边；离开，撇开 n. 旁白；私语，悄悄话；离题的话 prep. 在…旁边</td>
</tr>
<tr>
<td style="text-align:left">assignment</td>
<td><em>n.</em> 工作, 任务 分配, 指派</td>
</tr>
<tr>
<td style="text-align:left">stark</td>
<td><em>adj.</em> 僵硬的, 光秃秃的, 荒凉的 完全的, 全然的; /stɑ:k/</td>
</tr>
<tr>
<td style="text-align:left">bare</td>
<td><em>adj.</em> 光秃秃的, 无遮蔽的 赤裸的 刚好够的, 勉强的 <em>vt.</em> 使赤裸, 使露出, 使暴露</td>
</tr>
<tr>
<td style="text-align:left">saint</td>
<td><em>n.</em> 圣徒, 圣人；道德崇高的人 圣…(冠于人名、地名之前); /seɪnt/</td>
</tr>
<tr>
<td style="text-align:left">Assisi</td>
<td>n. 阿西西（意大利城镇名）; /ə’si:zi/</td>
</tr>
<tr>
<td style="text-align:left">neglect</td>
<td>vt. 疏忽，忽视；忽略 n. 疏忽，忽视；怠慢</td>
</tr>
<tr>
<td style="text-align:left">clare</td>
<td><em>n.</em> 克雷尔(男子名，涵义:头脑清楚的；聪明的); /klεə/</td>
</tr>
<tr>
<td style="text-align:left">joyous</td>
<td>adj. 令人高兴的；充满欢乐的（等于joyful）</td>
</tr>
<tr>
<td style="text-align:left">nun</td>
<td>n. 修女，尼姑</td>
</tr>
<tr>
<td style="text-align:left">dull</td>
<td>adj. 钝的；呆滞的；阴暗的；迟钝的；无趣的 vt. 使阴暗；缓和；使迟钝 vi. 变迟钝；减少</td>
</tr>
<tr>
<td style="text-align:left">undertake</td>
<td><em>vt.</em> 担任，承揽；保证 着手，开始</td>
</tr>
<tr>
<td style="text-align:left">meditate</td>
<td>vt. 考虑；计划；企图 vi. 冥想；沉思</td>
</tr>
<tr>
<td style="text-align:left">simplicity</td>
<td><em>n.</em> 简单, 朴素, 率直</td>
</tr>
<tr>
<td style="text-align:left">Giotto</td>
<td>乔托(Giotto di Bondone,1266?-1337,意大利画家、雕刻家、建筑师); /‘dʒɔtəu/</td>
</tr>
<tr>
<td style="text-align:left">modest</td>
<td>adj. 谦虚的，谦逊的；适度的；端庄的；羞怯的                 </td>
</tr>
</tbody>
</table>
</div>
<p><code>to be continued...</code></p>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假锻炼打卡记录</title>
    <url>/2022/01/15/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%94%BB%E7%82%BC%E6%89%93%E5%8D%A1/</url>
    <content><![CDATA[<h1 id="1月16日"><a href="#1月16日" class="headerlink" title="1月16日"></a>1月16日</h1><p>今天和<code>lambda</code>去自闭空间，还是蛮好玩的，就是预计，明天要寄了(物理意义X）</p>
<p><img src="https://pic.imgdb.cn/item/61e3f4232ab3f51d913b0070.jpg" style="zoom:10%;" /></p>
<p><img src="https://pic.imgdb.cn/item/61e587532ab3f51d91659019.jpg" alt="脚踩风火轮(X" style="zoom:10%;" /></p>
<h1 id="1月17日"><a href="#1月17日" class="headerlink" title="1月17日"></a>1月17日</h1><p>今天还是自闭空间，不过一边锻炼一边聊天有点摸鱼<br>明天应该先跑三千米再去练背部肌肉<br>应该知乎下，如何准备卧推和短跑</p>
<p><img src="https://pic.imgdb.cn/item/61e6a2f02ab3f51d912db362.jpg" style="zoom: 25%;" /></p>
<h1 id="1月18日"><a href="#1月18日" class="headerlink" title="1月18日"></a>1月18日</h1><p>今天还是自闭空间，跑了 3km ，然后简单做了做支撑。</p>
<p>明天和 lambda 一块儿玩，可能晚上 5 点开始，到 6 点结束。</p>
<h1 id="1月19日"><a href="#1月19日" class="headerlink" title="1月19日"></a>1月19日</h1><p><img src="https://pic.imgdb.cn/item/61ea5eb22ab3f51d918027eb.jpg" style="zoom:10%;" /></p>
<p>试了试单脚 25 kg，有点麻</p>
<p>一边练腿一边在摸鱼，聊天，寄</p>
<h1 id="1月20日"><a href="#1月20日" class="headerlink" title="1月20日"></a>1月20日</h1><p><img src="https://pic.imgdb.cn/item/61ea5f1d2ab3f51d91809ced.jpg" style="zoom:10%;" /></p>
<p>一边和爸爸妈妈打电话一边练腿，单脚 30 kg，练得特别爽</p>
<p>和爸爸妈妈聊了接近 1 h，练完了腿都打不直</p>
<p>自闭空间全年无休，实在是爱了爱了</p>
<h1 id="1月21日"><a href="#1月21日" class="headerlink" title="1月21日"></a>1月21日</h1><p>周五一边跑步一边出了成绩， DSA 寄了，别提多刺激了。。。</p>
<h1 id="1月22日"><a href="#1月22日" class="headerlink" title="1月22日"></a>1月22日</h1><p>貌似练腿来着，忘了拍照</p>
<h1 id="1月23日"><a href="#1月23日" class="headerlink" title="1月23日"></a>1月23日</h1><p><img src="https://pic.imgdb.cn/item/61ed6a922ab3f51d916eb18c.jpg" style="zoom:25%;" /></p>
<p>学会了练腿的新姿势…</p>
<h1 id="1月-24-日"><a href="#1月-24-日" class="headerlink" title="1月 24 日"></a>1月 24 日</h1><p>小腿硬拉</p>
<p><img src="https://pic.imgdb.cn/item/61ef42202ab3f51d91fc0009.jpg" style="zoom:20%;" /></p>
<h1 id="1-月-25-日"><a href="#1-月-25-日" class="headerlink" title="1 月 25 日"></a>1 月 25 日</h1><p><img src="https://pic.imgdb.cn/item/61f0f6422ab3f51d916d3f69.jpg" style="zoom:10%;" /></p>
<ul>
<li><p>拉伸机还挺好玩， 貌似每次拉伸 1km 比较合适。</p>
</li>
<li><p>昨天有个严重问题，拉伸完了没有放松小腿，今天( 1 月 26 日)全身都疼。</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f0f6c52ab3f51d916db33f.jpg" style="zoom:10%;" /></p>
<ul>
<li>顺带，自闭空间的镜子还挺好的，估计以后能在这儿考 DET ？</li>
</ul>
<h1 id="1-月-26-日"><a href="#1-月-26-日" class="headerlink" title="1 月 26 日"></a>1 月 26 日</h1><ul>
<li><p>今天是晚上九点去的，因为白天乱吃东西，五点还很撑…</p>
</li>
<li><ul>
<li>这个点去的确很舒服，可惜器材太挤了，下次不这样了。</li>
</ul>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f172f22ab3f51d91e8742e.jpg" style="zoom:25%;" /></p>
<h1 id="1-月-27-日"><a href="#1-月-27-日" class="headerlink" title="1 月 27 日"></a>1 月 27 日</h1><ul>
<li><p>今天感觉好些了，可能昨天放松比较到位吧。</p>
</li>
<li><p>今天就是日常拉腿和起重，emmm，是不是有天得改改。</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f292752ab3f51d91df323a.jpg" style="zoom:25%;" /></p>
<h1 id="1-月-28-日"><a href="#1-月-28-日" class="headerlink" title="1 月 28 日"></a>1 月 28 日</h1><ul>
<li>今天还好吧，拉伸机 1km 还是有些累的</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f3ce6a2ab3f51d910e0736.jpg" style="zoom:25%;" /></p>
<ul>
<li>明天和 lf 去游泳，<del>亲爱的洗澡池，我来啦！</del></li>
</ul>
<h1 id="1-月-29-日"><a href="#1-月-29-日" class="headerlink" title="1 月 29 日"></a>1 月 29 日</h1><ul>
<li>实际上是 1 月 31 日填写的，29 日和 lf 去游泳了</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f737062ab3f51d9161d8c4.jpg" style="zoom:25%;" /></p>
<ul>
<li><p>这图片还蛮好玩，游泳馆人好多啊，小孩子贼多</p>
</li>
<li><!--谁才是清华园的真正主人啊！----战术后仰-->
</li>
</ul>
<h1 id="1-月-30-日"><a href="#1-月-30-日" class="headerlink" title="1 月 30 日"></a>1 月 30 日</h1><p><img src="https://pic.imgdb.cn/item/61f737b52ab3f51d916259a9.jpg" style="zoom:25%;" /></p>
<ul>
<li><p>这个锻炼，emmmm，我感觉我在拉伸机上就完了100 kcal，结果…</p>
</li>
<li><p><del>你们这个手环记录，他保熟吗？</del></p>
</li>
</ul>
<h1 id="1-月-31-日"><a href="#1-月-31-日" class="headerlink" title="1 月 31 日"></a>1 月 31 日</h1><p><img src="https://pic.imgdb.cn/item/61f89ccf2ab3f51d91743a94.jpg" style="zoom:25%;" /></p>
<ul>
<li>除夕的下午去玩了玩，拉伸机两公里，硬卧推拉和跑步 3 km</li>
<li>完了之后洗了个冷水澡，爽，哦不，死了</li>
</ul>
<h1 id="2-月-1-日"><a href="#2-月-1-日" class="headerlink" title="2 月 1 日"></a>2 月 1 日</h1><ul>
<li><p>日常锻炼</p>
</li>
<li><p>我终于知道那个机器叫做划船机了</p>
</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/61f9581b2ab3f51d9136aae6.jpg" style="zoom:25%;" /></p>
<ul>
<li>晚上全朋友圈都在骂国足，我去看了看那个视频，真的是”日你妈，退钱“呢！</li>
</ul>
<h1 id="2-月-2-日"><a href="#2-月-2-日" class="headerlink" title="2 月 2 日"></a>2 月 2 日</h1><p><img src="https://pic.imgdb.cn/item/61faaa0d2ab3f51d9162c86a.jpg" style="zoom:25%;" /></p>
<ul>
<li>今天有点划水，都没有卧推</li>
</ul>
<h1 id="2-月-3-日"><a href="#2-月-3-日" class="headerlink" title="2 月 3 日"></a>2 月 3 日</h1><ul>
<li>忘了戴手表</li>
<li>貌似划船 2 km + 跑步 2 km 来着</li>
</ul>
<h1 id="2-月-4-日"><a href="#2-月-4-日" class="headerlink" title="2 月 4 日"></a>2 月 4 日</h1><p><img src="https://pic.imgdb.cn/item/61fd137c2ab3f51d918d0dc8.jpg" style="zoom:25%;" /></p>
<ul>
<li>跑步的时候接到 c7w 的消息要改 repo，orz</li>
<li>先 11 km 跑了 2 km ， 然后 16 km 跑了 1 km ，跑完了感觉非常刺激，甚至产生了身体往前倾倒的感受</li>
<li>看了看学生会的教学视频，感觉没意思，而且没器材，自闭空间就一个瑜伽垫，还有个菇凉在用</li>
<li>今晚干脆给那个视频做个笔记，然后开始想办法训练短跑和引体了</li>
<li>明天去游泳，一个人去还是蛮孤单的？</li>
</ul>
<h1 id="2-月-5-日"><a href="#2-月-5-日" class="headerlink" title="2 月 5 日"></a>2 月 5 日</h1><p><img src="https://pic.imgdb.cn/item/61ffb1292ab3f51d91cc1efa.jpg" style="zoom:25%;" /></p>
<ul>
<li>游的很佛系</li>
<li>周围小孩子贼多，看着估计是妈妈带着孩子的，还挺羡慕</li>
<li><del>莫名其妙觉得有小孩也还好？</del></li>
<li>update：yx ：小孩子哈哈哈哈，清华园里的小孩子:我的科学家父亲/母亲</li>
<li>sigh</li>
</ul>
<h1 id="2-月-6-日"><a href="#2-月-6-日" class="headerlink" title="2 月 6 日"></a>2 月 6 日</h1><p><img src="https://pic.imgdb.cn/item/61ffb1c42ab3f51d91ccb444.jpg" style="zoom:25%;" /></p>
<ul>
<li>今天练的比较惨</li>
<li>首先穿着短衣短裤，然后从引体那个坑跳到紫操（跳下来的时候还感觉鞋子有点反应），跑了两圈，稍微热了热身，心率 140+</li>
<li>马上硬杆拉了拉，我以为最近狠狠地在练腿，自己进步了，实际上一学期不练习，硬杆只能做三个</li>
<li>然后开始练习放松式的引体</li>
<li>一共做了 12 个，特别疼，大臂小臂几乎没知觉了</li>
<li>练完了之后又去跑了 4 圈，一开始跑的特别慢，双手基本不能动，后来慢慢好了些</li>
<li>果然，练习引体，自重才是最好的器械，然后别用哑铃练了，就去操场练吧</li>
<li>合理的练习引体方式——先去自闭空间练腿，然后跑步 2 ~ 6 圈，然后练习放松式引体</li>
</ul>
<h1 id="2-月-7-日"><a href="#2-月-7-日" class="headerlink" title="2 月 7 日"></a>2 月 7 日</h1><p>实际上是划水了，然而和狗子一起往返中介的路上算是锻炼了吧。</p>
<p>五道口那边挺繁华的，微软亚研院，海淀教堂，新东方总部都在那儿。</p>
<p><img src="https://pic.imgdb.cn/item/6202854d2ab3f51d9154d2f0.jpg" style="zoom: 25%;" /></p>
<h1 id="2-月-8-日"><a href="#2-月-8-日" class="headerlink" title="2 月 8 日"></a>2 月 8 日</h1><p>和狗子一起去的自闭空间，日常锻炼罢了，手还没恢复，也没法练手</p>
<p>划船机挺多模式的，下次研究下</p>
<p><img src="https://pic.imgdb.cn/item/620286062ab3f51d9155b25f.jpg" style="zoom:33%;" /></p>
<h1 id="2-月19-日"><a href="#2-月19-日" class="headerlink" title="2 月19 日"></a>2 月19 日</h1><p><img src="https://pic.imgdb.cn/item/6203e7dc2ab3f51d917dbb56.jpg" style="zoom:25%;" /></p>
<ul>
<li>寻常锻炼，明天去游泳，后天去引体</li>
</ul>
<h1 id="2-月-11-日"><a href="#2-月-11-日" class="headerlink" title="2 月 11 日"></a>2 月 11 日</h1><ul>
<li>狗子没陪我，我就没去游泳</li>
<li>自闭空间 + 紫操 3km + 引体</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620541bd2ab3f51d91b71227.jpg" style="zoom:25%;" /></p>
<ul>
<li>引体恢复还蛮好</li>
</ul>
<h1 id="2-月-11-日-1"><a href="#2-月-11-日-1" class="headerlink" title="2 月 11 日"></a>2 月 11 日</h1><ul>
<li>日常锻炼，但是没去练引体</li>
<li>今天去六楼洗澡——628B旁边的那个</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620652bf2ab3f51d918e7695.jpg" style="zoom:25%;" /></p>
<h1 id="2-月-13-日"><a href="#2-月-13-日" class="headerlink" title="2 月 13 日"></a>2 月 13 日</h1><ul>
<li>晚上和陈二狗在听涛吃香锅，就没晚上锻炼，然后 11 点开始锻炼</li>
<li>感觉寝室里做高抬腿锻炼效果蛮好，每次 200 个</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62093bab2ab3f51d91fa8d8b.jpg" style="zoom:25%;" /></p>
<h1 id="2-月-14-日"><a href="#2-月-14-日" class="headerlink" title="2 月 14 日"></a>2 月 14 日</h1><ul>
<li>早晨 11 点去的自闭空间，锻炼完了舒服，但是午饭没想吃的菜了，麻了，下次早点去</li>
<li>忘了带手表，就日常划船，练腿，跑步 3km</li>
<li>自拍当做记录吧</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/62093c022ab3f51d91fadb80.jpg" style="zoom:7%;" /></p>
<h1 id="2-月-15-日"><a href="#2-月-15-日" class="headerlink" title="2 月 15 日"></a>2 月 15 日</h1><ul>
<li>晚上写 CV 没及时写完，所以五点就吃饭了，写完 CV 了 9 点才锻炼</li>
<li>锻炼完了碰见了 wzx 和她 npy ，刻意避开了，免得尴尬</li>
<li>边锻炼边开了飞书的会，还挺好，一边跑步一边说话没那么麻烦</li>
</ul>
<p><img src="https://pic.imgdb.cn/item/620be4082ab3f51d9139fe35.jpg" style="zoom:25%;" /></p>
<h1 id="2-月-16-日"><a href="#2-月-16-日" class="headerlink" title="2 月 16 日"></a>2 月 16 日</h1><ul>
<li>今天中午去的自闭空间，先是放松式引体十个，然后练腿，划船，跑步俩公里</li>
<li>今天小腿不痛了<br><img src="https://pic.imgdb.cn/item/620d26d32ab3f51d91e6b99a.jpg" style="zoom:25%;" /></li>
</ul>
<p><code>to be continued...</code> </p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>锻炼</tag>
      </tags>
  </entry>
  <entry>
    <title>Dive Into Deep Learning Chapter 1~3</title>
    <url>/2022/01/15/%E7%A3%95%E7%9B%90/Dive%20Into%20Deep%20Learning%20Part%201/</url>
    <content><![CDATA[<h1 id="学习要求"><a href="#学习要求" class="headerlink" title="学习要求"></a>学习要求</h1><ol>
<li>《动手学深度学习》<code>1,2,3,5,9</code>章节(主要涉及深度学习基础、计算机视觉基础)</li>
<li><a href="https://tangshusen.me/Dive-into-DL-PyTorch/#/">书本网址</a></li>
<li>科协提供答疑服务，<a href="https://docs.qq.com/doc/DV1N1eGtZUUdWVmRX">答疑文档</a></li>
<li>科协提供课后作业，完成作业且达到指定性能可以获得价值百元的自选物品。<a href="https://cloud.tsinghua.edu.cn/d/491de36021944d6bb289/">指定项目网址</a> </li>
<li><code>test accuracy</code>达到<code>68%</code>及以上，需提交能证明性能的文件，包括但不限于: 训练曲线截图、模型、训练代码等</li>
</ol>
<p><img src="https://tangshusen.me/Dive-into-DL-PyTorch/img/book-org.svg" alt=""></p>
<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>我们很容易就能找到一些连世界上最好的程序员也无法仅用编程技巧解决的简单问题。例如，假设我们想要编写一个判定一张图像中有没有猫的程序。这件事听起来好像很简单，对不对？程序只需要对每张输入图像输出“真”（表示有猫）或者“假”（表示无猫）即可。但令人惊讶的是，即使是世界上最优秀的计算机科学家和程序员也不懂如何编写这样的程序。</p>
<p>我们该从哪里入手呢？我们先进一步简化这个问题：若假设所有图像的高和宽都是同样的400像素大小，一个像素由红绿蓝三个值构成，那么一张图像就由近50万个数值表示。那么哪些数值隐藏着我们需要的信息呢？是所有数值的平均数，还是四个角的数值，抑或是图像中的某一个特别的点？事实上，要想解读图像中的内容，需要寻找仅仅在结合成千上万的数值时才会出现的特征，如边缘、质地、形状、眼睛、鼻子等，最终才能判断图像中是否有猫。</p>
<h2 id="用数据编程"><a href="#用数据编程" class="headerlink" title="用数据编程"></a>用数据编程</h2><p>一种解决以上问题的思路是逆向思考。与其设计一个解决问题的程序，不如从最终的需求入手来寻找一个解决方案。事实上，这也是目前的机器学习和深度学习应用共同的核心思想：我们可以称其为“用数据编程”。与其枯坐在房间里思考怎么设计一个识别猫的程序，不如利用人类肉眼在图像中识别猫的能力。我们可以收集一些已知包含猫与不包含猫的真实图像，然后我们的目标就转化成如何从这些图像入手得到一个可以推断出图像中是否有猫的函数。这个函数的形式通常通过我们的知识来针对特定问题选定。例如，我们使用一个二次函数来判断图像中是否有猫，但是像二次函数系数值这样的函数参数的具体值则是通过数据来确定。</p>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>通俗来说，机器学习是一门讨论各式各样的适用于不同问题的函数形式，以及如何使用数据来有效地获取函数参数具体值的学科。深度学习是指机器学习中的一类函数，它们的形式通常为多层神经网络。近年来，仰仗着大数据集和强大的硬件，深度学习已逐渐成为处理图像、文本语料和声音信号等复杂高维度数据的主要方法。</p>
<p>我们现在正处于一个程序设计得到深度学习的帮助越来越多的时代。这可以说是计算机科学历史上的一个分水岭。举个例子，深度学习已经在你的手机里：拼写校正、语音识别、认出社交媒体照片里的好友们等。得益于优秀的算法、快速而廉价的算力、前所未有的大量数据以及强大的软件工具，如今大多数软件工程师都有能力建立复杂的模型来解决十年前连最优秀的科学家都觉得棘手的问题。</p>
<h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><p>神经网络的生物学解释被稀释，但仍保留了这个名字。时至今日，绝大多数神经网络都包含以下的核心原则。</p>
<ul>
<li>交替使用线性处理单元与非线性处理单元，它们经常被称为“层”。</li>
<li>使用链式法则（即反向传播）来更新网络的参数。</li>
</ul>
<h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><p>存储容量没能跟上数据量增长的步伐，与此同时，计算力的增长又盖过了数据量的增长。这样的趋势使得统计模型可以在优化参数上投入更多的计算力，但同时需要提高存储的利用效率，例如使用非线性处理单元。这也相应导致了机器学习和统计学的最优选择从广义线性模型及核方法变化为深度多层神经网络。这样的变化正是诸如多层感知机、卷积神经网络、长短期记忆循环神经网络和Q学习等深度学习的支柱模型在过去10年从坐了数十年的冷板凳上站起来被“重新发现”的原因。</p>
<p>系统研究者负责构建更好的工具，统计学家建立更好的模型。这样的分工使工作大大简化。举例来说，在2014年时，训练一个逻辑回归模型曾是卡内基梅隆大学布置给机器学习方向的新入学博士生的作业问题。时至今日，这个问题只需要少于10行的代码便可以完成，普通的程序员都可以做到。</p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>在描述深度学习的特点之前，我们先回顾并概括一下机器学习和深度学习的关系。</p>
<p>机器学习研究如何使计算机系统利用经验改善性能。它是人工智能领域的分支，也是实现人工智能的一种手段。</p>
<p>在机器学习的众多研究方向中，表征学习关注如何自动找出表示数据的合适方式，以便更好地将输入变换为正确的输出，而本书要重点探讨的深度学习是具有多级表示的表征学习方法。在每一级（从原始数据开始），深度学习通过简单的函数将该级的表示变换为更高级的表示。因此，深度学习模型也可以看作是由许多简单函数复合而成的函数。当这些复合的函数足够多时，深度学习模型就可以表达非常复杂的变换。</p>
<p>深度学习可以逐级表示越来越抽象的概念或模式。以图像为例，它的输入是一堆原始像素值。深度学习模型中，图像可以逐级表示为特定位置和角度的边缘、由边缘组合得出的花纹、由多种花纹进一步汇合得到的特定部位的模式等。最终，模型能够较容易根据更高级的表示完成给定的任务，如识别图像中的物体。值得一提的是，作为表征学习的一种，深度学习将自动找出每一级表示数据的合适方式。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>机器学习研究如何使计算机系统利用经验改善性能。它是人工智能领域的分支，也是实现人工智能的一种手段。</li>
<li>作为机器学习的一类，表征学习关注如何自动找出表示数据的合适方式。</li>
<li>深度学习是具有多级表示的表征学习方法。它可以逐级表示越来越抽象的概念或模式。</li>
<li>深度学习所基于的神经网络模型和用数据编程的核心思想实际上已经被研究了数百年。</li>
<li>深度学习已经逐渐演变成一个工程师和科学家皆可使用的普适工具。</li>
</ul>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>貌似主要的问题是装一个 pytorch，jupyter 我暂时不打算装，那么单独开一个 conda 环境来装 torch 好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> activate</span><br><span class="line">conda create -n torch python=3.8</span><br><span class="line">&gt; conda activate torch</span><br></pre></td></tr></table></figure>
<p> 直接去<a href="https://pytorch.org/">PyTorch官网</a>找到自己的软硬件对应的安装命令即可</p>
<p>注意，conda 换为清华源，否则慢死了，<a href="https://www.jianshu.com/p/7e663bb0d904">换的方法很简单</a></p>
<h2 id="如何避开-jupyter"><a href="#如何避开-jupyter" class="headerlink" title="如何避开 jupyter"></a>如何避开 jupyter</h2><p>破防了，我不想安装 jupytor ，估计<a href="https://vimsky.com/zh-tw/examples/detail/python-method-IPython.embed.html">用 embed 在 pycharm 里也能这么玩</a>。</p>
<p>所以在你的 conda 环境里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; conda install IPython</span><br></pre></td></tr></table></figure>
<p>其实很简单，我比较习惯单独给 python 开环境，base 环境是不装东西的，所以我先开一个 conda 环境，像上面那样写个安装 torch，然后如下几行代码，手动实现 jupyter note book</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; touch torch_learn.py</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;from IPython import embed&quot;</span> &gt;&gt; torch_learn.py</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;embed()&quot;</span> &gt;&gt; torch_learn.py</span><br><span class="line">&gt; <span class="built_in">source</span> activate</span><br><span class="line">&gt; conda activate torch</span><br><span class="line">&gt; python3 torch_learn.py</span><br><span class="line">Python 3.8.12 (default, Oct 12 2021, 06:23:56)</span><br><span class="line">Type <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span> or <span class="string">&#x27;license&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython 7.31.1 -- An enhanced Interactive Python. Type <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure>
<h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><p>在PyTorch中，<code>torch.Tensor</code>是存储和变换数据的主要工具。如果你之前用过NumPy，你会发现<code>Tensor</code>和NumPy的多维数组非常类似。然而，<code>Tensor</code>提供GPU计算和自动求梯度等更多功能，这些使<code>Tensor</code>更加适合深度学习。</p>
<h2 id="创建-Tensor"><a href="#创建-Tensor" class="headerlink" title="创建 Tensor"></a>创建 Tensor</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> embed</span><br><span class="line"></span><br><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">embed()</span><br></pre></td></tr></table></figure>
<p>如果您现在不清楚 embed() 的含义，其实完全可以用 print(x)</p>
<p>当然，我在运行这个程序的时候，出了问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; python3 torch.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;torch.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import torch</span><br><span class="line">  File <span class="string">&quot;/Users/zhaochen20/CST_THU/2022_winter/科研/torch.py&quot;</span>, line 4, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    x = torch.empty(5, 3)</span><br><span class="line">AttributeError: partially initialized module <span class="string">&#x27;torch&#x27;</span> has no attribute <span class="string">&#x27;empty&#x27;</span> (most likely due to a circular import)</span><br></pre></td></tr></table></figure>
<p>貌似是自掘坟墓，因为我的执行文件名字叫做 torch，然后引入了一个包也是 torch</p>
<p>重新命名就好了</p>
<p>话说回来，torch 和 IPython 里面铁定有个库特别大，import 了特别久</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">----------------------------</span><br><span class="line">import torch</span><br><span class="line">from IPython import embed</span><br><span class="line"></span><br><span class="line">x = torch.empty(5, 3)</span><br><span class="line">embed()</span><br><span class="line">----------------------------</span><br><span class="line">&gt; python3 torch_tutorial.py</span><br><span class="line">Python 3.8.12 (default, Oct 12 2021, 06:23:56) </span><br><span class="line">Type <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span> or <span class="string">&#x27;license&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython 7.31.1 -- An enhanced Interactive Python. Type <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">In [1]: x</span><br><span class="line">Out[1]: </span><br><span class="line">tensor([[8.1716e-07, 8.2022e+17, 1.3556e-19],</span><br><span class="line">        [1.3563e-19, 2.6056e-12, 9.9628e+17],</span><br><span class="line">        [1.3556e-19, 1.3563e-19, 4.1294e-08],</span><br><span class="line">        [1.6496e-07, 1.1704e-19, 1.3563e-19],</span><br><span class="line">        [3.1887e-09, 2.3308e-09, 3.1458e-12]])</span><br></pre></td></tr></table></figure>
<p>完成了第一次 import 后，之后就快了很多，估计是 b 树的什么机制吧</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor([[0.4963, 0.7682, 0.0885],</span><br><span class="line">        [0.1320, 0.3074, 0.6341],</span><br><span class="line">        [0.4901, 0.8964, 0.4556],</span><br><span class="line">        [0.6323, 0.3489, 0.4017],</span><br><span class="line">        [0.0223, 0.1689, 0.2939]])</span><br></pre></td></tr></table></figure>
<p>还可以通过现有的<code>Tensor</code>来创建，此方法会默认重用输入<code>Tensor</code>的一些属性，例如数据类型，除非自定义数据类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.float64)  </span><br><span class="line"><span class="comment"># 返回的tensor默认具有相同的torch.dtype和torch.device</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">x = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>) </span><br><span class="line"><span class="comment"># 指定新的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(x) </span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]], dtype=torch.float64)</span><br><span class="line">tensor([[ 0.6035,  0.8110, -0.0451],</span><br><span class="line">        [ 0.8797,  1.0482, -0.0445],</span><br><span class="line">        [-0.7229,  2.8663, -0.5655],</span><br><span class="line">        [ 0.1604, -0.0254,  1.0739],</span><br><span class="line">        [ 2.2628, -0.9175, -0.2251]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.size())</span><br><span class="line"><span class="built_in">print</span>(x.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">torch.Size([5, 3])</span><br><span class="line">torch.Size([5, 3])</span><br></pre></td></tr></table></figure>
<p>注意：返回的 torch.Size 其实就是一个 tuple, 支持所有tuple的操作。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>Tensor(*sizes)</td>
<td>基础构造函数</td>
</tr>
<tr>
<td>tensor(data,)</td>
<td>类似np.array的构造函数</td>
</tr>
<tr>
<td>ones(*sizes)</td>
<td>全1Tensor</td>
</tr>
<tr>
<td>zeros(*sizes)</td>
<td>全0Tensor</td>
</tr>
<tr>
<td>eye(*sizes)</td>
<td>对角线为1，其他为0</td>
</tr>
<tr>
<td>arange(s,e,step)</td>
<td>从s到e，步长为step</td>
</tr>
<tr>
<td>linspace(s,e,steps)</td>
<td>从s到e，均匀切分成steps份</td>
</tr>
<tr>
<td>rand/randn(*sizes)</td>
<td>均匀/标准分布</td>
</tr>
<tr>
<td>normal(mean,std)/uniform(from,to)</td>
<td>正态分布/均匀分布</td>
</tr>
<tr>
<td>randperm(m)</td>
<td>随机排列</td>
</tr>
</tbody>
</table>
</div>
<h2 id="算数操作"><a href="#算数操作" class="headerlink" title="算数操作"></a>算数操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line">--------------------</span><br><span class="line"><span class="built_in">print</span>(torch.add(x, y))</span><br><span class="line">--------------------</span><br><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">torch.add(x, y, out=result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">--------------------</span><br><span class="line"><span class="comment"># adds x to y</span></span><br><span class="line">y.add_(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>
<p><strong>注：PyTorch 操作 inplace 版本都有后缀 <code>_</code>, 例如 <code>x.copy_(y), x.t_()</code></strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x[<span class="number">0</span>, :]</span><br><span class="line">y += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>, :]) <span class="comment"># 源tensor也被改了</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>index_select(input, dim, index)</td>
<td>在指定维度dim上选取，比如选取某些行、某些列</td>
</tr>
<tr>
<td>masked_select(input, mask)</td>
<td>例子如上，a[a&gt;0]，使用ByteTensor进行选取</td>
</tr>
<tr>
<td>nonzero(input)</td>
<td>非0元素的下标</td>
</tr>
<tr>
<td>gather(input, dim, index)</td>
<td>根据index，在dim维度上选取数据，输出的size与index一样</td>
</tr>
</tbody>
</table>
</div>
<p>这里不详细介绍，用到了再查官方文档。</p>
<h2 id="改变形状"><a href="#改变形状" class="headerlink" title="改变形状"></a>改变形状</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">In [<span class="number">4</span>]: x.size()</span><br><span class="line">Out[<span class="number">4</span>]: torch.Size([<span class="number">5</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>这就解释了 <code>y = x.view(15)</code> 和 <code>y = x.view(x.size())</code> 效果不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: y = x.view(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: y</span><br><span class="line">Out[<span class="number">6</span>]:</span><br><span class="line">tensor([<span class="number">0.6734</span>, <span class="number">0.6783</span>, <span class="number">0.2743</span>, <span class="number">0.2130</span>, <span class="number">0.0791</span>, <span class="number">0.6645</span>, <span class="number">0.1746</span>, <span class="number">0.4423</span>, <span class="number">0.0358</span>,</span><br><span class="line">        <span class="number">0.9683</span>, <span class="number">0.1560</span>, <span class="number">0.1490</span>, <span class="number">0.7802</span>, <span class="number">0.5694</span>, <span class="number">0.6750</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: z = x.view(-<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: z</span><br><span class="line">Out[<span class="number">8</span>]:</span><br><span class="line">tensor([[<span class="number">0.6734</span>, <span class="number">0.6783</span>, <span class="number">0.2743</span>, <span class="number">0.2130</span>, <span class="number">0.0791</span>],</span><br><span class="line">        [<span class="number">0.6645</span>, <span class="number">0.1746</span>, <span class="number">0.4423</span>, <span class="number">0.0358</span>, <span class="number">0.9683</span>],</span><br><span class="line">        [<span class="number">0.1560</span>, <span class="number">0.1490</span>, <span class="number">0.7802</span>, <span class="number">0.5694</span>, <span class="number">0.6750</span>]])</span><br></pre></td></tr></table></figure>
<p><strong>注意 <code>view()</code> 返回的新 <code>Tensor</code> 与源 <code>Tensor</code> 虽然可能有不同的 <code>size</code>，但是是共享 <code>data</code> 的，也即更改其中的一个，另外一个也会跟着改变。(顾名思义，view 仅仅是改变了对这个张量的观察角度，内部数据并未改变)</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">9</span>]: x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: x</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">tensor([[<span class="number">1.6734</span>, <span class="number">1.6783</span>, <span class="number">1.2743</span>],</span><br><span class="line">        [<span class="number">1.2130</span>, <span class="number">1.0791</span>, <span class="number">1.6645</span>],</span><br><span class="line">        [<span class="number">1.1746</span>, <span class="number">1.4423</span>, <span class="number">1.0358</span>],</span><br><span class="line">        [<span class="number">1.9683</span>, <span class="number">1.1560</span>, <span class="number">1.1490</span>],</span><br><span class="line">        [<span class="number">1.7802</span>, <span class="number">1.5694</span>, <span class="number">1.6750</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: y</span><br><span class="line">Out[<span class="number">11</span>]:</span><br><span class="line">tensor([<span class="number">1.6734</span>, <span class="number">1.6783</span>, <span class="number">1.2743</span>, <span class="number">1.2130</span>, <span class="number">1.0791</span>, <span class="number">1.6645</span>, <span class="number">1.1746</span>, <span class="number">1.4423</span>, <span class="number">1.0358</span>,</span><br><span class="line">        <span class="number">1.9683</span>, <span class="number">1.1560</span>, <span class="number">1.1490</span>, <span class="number">1.7802</span>, <span class="number">1.5694</span>, <span class="number">1.6750</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: z</span><br><span class="line">Out[<span class="number">12</span>]:</span><br><span class="line">tensor([[<span class="number">1.6734</span>, <span class="number">1.6783</span>, <span class="number">1.2743</span>, <span class="number">1.2130</span>, <span class="number">1.0791</span>],</span><br><span class="line">        [<span class="number">1.6645</span>, <span class="number">1.1746</span>, <span class="number">1.4423</span>, <span class="number">1.0358</span>, <span class="number">1.9683</span>],</span><br><span class="line">        [<span class="number">1.1560</span>, <span class="number">1.1490</span>, <span class="number">1.7802</span>, <span class="number">1.5694</span>, <span class="number">1.6750</span>]])</span><br></pre></td></tr></table></figure>
<p>所以如果我们想返回一个真正新的副本（即不共享data内存）该怎么办呢？Pytorch还提供了一个<code>reshape()</code>可以改变形状，但是此函数并不能保证返回的是其拷贝，所以不推荐使用。推荐先用<code>clone</code>创造一个副本然后再使用<code>view</code>，<a href="https://stackoverflow.com/questions/49643225/whats-the-difference-between-reshape-and-view-in-pytorch">参考此处</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x_cp = x.clone().view(<span class="number">15</span>)</span><br><span class="line">x -= <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x_cp)</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensor([[ 0.6035,  0.8110, -0.0451],</span><br><span class="line">        [ 0.8797,  1.0482, -0.0445],</span><br><span class="line">        [-0.7229,  2.8663, -0.5655],</span><br><span class="line">        [ 0.1604, -0.0254,  1.0739],</span><br><span class="line">        [ 2.2628, -0.9175, -0.2251]])</span><br><span class="line">tensor([1.6035, 1.8110, 0.9549, 1.8797, 2.0482, 0.9555, 0.2771, 3.8663, 0.4345,</span><br><span class="line">        1.1604, 0.9746, 2.0739, 3.2628, 0.0825, 0.7749])</span><br></pre></td></tr></table></figure>
<p>使用 <code>clone</code> 还有一个好处是会被记录在计算图中，即梯度回传到副本时也会传到源 <code>Tensor</code>。</p>
<p>另外一个常用的函数就是<code>item()</code>, 它可以将一个标量<code>Tensor</code>转换成一个Python number：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x.item())</span><br><span class="line">---------------</span><br><span class="line">tensor([<span class="number">2.3466</span>])</span><br><span class="line"><span class="number">2.3466382026672363</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>trace</td>
<td>对角线元素之和(矩阵的迹)</td>
</tr>
<tr>
<td>diag</td>
<td>对角线元素</td>
</tr>
<tr>
<td>triu/tril</td>
<td>矩阵的上三角/下三角，可指定偏移量</td>
</tr>
<tr>
<td>mm/bmm</td>
<td>矩阵乘法，batch的矩阵乘法</td>
</tr>
<tr>
<td>addmm/addbmm/addmv/addr/baddbmm..</td>
<td>矩阵运算</td>
</tr>
<tr>
<td>t</td>
<td>转置</td>
</tr>
<tr>
<td>dot/cross</td>
<td>内积/外积</td>
</tr>
<tr>
<td>inverse</td>
<td>求逆矩阵</td>
</tr>
<tr>
<td>svd</td>
<td>奇异值分解</td>
</tr>
</tbody>
</table>
</div>
<p>PyTorch中的 <code>Tensor</code> 支持超过一百种操作，包括转置、索引、切片、数学运算、线性代数、随机数等等，可参考<a href="https://pytorch.org/docs/stable/tensors.html">官方文档</a>。</p>
<h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>前面我们看到如何对两个形状相同的 <code>Tensor</code> 做按元素运算。当对两个形状不同的 <code>Tensor</code> 按元素运算时，可能会触发广播（broadcasting）机制：先适当复制元素使这两个 <code>Tensor</code> 形状相同后再按元素运算。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.arange(<span class="number">1</span>, <span class="number">3</span>).view(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">y = torch.arange(<span class="number">1</span>, <span class="number">4</span>).view(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line">-------------------</span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line">tensor([[<span class="number">1</span>],</span><br><span class="line">        [<span class="number">2</span>],</span><br><span class="line">        [<span class="number">3</span>]])</span><br><span class="line">tensor([[<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure>
<p>由于 <code>x</code> 和 <code>y</code> 分别是 1 行 2 列和 3 行 1 列的矩阵，如果要计算 <code>x + y</code>，那么 <code>x</code> 中第一行的 2 个元素被广播（复制）到了第二行和第三行，而 <code>y</code> 中第一列的 3 个元素被广播（复制）到了第二列。如此，就可以对 2 个 3 行 2 列的矩阵按元素相加。</p>
<p>前面说了，索引操作是不会开辟新内存的，而像<code>y = x + y</code>这样的运算是会新开内存的，然后将<code>y</code>指向新内存。为了演示这一点，我们可以使用Python自带的<code>id</code>函数：如果两个实例的ID一致，那么它们所对应的内存地址相同；反之则不同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">y = torch.tensor([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">id_before = <span class="built_in">id</span>(y)</span><br><span class="line">y = y + x</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: id_before</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">140542217495392</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: <span class="built_in">id</span>(y)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">140541936727840</span></span><br></pre></td></tr></table></figure>
<p>如果想指定结果到原来的<code>y</code>的内存，我们可以使用前面介绍的索引来进行替换操作。在下面的例子中，我们把<code>x + y</code>的结果通过<code>[:]</code>写进<code>y</code>对应的内存中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">y = torch.tensor([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">id_before = <span class="built_in">id</span>(y)</span><br><span class="line">y[:] = y + x</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: id_before</span><br><span class="line">Out[<span class="number">18</span>]: <span class="number">140542217449200</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: <span class="built_in">id</span>(y)</span><br><span class="line">Out[<span class="number">19</span>]: <span class="number">140542217449200</span></span><br></pre></td></tr></table></figure>
<p>我们还可以使用运算符全名函数中的<code>out</code>参数或者自加运算符<code>+=</code>(也即<code>add_()</code>)达到上述效果，例如<code>torch.add(x, y, out=y)</code>和<code>y += x</code>(<code>y.add_(x)</code>)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">y = torch.tensor([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">id_before = <span class="built_in">id</span>(y)</span><br><span class="line">torch.add(x, y, out=y) <span class="comment"># y += x, y.add_(x)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(y) == id_before) <span class="comment"># True</span></span><br></pre></td></tr></table></figure>
<p>注：虽然<code>view</code>返回的<code>Tensor</code>与源<code>Tensor</code>是共享<code>data</code>的，但是依然是一个新的<code>Tensor</code>（因为<code>Tensor</code>除了包含<code>data</code>外还有一些其他属性），二者id（内存地址）并不一致。</p>
<p>我们很容易用<code>numpy()</code>和<code>from_numpy()</code>将<code>Tensor</code>和NumPy中的数组相互转换。但是需要注意的一点是：</p>
<p> <strong>这两个函数所产生的的<code>Tensor</code>和NumPy中的数组共享相同的内存（所以他们之间的转换很快），改变其中一个时另一个也会改变！！！</strong></p>
<p>还有一个常用的将 NumPy 中的 array 转换成 <code>Tensor</code> 的方法就是 <code>torch.tensor()</code>， 需要注意的是，此方法总是会进行数据拷贝（就会消耗更多的时间和空间），所以返回的 <code>Tensor</code> 和原来的数据不再共享内存。</p>
<h2 id="GPU"><a href="#GPU" class="headerlink" title="GPU"></a>GPU</h2><p>用方法 <code>to()</code> 可以将 <code>Tensor</code> 在 CPU 和 GPU（需要硬件支持）之间相互移动。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">20</span>]: torch.cuda.is_available()</span><br><span class="line">Out[<span class="number">20</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><del>破防了</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下代码只有在PyTorch GPU版本上才会执行</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span>)          <span class="comment"># GPU</span></span><br><span class="line">    y = torch.ones_like(x, device=device)  <span class="comment"># 直接创建一个在GPU上的Tensor</span></span><br><span class="line">    x = x.to(device)                       <span class="comment"># 等价于 .to(&quot;cuda&quot;)</span></span><br><span class="line">    z = x + y</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))       <span class="comment"># to()还可以同时更改数据类型</span></span><br></pre></td></tr></table></figure>
<h2 id="自动求解梯度"><a href="#自动求解梯度" class="headerlink" title="自动求解梯度"></a>自动求解梯度</h2><p>在深度学习中，我们经常需要对函数求梯度（gradient）。PyTorch 提供的 <a href="https://pytorch.org/docs/stable/autograd.html">autograd</a> 包能够根据输入和前向传播过程自动构建计算图，并执行反向传播。本节将介绍如何使用 autograd 包来进行自动求梯度的有关操作。</p>
<p>上一节介绍的 <code>Tensor</code> 是这个包的核心类，如果将其属性 <code>.requires_grad</code> 设置为  <code>True</code>，它将开始追踪( track )在其上的所有操作（这样就可以利用链式法则进行梯度传播了）。完成计算后，可以调用 <code>.backward()</code> 来完成所有梯度计算。此 <code>Tensor</code> 的梯度将累积到 <code>.grad</code> 属性中。</p>
<blockquote>
<p>注意在<code>y.backward()</code>时，如果<code>y</code>是标量，则不需要为<code>backward()</code>传入任何参数；否则，需要传入一个与<code>y</code>同形的 <code>Tensor</code> 作为权重。解释见 2.3.2 节。</p>
</blockquote>
<p>如果不想要被继续追踪，可以调用<code>.detach()</code>将其从追踪记录中分离出来，这样就可以防止将来的计算被追踪，这样梯度就传不过去了。此外，还可以用<code>with torch.no_grad()</code>将不想被追踪的操作代码块包裹起来，这种方法在评估模型的时候很常用，因为在评估模型时，我们并不需要计算可训练参数（<code>requires_grad=True</code>）的梯度。</p>
<p><code>Function</code>是另外一个很重要的类。<code>Tensor</code>和<code>Function</code>互相结合就可以构建一个记录有整个计算过程的有向无环图（DAG）。每个<code>Tensor</code>都有一个<code>.grad_fn</code>属性，该属性即创建该<code>Tensor</code>的<code>Function</code>, 就是说该<code>Tensor</code>是不是通过某些运算得到的，若是，则<code>grad_fn</code>返回一个与这些运算相关的对象，否则是None。</p>
<h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p>创建一个<code>Tensor</code>并设置<code>requires_grad=True</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x.grad_fn)</span><br><span class="line">---------------</span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x + <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(y.grad_fn)</span><br><span class="line">---------------</span><br><span class="line">tensor([[<span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">3.</span>, <span class="number">3.</span>]], grad_fn=&lt;AddBackward&gt;)</span><br><span class="line">&lt;AddBackward <span class="built_in">object</span> at <span class="number">0x1100477b8</span>&gt;</span><br></pre></td></tr></table></figure>
<p>注意x是直接创建的，所以它没有<code>grad_fn</code>, 而y是通过一个加法操作创建的，所以它有一个为<code>&lt;AddBackward&gt;</code>的<code>grad_fn</code>。</p>
<p>像x这种直接创建的称为叶子节点，叶子节点对应的<code>grad_fn</code>是<code>None</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.is_leaf, y.is_leaf) </span><br><span class="line"><span class="comment"># True False</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"><span class="built_in">print</span>(z, out)</span><br><span class="line">--------------</span><br><span class="line">tensor([[<span class="number">27.</span>, <span class="number">27.</span>],</span><br><span class="line">        [<span class="number">27.</span>, <span class="number">27.</span>]], grad_fn=&lt;MulBackward&gt;) tensor(<span class="number">27.</span>, grad_fn=&lt;MeanBackward1&gt;)</span><br></pre></td></tr></table></figure>
<p>通过<code>.requires_grad_()</code>来用in-place的方式改变<code>requires_grad</code>属性：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>, <span class="number">2</span>) </span><br><span class="line"><span class="comment"># 缺失情况下默认 requires_grad = False</span></span><br><span class="line">a = ((a * <span class="number">3</span>) / (a - <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad) <span class="comment"># False</span></span><br><span class="line">a.requires_grad_(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a.requires_grad) <span class="comment"># True</span></span><br><span class="line">b = (a * a).<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(b.grad_fn)</span><br><span class="line">--------------</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line">&lt;SumBackward0 <span class="built_in">object</span> at <span class="number">0x118f50cc0</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>因为<code>out</code>是一个标量，所以调用<code>backward()</code>时不需要指定求导变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out.backward() </span><br><span class="line"><span class="comment"># 等价于 out.backward(torch.tensor(1.))</span></span><br></pre></td></tr></table></figure>
<p>我们来看看<code>out</code>关于<code>x</code>的梯度 $\frac{d(out)}{dx}$:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line">----------------</span><br><span class="line">tensor([[<span class="number">4.5000</span>, <span class="number">4.5000</span>],</span><br><span class="line">        [<span class="number">4.5000</span>, <span class="number">4.5000</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">23</span>]: x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: y = x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: z = y * y * <span class="number">3</span></span><br><span class="line">    ...: out = z.mean()</span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: z</span><br><span class="line">Out[<span class="number">26</span>]:</span><br><span class="line">tensor([[<span class="number">27.</span>, <span class="number">27.</span>],</span><br><span class="line">        [<span class="number">27.</span>, <span class="number">27.</span>]], grad_fn=&lt;MulBackward0&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: out</span><br><span class="line">Out[<span class="number">27</span>]: tensor(<span class="number">27.</span>, grad_fn=&lt;MeanBackward0&gt;)</span><br><span class="line">  </span><br><span class="line">In [<span class="number">31</span>]: out.backward() <span class="comment"># 等价于 out.backward(torch.tensor(1.))</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: <span class="built_in">print</span>(x.grad)</span><br><span class="line">tensor([[<span class="number">4.5000</span>, <span class="number">4.5000</span>],</span><br><span class="line">        [<span class="number">4.5000</span>, <span class="number">4.5000</span>]])</span><br></pre></td></tr></table></figure>
<p>注意，如果不手动添加 <code>out.backward()</code>，你的 <code>out</code> 没法计算梯度</p>
<p>我们令<code>out</code>为 $f$ , 因为</p>
<script type="math/tex; mode=display">
f=\frac14\sum_{i=1}^4z_i=\frac14\sum_{i=1}^43(x_i+2)^2\\
 \frac{\partial{o}}{\partial{x_i}}\bigr\rvert_{x_i=1}=\frac{9}{2}=4.5</script><p>数学上，如果有一个函数值和自变量都为向量的函数 $\vec{y}=f(\vec{x})$, 那么 $\vec{y}$ 关于 $\vec{x}$ 的梯度就是一个雅可比矩阵（Jacobian matrix）: </p>
<script type="math/tex; mode=display">
J=\left(\begin{array}{ccc} \frac{\partial y_{1}}{\partial x_{1}} & \cdots & \frac{\partial y_{1}}{\partial x_{n}}\\\vdots & \ddots & \vdots\\\frac{\partial y_{m}}{\partial x_{1}} & \cdots & \frac{\partial y_{m}}{\partial x_{n}} \end{array}\right)</script><p>而 <code>torch.autograd</code> 这个包就是用来计算一些雅克比矩阵的乘积的。例如，如果 $v$ 是一个标量函数的 $l=g\left(\vec{y}\right)$ 的梯度： <script type="math/tex">v=\left(\begin{array}{ccc}\frac{\partial l}{\partial y_{1}} & \cdots & \frac{\partial l}{\partial y_{m}}\end{array}\right)</script> 那么根据链式法则我们有 $l$ 关于 $\vec{x}$ 的雅克比矩阵就为: </p>
<script type="math/tex; mode=display">
J_v=\left(\begin{array}{ccc}\frac{\partial l}{\partial y_{1}} & \cdots & \frac{\partial l}{\partial y_{m}}\end{array}\right) \left(\begin{array}{ccc} \frac{\partial y_{1}}{\partial x_{1}} & \cdots & \frac{\partial y_{1}}{\partial x_{n}}\\\vdots & \ddots & \vdots\\\frac{\partial y_{m}}{\partial x_{1}} & \cdots & \frac{\partial y_{m}}{\partial x_{n}} \end{array}\right) =\left(\begin{array}{ccc}\frac{\partial l}{\partial x_{1}} & \cdots & \frac{\partial l}{\partial x_{n}}\end{array}\right)</script><p>注意：grad在反向传播过程中是累加的(accumulated)，这意味着每一次运行反向传播，梯度都会累加之前的梯度，所以一般在反向传播之前需把梯度清零。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 再来反向传播一次，注意grad是累加的</span></span><br><span class="line">out2 = x.<span class="built_in">sum</span>()</span><br><span class="line">out2.backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line"></span><br><span class="line">out3 = x.<span class="built_in">sum</span>()</span><br><span class="line">x.grad.data.zero_()</span><br><span class="line">out3.backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line">---------------</span><br><span class="line">tensor([[<span class="number">5.5000</span>, <span class="number">5.5000</span>],</span><br><span class="line">        [<span class="number">5.5000</span>, <span class="number">5.5000</span>]])</span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>
<p>现在我们解释2.3.1节留下的问题，为什么在<code>y.backward()</code>时，如果<code>y</code>是标量，则不需要为<code>backward()</code>传入任何参数；否则，需要传入一个与<code>y</code>同形的<code>Tensor</code>? 简单来说就是为了避免向量（甚至更高维张量）对张量求导，而转换成标量对张量求导。举个例子，假设形状为 <code>m x n</code> 的矩阵 X 经过运算得到了 <code>p x q</code> 的矩阵 Y，Y 又经过运算得到了 <code>s x t</code> 的矩阵 Z。那么按照前面讲的规则，dZ/dY 应该是一个 <code>s x t x p x q</code> 四维张量，dY/dX 是一个 <code>p x q x m x n</code>的四维张量。问题来了，怎样反向传播？怎样将两个四维张量相乘？？？这要怎么乘？？？就算能解决两个四维张量怎么乘的问题，四维和三维的张量又怎么乘？导数的导数又怎么求，这一连串的问题，感觉要疯掉…… 为了避免这个问题，我们<strong>不允许张量对张量求导，只允许标量对张量求导，求导结果是和自变量同形的张量</strong>。所以必要时我们要把张量通过将所有张量的元素加权求和的方式转换为标量，举个例子，假设<code>y</code>由自变量<code>x</code>计算而来，<code>w</code>是和<code>y</code>同形的张量，则<code>y.backward(w)</code>的含义是：先计算<code>l = torch.sum(y * w)</code>，则<code>l</code>是个标量，然后求<code>l</code>对自变量<code>x</code>的导数——<a href="https://zhuanlan.zhihu.com/p/29923090">参考</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = <span class="number">2</span> * x</span><br><span class="line">z = y.view(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br><span class="line">-----------------</span><br><span class="line">tensor([[<span class="number">2.</span>, <span class="number">4.</span>],</span><br><span class="line">        [<span class="number">6.</span>, <span class="number">8.</span>]], grad_fn=&lt;ViewBackward&gt;)</span><br></pre></td></tr></table></figure>
<p>现在 <code>z</code> 不是一个标量，所以在调用<code>backward</code>时需要传入一个和<code>z</code>同形的权重向量进行加权求和得到一个标量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = torch.tensor([[<span class="number">1.0</span>, <span class="number">0.1</span>], [<span class="number">0.01</span>, <span class="number">0.001</span>]], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">z.backward(v)</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line">--------------------</span><br><span class="line">tensor([<span class="number">2.0000</span>, <span class="number">0.2000</span>, <span class="number">0.0200</span>, <span class="number">0.0020</span>])</span><br></pre></td></tr></table></figure>
<p>注意到，<code>v</code> 是权重，然后 <code>z</code> 张量转为了标量后再对 <code>x</code> 张量求导，<code>x.grad</code>是和<code>x</code>同形的张量。</p>
<p>再来看看中断梯度追踪的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor(<span class="number">1.0</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y1 = x ** <span class="number">2</span> </span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    y2 = x ** <span class="number">3</span></span><br><span class="line">y3 = y1 + y2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.requires_grad)</span><br><span class="line"><span class="built_in">print</span>(y1, y1.requires_grad) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(y2, y2.requires_grad) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(y3, y3.requires_grad) <span class="comment"># True</span></span><br><span class="line">--------------</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">tensor(<span class="number">1.</span>, grad_fn=&lt;PowBackward0&gt;) <span class="literal">True</span></span><br><span class="line">tensor(<span class="number">1.</span>) <span class="literal">False</span></span><br><span class="line">tensor(<span class="number">2.</span>, grad_fn=&lt;ThAddBackward&gt;) <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>可以看到，上面的<code>y2</code>是没有<code>grad_fn</code>而且<code>y2.requires_grad=False</code>的，而<code>y3</code>是有<code>grad_fn</code>的。如果我们将<code>y3</code>对<code>x</code>求梯度的话会是多少呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y3.backward()</span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line">---------</span><br><span class="line">tensor(<span class="number">2.</span>)</span><br></pre></td></tr></table></figure>
<p>为什么是2呢？$ y_3 = y_1 + y_2 = x^2 + x^3$，当 $x=1$ 时 $\frac {dy_3} {dx}$ 不应该是5吗？事实上，由于 $y_2$ 的定义是被<code>torch.no_grad():</code>包裹的，所以与 $y_2$ 有关的梯度是不会回传的，只有与 $y_1$ 有关的梯度才会回传，即 $x^2$ 对 $x$ 的梯度。</p>
<p>上面提到，<code>y2.requires_grad=False</code>，所以不能调用 <code>y2.backward()</code>，会报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn</span><br></pre></td></tr></table></figure>
<p>此外，如果我们想要修改<code>tensor</code>的数值，但是又不希望被<code>autograd</code>记录（即不会影响反向传播），那么我么可以对<code>tensor.data</code>进行操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">1</span>,requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.data) <span class="comment"># 还是一个tensor</span></span><br><span class="line"><span class="built_in">print</span>(x.data.requires_grad) <span class="comment"># 但是已经是独立于计算图之外</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">2</span> * x</span><br><span class="line">x.data *= <span class="number">100</span> <span class="comment"># 只改变了值，不会记录在计算图，所以不会影响梯度传播</span></span><br><span class="line"></span><br><span class="line">y.backward()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 更改data的值也会影响tensor的值</span></span><br><span class="line"><span class="built_in">print</span>(x.grad)</span><br><span class="line">--------------------</span><br><span class="line">tensor([<span class="number">1.</span>])</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">tensor([<span class="number">100.</span>], requires_grad=<span class="literal">True</span>)</span><br><span class="line">tensor([<span class="number">2.</span>])</span><br></pre></td></tr></table></figure>
<h1 id="深度学习基础"><a href="#深度学习基础" class="headerlink" title="深度学习基础"></a>深度学习基础</h1><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>线性回归输出是一个连续值，因此适用于回归问题。回归问题在实际中很常见，如预测房屋价格、气温、销售额等连续值的问题。与回归问题不同，分类问题中模型的最终输出是一个离散值。我们所说的图像分类、垃圾邮件识别、疾病检测等输出为离散值的问题都属于分类问题的范畴。</p>
<p>softmax回归适用于分类问题。</p>
<p>由于线性回归和softmax回归都是单层神经网络，它们涉及的概念和技术同样适用于大多数的深度学习模型。我们首先以线性回归为例，介绍大多数深度学习模型的基本要素和表示方法。</p>
<h3 id="线性回归的基本要素"><a href="#线性回归的基本要素" class="headerlink" title="线性回归的基本要素"></a>线性回归的基本要素</h3><p>我们以一个简单的房屋价格预测作为例子来解释线性回归的基本要素。这个应用的目标是预测一栋房子的售出价格（元）。我们知道这个价格取决于很多因素，如房屋状况、地段、市场行情等。为了简单起见，这里我们假设价格只取决于房屋状况的两个因素，即面积（平方米）和房龄（年）。接下来我们希望探索价格与这两个因素的具体关系。</p>
<h3 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h3><p>设房屋的面积为 $x_1$，房龄为 $x_2$，售出价格为 $y$。我们需要建立基于输入 $x_1$ 和 $x_2$ 来计算输出 $y$ 的表达式，也就是模型（model）。顾名思义，线性回归假设输出与各个输入之间是线性关系：</p>
<script type="math/tex; mode=display">
\hat{y} = x_1 w_1 + x_2 w_2 + b</script><p> 其中 $w_1$ 和 $w_2$ 是权重（weight），$b$ 是偏差（bias），且均为标量。它们是线性回归模型的参数（parameter）。模型输出 $\hat{y}$ 是线性回归对真实价格 $y$ 的预测或估计。我们通常允许它们之间有一定误差。</p>
<h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>接下来我们需要通过数据来寻找特定的模型参数值，使模型在数据上的误差尽可能小。这个过程叫作模型训练（model training）。下面我们介绍模型训练所涉及的3个要素。</p>
<h4 id="1-训练数据"><a href="#1-训练数据" class="headerlink" title="(1) 训练数据"></a>(1) 训练数据</h4><p>我们通常收集一系列的真实数据，例如多栋房屋的真实售出价格和它们对应的面积和房龄。我们希望在这个数据上面寻找模型参数来使模型的预测价格与真实价格的误差最小。在机器学习术语里，该数据集被称为训练数据集（training data set）或训练集（training set），一栋房屋被称为一个样本（sample），其真实售出价格叫作标签（label），用来预测标签的两个因素叫作特征（feature）。特征用来表征样本的特点。</p>
<p>假设我们采集的样本数为 $n$，索引为 $i$ 的样本的特征为 $x_1^{(i)}$ 和 $x_2^{(i)}$，标签为 $y^{(i)}$。对于索引为 $i$ 的房屋，线性回归模型的房屋价格预测表达式为 <script type="math/tex">\hat{y}^{(i)} = x_1^{(i)} w_1 + x_2^{(i)} w_2 + b</script></p>
<h4 id="2-损失函数"><a href="#2-损失函数" class="headerlink" title="(2) 损失函数"></a>(2) 损失函数</h4><p>在模型训练中，我们需要衡量价格预测值与真实值之间的误差。通常我们会选取一个<strong>非负数</strong>作为误差，且数值越小表示误差越小。一个常用的选择是平方函数。它在评估索引为 $i$ 的样本误差的表达式为</p>
<script type="math/tex; mode=display">
\ell^{(i)}(w_1, w_2, b) = \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2</script><p><strong>其中常数 $\frac 1 2$ 使对平方项求导后的常数系数为1，这样在形式上稍微简单一些。</strong></p>
<p>显然，误差越小表示预测价格与真实价格越相近，且当二者相等时误差为0。给定训练数据集，这个误差只与模型参数相关，因此我们将它记为以模型参数为参数的函数。在机器学习里，将衡量误差的函数称为损失函数（loss function）。这里使用的平方误差函数也称为平方损失（square loss）。</p>
<p>通常，我们用训练数据集中所有样本误差的平均来衡量模型预测的质量，即</p>
<script type="math/tex; mode=display">
 \ell(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \ell^{(i)}(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \frac{1}{2}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)^2</script><p>在模型训练中，我们希望找出一组模型参数，记为 $w_1^<em>, w_2^</em>, b^*$，来使训练样本平均损失最小：</p>
<script type="math/tex; mode=display">
w_1^*, w_2^*, b^* = \underset{w_1, w_2, b}{\arg\min} \ell(w_1, w_2, b)</script><h4 id="3-优化算法"><a href="#3-优化算法" class="headerlink" title="(3) 优化算法"></a>(3) 优化算法</h4><p>当模型和损失函数形式较为简单时，上面的误差最小化问题的解可以直接用公式表达出来。这类解叫作解析解（analytical solution）。本节使用的线性回归和平方误差刚好属于这个范畴。</p>
<p>然而，大多数深度学习模型并没有解析解，只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。这类解叫作数值解（numerical solution）。</p>
<p>在求数值解的优化算法中，小批量随机梯度下降（mini-batch stochastic gradient descent）在深度学习中被广泛使用。</p>
<p>它的算法很简单：</p>
<ul>
<li>先选取一组模型参数的初始值，如随机选取；</li>
<li>接下来对参数进行多次迭代，使每次迭代都可能降低损失函数的值。</li>
<li>在每次迭代中，先随机均匀采样一个由固定数目训练数据样本所组成的小批量（mini-batch）$\mathcal{B}$，然后求小批量中数据样本的<strong>平均损失有关模型参数的导数（梯度）</strong>，最后用此结果与预先设定的一个正数的乘积作为模型参数在本次迭代的减小量。</li>
</ul>
<p>在训练本节讨论的线性回归模型的过程中，模型的每个参数将作如下迭代：</p>
<script type="math/tex; mode=display">
\begin{aligned} w_1 &\leftarrow w_1 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_1} = w_1 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)\\\ w_2 &\leftarrow w_2 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_2} = w_2 - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)\\\ b &\leftarrow b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial b} = b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right) \end{aligned}</script><p>在上式中，$|\mathcal{B}|$ 代表每个小批量中的样本个数（批量大小，batch size），$\eta$ 称作学习率（learning rate）并取正数。需要强调的是，这里的批量大小和学习率的值是人为设定的，并不是通过模型训练学出的，因此叫作超参数（hyperparameter）。</p>
<p><strong>我们通常所说的“调参”指的正是调节超参数，例如通过反复试错来找到超参数合适的值。在少数情况下，超参数也可以通过模型训练学出。本书对此类情况不做讨论。</strong></p>
<h3 id="模型预测"><a href="#模型预测" class="headerlink" title="模型预测"></a>模型预测</h3><p>模型训练完成后，我们将模型参数 $w_1, w_2, b$ 在优化算法停止时的值分别记作 $\hat{w}_1, \hat{w}_2, \hat{b}$。注意，这里我们得到的并不一定是最小化损失函数的最优解 $w_1^<em>, w_2^</em>, b^*$，而是对最优解的一个近似。然后，我们就可以使用学出的线性回归模型 $x_1 \hat{w}_1 + x_2 \hat{w}_2 + \hat{b}$ 来估算训练数据集以外任意一栋面积（平方米）为$x_1$、房龄（年）为$x_2$的房屋的价格了。这里的估算也叫作模型预测、模型推断或模型测试。</p>
<h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>此段将解释线性回归与神经网络的联系，以及线性回归的矢量计算表达式。</p>
<p>在深度学习中，我们可以使用神经网络图直观地表现模型结构。为了更清晰地展示线性回归作为神经网络的结构，图3.1使用神经网络图表示本节中介绍的线性回归模型。神经网络图隐去了模型参数权重和偏差。</p>
<p><img src="https://github.com/ShusenTang/Dive-into-DL-PyTorch/raw/master/docs/img/chapter03/3.1_linreg.svg" alt=""></p>
<p>在图3.1所示的神经网络中，输入分别为 $x_1$ 和 $x_2$，因此输入层的输入个数为2。输入个数也叫特征数或特征向量维度。图3.1中网络的输出为 $o$，输出层的输出个数为1。需要注意的是，我们直接将图3.1中神经网络的输出 $o$ 作为线性回归的输出，即 $\hat{y} = o$。由于输入层并不涉及计算，按照惯例，图3.1所示的神经网络的层数为1。所以线性回归是一个单层神经网络。输出层中负责计算 $o$ 的单元又叫神经元。在线性回归中，$o$ 的计算依赖于 $x_1$ 和 $x_2$。也就是说，<strong>输出层中的神经元和输入层中各个输入完全连接，此种输出层又叫全连接层（fully-connected layer）或稠密层（dense layer）。</strong></p>
<h3 id="矢量计算"><a href="#矢量计算" class="headerlink" title="矢量计算"></a>矢量计算</h3><p>下面先定义两个1000维的向量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">a = torch.ones(<span class="number">1000</span>)</span><br><span class="line">b = torch.ones(<span class="number">1000</span>)</span><br><span class="line">-----------------------</span><br><span class="line"><span class="comment"># 标量运算</span></span><br><span class="line">start = time()</span><br><span class="line">c = torch.zeros(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    c[i] = a[i] + b[i]</span><br><span class="line"><span class="built_in">print</span>(time() - start)</span><br><span class="line">-----------------------</span><br><span class="line"><span class="number">0.02039504051208496</span></span><br><span class="line">------------------------</span><br><span class="line"><span class="comment"># 矢量运算</span></span><br><span class="line">start = time()</span><br><span class="line">d = a + b</span><br><span class="line"><span class="built_in">print</span>(time() - start)</span><br><span class="line">------------------------</span><br><span class="line"><span class="number">0.0008330345153808594</span></span><br><span class="line">------------------------</span><br></pre></td></tr></table></figure>
<p>结果很明显，后者比前者更省时。因此，我们应该尽可能采用矢量计算，以提升计算效率。</p>
<p>让我们再次回到本节的房价预测问题。如果我们对训练数据集里的3个房屋样本（索引分别为1、2和3）逐一预测价格，将得到 </p>
<script type="math/tex; mode=display">
\begin{aligned} \hat{y}^{(1)} &= x_1^{(1)} w_1 + x_2^{(1)} w_2 + b,\\\hat{y}^{(2)} &= x_1^{(2)} w_1 + x_2^{(2)} w_2 + b,\\\hat{y}^{(3)} &= x_1^{(3)} w_1 + x_2^{(3)} w_2 + b. \end{aligned}</script><p>写作矢量形式：</p>
<script type="math/tex; mode=display">
\boldsymbol{\hat{y}} = \begin{bmatrix} \hat{y}^{(1)} \\\hat{y}^{(2)} \\\hat{y}^{(3)} \end{bmatrix},\quad \boldsymbol{X} = \begin{bmatrix} x_1^{(1)} & x_2^{(1)}\\ x_1^{(2)} & x_2^{(2)} \\ x_1^{(3)} & x_2^{(3)} \end{bmatrix},\quad \boldsymbol{w} = \begin{bmatrix} w_1 \\ w_2 \end{bmatrix}</script><p>对3个房屋样本预测价格的矢量计算表达式为$\boldsymbol{\hat{y}} = \boldsymbol{X} \boldsymbol{w} + b,$ 其中的加法运算使用了广播机制。</p>
<p>广义上讲，当数据样本数为 $n$，特征数为 $d$ 时，线性回归的矢量计算表达式为 <script type="math/tex">\boldsymbol{\hat{y}} = \boldsymbol{X} \boldsymbol{w} + b</script> 其中模型输出 $\boldsymbol{\hat{y}} \in \mathbb{R}^{n \times 1}$ 批量数据样本特征 $\boldsymbol{X} \in \mathbb{R}^{n \times d}$，权重 $\boldsymbol{w} \in \mathbb{R}^{d \times 1}$， 偏差 $b \in \mathbb{R}$。相应地，批量数据样本标签 $\boldsymbol{y} \in \mathbb{R}^{n \times 1}$。设模型参数 $\boldsymbol{\theta} = [w_1, w_2, b]^\top$，我们可以重写损失函数为 <script type="math/tex">\ell(\boldsymbol{\theta})=\frac{1}{2n}(\boldsymbol{\hat{y}}-\boldsymbol{y})^\top(\boldsymbol{\hat{y}}-\boldsymbol{y})</script></p>
<p>小批量随机梯度下降的迭代步骤将相应地改写为 <script type="math/tex">\boldsymbol{\theta} \leftarrow \boldsymbol{\theta} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \nabla_{\boldsymbol{\theta}} \ell^{(i)}(\boldsymbol{\theta}),</script></p>
<p>其中梯度是损失有关3个为标量的模型参数的偏导数组成的向量： <script type="math/tex">\nabla_{\boldsymbol{\theta}} \ell^{(i)}(\boldsymbol{\theta})= \begin{bmatrix} \frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_1} \\\frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial w_2} \\\frac{ \partial \ell^{(i)}(w_1, w_2, b) }{\partial b} \end{bmatrix} = \begin{bmatrix} x_1^{(i)} (x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}) \\ x_2^{(i)} (x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}) \\ x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)} \end{bmatrix}= \begin{bmatrix} x_1^{(i)} \\ x_2^{(i)} \\ 1 \end{bmatrix} (\hat{y}^{(i)} - y^{(i)})</script></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>和大多数深度学习模型一样，对于线性回归这样一种单层神经网络，它的基本要素包括模型、训练数据、损失函数和优化算法。</p>
</li>
<li><p>既可以用神经网络图表示线性回归，又可以用矢量计算表示该模型。</p>
</li>
<li><p>应该尽可能采用矢量计算，以提升计算效率。</p>
</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>在了解了线性回归的背景知识之后，现在我们可以动手实现它了。尽管强大的深度学习框架可以减少大量重复性工作，但若过于依赖它提供的便利，会导致我们很难深入理解深度学习是如何工作的。因此，本节将介绍如何只利用 <code>Tensor</code> 和 <code>autograd</code> 来实现一个线性回归的训练。</p>
<p>首先，导入本节中实验所需的包或模块，其中的matplotlib包可用于作图，且设置成嵌入显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure>
<p>该下载的包自己 conda 安装就好了。</p>
<h2 id="生成数据集"><a href="#生成数据集" class="headerlink" title="生成数据集"></a>生成数据集</h2><p>我们构造一个简单的人工训练数据集，它可以使我们能够直观比较学到的参数和真实的模型参数的区别。设训练数据集样本数为1000，输入特征数为2。给定随机生成的批量样本特征 $\boldsymbol{X} \in \mathbb{R}^{1000 \times 2}$，我们使用线性回归模型真实权重 $\boldsymbol{w} = [2, -3.4]^\top$ 和偏差 $b = 4.2$，以及一个随机噪声项 $\epsilon$ 来生成标签 <script type="math/tex">\boldsymbol{y} = \boldsymbol{X}\boldsymbol{w} + b + \epsilon</script>，其中噪声项 $\epsilon$ 服从均值为0、标准差为0.01的正态分布。噪声代表了数据集中无意义的干扰。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display, embed </span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># %matplotlib inline</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_train_set</span>(<span class="params">num_inputs: <span class="built_in">int</span>, num_examples: <span class="built_in">int</span>, true_w: <span class="type">List</span>[<span class="built_in">float</span>], true_b: <span class="built_in">float</span></span>) -&gt; <span class="type">List</span>[torch.tensor]:</span></span><br><span class="line">    features = torch.randn(num_examples, num_inputs, dtype = torch.float64)</span><br><span class="line">    labels = true_w[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] + true_b</span><br><span class="line">    <span class="literal">Ellipsis</span> = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, size = labels.size()), dtype = torch.float64)</span><br><span class="line">    labels += <span class="literal">Ellipsis</span></span><br><span class="line">    <span class="keyword">return</span> [features, labels]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num_inputs = <span class="number">2</span></span><br><span class="line">    num_examples = <span class="number">1000</span></span><br><span class="line">    true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">    true_b = <span class="number">4.2</span></span><br><span class="line">    [features, labels] = generate_train_set(num_inputs, num_examples, true_w, true_b)</span><br><span class="line">    embed()</span><br></pre></td></tr></table></figure>
<p>关于 <a href="https://blog.csdn.net/qq_38355352/article/details/88783832"><code>%matplotlib inline</code></a></p>
<blockquote>
<p>注意 <code>feature</code> 的意义，实际上的 <code>feature</code> 仅仅是特征，不过在这个例子里面，把特征和样本个数糅合在了一起，作为了 <code>features</code></p>
</blockquote>
<p>接下来，设置绘图相关的函数：通过生成第二个特征<code>features[:, 1]</code>和标签 <code>labels</code> 的散点图，可以更直观地观察两者间的线性关系。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; touch d2lzh_pytorch.py</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;def use_svg_display():</span></span><br><span class="line"><span class="string">    # 用矢量图显示</span></span><br><span class="line"><span class="string">    display.set_matplotlib_formats(&#x27;svg&#x27;)&quot;</span> &gt;&gt; d2lzh_pytorch.py</span><br><span class="line">&gt; <span class="built_in">echo</span> <span class="string">&quot;def set_figsize(figsize=(3.5, 2.5)):</span></span><br><span class="line"><span class="string">    use_svg_display()</span></span><br><span class="line"><span class="string">    # 设置图的尺寸</span></span><br><span class="line"><span class="string">    plt.rcParams[&#x27;figure.figsize&#x27;] = figsize&quot;</span> &gt;&gt; d2lzh_pytorch.py</span><br><span class="line">&gt; cat d2lzh_pytorch.py</span><br><span class="line">def use_svg_display():</span><br><span class="line">    <span class="comment"># 用矢量图显示</span></span><br><span class="line">    display.set_matplotlib_formats(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">def set_figsize(figsize=(3.5, 2.5)):</span><br><span class="line">    use_svg_display()</span><br><span class="line">    <span class="comment"># 设置图的尺寸</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = figsize</span><br></pre></td></tr></table></figure>
<p>如上操作后，即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_svg_display</span>():</span></span><br><span class="line">    <span class="comment"># 用矢量图显示</span></span><br><span class="line">    display.set_matplotlib_formats(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_figsize</span>(<span class="params">figsize=(<span class="params"><span class="number">3.5</span>, <span class="number">2.5</span></span>)</span>):</span></span><br><span class="line">    use_svg_display()</span><br><span class="line">    <span class="comment"># 设置图的尺寸</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = figsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 在../d2lzh_pytorch里面添加上面两个函数后就可以这样导入</span></span><br><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.path.append(&quot;..&quot;)</span></span><br><span class="line"><span class="comment"># from d2lzh_pytorch import * </span></span><br><span class="line"></span><br><span class="line">set_figsize()</span><br><span class="line">plt.scatter(features[:, <span class="number">1</span>].numpy(), labels.numpy(), <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>我破防了，貌似还是<a href="https://zhuanlan.zhihu.com/p/33105153">得用 jupyter</a>，因为 display 这些都是服务于 jupyter 的</p>
<hr>
<p>我又破防了，貌似不一定要用 jupyter，我继续用 pycharm 了，不过至少要：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">----------------------</span><br><span class="line">d2lzh_pytorch.py</span><br><span class="line">----------------------</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display, embed</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_svg_display</span>():</span></span><br><span class="line">    <span class="comment"># 用矢量图显示</span></span><br><span class="line">    display.set_matplotlib_formats(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_figsize</span>(<span class="params">figsize=(<span class="params"><span class="number">3.5</span>, <span class="number">2.5</span></span>)</span>):</span></span><br><span class="line">    use_svg_display()</span><br><span class="line">    <span class="comment"># 设置图的尺寸</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = figsize</span><br></pre></td></tr></table></figure>
<p>这里绘图还是有问题，还得多改改</p>
<hr>
<p>实际上，改的不多，在主文件最后一行加上 <code>plt.show()</code> 即可，效果如下，散的还行，明天继续训练</p>
<p><img src="https://pic.imgdb.cn/item/62090c6e2ab3f51d91cb212d.jpg" style="zoom:25%;" /></p>
<hr>
<p>至于为什么非得写出一个新的文件——</p>
<blockquote>
<p>我们将上面的<code>plt</code>作图函数以及<code>use_svg_display</code>函数和<code>set_figsize</code>函数定义在<code>d2lzh_pytorch</code>包里。以后在作图时，我们将直接调用<code>d2lzh_pytorch.plt</code>。由于<code>plt</code>在<code>d2lzh_pytorch</code>包中是一个全局变量，我们在作图前只需要调用<code>d2lzh_pytorch.set_figsize()</code>即可打印矢量图并设置图的尺寸。</p>
</blockquote>
<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p>在训练模型的时候，我们需要遍历数据集并不断读取小批量数据样本。这里我们定义一个函数：它每次返回<code>batch_size</code>（批量大小）个随机样本的特征和标签。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span></span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        j = torch.longTensor(indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features.index_select(<span class="number">0</span>, j), labels.index_select(<span class="number">0</span>, j)</span><br></pre></td></tr></table></figure>
<p>此处使用了 <code>yield</code> 方法，具体的意义参考<a href="https://www.runoob.com/python3/python3-iterator-generator.html##%E7%94%9F%E6%88%90%E5%99%A8">此链接底部生成器部分</a></p>
<p>让我们测试第一个小批量数据样本并打印。每个批量的特征形状为(10, 2)，分别对应批量大小和输入个数；标签形状为批量大小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">    <span class="built_in">print</span>(x, y)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">----------------------</span><br><span class="line">tensor([[ <span class="number">0.4309</span>, -<span class="number">2.4063</span>],</span><br><span class="line">        [ <span class="number">0.3015</span>,  <span class="number">0.3022</span>],</span><br><span class="line">        [-<span class="number">0.4291</span>, -<span class="number">0.5646</span>],</span><br><span class="line">        [ <span class="number">0.6140</span>, -<span class="number">0.4660</span>],</span><br><span class="line">        [ <span class="number">0.4325</span>, -<span class="number">0.1307</span>],</span><br><span class="line">        [-<span class="number">0.2154</span>,  <span class="number">0.2170</span>],</span><br><span class="line">        [ <span class="number">0.8936</span>,  <span class="number">0.1344</span>],</span><br><span class="line">        [ <span class="number">2.1532</span>,  <span class="number">1.4954</span>],</span><br><span class="line">        [-<span class="number">0.2951</span>, -<span class="number">0.4246</span>],</span><br><span class="line">        [-<span class="number">0.7586</span>, -<span class="number">0.8595</span>]], dtype=torch.float64) tensor([<span class="number">13.2452</span>,  <span class="number">3.7605</span>,  <span class="number">5.2628</span>,  <span class="number">6.9973</span>,  <span class="number">5.5235</span>,  <span class="number">3.0280</span>,  <span class="number">5.5270</span>,  <span class="number">3.4118</span>,</span><br><span class="line">         <span class="number">5.0553</span>,  <span class="number">5.6174</span>], dtype=torch.float64)</span><br></pre></td></tr></table></figure>
<h2 id="初始化模型参数"><a href="#初始化模型参数" class="headerlink" title="初始化模型参数"></a>初始化模型参数</h2><p>我们将权重初始化成均值为0、标准差为0.01的正态随机数，偏差则初始化成0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_inputs, <span class="number">1</span>)), dtype=torch.float32)</span><br><span class="line">b = torch.zeros(<span class="number">1</span>, dtype=torch.float32)Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>
<p>之后的模型训练中，需要对这些参数求梯度来迭代参数的值，因此我们要让它们的<code>requires_grad=True</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w.requires_grad_(requires_grad=<span class="literal">True</span>)</span><br><span class="line">b.requires_grad_(requires_grad=<span class="literal">True</span>) </span><br></pre></td></tr></table></figure>
<h2 id="定义模型-1"><a href="#定义模型-1" class="headerlink" title="定义模型"></a>定义模型</h2><p>下面是线性回归的矢量计算表达式的实现。我们使用<code>mm</code>函数做矩阵乘法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linreg</span>(<span class="params">X, w, b</span>):</span>  <span class="comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用</span></span><br><span class="line">    <span class="keyword">return</span> torch.mm(X, w) + b</span><br></pre></td></tr></table></figure>
<h2 id="定义损失函数"><a href="#定义损失函数" class="headerlink" title="定义损失函数"></a>定义损失函数</h2><p>我们使用上一节描述的平方损失来定义线性回归的损失函数。在实现中，我们需要把真实值<code>y</code>变形成预测值<code>y_hat</code>的形状。以下函数返回的结果也将和<code>y_hat</code>的形状相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squared_loss</span>(<span class="params">y_hat, y</span>):</span>  <span class="comment"># 本函数已保存在d2lzh_pytorch包中方便以后使用</span></span><br><span class="line">    <span class="comment"># 注意这里返回的是向量, 另外, pytorch里的MSELoss并没有除以 2</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.view(y_hat.size())) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="定义优化算法"><a href="#定义优化算法" class="headerlink" title="定义优化算法"></a>定义优化算法</h2><p>以下的<code>sgd</code>函数实现了上一节中介绍的小批量随机梯度下降算法。它通过不断迭代模型参数来优化损失函数。这里自动求梯度模块计算得来的梯度是一个批量样本的梯度和。我们将它除以批量大小来得到平均值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self_gradient_differ</span>(<span class="params">params, lr, batch_size</span>):</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.data -= lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>在训练中，我们将多次迭代模型参数。在每次迭代中，我们根据当前读取的小批量数据样本（特征<code>X</code>和标签<code>y</code>），通过调用反向函数<code>backward</code>计算小批量随机梯度，并调用优化算法<code>sgd</code>迭代模型参数。由于我们之前设批量大小<code>batch_size</code>为10，每个小批量的损失<code>l</code>的形状为(10, 1)。回忆一下自动求梯度一节。由于变量<code>l</code>并不是一个标量，所以我们可以调用<code>.sum()</code>将其求和得到一个标量，再运行<code>l.backward()</code>得到该变量有关模型参数的梯度。注意在每次更新完参数后不要忘了将参数的梯度清零。</p>
<p>在一个迭代周期（epoch）中，我们将完整遍历一遍<code>data_iter</code>函数，并对训练数据集中所有样本都使用一次（假设样本数能够被批量大小整除）。这里的迭代周期个数<code>num_epochs</code>和学习率<code>lr</code>都是超参数，分别设3和0.03。在实践中，大多超参数都需要通过反复试错来不断调节。虽然迭代周期数设得越大模型可能越有效，但是训练时间可能过长。而有关学习率对模型的影响，我们会在后面“优化算法”一章中详细介绍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line">net = linreg</span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):  <span class="comment"># 训练模型一共需要num_epochs个迭代周期</span></span><br><span class="line">    <span class="comment"># 在每一个迭代周期中，会使用训练数据集中所有样本一次（假设样本数能够被批量大小整除）。X</span></span><br><span class="line">    <span class="comment"># 和y分别是小批量样本的特征和标签</span></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">        l = loss(net(X, w, b), y).<span class="built_in">sum</span>()  <span class="comment"># l是有关小批量X和y的损失</span></span><br><span class="line">        l.backward()  <span class="comment"># 小批量的损失对模型参数求梯度</span></span><br><span class="line">        sgd([w, b], lr, batch_size)  <span class="comment"># 使用小批量随机梯度下降迭代模型参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 不要忘了梯度清零</span></span><br><span class="line">        w.grad.data.zero_()</span><br><span class="line">        b.grad.data.zero_()</span><br><span class="line">    train_l = loss(net(features, w, b), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %f&#x27;</span> % (epoch + <span class="number">1</span>, train_l.mean().item()))</span><br><span class="line">    <span class="built_in">print</span>(true_w, <span class="string">&#x27;\n&#x27;</span>, w)</span><br><span class="line">		<span class="built_in">print</span>(true_b, <span class="string">&#x27;\n&#x27;</span>, b)</span><br></pre></td></tr></table></figure>
<p>最后学习成功，我的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display, embed</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> d2lzh_pytorch <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_train_set</span>(<span class="params">num_inputs: <span class="built_in">int</span>, num_examples: <span class="built_in">int</span>, true_w: <span class="type">List</span>[<span class="built_in">float</span>], true_b: <span class="built_in">float</span></span>) -&gt; <span class="type">List</span>[torch.tensor]:</span></span><br><span class="line">    features = torch.randn(num_examples, num_inputs, dtype = torch.float64)</span><br><span class="line">    labels = true_w[<span class="number">0</span>] * features[:, <span class="number">0</span>] + true_w[<span class="number">1</span>] * features[:, <span class="number">1</span>] + true_b</span><br><span class="line">    epsilon = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, size = labels.size()), dtype = torch.float64)</span><br><span class="line">    labels += epsilon</span><br><span class="line">    <span class="keyword">return</span> [features, labels]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本函数已保存在d2lzh包中方便以后使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span></span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        j = torch.LongTensor(indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features.index_select(<span class="number">0</span>, j), labels.index_select(<span class="number">0</span>, j)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_reg</span>(<span class="params">x, w, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> torch.mm(x, w) + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squared_loss</span>(<span class="params">y_hat, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.view(y_hat.size())) ** <span class="number">2</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">self_gradient_differ</span>(<span class="params">params, lr, batch_size</span>):</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.data -= lr * param.grad / batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_inputs = <span class="number">2</span></span><br><span class="line">num_examples = <span class="number">1000</span></span><br><span class="line">true_w = [<span class="number">2</span>, -<span class="number">3.4</span>]</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">lr = <span class="number">0.03</span></span><br><span class="line">num_epochs = <span class="number">3</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line">net = linear_reg</span><br><span class="line">loss = squared_loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    [features, labels] = generate_train_set(num_inputs, num_examples, true_w, true_b)</span><br><span class="line">    w = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_inputs, <span class="number">1</span>)))</span><br><span class="line">    b = torch.zeros(<span class="number">1</span>, dtype = torch.float64)</span><br><span class="line">    w.requires_grad_(requires_grad = <span class="literal">True</span>)</span><br><span class="line">    b.requires_grad_(requires_grad = <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> data_iter(batch_size, features, labels):</span><br><span class="line">            lossage = loss(net(x, w, b), y).<span class="built_in">sum</span>()</span><br><span class="line">            lossage.backward()</span><br><span class="line">            self_gradient_differ([w, b], lr, batch_size)</span><br><span class="line">            w.grad.data.zero_()</span><br><span class="line">            b.grad.data.zero_()</span><br><span class="line">        train_loss = loss(net(features, w, b), labels)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %f&#x27;</span> % (epoch + <span class="number">1</span>, train_loss.mean().item()))</span><br><span class="line">    <span class="built_in">print</span>(true_w, <span class="string">&#x27;\n&#x27;</span>, w)</span><br><span class="line">    <span class="built_in">print</span>(true_b, <span class="string">&#x27;\n&#x27;</span>, b)</span><br></pre></td></tr></table></figure>
<h1 id="简洁实现"><a href="#简洁实现" class="headerlink" title="简洁实现"></a>简洁实现</h1><p>稍微踩了一些坑</p>
<h2 id="import-error"><a href="#import-error" class="headerlink" title="import error"></a>import error</h2><p>第一天卡了非常久，卡在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br></pre></td></tr></table></figure>
<p>我特么第一天写成了  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> optim <span class="keyword">import</span> optim</span><br><span class="line">-----------</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;optim&#x27;</span></span><br></pre></td></tr></table></figure>
<p>然后我当时就方了，以为又被 M1 坑了，然后网上找了很久，把 torch 删了又下回来，本地还是跑不了，最后连上 AIR 的服务器，结果因为换源问题，连个 torch 都没 install 成功。</p>
<p>最后，文琦给我一笔指出，我超——tqdm 是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br></pre></td></tr></table></figure>
<p>但是，torch 不是啊！！！</p>
<h2 id="float64"><a href="#float64" class="headerlink" title="float64"></a>float64</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">RuntimeError: expected scalar <span class="built_in">type</span> Double but found Float</span><br></pre></td></tr></table></figure>
<p>中间跑出来了一次 RuntimeError，结果是用了 float64 的缘故，全改成 float32 就好了。</p>
<h2 id="parameter-of-net"><a href="#parameter-of-net" class="headerlink" title="parameter of net"></a>parameter of net</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> net.parameters():</span><br><span class="line">    <span class="built_in">print</span>(param)</span><br><span class="line">-------------------------------</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[-0.0277,  0.2771]], requires_grad=True)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([0.3395], requires_grad=True)</span><br></pre></td></tr></table></figure>
<p>我当时觉得很神奇，为什么一层网络居然有两个输出，然而实际上：</p>
<p><img src="https://s2.loli.net/2022/02/23/C3qXKv1aLnt4Bby.png"  /></p>
<p>&gt;</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> name, param <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">  <span class="built_in">print</span> (name, param.data)</span><br><span class="line">--------------------</span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">for</span> name, param <span class="keyword">in</span> net.named_parameters():</span><br><span class="line">	<span class="built_in">print</span> (name, param.data)</span><br><span class="line">--------------------</span><br><span class="line">linear.weight tensor([[-<span class="number">0.2538</span>,  <span class="number">0.3181</span>]])</span><br><span class="line">linear.bias tensor([-<span class="number">0.0253</span>])</span><br></pre></td></tr></table></figure>
<p>可以输出 name 看看，一层两个 parameter</p>
<p> $A^T$ 和 $b$ 都是网络参数，$A^T$ 和 input feature 点积是 2 维，然后加 b 得到 output feature，b 是 1 维</p>
<p>一层 linear 包含了 weight 跟 bias</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> self.NLP_base.state_dict():</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<p>可以用这句代码查看每层的名字</p>
</blockquote>
<h1 id="Softmax"><a href="#Softmax" class="headerlink" title="Softmax"></a>Softmax</h1><script type="math/tex; mode=display">
H\left(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}\right ) = -\sum_{j=1}^q y_j^{(i)} \log \hat y_j^{(i)}</script><p>粗体 $\boldsymbol y^{(i)}$ 为向量，也即整个 ground truth 矩阵第 $i$ 行的向量。而带下标的$y_j^{(i)}$是向量$\boldsymbol y^{(i)}$中的第 $j$ 个元素，非 0 即 1。</p>
<p>为什么向量$\boldsymbol y^{(i)}$中只有第$y^{(i)}$个元素$y^{(i)}_{y^{(i)}}$为1，其余全为0，于是$H(\boldsymbol y^{(i)}, \boldsymbol {\hat y}^{(i)}) = -\log \hat y*{y^{(i)}}^{(i)}$。也就是说，交叉熵只关心对正确类别的预测概率，因为只要其值足够大，就可以确保分类结果正确。当然，遇到一个样本有多个标签时，例如图像里含有不止一个物体时，我们并不能做这一步简化。但即便对于这种情况，交叉熵同样只关心对图像中出现的物体类别的预测概率。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>深度学习</tag>
        <tag>DIDL</tag>
      </tags>
  </entry>
  <entry>
    <title>一些人生的规划</title>
    <url>/2022/01/14/%E5%87%BA%E5%9B%BD/reasoning/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="009794571a34d41ced08516c12520a1436e638f6893cccf7a223a4c63ee40835"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
  </entry>
  <entry>
    <title>如何利用多巴胺的反馈机制来促进工作效率</title>
    <url>/2022/01/14/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E5%A4%9A%E5%B7%B4%E8%83%BA%E5%B7%A5%E4%BD%9C%E6%9C%BA%E7%90%86/</url>
    <content><![CDATA[<p>原文是<a href="https://www.bilibili.com/video/BV1CP4y1H7SB?spm_id_from=333.999.0.0"><code>bilibili</code>的一个视频</a>，我将它爬了下来并且导出了文稿，随后略作更改。</p>
<h1 id="前导规律"><a href="#前导规律" class="headerlink" title="前导规律"></a>前导规律</h1><p>想象你在一家<code>996</code>的公司，每天重复着机械的工作，承受着巨大的压力。好不容易忙完一整天躺在床上，你也知道自己应该早点睡。但是你会下意识的拿出手机，刷会转视频，玩会游戏。因为这是你每天唯一可以逃离现实享受一会的时刻，可是当你玩到开始犯困之后，看看时间。发现自己只能睡六个小时了，你会开始焦虑，感觉今天也没有按计划。开始健身，没有学习提高自己看着网上别人的生活。你会感叹我的快乐，就只能是这样了，同样的情况也会发生在学生以及各行各业身上。</p>
<p>随着我们的压力越来越大，而时间却越来越少。短时间碎片化的东西可以带给我们片刻的愉悦感，我们也想认识新的朋友。找到新的爱好，但这些现在都变得没那么有意思了，我们会抱怨环境。抱怨短视频游戏加工食品让我们上瘾，但更会自责，为什么自己自控能力这么差。</p>
<p>如果这就是我们这代人应有的生活方式，那为什么会没有幸福感，会觉得痛苦和焦虑呢？</p>
<p>可能大家听说过，多巴胺作为一种神经传导物，它是我们快乐的源泉。然而这种快乐是有代价的，神经学家发现我们大脑产生快乐和痛苦的区域是重叠的。每一次多巴胺所产生的快感，身体会自动用一定的痛感来平衡它。</p>
<p>就像多巴胺国度这本书里说：人类的大脑就像有一个天平，当我们玩游戏，买东西，刷短视频，吃巧克力时，天平会倾斜在快感这一边。但是这只是暂时的，自然情况下，我们的身体会自动产生一些痛感来稳定这个天平。</p>
<p>这个现象在生理学叫做体内平衡。不仅如此，我们的身体会让天平恢复到偏向于痛感这一边。在这一瞬间，我们会有两种感觉，想要更多以及焦虑，如果我们什么都不做一段时间之后，它会恢复到平衡的状态。整个这个过程都是一个健康的，每个人都应该有的状态，因为只有恢复到这个平衡，我们才能重新体会到快感。但是想，假如我们在由痛感恢复到平衡的过程中不断往快乐这边加砝码，会发生什么。身体会产生更多痛感来稳定这个天平，也就是我们会想要更多更焦虑。然后继续用更多的快感来掩盖这些情绪，身体产生更多的痛感，无限循环之后，我们这些焦虑，烦躁等负面情绪就会长时间在天平上呆着不走。这时我们不仅体会不到快乐，而且只能通过不断消费这些行为来维持正常的状态。这就像是有烟瘾的人并不会因为抽烟而感到开心，但是不抽烟绝对会让他非常难受。而且除了快感之外，多半还掌控着我们的动力，不断追求快感的行为最终会让我们进入到一个多半枯竭的状态。以至于很难做一些困难的事情，就比如说如果你早晨一直玩手机，就连起床都会变得非常困难。</p>
<h1 id="如何利用规律"><a href="#如何利用规律" class="headerlink" title="如何利用规律"></a>如何利用规律</h1><p>那既然我们了解了多半在大脑的工作模式，我们能不能反过来利用这些规则。不那么焦虑，甚至完成一些平时很难做到的事情呢？</p>
<p><code>2000</code>年的一个调查研究中，研究人员让十名志愿者在十四摄氏度的冷水池坚持浸泡一小时，结束后采集血样，他们发现这十名志愿者的多巴胺水平平均上升了<code>250%</code>，在接下来几小时的休息后仍然高于基础水平。</p>
<p><code>14</code>度冷水池，因为非常不舒服，相当于我们先把重量压在了痛感这边，而因为体内平衡的系统,我们自己身体会用快感来平衡这个天平。</p>
<h2 id="追求轻微痛感"><a href="#追求轻微痛感" class="headerlink" title="追求轻微痛感"></a>追求轻微痛感</h2><p>第一个提升多巴胺的方法就是追求轻微的痛感。我个人会在每天早晨洗一分钟的冷睡澡，洗完之后的一段时间，你的注意力会非常集中。而且做事情会更有动力，就是因为我们的多巴胺水平在自然的升高。相同原理的方法除了运动健身还有间隙性断食，这些方法除了多巴胺之外还会产生一种叫内非肽的激素。他在止痛的同时也会给我们带来愉悦感和追求快感。不同痛感所产生的快乐不仅不会让我们焦虑，反而会缓解焦虑，所以我推荐大家至少选择一种方式来帮助你找到这种感觉。</p>
<h2 id="控制多巴胺释放时间"><a href="#控制多巴胺释放时间" class="headerlink" title="控制多巴胺释放时间"></a>控制多巴胺释放时间</h2><p>第二种方法就是控制体内的多巴胺释放的时间。我们可能都经历过一些高光时刻，无论是毕业找到新的工作还是获得很高的成就。在那一瞬间，我们都会非常开心，但在接下来几天反而会特别疲劳，这就是多巴胺用尽的状态。就像上面的天平所说，过度的快感，我们的身体必须用更多的痛感来调节它。所以，为了保持稳定的情绪和动力，我们就必须学会管理快感的释放。</p>
<p>那哪些行为会容易让我们过度消耗多巴胺呢？</p>
<p>假设我们的天平在平稳的情况下多巴胺是<code>100%</code>，那么参见下表格：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>物品或者行为</th>
<th>释放程度</th>
</tr>
</thead>
<tbody>
<tr>
<td>咖啡</td>
<td>130%</td>
</tr>
<tr>
<td>正常食物</td>
<td>150%</td>
</tr>
<tr>
<td>巧克力</td>
<td>155%</td>
</tr>
<tr>
<td>电子游戏</td>
<td>175%</td>
</tr>
<tr>
<td>性行为</td>
<td>200%</td>
</tr>
<tr>
<td>尼古丁</td>
<td>250%</td>
</tr>
<tr>
<td>可卡因</td>
<td>325%</td>
</tr>
<tr>
<td>安非他命</td>
<td>325%</td>
</tr>
<tr>
<td>甲基苯丙胺(冰毒)</td>
<td>1000%</td>
</tr>
</tbody>
</table>
</div>
<p>在<code>300%</code>这条红线之前的行为本身还是可以做的，但是我们一定要管理好消费他的时间。</p>
<p>每天睡醒之后，假如我们先做困难的事情。比如学习一个新的技能，养成一个新的爱好，因为多巴胺比较充足，我们反而会从这些枯燥的事情中体会到快乐。而如果我们先做轻松的行为，再做这些事情，你会觉得更加困难，而且当我们在娱乐的时候，也要降低对于快感的期待。赌博之所以让人上瘾，是因为他极大的增加了人们对于奖励的期待而不是奖励本身。当我们在玩游戏的时候，如果你抽到这个人物的概率是百分之百，那么本质上只是一种买卖行为，我们的多巴胺并没有提升很多。而当概率调整在了<code>20%</code>，多巴胺就会极大的释放，这种现象叫做奖励预判误差。整个赌场都是建立在这个规则之下的，所以大家尽可能不要碰这种类型的东西。如果一定要玩，就要主动降低期待，否则就非常容易产生痛感，就是我们经常说的上头。</p>
<h3 id="创造空间，延迟消费"><a href="#创造空间，延迟消费" class="headerlink" title="创造空间，延迟消费"></a>创造空间，延迟消费</h3><p>最后一个方法是创造空间，延迟消费。可能大家都有这个经历，就是在一瞬间只有不断的去消费，去吃去玩才是正确的事情，可是过了那几分钟就好像没有什么。</p>
<p>但有没有方法可以帮助我们熬过这个过程呢？有时候晚上睡前我会特别想吃东西，如果当时马上找东西吃，吃完以后会非常自责。所以每次遇到这种情况，我就会坐在一个舒服的地方，闭上眼睛，集中注意在呼吸的起伏上。一般五分钟左右，这种感觉就会慢慢消失，这个呼吸训练的方法帮我在备赛期度过了无数个难熬的晚上，通过创造空间，延迟消费来让这个天平慢慢回复到平衡的状态。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是为大家推荐的如何处理和多巴胺关系的方法。多巴胺本身并没有好坏之分，它更多类似于人类寻找未来资源的货币。我们只有认识并管理他，才不会过度消费这个货币。</p>
<p>在研究这个话题的过程中，我发现作为一个人，我们本应该有能力去享受亲情，爱情，友情，学习的乐趣，创造的乐趣。但在现在这种高度诱惑的环境中，似乎只有管理好多巴胺才能实现这一点。</p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>锻炼</tag>
      </tags>
  </entry>
  <entry>
    <title>人生第一次调参</title>
    <url>/2022/01/13/%E7%A3%95%E7%9B%90/%E8%B0%83%E5%8F%82/</url>
    <content><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">工作路径：</span><br><span class="line">/home/aidrive/tb5zhh/anomaly_detection/PointSupervisionAndPiCIE</span><br><span class="line">conda activate /home/aidrive/tb5zhh/.conda/envs/picie 激活环境</span><br><span class="line">python train_pointATTout_ViT.py configs/xxx cuda:0 开始跑程序</span><br></pre></td></tr></table></figure>
<h1 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_lr : 0.025 #per batchsize256</span><br><span class="line">ssl_weight: 0.</span><br><span class="line">backbone: &#x27;vit_uper&#x27;</span><br></pre></td></tr></table></figure>
<p>第一行是学习率，第二行是不同块之间的权重，第三行是<code>backbone</code>的方法。</p>
<p>每改一个参数要用一个新的配置文件，用新的名字，不然会覆盖之前的结果。</p>
<p><code>backbone</code>清单</p>
<ul>
<li><code>vit_fpn</code></li>
<li><code>vit_uper</code></li>
<li><code>vit_refine</code></li>
</ul>
<p><code>ssl_weight</code>的范围</p>
<ul>
<li>非负数</li>
</ul>
<p><code>learning_rate</code>范围</p>
<ul>
<li>正数</li>
</ul>
<h1 id="已经完成实验的参数"><a href="#已经完成实验的参数" class="headerlink" title="已经完成实验的参数"></a>已经完成实验的参数</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">backbone: &#x27;vit_refine&#x27;</span><br><span class="line">ssl_weight: 0.</span><br><span class="line">base_lr : 0.025</span><br><span class="line">final mIoU = 0.44119</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">backbone: &#x27;vit_refine&#x27;</span><br><span class="line">ssl_weight: 0.5</span><br><span class="line">base_lr : 0.025</span><br><span class="line">final mIoU = 0.44647</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">backbone: &#x27;vit_refine&#x27;</span><br><span class="line">ssl_weight: 1.0</span><br><span class="line">base_lr : 0.025</span><br><span class="line">final mIoU = 0.44614</span><br></pre></td></tr></table></figure>
<h1 id="未修改部分"><a href="#未修改部分" class="headerlink" title="未修改部分"></a>未修改部分</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">initializing : False # if initializing, save a .pkl files, else read saved .pkl files</span><br><span class="line">AMP : True #currently amp cause nan loss</span><br><span class="line">framework : &#x27;PointSup&#x27;</span><br><span class="line"></span><br><span class="line">backbone: </span><br><span class="line"></span><br><span class="line">fpn_inplanes: [256, 512, 768, 768]</span><br><span class="line">ssl_loss: &#x27;simpleCE&#x27; #kl used!</span><br><span class="line"></span><br><span class="line">ssl_weight: </span><br><span class="line"></span><br><span class="line">pretrained : &#x27;rn50vit.pth&#x27;</span><br><span class="line">num_workers : 8</span><br><span class="line">batch_size : 6</span><br><span class="line">embedding_dim : [256,60] #first for detection head, second for class num</span><br><span class="line">steps : 60000  #this is very important to be 20000</span><br><span class="line">epoch : 100 #if epoch&gt;0, it would overide steps</span><br><span class="line">save_steps : 10000 # save a checkpoint per 10000 steps</span><br><span class="line">save_epoch : 25 # save a checkpoint per 5 epoch, this would overide save steps</span><br><span class="line">input_size : [384,384] </span><br><span class="line"></span><br><span class="line">base_lr : </span><br><span class="line"></span><br><span class="line">dataStorage : &#x27;/home/jiayj/Datasets/&#x27;</span><br><span class="line">folder : [&#x27;train&#x27;,&#x27;val&#x27;]</span><br><span class="line">videosets : &#x27;PASCALContext/&#x27;</span><br><span class="line">label : [&#x27;Point_Annotation&#x27;,&#x27;valnpy&#x27;]</span><br></pre></td></tr></table></figure>
<h1 id="目标参数"><a href="#目标参数" class="headerlink" title="目标参数"></a>目标参数</h1><div class="table-container">
<table>
<thead>
<tr>
<th>backbone</th>
<th>weight</th>
<th>learning rate</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>refine</td>
<td>0</td>
<td>0.025</td>
<td>0.44001</td>
</tr>
<tr>
<td>refine</td>
<td>0.5</td>
<td>0.025</td>
<td>0.44647</td>
</tr>
<tr>
<td>refine</td>
<td>1</td>
<td>0.025</td>
<td>0.44614</td>
</tr>
<tr>
<td>refine</td>
<td>0</td>
<td>0.05</td>
<td>0.43839</td>
</tr>
<tr>
<td>refine</td>
<td>0.5</td>
<td>0.05</td>
<td>0.43998</td>
</tr>
<tr>
<td>refine</td>
<td>1</td>
<td>0.05</td>
<td>重跑</td>
</tr>
<tr>
<td>refine</td>
<td>0</td>
<td>0.1</td>
<td>0.41629</td>
</tr>
<tr>
<td>refine</td>
<td>0.5</td>
<td>0.1</td>
<td>0.41652</td>
</tr>
<tr>
<td>refine</td>
<td>1</td>
<td>0.1</td>
<td>0.41458</td>
</tr>
<tr>
<td>fpn</td>
<td>0</td>
<td>0.025</td>
<td>0.44658</td>
</tr>
<tr>
<td>fpn</td>
<td>0.5</td>
<td>0.025</td>
<td>0.44501</td>
</tr>
<tr>
<td>fpn</td>
<td>1</td>
<td>0.025</td>
<td>0.41005</td>
</tr>
<tr>
<td>fpn</td>
<td>0</td>
<td>0.05</td>
<td>0.42665</td>
</tr>
<tr>
<td>fpn</td>
<td>0.5</td>
<td>0.05</td>
<td>0.43390</td>
</tr>
<tr>
<td>fpn</td>
<td>1</td>
<td>0.05</td>
<td>重跑</td>
</tr>
<tr>
<td>fpn</td>
<td>0</td>
<td>0.1</td>
<td>0.42078</td>
</tr>
<tr>
<td>fpn</td>
<td>0.5</td>
<td>0.1</td>
<td>0.39132</td>
</tr>
<tr>
<td>fpn</td>
<td>1</td>
<td>0.1</td>
<td>0.38810</td>
</tr>
<tr>
<td>uper</td>
<td>0</td>
<td>0.025</td>
<td>0.18370</td>
</tr>
<tr>
<td>uper</td>
<td>0.5</td>
<td>0.025</td>
<td>重跑</td>
</tr>
<tr>
<td>uper</td>
<td>1</td>
<td>0.025</td>
<td>0.18156</td>
</tr>
<tr>
<td>uper</td>
<td>0</td>
<td>0.05</td>
<td>0.17810</td>
</tr>
<tr>
<td>uper</td>
<td>0.5</td>
<td>0.05</td>
<td>0.17887</td>
</tr>
<tr>
<td>uper</td>
<td>1</td>
<td>0.05</td>
<td>0.17669</td>
</tr>
<tr>
<td>uper</td>
<td>0</td>
<td>0.1</td>
<td>0.16330</td>
</tr>
<tr>
<td>uper</td>
<td>0.5</td>
<td>0.1</td>
<td>0.16579</td>
</tr>
<tr>
<td>uper</td>
<td>1</td>
<td>0.1</td>
<td>0.16679</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> uper fpn</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> 0.025 0.05 0.1</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> 0 0.5 1</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			<span class="built_in">echo</span> <span class="string">&quot;当前的backbone为vit_<span class="variable">$&#123;i&#125;</span>，当前的learning rate为<span class="variable">$&#123;k&#125;</span>，当前的weight为<span class="variable">$&#123;j&#125;</span>&quot;</span></span><br><span class="line">			python3 train_pointATTout_ViT.py configs/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span>.yaml cuda:0</span><br><span class="line">			<span class="built_in">echo</span> <span class="string">&quot;完成<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span>.yaml&quot;</span></span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> 0.05 0.1</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> 0 0.5 1</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;当前的backbone为vit_refine，当前的learning rate为<span class="variable">$&#123;k&#125;</span>，当前的weight为<span class="variable">$&#123;j&#125;</span>&quot;</span></span><br><span class="line">			python train_pointATTout_ViT.py configs/refine_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span>.yaml cuda:0</span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;完成$refine_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span>.yaml&quot;</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>注意，在脚本里激活<code>conda</code>貌似会出问题。</p>
<p>实际上，这么跑效率低了，因为完全没有利用服务器的集群，具体如何利用应该参考<code>AIR</code>的<code>SLUM</code>文档。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> uper fpn</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> 0.025 0.05 0.1</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> 0 0.5 1</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">			srun --gres=gpu:1 --time 3-0 python3 train_pointATTout_ViT.py configs/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span> cuda:0 1&gt;logs/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;k&#125;</span>_<span class="variable">$&#123;j&#125;</span>.out 2&gt;&amp;1 &amp;</span><br><span class="line">		<span class="keyword">done</span></span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> 0.05 0.1</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> 0 0.5 1</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">		nohup srun --gres=gpu:1 --time 3-0 python train_pointATTout_ViT.py configs/refine_<span class="variable">$&#123;j&#125;</span>_<span class="variable">$&#123;k&#125;</span> cuda:0 1&gt;logs/refine_<span class="variable">$&#123;k&#125;</span>_<span class="variable">$&#123;j&#125;</span>.out 2&gt;&amp;1 &amp;</span><br><span class="line">	<span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">initializing : <span class="literal">False</span> <span class="comment"># if initializing, save a .pkl files, else read saved .pkl files</span></span><br><span class="line">AMP : <span class="literal">True</span> <span class="comment">#currently amp cause nan loss</span></span><br><span class="line">framework : <span class="string">&#x27;PointSup&#x27;</span></span><br><span class="line">backbone: <span class="string">&#x27;vit_refine&#x27;</span></span><br><span class="line">fpn_inplanes: [<span class="number">256</span>, <span class="number">512</span>, <span class="number">768</span>, <span class="number">768</span>]</span><br><span class="line">ssl_loss: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">pretrained : <span class="string">&#x27;rn50vit.pth&#x27;</span></span><br><span class="line">num_workers : <span class="number">8</span></span><br><span class="line">batch_size : <span class="number">8</span></span><br><span class="line">embedding_dim : [<span class="number">256</span>,<span class="number">150</span>] <span class="comment">#first for detection head, second for class num</span></span><br><span class="line">steps : <span class="number">60000</span>  <span class="comment">#this is very important to be 20000</span></span><br><span class="line">epoch : <span class="number">100</span> <span class="comment">#if epoch&gt;0, it would overide steps</span></span><br><span class="line">save_steps : <span class="number">10000</span> <span class="comment"># save a checkpoint per 10000 steps</span></span><br><span class="line">save_epoch : <span class="number">10</span> <span class="comment"># save a checkpoint per 5 epoch, this would overide save steps</span></span><br><span class="line">input_size : [<span class="number">384</span>,<span class="number">384</span>] </span><br><span class="line">base_lr : <span class="number">0.025</span> <span class="comment">#per batchsize256</span></span><br><span class="line">dataStorage : <span class="string">&#x27;/home/aidrive/jiayj/Datasets/&#x27;</span></span><br><span class="line">folder : [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;val&#x27;</span>]</span><br><span class="line">videosets : <span class="string">&#x27;ade20k/&#x27;</span></span><br><span class="line">label : [<span class="string">&#x27;Point_Annotation&#x27;</span>,<span class="string">&#x27;valnpy&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">结果：final mIoU = <span class="number">0.29706</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">initializing : <span class="literal">False</span> <span class="comment"># if initializing, save a .pkl files, else read saved .pkl files</span></span><br><span class="line">AMP : <span class="literal">True</span> <span class="comment">#currently amp cause nan loss</span></span><br><span class="line">framework : <span class="string">&#x27;PointSup&#x27;</span></span><br><span class="line">backbone: <span class="string">&#x27;swint_uper&#x27;</span></span><br><span class="line">fpn_inplanes: [<span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>]</span><br><span class="line">ssl_loss: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">pretrained : <span class="string">&#x27;swin_base.pth&#x27;</span></span><br><span class="line">num_workers : <span class="number">8</span></span><br><span class="line">batch_size : <span class="number">8</span></span><br><span class="line">embedding_dim : [<span class="number">256</span>,<span class="number">60</span>] <span class="comment">#first for detection head, second for class num</span></span><br><span class="line">steps : <span class="number">60000</span>  <span class="comment">#this is very important to be 20000</span></span><br><span class="line">epoch : <span class="number">100</span> <span class="comment">#if epoch&gt;0, it would overide steps</span></span><br><span class="line">save_steps : <span class="number">10000</span> <span class="comment"># save a checkpoint per 10000 steps</span></span><br><span class="line">save_epoch : <span class="number">10</span> <span class="comment"># save a checkpoint per 5 epoch, this would overide save steps</span></span><br><span class="line">input_size : [<span class="number">384</span>,<span class="number">384</span>] </span><br><span class="line">base_lr : <span class="number">0.025</span> <span class="comment">#per batchsize256</span></span><br><span class="line">dataStorage : <span class="string">&#x27;/home/aidrive/jiayj/Datasets/&#x27;</span></span><br><span class="line">folder : [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;val&#x27;</span>]</span><br><span class="line">videosets : <span class="string">&#x27;PASCALContext/&#x27;</span></span><br><span class="line">label : [<span class="string">&#x27;Point_Annotation&#x27;</span>,<span class="string">&#x27;valnpy&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">结果：没找到total miou 只有test mIoU = <span class="number">0.45763</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">initializing : <span class="literal">False</span> <span class="comment"># if initializing, save a .pkl files, else read saved .pkl files</span></span><br><span class="line">AMP : <span class="literal">True</span> <span class="comment">#currently amp cause nan loss</span></span><br><span class="line">framework : <span class="string">&#x27;PointSup&#x27;</span></span><br><span class="line">backbone: <span class="string">&#x27;swint_uper&#x27;</span></span><br><span class="line">fpn_inplanes: [<span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>]</span><br><span class="line">ssl_loss: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">pretrained : <span class="string">&#x27;swin_base.pth&#x27;</span></span><br><span class="line">num_workers : <span class="number">8</span></span><br><span class="line">batch_size : <span class="number">8</span></span><br><span class="line">embedding_dim : [<span class="number">256</span>,<span class="number">150</span>] <span class="comment">#first for detection head, second for class num</span></span><br><span class="line">steps : <span class="number">60000</span>  <span class="comment">#this is very important to be 20000</span></span><br><span class="line">epoch : <span class="number">100</span> <span class="comment">#if epoch&gt;0, it would overide steps</span></span><br><span class="line">save_steps : <span class="number">10000</span> <span class="comment"># save a checkpoint per 10000 steps</span></span><br><span class="line">save_epoch : <span class="number">10</span> <span class="comment"># save a checkpoint per 5 epoch, this would overide save steps</span></span><br><span class="line">input_size : [<span class="number">384</span>,<span class="number">384</span>] </span><br><span class="line">base_lr : <span class="number">0.025</span> <span class="comment">#per batchsize256</span></span><br><span class="line">dataStorage : <span class="string">&#x27;/home/aidrive/jiayj/Datasets/&#x27;</span></span><br><span class="line">folder : [<span class="string">&#x27;train&#x27;</span>,<span class="string">&#x27;val&#x27;</span>]</span><br><span class="line">videosets : <span class="string">&#x27;ade20k/&#x27;</span></span><br><span class="line">label : [<span class="string">&#x27;Point_Annotation&#x27;</span>,<span class="string">&#x27;valnpy&#x27;</span>]</span><br><span class="line">  </span><br><span class="line">final mIoU = <span class="number">0.15427</span></span><br></pre></td></tr></table></figure>
<h1 id="三个重跑的参数"><a href="#三个重跑的参数" class="headerlink" title="三个重跑的参数"></a>三个重跑的参数</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate /home/aidrive/tb5zhh/.conda/envs/picie</span><br><span class="line">srun --gres=gpu:1 --time 3-0 python train_pointATTout_ViT.py configs/refine_1_0.05 cuda:0</span><br><span class="line">srun --gres=gpu:1 --time 3-0 python train_pointATTout_ViT.py configs/fpn_1_0.05 cuda:0</span><br><span class="line">srun --gres=gpu:1 --time 3-0 python train_pointATTout_ViT.py configs/uper_0.5_0.025 cuda:0</span><br></pre></td></tr></table></figure>
<h1 id="第二阶段调参"><a href="#第二阶段调参" class="headerlink" title="第二阶段调参"></a>第二阶段调参</h1><ul>
<li>首先，把数据从 247 迁移到百度服务器</li>
<li>写个 Python 脚本，具有一定的鲁棒性，然后批量改数据——不用改，直接新建就好了</li>
<li>开始提交任务，套用原本的 bash</li>
</ul>
<h2 id="调参的设计思路"><a href="#调参的设计思路" class="headerlink" title="调参的设计思路"></a>调参的设计思路</h2><p>一共有 23 个参数，实际上能调整的分两类</p>
<ul>
<li>数字</li>
<li>训练模型</li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>设计一个函数，通过 model 来选择调整的参数序号， num 为具体改为的参数。同时我们做如下的语义约定：</p>
<ul>
<li>10：ssl_weight——[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0,7, 0.8, 0.9, 1]</li>
<li><del>13： num_workers——[4, 6, 8, 10, 12]——这是 CPU 调用，调了没用， 就用 8</del></li>
<li><del>14: batch_size—— [4, 6, 8, 10, 12]——调了显存要寄，就用 6</del></li>
<li><del>16: steps——[40000, 45000, 50000, 55000]——不用调，因为 if epoch&gt;0, it would overide steps</del></li>
<li>17: epoch——[70, 80, 90, 100 ,110, 120, 130]</li>
<li><del>18: save_steps——[7000. 8000. 9000. 10000, 11000, 12000, 13000]——和 steps 一样，不用调, save a checkpoint per 5 epoch, this would overide save steps</del></li>
<li><del>19: save_epoch——[70, 80, 90, 100, 110, 120, 130]——也不用调</del></li>
<li><del>22: base_lr——[0.07, 0.08, 0.09, 0.1, 0.11, 0.12, 0.13]</del></li>
<li>22: base_lr 之前那个学习率太大了，大于 0.05 ，就寄了——[0.01, 0.015, 0.02, 0.025, 0.03, 0.035]</li>
</ul>
<h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><ul>
<li>数据集    deep globe(因为之前那个数据集铁寄了，不过我该上哪儿去找这个数据集，以及，emmm，哪个参数是数据集？)</li>
<li>三个 backbone 的方式<ul>
<li>vit_fpn</li>
<li>vit_refine</li>
<li>vit_uper</li>
</ul>
</li>
</ul>
<p>不过这么调参真的靠谱吗？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="number">10</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">4</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2401000</span></span><br></pre></td></tr></table></figure>
<h3 id="实际进展"><a href="#实际进展" class="headerlink" title="实际进展"></a>实际进展</h3><p>调了一堆没用的参数，现在先去测试新的数据集</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>FPN &amp; RefineNet</title>
    <url>/2022/01/12/%E7%A3%95%E7%9B%90/FPN/</url>
    <content><![CDATA[<h1 id="Feature-Pyramid-Networks-for-Object-Detection"><a href="#Feature-Pyramid-Networks-for-Object-Detection" class="headerlink" title="Feature Pyramid Networks for Object Detection"></a>Feature Pyramid Networks for Object Detection</h1><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p><strong>原始图像经过卷积神经网络后下采样一定倍数后，有一些小像素物体在特征图上会消失，导致无法被检测出。</strong><br>举个例子，假设在原始图像中，待检测物体尺寸大小为32*32，那么下采样32倍后，在特征图上该物体尺寸变为1*1，那么该物体的特征，有一定可能被保留下来；但如果原尺寸为16*16，经过下采样32倍后，很可能在某一个<code>maxpooling</code>中被其他特征挤掉，而在特征图上消失，导致后续分类检测层无法检测出该物体。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>为了能最多的检测出图像上的大小目标，有如下几个解决思路。</p>
<h3 id="图像金字塔"><a href="#图像金字塔" class="headerlink" title="图像金字塔"></a>图像金字塔</h3><p>生成不同尺寸的图片，每张图片生成不同的特征，分别进行预测，最后统计所有尺寸的预测结果。</p>
<h3 id="feature-map"><a href="#feature-map" class="headerlink" title="feature map"></a>feature map</h3><p>使用神经网络某一层输出的<code>feature map</code>进行预测，一般是网络最后一层<code>feature map</code>；然而靠近网络输入层的<code>feature map</code>包含粗略的位置信息，导致预测的目标<code>bbox</code>不准确，靠近最后网络最后一层的<code>feature map</code>会忽略小物体信息。</p>
<h3 id="特征金字塔"><a href="#特征金字塔" class="headerlink" title="特征金字塔"></a>特征金字塔</h3><p>使用不同层次的金字塔层<code>feature map</code>进行预测。<code>SSD</code>就是采用这种多尺度特征融合方法，从网络不同层抽取不同尺寸的特征做预测，没有增加额外的计算量。</p>
<h3 id="特征金字塔网络即FPN"><a href="#特征金字塔网络即FPN" class="headerlink" title="特征金字塔网络即FPN"></a>特征金字塔网络即<code>FPN</code></h3><p>识别不同尺寸的物体是目标检测中的一个基本挑战，而特征金字塔一直是多尺度目标检测中的一个基本的组成部分，但是由于特征金字塔计算量大，会拖慢整个检测速度，所以大多数方法为了检测速度而尽可能的去避免使用特征金字塔，而是只使用高层的特征来进行预测。高层的特征虽然包含了丰富的语义信息，但是由于低分辨率，很难准确地保存物体的位置信息。与之相反，低层的特征虽然语义信息较少，但是由于分辨率高，就可以准确地包含物体位置信息。所以如果可以将低层的特征和高层的特征融合起来，就能得到一个识别和定位都准确的目标检测系统。所以本文就旨在设计出这样的一个结构来使得检测准确且快速。</p>
<p>虽然之前也有算法采用了多尺度融合的方式，但是一般都是在特征融合之后再做预测，而本文则是在不同的特征层都单独进行预测。</p>
<p>对最底层的特征进行向上采样，并与该底层特征进行融合，得到高分辨率、强语义的特征（即加强了特征的提取）。</p>
<p>为了不让原始特征在最后一层特征图上消失，业界最常用的办法就是多尺度特征图检测，使用多个下采样倍数提取出多张特征图。FPN就是目前多尺度特征图提取方法中的<code>state-of-the-art</code></p>
<p>严格来说，<code>FPN</code>是一个多尺度物体检测特征提取方法，然而大尺寸的物体检测效果一直比较理想，所以FPN主要大幅提升了小像素目标检测的效果。</p>
<p><strong>核心想法：把高层的特征传下来，补充低层的语义，这样就可以获得高分辨率、强语义的特征，有利于小目标的检测。</strong></p>
<h2 id="三种常见结构"><a href="#三种常见结构" class="headerlink" title="三种常见结构"></a>三种常见结构</h2><h3 id="Featurized-image-pyramid"><a href="#Featurized-image-pyramid" class="headerlink" title="Featurized image pyramid"></a><code>Featurized image pyramid</code></h3><p>这种方式就是先把图片弄成不同尺寸的，然后再对每种尺寸的图片提取不同尺度的特征，再对每个尺度的特征都进行单独的预测，这种方式的优点是不同尺度的特征都可以包含很丰富的语义信息，但是缺点就是时间成本太高。</p>
<h3 id="Pyramid-feature-hierarchy"><a href="#Pyramid-feature-hierarchy" class="headerlink" title="Pyramid feature hierarchy"></a><code>Pyramid feature hierarchy</code></h3><p>这是<code>SSD</code>采用的多尺度融合的方法，即从网络不同层抽取不同尺度的特征，然后在这不同尺度的特征上分别进行预测，这种方法的优点在于它不需要额外的计算量。而缺点就是有些尺度的特征语义信息不是很丰富，此外，<code>SSD</code>没有用到足够低层的特征，作者认为低层的特征对于小物体检测是非常有帮助的。</p>
<h3 id="Single-feature-map"><a href="#Single-feature-map" class="headerlink" title="Single feature map"></a><code>Single feature map</code></h3><p>这是在<code>SPPnet</code>，<code>Fast R-CNN</code>，<code>Faster R-CNN</code>中使用的，就是在网络的最后一层的特征图上进行预测。这种方法的优点是计算速度会比较快，但是缺点就是最后一层的特征图分辨率低，不能准确的包含物体的位置信息。</p>
<p>了使得不同尺度的特征都包含丰富的语义信息，同时又不使得计算成本过高，作者就采用<code>top down</code>和<code>lateral connection</code>的方式，让低层高分辨率低语义的特征和高层低分辨率高语义的特征融合在一起，使得最终得到的不同尺度的特征图都有丰富的语义信息</p>
<h2 id="特征金字塔结构"><a href="#特征金字塔结构" class="headerlink" title="特征金字塔结构"></a>特征金字塔结构</h2><p><a href="https://pic4.zhimg.com/v2-a81f97b300305ec60696f77d9ea8cbf7_r.jpg"></a></p>
<h1 id="RefineNet-Multi-Path-Refinement-Networks-for-High-Resolution-Semantic-Segmentation"><a href="#RefineNet-Multi-Path-Refinement-Networks-for-High-Resolution-Semantic-Segmentation" class="headerlink" title="RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation"></a>RefineNet: Multi-Path Refinement Networks for High-Resolution Semantic Segmentation</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前流行的深度网络，比如<code>VGG、Resnet</code>等，由于<code>pooling</code>和卷积步长的存在，<code>feature map</code>会越来越小，导致损失一些细粒度的信息（低层<code>feature map</code>有较丰富的细粒度信息，高层<code>feature map</code>则拥有更抽象，粗粒度的信息）。对于分类问题而言，只需要深层的强语义信息就能表现较好，但是对于稠密预测问题，比如逐像素的图像分割问题，除了需要强语义信息之外，还需要高空间分辨率。</p>
<h2 id="已有的解决思路"><a href="#已有的解决思路" class="headerlink" title="已有的解决思路"></a>已有的解决思路</h2><ol>
<li>针对<code>pooling</code>下采样过程中的分辨率损失，采用<code>deconvolution</code>恢复。但是却很难恢复位置信息。</li>
<li>使用空洞卷积保持分辨率，增大感受野，但是这么做有两个缺点：A.明显增加了计算代价。B.空洞卷积是一种<code>coarse sub-sampling</code>，因此容易损失重要信息。</li>
<li>通过<code>skip connection</code>来产生高分辨率的预测。作者认为高级语义特征可以更好地进行分类识别，而低级别视觉特征有助于生成清晰、详细的边界。所以作者认为第<code>3</code>点是很好的思路。</li>
</ol>
<h2 id="RefineNet的贡献"><a href="#RefineNet的贡献" class="headerlink" title="RefineNet的贡献"></a>RefineNet的贡献</h2><ol>
<li>提出一种多路径<code>refinement</code>网络，称为<code>RefineNet</code>。这种网络可以使用各个层级的<code>features</code>，使得语义分割更为精准。</li>
<li><code>RefineNet</code>中所有部分都利用<code>residual connections(identity mappings）</code>，使得梯度更容易短向或者长向前传，使段端对端的训练变得更加容易和高效。</li>
<li>提出了一种叫做<code>chained residual pooling</code>的模块，它可以从一个大的图像区域捕捉背景上下文信息。</li>
</ol>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>CV</tag>
      </tags>
  </entry>
  <entry>
    <title>oop笔记  L3  封装与接口</title>
    <url>/2022/01/12/CS/OOP/L3%20%E5%B0%81%E8%A3%85%E4%B8%8E%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="L3-封装与接口"><a href="#L3-封装与接口" class="headerlink" title="L3  封装与接口"></a>L3  封装与接口</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>3.3.2 优先匹配调用</li>
<li>5.1.2 追踪返回类型的函数</li>
<li>5.5 auto字符例题</li>
<li>6.1 private与overload的先后</li>
</ul>
</blockquote>
<hr>
<h1 id="一、函数重载"><a href="#一、函数重载" class="headerlink" title="一、函数重载"></a>一、函数重载</h1><h2 id="1-1-定义与意义"><a href="#1-1-定义与意义" class="headerlink" title="1.1  定义与意义"></a>1.1  定义与意义</h2><p>同一名称的函数，有两个以上不同的函数实现， 被称为“函数重载”。</p>
<h2 id="1-2-区别方法"><a href="#1-2-区别方法" class="headerlink" title="1.2  区别方法"></a>1.2  区别方法</h2><p>多个同名的函数实现之间，必须保证至少有一个函数参数的类型有区别，“这些同名函数的形式参数的个数、类型或者顺序必须不同”——返回值、参数名称等不能作为区分标识。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;<span class="keyword">return</span> s/<span class="number">2.0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> s)</span></span>&#123;<span class="keyword">return</span> s*<span class="number">2</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">f</span>(<span class="number">3</span>)&lt;&lt;endl;<span class="comment">//编译器应该调用哪个函数呢？</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么返回值不能作为区别？</p>
<p>编译器无法识别调用哪一个函数。</p>
<h2 id="1-3-自动类型转换"><a href="#1-3-自动类型转换" class="headerlink" title="1.3  自动类型转换"></a>1.3  自动类型转换</h2><h3 id="1-3-1-定义与性质"><a href="#1-3-1-定义与性质" class="headerlink" title="1.3.1  定义与性质"></a>1.3.1  定义与性质</h3><p>如果函数调用语句的实参与函数定义中的形参数据类型不同，且两种数据类型在C++中可以进行自动类型转换（如int和float，float在自动转换成int时是向下取整），则实参会被转换为形参的类型。（关于自动类型转换在L6中有进一步阐述）</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">float</span> score)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;score=&quot;</span>&lt;&lt;score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">print</span>(a);<span class="comment">//此时a会被转换为float型</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又例如：自动类型转换也可以通过自定义的类型转换运算符来完成。（在L6中阐述）</p>
<h3 id="1-3-2-优先匹配调用"><a href="#1-3-2-优先匹配调用" class="headerlink" title="1.3.2  优先匹配调用"></a>1.3.2  优先匹配调用</h3><p>当函数重载时，会优先调用类型匹配的函数实现，否则才会进行类型转换。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> score)</span></span>&#123;cout&lt;&lt;score&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function">voiid <span class="title">print</span><span class="params">(<span class="keyword">float</span> score)</span></span>&#123;cout&lt;&lt;score&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> a=<span class="number">1.0</span>;</span><br><span class="line">	<span class="built_in">print</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这里看上去和优先匹配调用相互矛盾，其实并不是，这是由于float输出精度的问题。我们稍作修改：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> score)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;int =&quot;</span>&lt;&lt;score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">float</span> score)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;float=&quot;</span>&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;score&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> a=<span class="number">1.0</span>;</span><br><span class="line">	<span class="built_in">print</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="keyword">float</span>=<span class="number">1.00</span></span><br></pre></td></tr></table></figure>
<p>这里调用了float使用的控制精度的库，<iomanip></p>
<h1 id="二、参数缺省值"><a href="#二、参数缺省值" class="headerlink" title="二、参数缺省值"></a>二、参数缺省值</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1  定义"></a>2.1  定义</h2><p>函数参数可以在定义时设置默认值（缺省值），这样在调用该函数时，若不提供相应的实参，则编译自动将相应形参设置成缺省值。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* msg=<span class="string">&quot;hello&quot;</span>)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;msg&lt;&lt;<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;Beijing…&quot;</span>;</span><br><span class="line">	<span class="built_in">print</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：Beijing…hello#</span><br></pre></td></tr></table></figure>
<h2 id="2-2-语法"><a href="#2-2-语法" class="headerlink" title="2.2  语法"></a>2.2  语法</h2><p>缺省值必须放在没有缺省值的参数之后，有多个缺省值时同理。</p>
<h2 id="2-3-缺省值保护"><a href="#2-3-缺省值保护" class="headerlink" title="2.3  缺省值保护"></a>2.3  缺省值保护</h2><p>如果因为函数缺省值，导致了函数调用的二义性，编译器将拒绝代码。也就是说，参数类型可以发生自动类型转换的函数重载是合法的，因为编译器有调用的优先级；但是缺省值带来的参数类型重复却是不合法的。如下面代码，会导致编译不通过：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a.<span class="keyword">int</span> b=<span class="number">1</span>)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;a+b&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="built_in">fun</span>(<span class="number">2</span>);<span class="comment">//编译器不知道该调用第一个还是第二个函数</span></span><br></pre></td></tr></table></figure>
<p>例1：</p>
<p><img src="https://s2.loli.net/2022/01/10/1G2RMxN7cQZvFtK.png" alt="https://s2.loli.net/2022/01/10/1G2RMxN7cQZvFtK.png"></p>
<p>A.不可根据形参名字与有无形参来区别函数。</p>
<p>B.不可根据返回值类型不同来区别函数。</p>
<p>D.缺省值造成二义性，编译失败。</p>
<p>例2：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;<span class="keyword">return</span> a+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">fun</span><span class="params">(<span class="keyword">float</span> a)</span></span>&#123;<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a+b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> a=<span class="number">1.5</span>;</span><br><span class="line">	<span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">fun</span>(<span class="built_in">fun</span>(a,b)+<span class="built_in">fun</span>(<span class="built_in">fun</span>(a),b)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>fun(fun(a,b)):里层的fun(a,b)调用int fun(int a, int b)，直接对float a进行强制类型转换并向下取整，fun(1,2)，故而返回了3且为int类型。调用int fun(int a=1)，返回4。</p>
<p>fun(fun(a), b)：里层fun(a)调用float fun(float a)，返回float 1.5，接着fun(1.5, 2)，此处仅可以调用int fun(int a, int b)，故而强制类型转换且向下取整，调用fun(1,2)。返回3。<br>综上，答案为7。</p>
<h1 id="三、auto关键字与decltype"><a href="#三、auto关键字与decltype" class="headerlink" title="三、auto关键字与decltype"></a>三、auto关键字与decltype</h1><h2 id="3-1-作用与意义"><a href="#3-1-作用与意义" class="headerlink" title="3.1  作用与意义"></a>3.1  作用与意义</h2><h3 id="3-1-1-自动确定变量的类型"><a href="#3-1-1-自动确定变量的类型" class="headerlink" title="3.1.1  自动确定变量的类型"></a>3.1.1  自动确定变量的类型</h3><p>由编译器根据上下文自动确定变量类型。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> i=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//i是int型变量</span></span><br><span class="line"><span class="keyword">auto</span> f=<span class="number">4.0f</span>;</span><br><span class="line"><span class="comment">//f是float型变量</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">a</span><span class="params">(<span class="string">&#x27;c&#x27;</span>)</span></span>;<span class="comment">//这句话等价于 auto a=&#x27;c&#x27;;</span></span><br><span class="line"><span class="comment">//a是char型变量</span></span><br><span class="line"><span class="keyword">auto</span> b=a;</span><br><span class="line"><span class="comment">//b是char型变量</span></span><br><span class="line"><span class="keyword">auto</span> *x=<span class="keyword">new</span> <span class="built_in"><span class="keyword">auto</span></span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//x是int*</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-追踪返回类型的函数"><a href="#3-1-2-追踪返回类型的函数" class="headerlink" title="3.1.2  追踪返回类型的函数"></a>3.1.2  追踪返回类型的函数</h3><p>可以将函数返回类型的声明信息放到函数参数列表后进行声明。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">普通函数声明形式</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span>* ptr,<span class="keyword">int</span> val)</span></span>;</span><br><span class="line">追踪返回类型的函数声明形式</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span>* ptr,<span class="keyword">int</span> val)</span>-&gt;<span class="keyword">int</span></span>;</span><br><span class="line">追踪返回类型在原本函数返回值的位置使用<span class="keyword">auto</span>关键字</span><br></pre></td></tr></table></figure>
<p>在这一例子中，auto关键字并没有实质作用，然而在泛型编程中，auto有着巨大的作用。</p>
<p>在模板类型推导过程中，比如下列代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="title">decltype</span><span class="params">(t1+t2)</span> <span class="title">Sum</span><span class="params">(T1&amp;t1, T2&amp; t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> t1+t2;&#125;</span><br></pre></td></tr></table></figure>
<p>在上面这个函数定义中，decltype无法推导出t1+t2的类型，因为编译器是从左向右处理的，当处理到decltype的时候，编译器还不知道t1+t2的类型。追踪返回函数就是为了解决这个问题而生的，上面的函数我们可以声明如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">Sum</span><span class="params">(T1&amp;t1, T2&amp; t2)</span> -&gt; <span class="title">decltype</span><span class="params">(t1+t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> t1+t2;&#125;</span><br></pre></td></tr></table></figure>
<p>如此，decltype就可以根据t1，t2的类型推导出函数Sum的返回类型。</p>
<h3 id="3-1-3-auto的进一步阐述"><a href="#3-1-3-auto的进一步阐述" class="headerlink" title="3.1.3  auto的进一步阐述"></a>3.1.3  auto的进一步阐述</h3><p>auto并不能代表一个实际的类型声明，只是一个类型声明的“占位符”。使用auto声明的变量必须马上初始化，以让编译器推断出它的类型，并且在编译时将auto占位符替换为真正的类型。</p>
<h2 id="3-2-auto的其他性质"><a href="#3-2-auto的其他性质" class="headerlink" title="3.2  auto的其他性质"></a>3.2  auto的其他性质</h2><p>auto 变量必须在编译期确定其类型</p>
<p>auto 变量必须在定义时初始化 ：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> a; <span class="comment">//错误，未初始化</span></span><br></pre></td></tr></table></figure>
<p>同一个auto关键字应将变量推导为同一类型：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> b4 = <span class="number">10</span>, b5 = <span class="number">20.0</span>, b6 = <span class="string">&#x27;a’;//错误,没有推导为同一类型</span></span><br></pre></td></tr></table></figure>
<p>参数不能被声明为auto ：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">auto</span> a)</span> </span>&#123;…&#125; <span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>auto并不是一个真正的类型。不能使用一些以类型为操作数的操作符，如sizeof或者typeid：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">auto</span>) &lt;&lt; endl;<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<h2 id="3-3-decltype"><a href="#3-3-decltype" class="headerlink" title="3.3  decltype"></a>3.3  decltype</h2><p>配合auto一同使用，主要用于泛型编程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">&#125; anon_u;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    <span class="keyword">decltype</span>(anon_u) id; <span class="comment">//没有告诉id的类型，用decltype自动推导</span></span><br><span class="line">&#125; anon_s[<span class="number">100</span>];           <span class="comment">//匿名的struct数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">decltype</span>(anon_s) as;<span class="comment">//注意as的类型。</span></span><br><span class="line">cin &gt;&gt; as[<span class="number">0</span>].id.name;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一个decltype的理解：编译器根据anon_u的结构推导出一个类型，并创建了这个类型的新变量id。</p>
<p>第二个decltype的理解：编译器根据anon_s的结构推导出了一个类型，这个类型是某个匿名的结构体数组。并创建了这个结构体数组类型的新变量as，as也是一个结构体数组。（如果decltype括号里面的是一个数组，那么推导出的类型也是个数组，而不是这个数组里每一个元素的类型）</p>
<p>配合auto推导出返回值类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> -&gt; <span class="title">decltype</span><span class="params">(x+y)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> x+y; &#125;</span><br></pre></td></tr></table></figure>
<p>C++14中不再需要显式指定返回类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="keyword">return</span> x+y; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-4-auto的优势"><a href="#3-4-auto的优势" class="headerlink" title="3.4  auto的优势"></a>3.4  auto的优势</h2><p>用于代替冗长复杂、变量使用范围专一的变量声明。我们现在学习的类型都并不复杂，随着模板的学习，类型会越发复杂。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::vector&lt;std::string&gt; vs; </span><br><span class="line"><span class="keyword">for</span> (std::vector&lt;std::string&gt;::iterator </span><br><span class="line">i = vs.<span class="built_in">begin</span>(); i != vs.<span class="built_in">end</span>(); i++) </span><br><span class="line">&#123; ... &#125; </span><br><span class="line">等价于：</span><br><span class="line">std::vector&lt;std::string&gt; vs; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = vs.<span class="built_in">begin</span>(); i != vs.<span class="built_in">end</span>();i++) </span><br><span class="line">&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>有时候我们不能直接确定模板函数的返回值的类型，则可在定义模板函数时，用于声明依赖模板参数的变量类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tx, <span class="keyword">typename</span> _Ty&gt; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Multiply</span><span class="params">(_Tx x, _Ty y)</span> </span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">auto</span> v = x*y; <span class="comment">//临时变量 </span></span><br><span class="line">	std::cout &lt;&lt; v; &#125;</span><br></pre></td></tr></table></figure>
<p>结合auto和decltype，自动追踪返回类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tx, <span class="keyword">typename</span> _Ty&gt; </span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">multiply</span><span class="params">(_Tx x, _Ty y)</span>-&gt;<span class="title">decltype</span><span class="params">(x*y)</span> </span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> x*y; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-5-auto字符例题"><a href="#5-5-auto字符例题" class="headerlink" title="5.5  auto字符例题"></a>5.5  auto字符例题</h2><p><img src="https://s2.loli.net/2022/01/10/5KXCHJiESmv26eA.png" alt="https://s2.loli.net/2022/01/10/5KXCHJiESmv26eA.png"></p>
<p>该题非常详细的解答在</p>
<p><a href="https://github.com/thu-coai/THUOOP/issues/12">https://github.com/thu-coai/THUOOP/issues/12</a></p>
<p><img src="https://s2.loli.net/2022/01/10/Zc6UnlRpuDWwiTt.png" alt="https://s2.loli.net/2022/01/10/Zc6UnlRpuDWwiTt.png"></p>
<p>题目并不难，但是此处的遍历这很有讲究。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x : <span class="string">&quot;123&quot;</span>) &#123;cout&lt;&lt;x&lt;&lt;’-’;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="number">1.B</span></span><br><span class="line"><span class="number">2.B</span></span><br><span class="line"><span class="number">3.</span>D</span><br><span class="line"><span class="number">4.B</span></span><br><span class="line"><span class="number">5.</span>A</span><br><span class="line"><span class="number">6.B</span></span><br><span class="line"><span class="number">7.B</span></span><br><span class="line"><span class="number">8.</span>D</span><br><span class="line"></span><br><span class="line">输出 <span class="number">1</span><span class="number">-2</span><span class="number">-3</span>--</span><br></pre></td></tr></table></figure>
<p>注意到3之后有两个-。我们更换循环方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x : &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;) &#123;cout&lt;&lt;x&lt;&lt;<span class="string">&#x27;-&#x27;</span>;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span><span class="number">-2</span><span class="number">-3</span>-</span><br></pre></td></tr></table></figure>
<p>其实是字符数组结尾的\0也被遍历了，但是无法输出。</p>
<p>补充：\0和空格的区别：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">【<span class="number">1</span>】从字符串的长度:——&gt;空字符的长度为<span class="number">0</span>,空格符的长度为<span class="number">1</span></span><br><span class="line">    <span class="keyword">char</span> a[] = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line">    <span class="keyword">char</span> b[] = <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">strlen</span>(a) &lt;&lt; endl;   <span class="comment">//0</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">strlen</span>(b) &lt;&lt; endl;   <span class="comment">//1</span></span><br><span class="line">    </span><br><span class="line">【<span class="number">2</span>】</span><br><span class="line">    <span class="keyword">char</span> crr[] = <span class="string">&quot;a b&quot;</span>;   <span class="comment">//输出是a b</span></span><br><span class="line">    <span class="keyword">char</span> brr[] = <span class="string">&quot;a\0b&quot;</span>;  <span class="comment">//输出是a，因为遇到&#x27;\0&#x27;代表结束</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">strlen</span>(crr) &lt;&lt; endl; <span class="comment">//3</span></span><br><span class="line">		cout &lt;&lt; <span class="built_in">strlen</span>(brr) &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">【<span class="number">3</span>】输出到屏幕上，<span class="string">&#x27;\0&#x27;</span>什么都没有，而空格是空格。</span><br></pre></td></tr></table></figure>
<h1 id="四、封装与内联函数"><a href="#四、封装与内联函数" class="headerlink" title="四、封装与内联函数"></a>四、封装与内联函数</h1><h2 id="4-1-private-与-overload-的先后"><a href="#4-1-private-与-overload-的先后" class="headerlink" title="4.1  private 与 overload 的先后"></a>4.1  private 与 overload 的先后</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span></span><br><span class="line"><span class="class">&#123;</span> <span class="keyword">private</span>: <span class="keyword">int</span> a; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i=<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; a = i; &#125;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j=<span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123; a = i + j; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_a</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a; &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	A aa;</span><br><span class="line">	aa.<span class="built_in">f</span>(<span class="number">1</span>);</span><br><span class="line">	cout &lt;&lt; aa.<span class="built_in">get_a</span>() &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码：call to member function ‘f’ is ambiguous</p>
<p>不过给人的感觉是，我的void f(int i=2)；是一个private函数，理论上在main里面是无法访问的，所以不应该会发生调用。</p>
<p>实际上，编译器看到 a.f的时候会先找出所有的f，判断调用正确之后才判断private权限是否正确。也就是说，函数调用优先匹配参数对应性，再判断权限合理性。编译为汇编语言后的程序里两个f是不分是否是private的，private的语法检查在编译之后。</p>
<h2 id="4-2-内联函数"><a href="#4-2-内联函数" class="headerlink" title="4.2  内联函数"></a>4.2  内联函数</h2><h3 id="4-2-1-定义与意义"><a href="#4-2-1-定义与意义" class="headerlink" title="4.2.1  定义与意义"></a>4.2.1  定义与意义</h3><p>函数调用要进行一系列准备和后处理工作(压栈、跳转、退栈、返回等)，所以函数调用是一个比较慢的过程。如果对于一个简单的函数进行大量的调用，会降低程序效率。</p>
<p>比较下面两种实现方式，函数比等价的表达式效率更低。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; (a &gt; b ? a : b) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>使用内联函数，编译器自动产生等价的表达式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b; &#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>上述代码等价于：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; (a &gt; b ? a : b) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-2-内联函数和宏定义的区别"><a href="#4-2-2-内联函数和宏定义的区别" class="headerlink" title="4.2.2  内联函数和宏定义的区别"></a>4.2.2  内联函数和宏定义的区别</h3><p>在L1 2.2.3.3 带参数宏中我们提到过，由于带参数宏具有高度歧义性，故而往往被内联函数替代。</p>
<p>宏定义只是拷贝代码到被调用的地方。</p>
<p>内联函数则是生成和函数等价的表达式。</p>
<p>内联函数可以执行类型检查，进行编译期错误检查。</p>
<p>内联函数可调试，而宏定义的函数不可调试。</p>
<p>在Debug版本，内联函数没有真正内联，而是和一般函数一样，因此在该阶段可以被调试。</p>
<p>在Release版本，内联函数实现了真正的内联，增加执行效率。</p>
<p>宏定义的函数无法操作私有数据成员。</p>
<h3 id="4-2-3-内联函数的注意事项"><a href="#4-2-3-内联函数的注意事项" class="headerlink" title="4.2.3  内联函数的注意事项"></a>4.2.3  内联函数的注意事项</h3><p>避免对大段代码使用内联修饰符。</p>
<p>内联修饰符相当于把该函数在所有被调用的地方拷贝了一份，所以大段代码的内联修饰会增加负担。（代码膨胀过大）</p>
<p>避免对包含循环或者复杂控制结构的函数使用内联定义。<br>因为内联函数优化的，只是在函数调用的时候，会产生的压栈、跳转、退栈和返回等操作。所以如果函数内部执行代码的时间比函数调用的时间长得多，优化几乎可以忽略。</p>
<p>不可将内联函数的声明和定义分开（不同于大多数函数将生命和定义分别写在头文件和源文件里）<br>编译器编译时需要得到内联函数的实现，因此多文件编译时内联函数先需要将实现写在头文件中，否则无法实现内联效果。</p>
<p>定义在类声明中的函数默认为内联函数。（但函数一般都不定义在类声明内）一般构造函数、析构函数都被定义为内联函数。</p>
<p>内联修饰符更像是建议而不是命令。</p>
<p>编译器“有权”拒绝不合理的请求，例如编译器认为某个函数不值得内联，就会忽略内联修饰符。</p>
<p>编译器会对一些没有内联修饰符的函数，自行判断可否转化为内联函数，一般会选择短小的函数。</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>L14 设计模式——行为模式</title>
    <url>/2022/01/12/CS/OOP/L14%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式——行为型模式"><a href="#设计模式——行为型模式" class="headerlink" title="设计模式——行为型模式"></a>设计模式——行为型模式</h1><p>设计模式(design pattern)是在长时间实践中，开发人员总结出的<strong>优秀架构与解决方案</strong>。学习设计模式将有助于经验不足的开发人员在实际开发中，灵活地运用面向对象特性，并能够快速构建不同场景下的程序框架，写出优质代码。</p>
<h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><ul>
<li><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><p>关注对象行为功能上的抽象，从而提升对象在行为功能上的可拓展性，能以最少的代码变动完成功能的增减。</p>
</li>
<li><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><p>关注对象之间结构关系上的抽象，从而提升对象结构的可维护性、代码的健壮性，能在结构层面上尽可能的解耦合。</p>
</li>
<li><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><p>（本学期不涉及）</p>
</li>
</ul>
<p>本章内容主要探讨设计模式中的行为型模式。</p>
<h3 id="行为型模式分类"><a href="#行为型模式分类" class="headerlink" title="行为型模式分类"></a>行为型模式分类</h3><p>本章介绍三种行为型模式。</p>
<ul>
<li>模版方法(Template Method)模式</li>
<li>策略(Strategy)模式</li>
<li>迭代器(Iterator)模式</li>
</ul>
<h2 id="模版方法Template-Method"><a href="#模版方法Template-Method" class="headerlink" title="模版方法Template Method"></a>模版方法Template Method</h2><p>模版方法是一种针对接口编程的设计。</p>
<p>模版方法的思想是：基类是一个模板（也可以称作原型）。基类体现的是“抽象概念”，里面定义若干个纯虚函数，这些函数提供了这个类的“接口”。</p>
<p>比如，如果一个操作有operation1,operation2,两个步骤，我们可以定义一个基类：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span> </span>=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span> </span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这个操作可能有很多个版本。每个版本的实现细节不同。比如，AbstractClass可能是“监视计算机节点的负载状态”的过程，Operation1是“得到总内存”，Operation2是“得到已占用内存”。而这两种操作在不同的环境下，比如Win32和Win64下可能是不同的。这些不同的细节则由子类负责实现。</p>
<p>在使用时，抽象类的算法骨架提供了大致方法，再由这个方法来根据需要调用具体类的实现细节。比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span>:</span><span class="keyword">public</span> AbstractClass&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 1 of A&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 2 of A&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样当我们要拓展一种新的实现类时，重新对基类进行继承与实现即可，无需对已有的<strong>实现类</strong>进行修改。</p>
<h3 id="由模板实现多态"><a href="#由模板实现多态" class="headerlink" title="由模板实现多态"></a>由模板实现多态</h3><p>现在我们有了很多继承自同一个抽象类的实现类，该怎么实现多态呢？</p>
<p>我们知道，模板多态是依赖于<strong>指针和引用</strong>的。编译器能够通过指针和引用判断实际指向的类型，并且调用实际类型里面override了的虚函数。所以在使用模板模式的时候，常常创建基类指针来调用实现类的函数。</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span> </span>=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span> </span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span>:</span><span class="keyword">public</span> AbstractClass&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 1 of A&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 2 of A&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span>:</span><span class="keyword">public</span> AbstractClass&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 1 of B&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Operation2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Do Operation 2 of B&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  AbstractClass *abstract;</span><br><span class="line">  abstract=<span class="keyword">new</span> <span class="built_in">ConcreteClassB</span>();</span><br><span class="line">  abstract-&gt;<span class="built_in">Operation1</span>();</span><br><span class="line">  abstract-&gt;<span class="built_in">Operation2</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="策略模式Strategy-Method"><a href="#策略模式Strategy-Method" class="headerlink" title="策略模式Strategy Method"></a>策略模式Strategy Method</h2><p>模板模式中，每个实现类里面可能有多个功能(比如Operation1,Operation2…)。可能有两个类，它们各有N个功能，其中只有一个的实现有区别。在模板模式下，我们却必须实现两个类。这就很麻烦。</p>
<p>为了避免这种情况，使用策略模式。</p>
<p>策略模式：定义一系列算法并加以封装，使得这些算法可以互相替换。这样，一种算法就不需要依附于某个实现类了，而是自成一类。</p>
<p><strong>具体而言</strong></p>
<ul>
<li><p>每一种行为各自有方法虚基类$A、B$</p>
</li>
<li><p>每一个方法基类A有若干具体的方法$A_1,A_2,A_3$，每一种都会继承$A$</p>
</li>
<li><p>所有对象具有一个对象基类$O$，对象基类O含有所有的方法基类指针$A^<em>$、$B^</em>$，从而实现多态</p>
<p>注意到对象基类如果仅含有方法基类指针，实际上没法调用方法基类的方法，故而还需要调用接口</p>
</li>
<li><p>每种对象是一个具体的对象类$O_1,O_2,O_3$，每种都会继承对象类$O$，同时让方法基类指针$A^<em>$、$B^</em>$具体指向方法派生类上$A_x、B_y$</p>
</li>
</ul>
<p>所有对象</p>
<p>比如下面这个例子：有三种鸭子，MallarDuck（绿头鸭）,RubberDuck（橡皮鸭）,DecoyDuck（诱饵鸭子）</p>
<p>MallarDuck会“quack”地叫，会飞；RubberDuck会“queak”地叫，不会飞；DecoyDuck不会叫，不会飞。</p>
<p>发现所有鸭子都有飞、叫两种功能，但是各自的实现不太一样。我们不在每种鸭子里分别实现，而是在基类鸭子里储存这两种功能的基类指针，然后让鸭子的实现类指向对应的两种功能的实现类。</p>
<p>实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//飞行行为，用抽象类表示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyBehavior</span>&#123;</span><span class="comment">//fly方法基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">FlyBehavior</span>()&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//叫声行为，用抽象类表示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuackBehavior</span>&#123;</span><span class="comment">//Quack方法基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">QuackBehavior</span>()&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//鸭子基类，除了会变化的fly和quack外，还有不发生改变的display，performFly， performQuack，swim等方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>&#123;</span><span class="comment">//对象基类</span></span><br><span class="line">    <span class="comment">//私有数据在下方</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Duck</span>(FlyBehavior*p_FlyBehavior,QuackBehavior* p_QuackBehavior)<span class="comment">//这是构造函数</span></span><br><span class="line">   &#123;</span><br><span class="line">      pFlyBehavior= p_FlyBehavior;</span><br><span class="line">      pQuackBehavior= p_QuackBehavior;</span><br><span class="line"> </span><br><span class="line">   &#125;<span class="comment">//构造函数</span></span><br><span class="line">   <span class="keyword">virtual</span> ~<span class="built_in">Duck</span>()&#123;&#125;;</span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//display这个方法使用的是模板方法，其实不够优化</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span><span class="comment">//perform是接口，因为指针是私有数据，故而设置了public接口</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      pFlyBehavior-&gt;<span class="built_in">fly</span>();<span class="comment">//根据传入的指针类型决定fly的具体方法</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      pQuackBehavior-&gt;<span class="built_in">quack</span>();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   FlyBehavior* pFlyBehavior;</span><br><span class="line">   QuackBehavior* pQuackBehavior;<span class="comment">//对象基类储存方法基类指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//实现飞行行为的具体方法类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> :</span> <span class="keyword">public</span> FlyBehavior&#123;<span class="comment">//每种每一个方法基类A有若干具体的方法，每一种都会继承方法基类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout&lt;&lt; (<span class="string">&quot;I&#x27;m flying!!&quot;</span>)&lt;&lt;std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> :</span> <span class="keyword">public</span> FlyBehavior&#123;<span class="comment">//只需要方法，不需要数据</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout&lt;&lt; (<span class="string">&quot;I can&#x27;t fly&quot;</span>)&lt;&lt;std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现叫声行为的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quack</span> :</span> <span class="keyword">public</span> QuackBehavior&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout&lt;&lt; (<span class="string">&quot;Quack&quot;</span>) &lt;&lt;std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> :</span> <span class="keyword">public</span> QuackBehavior&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout&lt;&lt; (<span class="string">&quot;&lt;&lt; Slience &gt;&gt;&quot;</span>)&lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> :</span> <span class="keyword">public</span> QuackBehavior&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">   std::cout&lt;&lt; <span class="string">&quot;Squeak&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绿头鸭类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> :</span> <span class="keyword">public</span> Duck&#123;<span class="comment">//继承了对象基类，就已经有了方法基类指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">MallardDuck</span>(FlyBehavior*fly_behavior = <span class="keyword">new</span> <span class="built_in">FlyWithWings</span>(),<span class="comment">//构造函数含有缺省值</span></span><br><span class="line">      QuackBehavior*quack_behavior = <span class="keyword">new</span> <span class="built_in">Quack</span>())<span class="comment">//注意括号在这里才结尾，之后的冒号是赋值列表了</span></span><br><span class="line">      :<span class="built_in">Duck</span>(fly_behavior,quack_behavior)&#123;&#125;<span class="comment">//绿头鸭的构造函数，飞行和叫声的基类指针分别指向了对应的实现类</span></span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      std::cout&lt;&lt; <span class="string">&quot;I&#x27;m a real Mallard duck&quot;</span>&lt;&lt; std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> :</span> <span class="keyword">public</span> Duck&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">RubberDuck</span>(FlyBehavior*fly_behavior=<span class="keyword">new</span> <span class="built_in">FlyNoWay</span>(),QuackBehavior*quack_behavior = <span class="keyword">new</span> <span class="built_in">Squeak</span>()):<span class="built_in">Duck</span>(fly_behavior,quack_behavior)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;I&#x27;m a Rubber duck&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoyDuck</span> :</span> <span class="keyword">public</span> Duck&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">DecoyDuck</span>(FlyBehavior*fly_behavior=<span class="keyword">new</span> <span class="built_in">FlyNoWay</span>(),QuackBehavior*quack_behavior = <span class="keyword">new</span> <span class="built_in">MuteQuack</span>()):<span class="built_in">Duck</span>(fly_behavior,quack_behavior)&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;I&#x27;m just a Decoy duck&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Duck*mallard = <span class="keyword">new</span> <span class="built_in">MallardDuck</span>();<span class="comment">//基类指针指向派生类对象</span></span><br><span class="line">   mallard-&gt;<span class="built_in">display</span>();<span class="comment">//由于display是虚函数，故而实现了多态</span></span><br><span class="line">   mallard-&gt;<span class="built_in">performFly</span>();<span class="comment">//调用逻辑，performfly是基类非虚函数，直接进入基类函数体。</span></span><br><span class="line">    <span class="comment">//开始调用pFlyBehavior-&gt;fly();</span></span><br><span class="line">    <span class="comment">//fly是基类虚函数，根据基类指针pFlyBehavior实际指向的对象类型来调用fly函数</span></span><br><span class="line">    <span class="comment">//回顾MallardDuck类的基类指针pFlyBehavior实际指向的对象，FlyBehavior*fly_behavior = new FlyWithWings()，然后把fly_behavior传给了pFlyBehavior，故而pFlyBehavior指向fly_behavior，这是一个FlyWithWings方法类的对象</span></span><br><span class="line">    <span class="comment">//综上所述，调用了FlyWithWings</span></span><br><span class="line">   mallard-&gt;<span class="built_in">performQuack</span>();</span><br><span class="line">   Duck*rubber= <span class="keyword">new</span> <span class="built_in">RubberDuck</span>();</span><br><span class="line">   rubber-&gt;<span class="built_in">display</span>();</span><br><span class="line">   rubber-&gt;<span class="built_in">performQuack</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">I<span class="number">&#x27;</span>m a real Mallard duck</span><br><span class="line">I<span class="number">&#x27;</span>m flying!!</span><br><span class="line">Quack</span><br><span class="line">I<span class="number">&#x27;</span>m a Rubber duck</span><br><span class="line">Squeak</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从上面的例子可以看出，策略模式不过是更加多态化的模板模式罢了。在模板模式下，每个类（比如在上面这个例子里是每种鸭子）中的Fly,Quack函数都在这个鸭子类里实现。而这里则是先定义了Fly，Quack这两种动作的基类——QuackBehavior，FlyBehavior——并且在在基类鸭子里储存了这两种基类类型的指针。</p>
<p>然后，再通过继承关系实现了各种不同的Fly,Quack的实现类，并且在鸭子的实现类里让QuackBehavior，FlyBehavior的基类指针指向不同的Fly,Quack的实现类。</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L10  模板与STL初步</title>
    <url>/2022/01/12/CS/OOP/L10%20%E6%A8%A1%E6%9D%BF%E4%B8%8ESTL%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="模板与STL初步"><a href="#模板与STL初步" class="headerlink" title="模板与STL初步"></a>模板与STL初步</h1><hr>
<h2 id="一、命名空间"><a href="#一、命名空间" class="headerlink" title="一、命名空间"></a>一、命名空间</h2><h3 id="A-定义"><a href="#A-定义" class="headerlink" title="A. 定义"></a>A. 定义</h3><p>为了避免在大规模程序的设计中，以及在程序员使用各种各样的C++库时，标识符的命名发生冲突，标准C++引入了关键字namespace（命名空间），可以更好地控制标识符的作用域。<br>标准C++库（不包括标准C库）中所包含的所有内容（包括常量、变量、结构、类和函数等）都被定义在命名空间std（standard标准）中。</p>
<p>例如：cout、cin、vector、set、map</p>
<p>也就是说，namespace本身是一种关键字，这就是所谓的命名空间，而std仅仅是已经被定义的一个命名空间。</p>
<h3 id="B-例子"><a href="#B-例子" class="headerlink" title="B. 例子"></a>B. 例子</h3><h4 id="B-a自定义命名空间"><a href="#B-a自定义命名空间" class="headerlink" title="B. a自定义命名空间"></a>B. a自定义命名空间</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="B-b-使用命名空间"><a href="#B-b-使用命名空间" class="headerlink" title="B.b 使用命名空间"></a>B.b 使用命名空间</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A::x = <span class="number">3</span>;</span><br><span class="line">A::y = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//对人为定义的命名空间A内的x，y进行赋值</span></span><br></pre></td></tr></table></figure>
<h4 id="C-using申明"><a href="#C-using申明" class="headerlink" title="C. using申明"></a>C. <strong>using</strong>申明</h4><p>使用using声明简化命名空间使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用整个命名空间：所有成员都直接可用</span></span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> A;</span><br><span class="line">  x = <span class="number">3</span>; y = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用部分成员：所选成员可直接使用</span></span><br><span class="line">    <span class="keyword">using</span> A::x;</span><br><span class="line">    x = <span class="number">3</span>; A::y = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<p>任何情况下，都不应出现命名冲突</p>
<hr>
<h2 id="二、-STL初步"><a href="#二、-STL初步" class="headerlink" title="二、 STL初步"></a>二、 STL初步</h2><h3 id="A-定义-1"><a href="#A-定义-1" class="headerlink" title="A. 定义"></a>A. 定义</h3><p>标准模板库（英文：Standard Template Library，缩写：STL），是一个高效的C++软件库，它被容纳于C++ 标准程序库C++ Standard Library中。其中包含4个组件，分别为<strong>算法、容器、函数、迭代器</strong>。这些都是基于模板编写而成。</p>
<p>关键理念：将“在数据上执行的操作”与“要执行操作的数据”分离。</p>
<p><img src="https://high-en-01.oss.tusy.xyz/get/tcPlus/20191105/000/00/20210523142313700589.png" style="zoom:50%;" /></p>
<p>STL的命名空间是std，一般使用std::name来使用STL的函数或对象，也可以使用using namespace std来引入STL的命名空间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> std::string</span><br></pre></td></tr></table></figure>
<p>（不推荐在大型工程中使用，容易污染命名空间）</p>
<p>关于STL的文档和例子可以在以下网址查询 <a href="http://www.cplusplus.com/">http://www.cplusplus.com/</a></p>
<p>多写多查多用，是学习STL库的最好方法</p>
<h3 id="B-STL容器"><a href="#B-STL容器" class="headerlink" title="B. STL容器"></a>B. STL容器</h3><p>容器是包含、放置数据的工具。通常为数据结构。包括：<br>1.简单容器（simple container）    2.序列容器（sequence container）    3. 关系容器（associative container）</p>
<h4 id="pair容器"><a href="#pair容器" class="headerlink" title="pair容器"></a>pair容器</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最简单的容器，由两个单独数据组成。</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span> <span class="class"><span class="keyword">struct</span> <span class="title">pair</span>&#123;</span></span><br><span class="line">	T1 first;</span><br><span class="line">	T2 second;</span><br><span class="line"><span class="comment">//若干其它函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//通过first、second两个成员变量获取数据。</span></span><br><span class="line">std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t;</span><br><span class="line">t.first = <span class="number">4</span>; t.second = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建：使用函数make_pair。</span></span><br><span class="line"><span class="keyword">auto</span> t = std::<span class="built_in">make_pair</span>(“abc”, <span class="number">7.8</span>);</span><br><span class="line"><span class="comment">//自动推导成员类型。</span></span><br><span class="line"><span class="comment">//此处推导出的t的类型就是Pair类型</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//支持小于、等于等比较运算符。</span></span><br><span class="line"><span class="comment">//先比较first，后比较second。</span></span><br><span class="line"><span class="comment">//要求成员类型支持比较(实现比较运算符重载)。</span></span><br><span class="line">std::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">4</span>) &lt; std::<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">std::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">4</span>) &gt; std::<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="function">std::pair&lt;std::string, <span class="keyword">double</span>&gt; <span class="title">p1</span><span class="params">(<span class="string">&quot;Alice&quot;</span>, <span class="number">90.5</span>)</span></span>;<span class="comment">//手工指定类型初始化</span></span><br><span class="line">  std::pair&lt;std::string, <span class="keyword">double</span>&gt; p2;</span><br><span class="line">  p2.first = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line">  p2.second = <span class="number">85.0</span>;<span class="comment">//先定义，再赋值</span></span><br><span class="line">  <span class="keyword">auto</span> p3 = std::<span class="built_in">make_pair</span>(<span class="string">&quot;David&quot;</span>, <span class="string">&quot;95.0&quot;</span>);<span class="comment">//自动推导类型初始化</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="tuple容器"><a href="#tuple容器" class="headerlink" title="tuple容器"></a>tuple容器</h4><p>C++11新增，<strong>pair的扩展</strong>，由若干成员组成的元组类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">Types</span>.... &gt;</span> <span class="class"><span class="keyword">class</span> <span class="title">tuple</span>;</span></span><br></pre></td></tr></table></figure>
<p>通过std::get函数获取数据。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v0 = std::get&lt;<span class="number">0</span>&gt;(tuple1);</span><br><span class="line">v1 = std::get&lt;<span class="number">1</span>&gt;(tuple2);</span><br></pre></td></tr></table></figure>
<p>其下标需要在编译时确定：不能设定运行时可变的长度，不能当做动态数组.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">v = std::get&lt;i&gt;(tuple);</span><br><span class="line"><span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::tuple;</span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line">tuple&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,string&gt; t3 = &#123;<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">std::get&lt;<span class="number">0</span>&gt;(t3) = <span class="number">4</span>;</span><br><span class="line">std::cout &lt;&lt; get&lt;<span class="number">1</span>&gt;(t3) &lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">int</span> i; <span class="keyword">double</span> d; string s;</span><br><span class="line">std::<span class="built_in">tie</span>(i, d, s) = t3;</span><br><span class="line">std::cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s &lt;&lt;std::endl;</span><br><span class="line"><span class="comment">//这串代码存在非常多的错误，首先，没有#include&lt;tuple&gt;</span></span><br><span class="line"><span class="comment">//第二，第6行也需要std::get&lt;0&gt;(t3)</span></span><br><span class="line"><span class="comment">//第三，最重要的，这玩意儿没有main函数</span></span><br></pre></td></tr></table></figure>
<p>修改后的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="comment">//using std::tuple;单独使用第三行没有用，必须要有第二行，且只需要有第二行</span></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">std::tuple&lt;<span class="keyword">int</span>,<span class="keyword">double</span>,string&gt; t3 = &#123;<span class="number">1</span>, <span class="number">2.0</span>, <span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">std::get&lt;<span class="number">0</span>&gt;(t3) = <span class="number">4</span>;</span><br><span class="line">std::cout &lt;&lt; std::get&lt;<span class="number">1</span>&gt;(t3) &lt;&lt;std::endl;</span><br><span class="line">std::cout &lt;&lt; std::get&lt;<span class="number">0</span>&gt;(t3) &lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">int</span> i; <span class="keyword">double</span> d; string s;</span><br><span class="line">std::<span class="built_in">tie</span>(i, d, s) = t3;</span><br><span class="line">i=<span class="number">10</span>;</span><br><span class="line">std::cout &lt;&lt; i &lt;&lt;std::endl;</span><br><span class="line">std::cout &lt;&lt; std::get&lt;<span class="number">0</span>&gt;(t3) &lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>从上述代码可以看出，实际上get函数返回的是tuple的某个元素的左值引用，可以赋值，也可以被输出。而tie函数实际上没有返回值，仅仅是完成了对应的简单赋值，并不是生成左值引用，改变i并不能改变tuple。</p>
<p>tuple的意义，用于函数多返回值传递：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function">std::tuple&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">make_tuple</span>(x, <span class="built_in"><span class="keyword">double</span></span>(x)/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xval; </span><br><span class="line">    <span class="keyword">double</span> half_x;</span><br><span class="line">    std::<span class="built_in">tie</span>(xval, half_x) = <span class="built_in">f</span>(<span class="number">7</span>);</span><br><span class="line">    std::cout&lt;&lt;xval&lt;&lt;std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>作为tuple的特例，pair可用于两个返回值的传递。除此之外，pair在map中大量使用。</p>
<h4 id="Vector容器"><a href="#Vector容器" class="headerlink" title="Vector容器"></a>Vector容器</h4><p>会自动扩展容量的数组，以循序(Sequential)的方式维护变量集合。        </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Allocator</span> =</span> std::allocator&lt;T&gt;&gt; </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">vector</span>;</span></span><br></pre></td></tr></table></figure>
<p>STL中最基本的序列容器，提供有效、安全的数组以替代C语言中原生数组。<br>允许直接以下标访问。（高速）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">include &lt;vector&gt;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	std::vector&lt;<span class="keyword">int</span>&gt; x;<span class="comment">//创建</span></span><br><span class="line">	x.<span class="built_in">size</span>();<span class="comment">//获取当前数组长度</span></span><br><span class="line">	x.<span class="built_in">clear</span>();<span class="comment">//清空；</span></span><br><span class="line">	x.<span class="built_in">push_back</span>(<span class="number">1</span>);<span class="comment">//在末尾添加1</span></span><br><span class="line">	x.<span class="built_in">pop_back</span>();<span class="comment">//删除</span></span><br><span class="line">	x.<span class="built_in">insert</span>(x.<span class="built_in">begin</span>()+<span class="number">1</span>, <span class="number">5</span>);<span class="comment">//在中间添加（低速）</span></span><br><span class="line">	x.<span class="built_in">erase</span>(x.<span class="built_in">begin</span>()+<span class="number">1</span>);<span class="comment">//在中间删除（低速）</span></span><br></pre></td></tr></table></figure>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p> 一种检查容器内元素并遍历元素的数据类型。</p>
<p>提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。<br>为遍历不同的聚合结构（需拥有相同的基类）提供一个统一的接口。<br>对遍历元素使用类似指针。</p>
<h5 id="以vector为例"><a href="#以vector为例" class="headerlink" title="以vector为例"></a>以vector为例</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator iter;</span><br></pre></td></tr></table></figure>
<p>定义了一个名为iter的变量，它的数据类型是由vector<int>定义的iterator类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">x.<span class="built_in">begin</span>();</span><br><span class="line">x.<span class="built_in">end</span>();</span><br></pre></td></tr></table></figure>
<p>begin返回vector中初始位置的迭代器（指针），即x[0]。</p>
<p>end函数返回x[x.size()]，注意到x.size()对应的不是最后一个元素，而是最后一个元素之后。</p>
<p>故而结合begin()和end()能够实现遍历所有元素，即遍历一个 $[\Large 0,size())$ 左闭右开区间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">++iter;</span><br><span class="line">--iter;</span><br><span class="line">iter+=n;</span><br><span class="line">iter-=n;<span class="comment">//迭代器移动</span></span><br><span class="line"><span class="keyword">int</span> dist = iter1 - iter2;<span class="comment">//返回元素位置差；</span></span><br><span class="line">*iter = <span class="number">5</span>;<span class="comment">//*是解引用运算符，返回的是左值引用</span></span><br></pre></td></tr></table></figure>
<p>利用iterator遍历vector</p>
<p>因为end()不是最后一个元素，而是最后一个元素之后的位置，该代码可以遍历vec中所有元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>(); </span><br><span class="line">	it != vec.<span class="built_in">end</span>(); ++it)  <span class="comment">//use *it</span></span><br><span class="line">  <span class="comment">//也可以用auto简化代码，编译器自动推导it是vec的iterator</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it)</span><br><span class="line">						<span class="comment">//use *it</span></span><br><span class="line">  <span class="comment">//还可以直接这样遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec)</span><br></pre></td></tr></table></figure>
<p>补充：反向遍历器迭代整个vector</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (auto zex = vec.rbegin(); zex != vec.rend(); zex++)</span><br><span class="line">&#123;std::cout &lt;&lt; *zex &lt;&lt; std::endl;&#125;</span><br></pre></td></tr></table></figure>
<p>这个语法利用rbegin与rend实现了从后往前遍历整个vec函数，注意对于zex仍然是采用++运算符。</p>
<h6 id="2-迭代器失效"><a href="#2-迭代器失效" class="headerlink" title="(2).迭代器失效"></a>(2).迭代器失效</h6><p>当迭代器不再指向本应指向的元素时，称此迭代器失效。这并不是指指针本身出了问题，而是指向不再正确。</p>
<p>调用insert/erase后，所<strong>修改位置</strong>的迭代器、以及<strong>该位置之后</strong>的所有迭代器失效。（原先的内存空间存储的元素被改变）<br>        调用push_back等修改vector大小的方法时，如果vector恰好达到了capacity上限，编译器会给voctor扩容。扩容后整个vector会发生空间整体迁移，但是迭代器仍然指向之前的内存，从而会使<strong>所有</strong>迭代器失效</p>
<p>具体而言：</p>
<blockquote>
<p>vector是会自动扩展容量的数组，除了size，另保存capacity：最大容量限制。如果size达到了capacity，则另申请一片capacity*2的空间，并整体迁移vector内容。这一过程时间复杂度为均摊O(1)，并且整体迁移过程使所有迭代器失效。</p>
<p>每次以两倍为单位扩容实际上是满足了堆优化，是一个很优的扩容选择，将在数据结构中具体学习。</p>
</blockquote>
<p><img src="https://high-en-01.oss.tusy.xyz/get/tcPlus/20191105/000/00/20210523142907309178.png" style="zoom:67%;" /></p>
<p>$\Large\color{green}{因为扩容导致的迭代器失效}$</p>
<p>在遍历的时候增加元素，可能会导致迭代器失效</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it)</span><br><span class="line">      vec.<span class="built_in">push_back</span>(*it);</span><br><span class="line">  <span class="comment">////Error，这个循环不会终止，一直进行，直到迭代器失效出现error</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这段代码会使vec变成：123451234512345……直到vec达到capacity上限，此时it失效，出现error</span></span><br></pre></td></tr></table></figure>
<p>$\Large\color{blue}{其实这种情况蛮好理解的，因为每一次循环都会判定it是否等于vec.end()，而vec.end()不断在变化。\\Large故而导致循环不停止，直到迭代器因为容量的迁移而失效。}$</p>
<p>$\Large\color{green}{因为删除导致的迭代器失效}$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; vec = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;=====================&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">auto</span> first = vec.<span class="built_in">begin</span>();</span><br><span class="line">   <span class="keyword">auto</span> second = vec.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">auto</span> find = vec.<span class="built_in">begin</span>() + <span class="number">6</span>;</span><br><span class="line">   vec.<span class="built_in">erase</span>(second);</span><br><span class="line">   <span class="keyword">auto</span> ret = vec.<span class="built_in">erase</span>(second);</span><br><span class="line">   cout&lt;&lt;*second&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;*ret&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;my size is &quot;</span>&lt;&lt;vec.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;how could I find &quot;</span>&lt;&lt;*find&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">=====================</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">my size is <span class="number">3</span></span><br><span class="line">how could I find <span class="number">4113</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>从上述代码可以见得：</p>
<ol>
<li><p>erase函数传入的参数和返回值类型都是iterator，但是你可以选择不用新的iterator接受返回值，比如第15行。</p>
</li>
<li><p>erase返回的迭代器指向的必定是被erase掉的所有元素之后的第一个元素。</p>
</li>
<li><p>我们已经知道，对于vector使用erase，会使得被erase的元素与随后的元素的迭代器全部失效，故而这些访问都没有意义，比如上文对于find的访问，由于find已经是野指针了，这个访问没有分析的意义。</p>
</li>
</ol>
<p>   $\Huge\color{Red}此处纠正对于指针的长期错误理解$</p>
<p>   指针/迭代器指向的一定是一个变量（左值，在内存中有对应空间即有地址），而不能只是一个值（右值，如0，1等）。故而指针指向地址这个说法本身就不准确，因为储存某个变量的内存空间的地址只是一个右值，而不是变量。变量A构造之后，储存A的内存空间的地址就固定了，此时如果指针P指向A，等价于指向了这块地址，然而我们仍然能够让P指针指向新的变量B，却无法改变储存A的内存空间。</p>
<p>   回到vec的erase函数，我们已经明确了erase函数返回的新迭代器将会指向被erase掉的元素之后的第一个元素。<br>   erase操作有两种可能，第一种不会发生shrink，被清除的数据之后的元素往前移动，填补之前被清除的元素。比如我传入vec[2]的迭代器，只erase掉vec[2]，那么原本位于vec[3]的元素就移动到之前vec[2]所在的内存空间，而我返回的迭代器一定指向vec[3]，所以看上去像是返回的迭代器和传入的迭代器都指向了同一个内存空间，但是这是显然错误的。不过是指向的元素碰巧先后占用了同一块内存空间。<br>   情况二，erase导致了shrink的发生。也就是说vec容量减少的时候可能会发生shrink，可能整个vector被搬到另外一个较小的内存空间。这个时候，erase返回的指针仍然指向被erase掉的所有元素之后的第一个元素，储存这个元素的内存空间地址可能和之前的完全没有关系。</p>
<p>一个绝对安全的准则：<br>    $\large\color{brown}理解清楚迭代器所指的对象$，在修改过容器后，换用新的迭代器，不使用之前的迭代器。</p>
<p>在c++ reference中，容器的修改操作有一项Iterator validity，表示该操作是否会引发迭代器失效。若修改容器后仍要使用原来的迭代器，查文档确定迭代器是否有效。</p>
<p><a href="http://www.cplusplus.com/reference/algorithm/find/?kw=find">http://www.cplusplus.com/reference/algorithm/find/?kw=find</a></p>
<h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><p>链表容器（底层实现是双向链表）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">include &lt;list&gt;</span><br><span class="line">include &lt;algorithm&gt;</span><br><span class="line">std::list&lt;<span class="keyword">int</span>&gt; l;<span class="comment">//定义</span></span><br><span class="line">l.<span class="built_in">push_front</span>(<span class="number">1</span>);<span class="comment">//插入前端</span></span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">2</span>); <span class="comment">//插入末端</span></span><br><span class="line">std::<span class="built_in">find</span>(l.<span class="built_in">begin</span>(), l.<span class="built_in">end</span>(), <span class="number">2</span>); <span class="comment">//返回迭代器</span></span><br><span class="line">l.<span class="built_in">insert</span>(it, <span class="number">4</span>); <span class="comment">//it为迭代器，将4插入到it指向的元素前面</span></span><br></pre></td></tr></table></figure>
<p>注意，对list使用的find函数，需要包含头文件<algorithm>。如果find函数没有搜索到想要的对象，会返回指向end的指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::list&lt;<span class="keyword">int</span>&gt; l;<span class="comment">//定义</span></span><br><span class="line">l.<span class="built_in">push_front</span>(<span class="number">1</span>);<span class="comment">//插入前端</span></span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">2</span>); <span class="comment">//插入末端</span></span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">5</span>); <span class="comment">//插入末端</span></span><br><span class="line">l.<span class="built_in">push_front</span>(<span class="number">100</span>);<span class="comment">//插入前端</span></span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">100</span>); <span class="comment">//插入末端</span></span><br><span class="line">l.<span class="built_in">push_back</span>(<span class="number">2</span>); <span class="comment">//插入末端</span></span><br><span class="line"><span class="keyword">auto</span> it=std::<span class="built_in">find</span>(l.<span class="built_in">begin</span>(), l.<span class="built_in">end</span>(), <span class="number">2</span>); <span class="comment">//返回迭代器</span></span><br><span class="line">l.<span class="built_in">insert</span>(it, <span class="number">4</span>); <span class="comment">//it为迭代器，将4插入到it指向的元素前面</span></span><br><span class="line">cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;==========================&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it=l.<span class="built_in">begin</span>();it!=l.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">==========================</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>上述例子再次验证了之前对于迭代器的理解。我的it迭代器指向的永远是第一个2这个元素。虽然我在it前面插入了4，然后2这个元素往后移走了，但是it仍然指向2。另外，我们也可以发现，list的find功能遇见多个相同元素时，会默认返回从前到后第一个符合条件的元素的迭代器。</p>
<p>如果list的成员是自定义的class或struct，可以通过重载operator==和自己定义构造函数来构造find。</p>
<p>$\Large\color{red}{注意，==运算符重载的参数必须是常量左值引用}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myint</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>==(cosnt myint&amp; other)</span><br><span class="line">  &#123;<span class="built_in"><span class="keyword">return</span></span> (i==other.i);&#125;</span><br><span class="line">  <span class="built_in">myint</span>(<span class="keyword">int</span> t):<span class="built_in">i</span>(t)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  list&lt;myint&gt;test; </span><br><span class="line">  ...</span><br><span class="line">  std::<span class="built_in">find</span>(test.<span class="built_in">begin</span>(), test.<span class="built_in">end</span>(), <span class="built_in">myint</span>(<span class="number">2</span>));<span class="comment">//查找test里面有没有成员i为2的myint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合链表的原理很容易就能理解以下特点：</p>
<p>不支持下标等随机访问，ie：无法使用类似test[2]的语句。故而想要遍历list，必须用迭代器。<br>        支持高速的在任意位置插入/删除数据（链表常常在需要不断插入删除的情况下使用）。<br>        其访问主要依赖迭代器。<br>        操作不会导致迭代器失效（除指向被删除的元素的迭代器外）。</p>
<p>关于list的更多函数参见：<a href="https://blog.csdn.net/yas12345678/article/details/52601578">https://blog.csdn.net/yas12345678/article/details/52601578</a></p>
<h6 id="关联容器Set"><a href="#关联容器Set" class="headerlink" title="关联容器Set"></a>关联容器Set</h6><p>不重复元素构成的无序集合；</p>
<p>内部按大小顺序排列，比较器由函数对象Compare完成。<br>（注意：无序是指不保持插入顺序（不同于vector和list），容器内部排列顺序是根据元素大小排列。）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::set&lt;<span class="keyword">int</span>&gt; s;<span class="comment">//定义</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">find</span>(<span class="number">1</span>);<span class="comment">//返回迭代器（位置）</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(<span class="number">1</span>));   <span class="comment">//导致被删除元素的迭代器失效（这句话是删除了集合里的元素1）</span></span><br><span class="line"> s.<span class="built_in">count</span>(<span class="number">1</span>);   <span class="comment">//1的个数，总是0或1（存在性）</span></span><br></pre></td></tr></table></figure>
<h6 id="关联容器Map"><a href="#关联容器Map" class="headerlink" title="关联容器Map"></a>关联容器Map</h6><p> A.关联数组(pair)</p>
<p>map的值类型为：pair<Key,val>。</p>
<p>map中的元素key互不相同，需要key存在比较器。</p>
<p>可以通过下标访问（即使key不是整数）。<strong>下标访问时如果元素不存在，则创建对应元素，而不会提示访问错误。</strong>也可使用insert函数进行插入。</p>
<p>所谓的创建对应元素：比如map包含的元素为pair<Key, T>，那么找不到key，就会构造T（），调用默认构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>,</span></span><br><span class="line"><span class="class">   <span class="keyword">class</span> <span class="title">T</span>,</span></span><br><span class="line"><span class="class">   <span class="keyword">class</span> <span class="title">Compare</span> =</span> std::less&lt;Key&gt;,</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Allocator</span> =</span></span><br><span class="line">      std::allocator&lt;std::pair&lt;<span class="keyword">const</span> Key, T&gt; &gt;</span><br><span class="line"><span class="comment">//这个其实是一个类模板，用Key的类来构造对应的map。</span></span><br></pre></td></tr></table></figure>
<p>每个元素由两个数据项组成，map将一个数据项映射到另一个数据项中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::map&lt;std::string, <span class="keyword">int</span>&gt; s;<span class="comment">//创建了key为string类型，val为int类型的map</span></span><br><span class="line">    s[<span class="string">&quot;oop&quot;</span>] = <span class="number">1</span>;<span class="comment">//插入方式1</span></span><br><span class="line">    <span class="comment">//如果&quot;oop&quot;有对应的val，那就是赋值，如果没有，可以理解为插入，也可以理解为构造</span></span><br><span class="line"><span class="comment">//看起来像是重载了[]，使得下标不是int也可以访问，这是map类型支持的操作。在[]中用key直接访问val</span></span><br><span class="line">    s.<span class="built_in">insert</span>(std::<span class="built_in">make_pair</span>(std::<span class="built_in">string</span>(<span class="string">&quot;oop&quot;</span>), <span class="number">1</span>));<span class="comment">//插入方式2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>map支持用key直接访问对应迭代器：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">find</span>(key);<span class="comment">//查询，仅需要提供key值，返回迭代器。</span></span><br><span class="line">s.<span class="built_in">count</span>(key);<span class="comment">//统计，仅需要提供key值，返回0或1。</span></span><br><span class="line">s.<span class="built_in">erase</span>(it);<span class="comment">//it是迭代器，删除it指向的元素，导致it失效</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(key));</span><br></pre></td></tr></table></figure>
<p>map常用作过大的稀疏数组或以字符串为下标的数组。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::map&lt;std::string, std::string&gt; M;</span><br><span class="line">    M[<span class="string">&quot;fp&quot;</span>] = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">    M[<span class="string">&quot;oop&quot;</span>] = M[<span class="string">&quot;fp&quot;</span>] + <span class="string">&quot;++&quot;</span>; <span class="comment">// M[&quot;oop&quot;] = &quot;c++&quot;</span></span><br><span class="line"><span class="comment">//string的神奇操作：“a”+“b”=“ab”</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Set和Map所用到的数据结构都是红黑树（一种二叉平衡树）<br>其几乎所有操作复杂度均为O(logn)</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h3 id="序列容器（有顺序）和关联容器（无顺序）的区别"><a href="#序列容器（有顺序）和关联容器（无顺序）的区别" class="headerlink" title="序列容器（有顺序）和关联容器（无顺序）的区别"></a>序列容器（有顺序）和关联容器（无顺序）的区别</h3><p>序列容器：vector、list</p>
<p>关联容器：set、map</p>
<p>序列容器与关联容器的区别：<br>   序列容器中的元素有顺序，可以按顺序访问。<br>   关联容器中的元素无顺序，可以按数值（大小）访问。<br>    vector中插入删除操作会使操作位置之后全部的迭代器失效。<br>   其他容器中只有被删除元素的迭代器失效。</p>
<h3 id="选择依据"><a href="#选择依据" class="headerlink" title="选择依据"></a>选择依据</h3><p>在实际应用中，容器的选择可能需要综合考虑多方面因素，包括算法复杂度，功能需求，内存分配策略等，下面提供几个可供参考但不完整的角度（可以进一步阅读《Effective STL》）：<br>   算法复杂度：对于序列容器而言，如果在序列中间存在频繁的插入或删除操作，使用list，否则使用vector（或deque）<br>  元素的顺序：如果需要在容器的任意位置插入新元素，需要选择序列容器而不是关联容器<br>   元素查找速度：如元素的查找速度是关键的考虑因素，可以考虑排序的vector或关联容器set、map等<br>   迭代器、指针或引用失效：如果希望在元素插入和删除操作后,迭代器、指针或引用失效的情况尽可能少出现，可以考虑使用list和关联容器set、map等</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L1、L2 绪论与编程环境</title>
    <url>/2022/01/12/CS/OOP/L1%E3%80%81L2%20%E7%BB%AA%E8%AE%BA%E4%B8%8E%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="L1、L2-绪论与编程环境"><a href="#L1、L2-绪论与编程环境" class="headerlink" title="L1、L2 绪论与编程环境"></a>L1、L2 绪论与编程环境</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>2.2 预编译指令</li>
<li>2.3 标识符</li>
<li>2.4.1 更详细的编译与链接过程</li>
</ul>
</blockquote>
<hr>
<h1 id="一、绪论"><a href="#一、绪论" class="headerlink" title="一、绪论"></a>一、绪论</h1><h2 id="1-1-面向对象程序的可靠性"><a href="#1-1-面向对象程序的可靠性" class="headerlink" title="1.1 面向对象程序的可靠性"></a>1.1 面向对象程序的可靠性</h2><p>oop三性（L4-课堂笔记1.0节）</p>
<ul>
<li>简单性：使程序短而容易管理</li>
<li>清晰性：好的可读性，保证程序容易理解，无论是对人还是对机器</li>
<li>普遍性：程序在很广泛的情形下都能工作得很好，也容易做修改以适应新出现的情况</li>
</ul>
<h2 id="1-2-对象的性质"><a href="#1-2-对象的性质" class="headerlink" title="1.2 对象的性质"></a>1.2 对象的性质</h2><p>对象是对现实世界中实际事物的一种抽象描述，它可以是有形的实体，也可以是无形的概念，作为构成世界的一个独立单位，它具有自己的静态特征和动态特征。</p>
<ul>
<li>静态特征：可以用某种数据来描述的特征</li>
<li>动态特征：对象所表现的行为或所具有的功能</li>
</ul>
<p>对象由一组属性和对这组属性进行操作的一组服务构成，是属性和服务的结合体。</p>
<h1 id="二、源程序的结构、编译、链接"><a href="#二、源程序的结构、编译、链接" class="headerlink" title="二、源程序的结构、编译、链接"></a>二、源程序的结构、编译、链接</h1><h2 id="2-1-源程序的结构"><a href="#2-1-源程序的结构" class="headerlink" title="2.1 源程序的结构"></a>2.1 源程序的结构</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="comment">//头文件与编译指令</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a+b;&#125;<span class="comment">//辅助函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span><span class="comment">//主函数定义&#123;</span></span></span><br><span class="line"><span class="function">    cout&lt;&lt;<span class="title">add</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-预编译指令"><a href="#2-2-预编译指令" class="headerlink" title="2.2 预编译指令"></a>2.2 预编译指令</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1 定义"></a>2.2.1 定义</h3><p>上文代码中提及的“头文件与编译指令”中的编译指令实际上是预编译指令的意思，而预编译与预处理是同一概念。</p>
<p>C/C++编译系统编译程序的过程为预编译、编译、链接。预处理器在程序源文件被编译之前根据预处理指令对程序源文件进行处理。</p>
<p>而预处理器指令以#号开头标识，并不是一句指令，末尾不包含分号。预处理命令不是C/C++语言本身的组成部分，不能直接对它们进行编译和链接。C/C++语言的一个重要功能是可以使用预处理指令和具有预处理的功能。二者提供的预处理功能主要有文件包含、宏替换、条件编译等。</p>
<h3 id="2-2-2-文件包含"><a href="#2-2-2-文件包含" class="headerlink" title="2.2.2 文件包含"></a>2.2.2 文件包含</h3><p>预处理指令#include将被包含的文件代码，直接复制到当前文件，一般被用于包含头文件（实际也能包含任意代码），有两种形式：<code>#include &lt;xxx.h&gt;</code>,<code>#include &quot;xxx.h&quot;</code>。尖括号形式表示被包含的文件在系统目录中。如果被包含的文件不一定在系统目录中，应该用双引号形式。（注意到是应该用，不是最好用） 在双引号形式中可以指出文件路径和文件名。如果在双引号中没有给出绝对路径，则默认为用户当前目录中的文件，此时系统首先在用户当前目录中寻找要包含的文件，若找不到再在系统目录中查找。对于用户自己编写的头文件，应用双引号形式。对于系统提供的头文件，既可以用尖括号形式，也可以用双引号形式，都能找到被包含的文件，但使用用尖括号形式更直截了当，效率更高。</p>
<h3 id="2-2-3-宏替换"><a href="#2-2-3-宏替换" class="headerlink" title="2.2.3 宏替换"></a>2.2.3 宏替换</h3><p>2.2.3.1 意义</p>
<p><code>#define</code>是C++语言中的一个预编译指令，它用来将一个标识符定义为一个字符串，该标识符被称为宏名，被定义的字符串称为替换文本。在程序被编译前，先将宏名用被定义的字符串替换，这称为宏替换，替换后才进行编译，宏替换是简单的替换。</p>
<p>2.2.3.2 宏定义</p>
<p>宏定义包括无参数宏定义和带参数宏定义两类。宏名和宏参数所代表的代码序列可以是任何意义的内容，如类型、常量、变量、操作符、表达式、语句、函数、代码块等。但是宏名和宏参数必须是合法的标识符，其所代表的内容及意义在宏展开前后必须一直是独立且保持不变的，不能分开解释和执行。</p>
<p>2.2.3.3 无参数宏 用一个用户指定的称为宏名的标识符来代表一个代码序列，这种定义的一般形式为#define 标识符 代码序列。其中#define之后的标识符称为宏定义名（简称宏名），在宏定义#define之前可以有若干个空格、制表符，但不允许有其它字符，宏名与代码序列之间用空格符分隔。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926535</span></span><br></pre></td></tr></table></figure>
<p>在C++中，这种替换一般被const取代，进而能保证类型的正确性。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.1415926535</span></span><br></pre></td></tr></table></figure>
<p>2.2.3.4 带参数宏</p>
<p>带参数宏定义进一步扩充了无参数宏定义的能力，这时的宏展开既进行宏名的替换又进行宏参数的替换。带参数的宏定义的一般形式为#define 标识符(参数表) 代码序列，其中参数表中的参数之间用逗号分隔，在代码序列中必须要包含参数表中的的参数。在定义带参数的宏时，宏名与左圆括号之间不允许有空白符，应紧接在一起，否则变成了无参数的宏定义。带参数宏调用提供的实在参数个数必须与宏定义中的形式参数个数相同。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span><span class="meta-string">&lt;宏名&gt;</span>(<span class="meta-string">&lt;参数表&gt;</span>)<span class="meta-string">&lt;字符串&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x)((x)*(x))</span></span><br><span class="line"><span class="built_in">sqr</span>(<span class="number">3</span>+<span class="number">2</span>)等价于((<span class="number">3</span>+<span class="number">2</span>)*(<span class="number">3</span>+<span class="number">2</span>))=<span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>在C++中，这种替代一般被内联函数取代，进而能保证类型的正确性。（在L3)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">return</span> x*x;&#125;</span><br></pre></td></tr></table></figure>
<p>2.2.3.5 宏作用域</p>
<p>宏定义的有效范围称为宏名的作用域，宏名的作用域从宏定义的结束处开始到其所在的源代码文件末尾。宏名的作用域不受分程序结构的影响。如果需要终止宏名的作用域，可以用预处理指令<code>#undef</code>加上宏名。</p>
<p>2.2.3.6 宏展开</p>
<p>预处理器在处理宏定义时，会对宏进行展开（即宏替换）。宏替换首先将源文件中在宏定义随后所有出现的宏名均用其所代表的代码序列替换之，如果是带参数宏则接着将代码序列中的宏形参名替换为宏实参名。 宏替换只作代码字符序列的替换工作，不作任何语法的检查，也不作任何的中间计算，一切其它操作都要在替换完后才能进行。如果宏定义不当，错误要到预处理之后的编译阶段才能发现。 源代码中的宏名和宏定义代码序列中的宏形参名必须是标识符才会被替换，即只替换标识符，不替换别的东西，像注释、字符串常量以及标识符内出现的宏名或宏形参名则不会被替换。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME vrmozart<span class="comment">//NAME、/*NAME*/、&quot;NAME&quot;、my_NAME_blog中的宏名NAME都不会被替换。</span></span></span><br></pre></td></tr></table></figure>
<p>关于标识符在2.4中阐述。</p>
<p>2.2.3.7 宏的独立性</p>
<p>前文提及，宏名和宏形参名所代表的内容及意义在宏展开前后必须一直是独立且保持不变的，不能分开解释和执行。然而，在宏调用时，预处理器用宏定义的代码序列替换宏名，用宏实参名替换宏形参名。替换后，宏定义的代码序列就与源文件中相邻的代码自然连接，宏实参名也与代码序列中相邻的代码自然连接，宏定义的代码序列和宏实参名的独立性就不一定依旧存在。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQR(x)x*x,希望实现表达式的平方计算</span></span><br></pre></td></tr></table></figure>
<p>对于宏调用p＝SQR(y)，能得到希望的宏展开p=y<em>y。但对于宏调用q＝SQR(u＋v)，得到的宏展开是q＝u＋v</em>u＋v。显然，后者的展开结果不是程序设计者所希望的。为能保持宏实参名替换后的独立性，应在宏定义中给形式参数加上括号。进一步，为了保证宏名调用的独立性，作为算式的宏定义代码序列也应加括号。SQR宏定义改写成<code>#define SQR(x) ((x)*(x))</code>才是正确的宏定义。即便如此，这样的宏定义依然很危险。</p>
<p>2.2.3.8 宏调用与函数调用</p>
<p>函数调用在程序运行时实行，而宏展开是在编译的预处理阶段进行；函数调用占用程序运行时间，宏调用只占编译时间；函数调用对实参有类型要求，而宏调用实在参数与宏定义形式参数之间没有类型的概念，只有字符序列的对应关系；函数调用可返回一个值，宏调用获得希望的代码序列。</p>
<p>2.2.3.9 其他性质</p>
<p>宏名一般用大写字母，以便与变量名区别。如有必要，宏名可被重复定义，被重复定义后，宏名原先的意义被新意义所代替。 宏定义代码序列中可以引用已经定义的宏名，即宏定义可以嵌套。</p>
<h3 id="2-2-4-条件编译指令"><a href="#2-2-4-条件编译指令" class="headerlink" title="2.2.4 条件编译指令"></a>2.2.4 条件编译指令</h3><p>2.2.4.1 定义</p>
<p>一般情况下，在进行编译时对源程序中的每一行都要编译，但是有时希望程序中某一部分内容只在满足一定条件时才进行编译，如果不满足这个条件，就不编译这部分内容，这就是条件编译。条件编译主要是进行编译时进行有选择的挑选，注释掉一些指定的代码，以达到多个版本控制、防止对文件重复包含。<code>#if,#ifndef,#ifdef,#else,#elif,#endif</code>是比较常见条件编译预处理指令，可根据表达式的值或某个特定宏是否被定义来确定编译条件。</p>
<p>2.2.4.2 指令含义</p>
<p><code>#if</code> 表达式非零就对代码进行编译。 <code>#ifdef</code> 如果宏被定义就进行编译。 <code>#ifndef</code> 如果宏未被定义就进行编译。 <code>#else</code> 作为其它预处理的剩余选项进行编译。 <code>#elif</code> 这是一种#else和#if的组合选项。 <code>#endif</code> 结束编译块的控制。</p>
<p>2.2.4.3 常用形式一</p>
<p><code>#if_#endif</code>形式：（注意#if_#endif没有大写字母）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span>常数表达式或#<span class="meta-keyword">ifdef</span>宏名或#<span class="meta-keyword">ifndef</span>宏名</span></span><br><span class="line">    程序段</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>如果常数表达式为真或者该宏名已定义或者该宏名未定义，则编译后面的程序段；否则就不编译，跳过这段程序。 类似这样的语句可以用来避免头文件重复编译：（也可以用pragma once替代）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FUNC_H#<span class="meta-keyword">define</span> FUNC_H</span></span><br></pre></td></tr></table></figure>
<p>2.2.4.4 常用形式二</p>
<p><code>#if_#else_#endif</code>形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span>常量表达式或#<span class="meta-keyword">ifdef</span>宏名或#<span class="meta-keyword">ifndef</span>宏名</span></span><br><span class="line">    程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    程序段<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>如果常数表达式为真或者该宏名已定义或者该宏名未定义，则编译后面的程序段1；否则编译后面的程序段2。</p>
<p>2.2.4.5 常用形式三：</p>
<p><code>#if_#elif_#endif</code>形式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span>常量表达式1</span></span><br><span class="line">    程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span>常量表达式2</span></span><br><span class="line">    程序段<span class="number">2</span></span><br><span class="line">…………</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span>常量表达式n</span></span><br><span class="line">    程序段n</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>注意这种形式<code>#elif</code>需要搭配if使用，不可以用于<code>#ifdef</code>和<code>#ifndef</code>中。后二者仅可搭配#else使用。</p>
<p>2.2.4.6 预处理器表达式</p>
<p>预处理器表达式包括的操作符主要涉及到单个数的操作<code>（+、-、~、&lt;&lt;、&gt;&gt;）</code>、多个数的运算<code>（*、/、%、+、-、&amp;、^、|）</code>、关系比较<code>（&lt;、&lt;=、&gt;、&gt;=、==、!=）</code>、宏定义判断（<code>defined）</code>、逻辑操作<code>（!、&amp;&amp;、||）</code>，其优先级和行为方式与C++表达式操作符相同。预处理器表达式在编译器预处理器上执行，在编译前进行。</p>
<p>例如：<code>#ifndef</code>与<code>#if !defined</code>意义相同，<code>#ifdef</code>与<code>#if defined</code>意义相同。</p>
<h3 id="2-2-5-其它预处理指令"><a href="#2-2-5-其它预处理指令" class="headerlink" title="2.2.5 其它预处理指令"></a>2.2.5 其它预处理指令</h3><p>除了上面讨论的常用预处理指令外，还有三个不太常见的预处理指令：<code>#line、#error、#pragma</code>，下面分别介绍。</p>
<p>2.2.5.1 #line</p>
<p><code>#line</code>指令用于重新设定当前由<strong>FILE</strong>和<strong>LINE</strong>宏指定的源文件名字和行号。#line一般形式为#line number “filename”，其中行号number为任何正整数，文件名filename可选。#line主要用于调试及其它特殊应用，注意在#line后面指定的行号数字是表示从下一行开始的行号。</p>
<p>2.2.5.2 #error</p>
<p><code>#error</code>指令使预处理器发出一条错误消息，然后停止执行预处理。一般形式为#error info，如#error MFC requires C++ compilation。</p>
<p>2.2.5.3 #pragma</p>
<p><code>#pragma</code>指令可能是最复杂的预处理指令（也最方便），它的作用是设定编译器的状态或指示编译器完成一些特定的动作。#一般形式为<code>#pragma para</code>，其中para为参数，下面介绍一些常用的参数。</p>
<ul>
<li><h1 id="pragma-once，只要在头文件的最开始加入这条指令就能够保证头文件被编译一次。"><a href="#pragma-once，只要在头文件的最开始加入这条指令就能够保证头文件被编译一次。" class="headerlink" title="pragma once，只要在头文件的最开始加入这条指令就能够保证头文件被编译一次。"></a>pragma once，只要在头文件的最开始加入这条指令就能够保证头文件被编译一次。</h1></li>
<li><h1 id="pragma-message-“info”-，在编译信息输出窗口中输出相应的信息，例如-pragma-message-quot-Hello-quot-。"><a href="#pragma-message-“info”-，在编译信息输出窗口中输出相应的信息，例如-pragma-message-quot-Hello-quot-。" class="headerlink" title="pragma message(“info”)，在编译信息输出窗口中输出相应的信息，例如#pragma message(&quot;Hello&quot;)。"></a>pragma message(“info”)，在编译信息输出窗口中输出相应的信息，例如<code>#pragma message(&quot;Hello&quot;)</code>。</h1></li>
<li><h1 id="pragma-warning，设置编译器处理编译警告信息的方式，例如-pragma-warning-disable-4507-34-once-4385-error-164-等价于-pragma-warning-disable-4507-34-（不显示4507和34号警告信息）、-pragma-warning-once-4385-（4385号警告信息仅报告一次）、-pragma-warning-error-164-（把164号警告信息作为一个错误）。"><a href="#pragma-warning，设置编译器处理编译警告信息的方式，例如-pragma-warning-disable-4507-34-once-4385-error-164-等价于-pragma-warning-disable-4507-34-（不显示4507和34号警告信息）、-pragma-warning-once-4385-（4385号警告信息仅报告一次）、-pragma-warning-error-164-（把164号警告信息作为一个错误）。" class="headerlink" title="pragma warning，设置编译器处理编译警告信息的方式，例如#pragma warning(disable:4507 34;once : 4385;error:164)等价于#pragma warning(disable:4507 34)（不显示4507和34号警告信息）、#pragma warning(once:4385)（4385号警告信息仅报告一次）、#pragma warning(error:164)（把164号警告信息作为一个错误）。"></a>pragma warning，设置编译器处理编译警告信息的方式，例如<code>#pragma warning(disable:4507 34;once : 4385;error:164)</code>等价于<code>#pragma warning(disable:4507 34)</code>（不显示4507和34号警告信息）、<code>#pragma warning(once:4385)</code>（4385号警告信息仅报告一次）、<code>#pragma warning(error:164)</code>（把164号警告信息作为一个错误）。</h1></li>
<li><h1 id="pragma-comment-…-，设置一个注释记录到对象文件或者可执行文件中。常用lib注释类型，用来将一个库文件链接到目标文件中，一般形式为-pragma-comment-lib-quot-lib-quot-，其作用与在项目属性链接器“附加依赖项”中输入库文件的效果相同。"><a href="#pragma-comment-…-，设置一个注释记录到对象文件或者可执行文件中。常用lib注释类型，用来将一个库文件链接到目标文件中，一般形式为-pragma-comment-lib-quot-lib-quot-，其作用与在项目属性链接器“附加依赖项”中输入库文件的效果相同。" class="headerlink" title="pragma comment(…)，设置一个注释记录到对象文件或者可执行文件中。常用lib注释类型，用来将一个库文件链接到目标文件中，一般形式为#pragma comment(lib,&quot;*.lib&quot;)，其作用与在项目属性链接器“附加依赖项”中输入库文件的效果相同。"></a>pragma comment(…)，设置一个注释记录到对象文件或者可执行文件中。常用lib注释类型，用来将一个库文件链接到目标文件中，一般形式为<code>#pragma comment(lib,&quot;*.lib&quot;)</code>，其作用与在项目属性链接器“附加依赖项”中输入库文件的效果相同。</h1></li>
</ul>
<h2 id="2-3-标识符"><a href="#2-3-标识符" class="headerlink" title="2.3 标识符"></a>2.3 标识符</h2><h3 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1 定义"></a>2.3.1 定义</h3><p>标识符即为编程的时候使用的“名字” , 给类、接口、方法、变量、常量名等起名字的字符序列。</p>
<h3 id="2-3-2-组成"><a href="#2-3-2-组成" class="headerlink" title="2.3.2 组成"></a>2.3.2 组成</h3><p>英文大小写字母、数字、下划线<code>（ _ ）</code>和美元符号<code>（ $ ）</code> (可以使用汉字或其他合法字符命名，但是不推荐)。</p>
<h3 id="2-3-3-定义规则"><a href="#2-3-3-定义规则" class="headerlink" title="2.3.3 定义规则"></a>2.3.3 定义规则</h3><p>不能以数字开头。不能是关键字。严格区分大小写。可以是汉字或其他合法字符命名，但不推荐。</p>
<h3 id="2-3-4-命名规范（非强制）"><a href="#2-3-4-命名规范（非强制）" class="headerlink" title="2.3.4 命名规范（非强制）"></a>2.3.4 命名规范（非强制）</h3><p>类和接口：首个字母大写，如果有多个单词，每个单词首字母大写：HelloWorld、Student</p>
<p>变量和方法：首字母小写，如果有多个单词，从第二个单词开始首字母大写：getName、studyJava</p>
<p>常量名（自定义常量）：所有字母都大写，多个单词用下划线隔开<code>（ _ ）</code>:MAX_VALUE</p>
<h2 id="2-4-编译与链接"><a href="#2-4-编译与链接" class="headerlink" title="2.4 编译与链接"></a>2.4 编译与链接</h2><h3 id="2-4-1-过程"><a href="#2-4-1-过程" class="headerlink" title="2.4.1 过程"></a>2.4.1 过程</h3><p>预处理：预处理器在程序源文件被编译之前根据预处理指令对程序源文件进行处理，C/C++主要的预处理功能有文件包含、宏替换、条件编译等。</p>
<p>编译：编译阶段是检查语法，生成汇编。第一遍执行语法分析和静态类型检查，将源代码解析为语法分析树的结构。第二遍由代码生成器遍历语法分析树，把树的每个节点转换为汇编语言或机器代码，生成目标模块(.o或.obj文件）</p>
<p>汇编：汇编代码转换机器码。非底层的程序员不需要考虑这一阶段，编译器也不会出错。汇编与c/c++开发者无关，但是我们可以利用反汇编来调试代码，学习汇编语言依然是必备的。</p>
<p>链接：把一组目标模块链接为可执行程序，使得操作系统可以执行它。处理目标模块中的函数或变量引用，必要时搜索库文件处理所有的引用。（见例2.5.2）</p>
<h3 id="2-4-2-编译指令"><a href="#2-4-2-编译指令" class="headerlink" title="2.4.2 编译指令"></a>2.4.2 编译指令</h3><p>g++ -c：只编译不链接。 g++ -o ex1.out ex1.o：链接程序。 g++ ex5_main.cpp func.cpp -o：直接编译 (g++帮我们省略了一些步骤）。</p>
<h3 id="2-4-3-链接"><a href="#2-4-3-链接" class="headerlink" title="2.4.3 链接"></a>2.4.3 链接</h3><p>将各个目标文件中的各段代码进行地址定位，生成与特定平台相关的可执行文件。外部函数的声明（一般声明在头文件中）只是令程序顺利通过编译，此时并不需要搜索到外部函数的实现（或定义）。在链接过程中，外部函数的实现（或定义）才会被寻找和添加进程序，一旦没有找到函数实现，就无法成功链接。</p>
<h2 id="2-5-头文件"><a href="#2-5-头文件" class="headerlink" title="2.5 头文件"></a>2.5 头文件</h2><h3 id="2-5-1-意义"><a href="#2-5-1-意义" class="headerlink" title="2.5.1 意义"></a>2.5.1 意义</h3><p>有时辅助函数(如全局函数)会在多个源文件中被使用。将辅助函数编入头文件中，从而避免反复编写同一段声明，也能够统一辅助函数的声明，避免错误。</p>
<h3 id="2-5-2-例子"><a href="#2-5-2-例子" class="headerlink" title="2.5.2 例子"></a>2.5.2 例子</h3><p><img src="https://s2.loli.net/2022/01/09/X6xR8KscDMovIh2.png" alt="https://s2.loli.net/2022/01/09/X6xR8KscDMovIh2.png"></p>
<p>程序在连接时，搜索了编译命令里的所有文件，本题中即为两个cpp。因为main.cpp里面写了include“func.h”，所以能找到func.h。如果把main.cpp里的include也去掉，就无法编译了。</p>
<h2 id="2-6-函数的声明与定义"><a href="#2-6-函数的声明与定义" class="headerlink" title="2.6 函数的声明与定义"></a>2.6 函数的声明与定义</h2><h3 id="2-6-1-概念"><a href="#2-6-1-概念" class="headerlink" title="2.6.1 概念"></a>2.6.1 概念</h3><p>函数声明：int ADD(int a, int b); int ADD(int, int); //变量名可省略，例如后缀运算符重载中的哑元。 函数定义（即实现）：int ADD(int a, int b) {return a + b;} 同一个函数可以有多次声明，但只能有一次实现，多次实现会导致链接错误。（multiple definition）注意这和重载的区别，重载是同名函数参数不同。</p>
<h3 id="2-6-2-变量的声明与定义"><a href="#2-6-2-变量的声明与定义" class="headerlink" title="2.6.2 变量的声明与定义"></a>2.6.2 变量的声明与定义</h3><p>关于变量的声明与定义更加详细的讨论在L5-创建与销毁·二1.3.0节，此处不再赘述。</p>
<h3 id="2-6-3-extern关键字"><a href="#2-6-3-extern关键字" class="headerlink" title="2.6.3 extern关键字"></a>2.6.3 extern关键字</h3><p>关于extern修饰符更加详细的讨论在L5-创建与销毁·二1.2.5节，此处不再赘述。</p>
<h3 id="2-6-4-结论"><a href="#2-6-4-结论" class="headerlink" title="2.6.4 结论"></a>2.6.4 结论</h3><p>对于头文件，尽量只申明函数而不实现函数。尽量只声明全局变量而不定义全局变量。</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>L12 函数对象与智能指针</title>
    <url>/2022/01/12/CS/OOP/L12%20%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="函数对象和智能指针"><a href="#函数对象和智能指针" class="headerlink" title="函数对象和智能指针"></a>函数对象和智能指针</h1><h2 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h2><h3 id="什么是函数指针"><a href="#什么是函数指针" class="headerlink" title="什么是函数指针"></a>什么是函数指针</h3><p>函数本质上存在于代码段，因此，每个函数在代码段中，也有着自己的入口地址。</p>
<p>函数指针是一个指针类型的变量。<strong>它指向代码段中函数入口的地址。</strong></p>
<h3 id="函数指针的声明"><a href="#函数指针的声明" class="headerlink" title="函数指针的声明"></a>函数指针的声明</h3><p>声明格式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ret</span> (*func)(args,...)</span><br></pre></td></tr></table></figure>
<p>其中，ret是函数指针指向的函数的返回类型，func是该指针的名字，而args…是该指针指向的函数的参数列表。</p>
<p>也就是说，这个名为func的指针只能指向返回值类型、参数类型都相同的<strong>那些函数</strong>。</p>
<p>函数指针由于返回值、参数不同而有很多种类型。每种类型只能指向特定的<strong>一些函数</strong>。</p>
<p>由于函数的类型比较难写，常常用auto关键字<strong>推断函数指针类型</strong>，直接令函数指针=某一函数名。注意如果用auto，在对函数指针声明的同时必须对其初始化，否则编译器无法自动推导指针类型。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;x++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;x--;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> flag; </span><br><span class="line">  std::cin &gt;&gt; flag;</span><br><span class="line">  <span class="comment">//void (*func)(int &amp;); //手工指定类型，可以先声明函数指针，再赋值；	</span></span><br><span class="line">  <span class="comment">//if(flag==1) &#123;func=increase; &#125; else &#123;func=decrease;&#125;</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">auto</span> func = flag==<span class="number">1</span>?increase:decrease; <span class="comment">//auto推导函数指针类型，和上两行效果相同</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> &amp;x:arr) &#123; <span class="built_in">func</span>(x); cout &lt;&lt; x;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="函数指针的初始化"><a href="#函数指针的初始化" class="headerlink" title="函数指针的初始化"></a>函数指针的初始化</h3><p>给你一个函数，怎么让一个指针指向它呢？</p>
<p>与数组类似，在数组中，<strong>数组名就是</strong>该数组的<strong>首地址</strong>，函数也是一样，函数名就是<strong>该函数的入口地址</strong>，因此，函数名就是该函数的函数指针。也就是说，函数名A是个指针，该指针指向的内存空间和储存该指针的内存空间是同一块，就是储存该函数的内存空间的头部位置。但是如果用别的指针B指向了函数，那么储存B的内存空间和B指向的元素的内存空间不是同一块。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> arrow[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">auto</span> p=func;</span><br><span class="line">cout&lt;&lt;arrow&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;arrow&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;func&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;func&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;&amp;p&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line"><span class="number">0x7fff7a33d6b0</span></span><br><span class="line"><span class="number">0x7fff7a33d6b0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0x7fff7a33d6a8</span></span><br></pre></td></tr></table></figure>
<p>​        </p>
<p>理清楚了指针指向的内存空间与储存指针的内存空间的关系后，我们可以采用如下的两种等价初始化方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">函数指针变量 =  函数名;</span><br><span class="line">函数指针变量 =  &amp;函数名;<span class="comment">//取地址运算符&amp;不是必需的，因为一个函数标识符就表示了该函数入口的地址。</span></span><br><span class="line"><span class="comment">//btw，对一个指针取地址会发生什么？数组名不是头指针吗？数组名这个指针储存着首地址？</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里就解释了，为什么函数调用，必须包含一个圆括号括起来的参数表。</span></span><br><span class="line"><span class="comment">//也就是说，以前我们经常会犯obj.reset这种错误，但实际上该写为obj.reset()</span></span><br><span class="line"><span class="comment">//理由如果func是没有参数的函数，那func是func函数入口的地址，而func()则是调用该函数。</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="函数指针的用途"><a href="#函数指针的用途" class="headerlink" title="函数指针的用途"></a>函数指针的用途</h3><p>函数指针主要有两个用途：做函数的参数、调用函数。</p>
<h4 id="1-函数指针调用函数"><a href="#1-函数指针调用函数" class="headerlink" title="(1)函数指针调用函数"></a>(1)函数指针调用函数</h4><p>用函数指针调用函数有两种方法，都不要忘记参数列表的圆括号()。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">func</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="string">&quot;I love my darling, mua!&quot;</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;love you too!&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string zcy=(*func)();<span class="comment">//这种写法更能体现指针</span></span><br><span class="line">    cout&lt;&lt;zcy&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">auto</span> x=fun;</span><br><span class="line">    <span class="built_in">x</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-函数指针做函数参数"><a href="#2-函数指针做函数参数" class="headerlink" title="(2)函数指针做函数参数"></a>(2)函数指针做函数参数</h4><p>回忆来自<algorithm>的sort函数。它有两种调用方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr,arr+<span class="number">5</span>);<span class="comment">//默认从小到大sort，arr数组的类型需要支持比大小操作。如果arr的类型是自定义的struct或者class，没有默认的比大小操作，此时需要重载&lt;运算符。</span></span><br><span class="line"><span class="built_in">sort</span>(arr,arr+<span class="number">5</span>,comp);<span class="comment">//用自定义的comp函数来sort。这可以很方便地支持逆序sort，只需要把comp函数改为逆序即可。</span></span><br></pre></td></tr></table></figure>
<p>第二种定义方式里，我们把comp这个函数名(<strong>函数名也就是函数指针</strong>)作为参数传了进去。我们知道函数名实际上储存着函数地址。所以这实际上就是传进了函数指针做参数。</p>
<p>用自定义的comp函数实现逆序sort：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>&#123; 	<span class="keyword">return</span> a &gt; b;  &#125;</span><br><span class="line"><span class="comment">//如果是顺序，应该return a&lt;b;</span></span><br><span class="line"><span class="comment">//Compare可能是一种泛型，其实可以接受值传参和引用传参，所以comp的参数为&amp;与否无所谓</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">5</span>] = &#123; <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span> &#125;;</span><br><span class="line">	std::<span class="built_in">sort</span>(arr, arr + <span class="number">5</span>, comp);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x : arr) &#123;</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;  </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:7 5 3 2 1</span></span><br></pre></td></tr></table></figure>
<p>对sort函数来说，它的第三个参数是函数指针，因为我们传入的是comp()函数的头指针，即comp，而不是comp()。</p>
<p>这个函数指针的类型是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">bool</span></span> (*)(T,T)</span><br></pre></td></tr></table></figure>
<p>这是一种叫Compare类型的特殊函数指针类型。</p>
<h3 id="函数对象-1"><a href="#函数对象-1" class="headerlink" title="函数对象"></a>函数对象</h3><p>除了自定义的comp，我们也可以用STL提供的预定义的比较函数(需要#include <functional>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(arr, arr+<span class="number">5</span>, less&lt;<span class="keyword">int</span>&gt;());<span class="comment">//从小到大</span></span><br><span class="line"><span class="built_in">sort</span>(arr, arr+<span class="number">5</span>, greater&lt;<span class="keyword">int</span>&gt;());<span class="comment">//从大到小</span></span><br><span class="line"><span class="comment">//注意到：函数对象本质上是重载了()，但是greater&lt;int&gt;()表示的是默认构造函数，这里传入的参数是一个对象</span></span><br><span class="line"><span class="comment">//greater&lt;int&gt;()()的第一个括号是调用默认构造函数，第二个括号是重载()</span></span><br></pre></td></tr></table></figure>
<p>less<int>()，greater<int>()和comp一样，它们有Compare类型函数指针的功能，但它其实是<strong>一个函数对象</strong>！</p>
<p>以greater<int>()为例，其内部实现机制如下。</p>
<p>注意到，greater的实现已经内置在了<functional>中，即以下代码在实际应用时不必写出。此处为了避免关键字冲突，将greater写为Greater。这就好比std里的swap和自己手写的swap一样。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greater</span> &#123;</span><span class="comment">//大G避免关键字冲突</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Greater</span>()&#123;&#125;;<span class="comment">//默认构造函数；</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a, <span class="keyword">const</span> T &amp;b)</span> <span class="keyword">const</span>	</span>&#123;<span class="comment">//重载了()</span></span><br><span class="line">		<span class="keyword">return</span> a &gt; b;</span><br><span class="line">	&#125;<span class="comment">//参数是引用类型，是为了防止重复拷贝；参数是const，则是为了防止修改a和b</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>通过在public中完成对operator()的重载，当该模版被实例化为一个对象后，可以通过()调用该对象，看起来就像一个函数。这样的<strong>重载了()</strong>的对象称为“函数对象”。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Greater是一个模板类</span></span><br><span class="line"><span class="comment">//Greater&lt;int&gt; 用int实例化的类</span></span><br><span class="line"><span class="comment">//Greater&lt;int&gt;() 调用了Greater&lt;int&gt; 的构造函数，构造出的一个Greater&lt;int&gt;类型对象</span></span><br></pre></td></tr></table></figure>
<p>调用函数对象：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greater</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> T &amp;a, <span class="keyword">const</span> T &amp;b)</span> <span class="keyword">const</span>	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a &gt; b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> func = Greater&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//这个就像是func()是一个函数，但是func只是函数指针。</span></span><br><span class="line">    <span class="comment">//Greater&lt;int&gt;()()是函数，但是Greater&lt;int&gt;()只是一个函数指针。</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">func</span>(<span class="number">2</span>, <span class="number">1</span>) &lt;&lt; endl;	<span class="comment">//True</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">func</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; endl;	<span class="comment">//False</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in">func</span>(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; endl;	<span class="comment">//False</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，这里我们可以很<strong>优雅</strong>地写func(1,2),是因为之前已经把名叫Greater的类模版实例化为了一个对象。实际上，也可以不实例化而直接调用。但这时一定不要忘记()，第一个()代表构造函数，第二个()才代表对括号的重载。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;greater&lt;<span class="keyword">int</span>&gt;()(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;greater&lt;int&gt;(1,2);//错误，这是在以1，2为参数调用构造函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:0</span></span><br></pre></td></tr></table></figure>
<p>以greater<int>()为参数调用sort：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> func = greater&lt;<span class="keyword">int</span>&gt;();<span class="comment">//this is an object </span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="built_in">sort</span>(arr,arr+<span class="number">5</span>,greater&lt;<span class="keyword">int</span>&gt;());<span class="comment">//接受函数对象</span></span><br><span class="line">    <span class="comment">//或者写为sort(arr,arr+5,func);，接受函数指针</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i:arr)&#123;cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:8 4 3 2 1 </span></span><br></pre></td></tr></table></figure>
<p>所以，std::sort<strong>既可以接受函数指针，又可接受函数对象</strong>作为第三个参数。实际上，sort是一个函数模板，其模版参数是待sort的数组的类型和一个Compare类型的函数指针。调用sort的格式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(Iterator first,Iterator last,comp);</span><br></pre></td></tr></table></figure>
<p>调用时，系统会自行推导函数模版参数，因此我们不必手工指定。</p>
<p>最后，关于sort函数的一个细节：sort函数不仅可以用来sort数组，还可以sort任何<strong>有序的</strong>容器。比如Vector。无论是数组、list还是vector，sort的第一个参数都应该指向第一个元素，而第二个参数则指向<strong>最后一个元素之后</strong>的那个位置，<strong>而不是最后一个元素。</strong></p>
<p>当然，vec里面的数据得先能compare。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;vec=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">sort</span>(arr,arr+<span class="number">5</span>);<span class="comment">//arr+5=arr[5],这是最后一个元素之后的位置</span></span><br><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());<span class="comment">//vec.end()也是最后一个元素之后的位置</span></span><br><span class="line"><span class="comment">//注意这里体现了vector和数组的不同，数组名就是迭代器，但是vector的名字不是迭代器，需要begin()和end()函数来返回迭代器</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> func = greater&lt;<span class="keyword">int</span>&gt;();<span class="comment">//this is an object </span></span><br><span class="line">	vector&lt;<span class="keyword">int</span>&gt;vec=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">	<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i:vec)&#123;cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	<span class="built_in">sort</span>(vec.<span class="built_in">begin</span>(),vec.<span class="built_in">end</span>(),func);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i:vec)&#123;cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">6</span> </span><br><span class="line"><span class="number">6</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure>
<h2 id="std-function类"><a href="#std-function类" class="headerlink" title="std::function类"></a>std::function类</h2><p>由对sort的讨论，我们发现函数指针和函数对象有高度的一致性。但另一方面，它们的形式又不统一。</p>
<p>在下面这个例子中，从屏幕、文件读取这两个函数不能被同一个数组统一。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">readFromScreen</span><span class="params">()</span><span class="comment">//从屏幕读取</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string input; <span class="built_in">getline</span>(cin, input);</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadFromFile</span>//从文件读取</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string input;</span><br><span class="line">        <span class="built_in">getline</span>(ifstream(<span class="string">&quot;input.txt&quot;</span>), input);</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//string operator()()的意思是返回值类型为string，第一个()表示重载(),第二个()表示没有参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> readArr[] = &#123;readFromScreen, <span class="built_in">ReadFromFile</span>()&#125;;<span class="comment">//我们试图用数组管理这两个类似读取函数</span></span><br><span class="line">  <span class="comment">//auto类型推导失败，因为readFromScreen是string(*)(void)类型的函数指针，ReadFromFile()则是ReadFromFile类型的对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决方法：std::function类，来自<functional>头文件。</p>
<h3 id="function类是一种特殊的类模版"><a href="#function类是一种特殊的类模版" class="headerlink" title="function类是一种特殊的类模版"></a>function类是一种特殊的类模版</h3><p>function类是一种特殊的<strong>类模板</strong>，模板参数是函数返回值类型和参数类型。但是特殊的是，function只有成员函数，无数据成员。</p>
<h4 id="function类的实例化"><a href="#function类的实例化" class="headerlink" title="function类的实例化"></a>function类的实例化</h4><p>function类为函数指针与对象提供了统一的接口。实际上，function的实例可以存储、复制和调用的不仅仅是函数指针与对象，还包括lambda表达式，绑定表达式和指向成员函数和指向数据成员的指针。（<strong>我并不知道这些是什么，qwq</strong>）不管采用哪种方式，只要调用形式一样（返回值类型、实参类型），我们就可以用function类型来统一。</p>
<p>function类的实例化格式如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">function&lt;<span class="built_in">ret</span>(args...)&gt;Func;</span><br></pre></td></tr></table></figure>
<p>其中ret是函数返回值类型，()中是参数类型列表，Func是该function类对象的名字。</p>
<h4 id="function类的应用"><a href="#function类的应用" class="headerlink" title="function类的应用"></a>function类的应用</h4><p>上面的两个读取函数可以统一在function类中：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">string <span class="title">readFromScreen</span><span class="params">()</span><span class="comment">//从屏幕读取</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string input; <span class="built_in">getline</span>(cin, input);</span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadFromFile</span>//从文件读取</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">        string input;</span><br><span class="line">        <span class="built_in">getline</span>(ifstream(<span class="string">&quot;input.txt&quot;</span>), input);</span><br><span class="line">        <span class="keyword">return</span> input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	function&lt;<span class="built_in">string</span>()&gt; readArr[] = </span><br><span class="line">			&#123;readFromScreen, <span class="built_in">ReadFromFile</span>()&#125;;<span class="comment">//function类的数组readArr可以统一这两种读取函数；</span></span><br><span class="line">	function&lt;<span class="built_in">string</span>()&gt; readFunc;<span class="comment">////readFunc是个function类变量，既可以被函数对象，也可以被函数指针赋值</span></span><br><span class="line">	readFunc = readFromScreen; </span><br><span class="line">	readFunc = <span class="built_in">ReadFromFile</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> (*readFunc2)();<span class="comment">//和function类不同，对于传统的函数指针来说</span></span><br><span class="line">	readFunc2 = readFromScreen;<span class="comment">//它只能被函数赋值</span></span><br><span class="line">	<span class="comment">//readFunc2 = ReadFromFile(); //不能被函数对象赋值</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用function实现多态"><a href="#用function实现多态" class="headerlink" title="用function实现多态"></a>用function实现多态</h3><p>正如sort函数所实现的那样，通过将function类型作为函数参数，可以统一函数对象和函数指针。以function类型作为函数参数的函数可以仅仅改变参数，获得不同的功能。</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略readFromScreen\ReadFromFile\calculateAdd\writeToScreen</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(function&lt;string()&gt; read, function&lt;string(string)&gt; calculate,function&lt;<span class="keyword">void</span>(string)&gt;	write)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//function&lt;string(string)&gt; calculate，这是一个参数，这个参数就是function类的一个对象，返回值是string，接受的参数也是string</span></span></span><br><span class="line"><span class="function">    <span class="comment">//整体是process的参数列表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string data = <span class="built_in">read</span>();</span><br><span class="line">	string output = <span class="built_in">calculate</span>(data);</span><br><span class="line">	<span class="built_in">write</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="comment">//readFromScreen是个函数，ReadFromFile()是个函数对象</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">process</span>(readFromScreen, calculateAdd, writeToScreen);</span><br><span class="line">	<span class="built_in">process</span>(<span class="built_in">ReadFromFile</span>(), calculateAdd, writeToScreen);<span class="comment">//多态</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例2:</p>
<p>当process的参数类型是function<string()>时，可以同时接受func1,func2,func3作为函数参数。</p>
<p>如果process的参数类型是<strong>string (*func)()</strong>，就无法接受func2,func3;</p>
<p>如果process的参数类型是<strong>Func2类对象</strong>，就无法接受func1,func3;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">func1</span><span class="params">()</span></span>;<span class="comment">//func1是个全局函数，参数为void，返回值为string</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Func2</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="keyword">public</span>: <span class="function">string <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">Func2 func2;<span class="comment">//func2是一个函数对象，参数为void，返回值为string</span></span><br><span class="line">function&lt;<span class="built_in">string</span>()&gt; func3;<span class="comment">//func3是一个function类，参数为void，返回值为string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(function&lt;string()&gt; func)</span></span>&#123;</span><br><span class="line">  string str=<span class="built_in">func</span>();</span><br><span class="line">  cout&lt;&lt;str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*也可以写成：</span></span><br><span class="line"><span class="comment">template&lt;class T&gt;</span></span><br><span class="line"><span class="comment">void process(T func)&#123;...&#125;</span></span><br><span class="line"><span class="comment">即用函数模版实现多态。比function写起来还简单</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">	process(func1);</span></span><br><span class="line"><span class="comment">	process(func2);</span></span><br><span class="line"><span class="comment">	process(func3);</span></span><br><span class="line"><span class="comment">	return 0;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
<p>STL中大量函数用到了函数对象(#include <algorithm>)。以下这些函数都调用了函数指针或者函数对象作为参数。</p>
<p>for_each    对序列进行指定操作<br>        find_if    找到满足条件的对象<br>        count_if    对满足条件的对象计数<br>        binary_search    二分查找满足条件的对象<br>并且也有许多预置的函数对象(#include <functional>)<br>        less        比较a<b
        equal_to    比较a==b
        greater    比较a>b<br>        plus        返回a+b<br>        ……<br><strong>熟练使用函数对象</strong>有助于实现复杂的功能</p>
<p>以for_each为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for_each example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>     <span class="comment">// std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>    <span class="comment">// std::for_each</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>       <span class="comment">// std::vector</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfunction</span> <span class="params">(<span class="keyword">int</span>&amp; i)</span> </span>&#123;  <span class="comment">//普通的函数</span></span><br><span class="line">  i++;</span><br><span class="line">  std::cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">myclass</span> &#123;</span>           <span class="comment">//函数对象类型的函数</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>&amp; i)</span> </span>&#123;</span><br><span class="line">    i+=<span class="number">2</span>;</span><br><span class="line">    std::cout&lt;&lt; i &lt;&lt;<span class="string">&#x27; &#x27;</span>;&#125;</span><br><span class="line">&#125; myobject;<span class="comment">//可以在类里直接声明对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  std::vector&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  myvector.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">  myvector.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">  myvector.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;after myfunction,now myvector contains:&quot;</span>;</span><br><span class="line">  for_each (myvector.<span class="built_in">begin</span>(), myvector.<span class="built_in">end</span>(), myfunction);<span class="comment">//传进函数指针作为参数</span></span><br><span class="line">  std::cout &lt;&lt;std::endl;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;after myobject,now myvector contains:&quot;</span>;</span><br><span class="line">  for_each (myvector.<span class="built_in">begin</span>(), myvector.<span class="built_in">end</span>(), myobject);<span class="comment">//传进函数对象作为参数</span></span><br><span class="line"><span class="comment">//完全等价于for_each (myvector.begin(), myvector.end(), myclass());</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output：</span></span><br><span class="line"><span class="comment">//after myfunction,now myvector contains:11 21 31 </span></span><br><span class="line"><span class="comment">//after myobject,now myvector contains:13 23 33</span></span><br></pre></td></tr></table></figure>
<p>两次调用了for_each函数，分别对vector里面的每一个元素执行了myfunction和myobject。因为这两个函数的<strong>函数参数都是引用</strong>，主函数中的变量也会被修改。</p>
<p>另一个count_if的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// count_if example</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>     <span class="comment">// std::cout</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span>    <span class="comment">// std::count_if</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span>       <span class="comment">// std::vector</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsOdd</span> <span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> ((i%<span class="number">2</span>)==<span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  std::vector&lt;<span class="keyword">int</span>&gt; myvector;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;<span class="number">10</span>; i++) myvector.<span class="built_in">push_back</span>(i); <span class="comment">// myvector: 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> mycount = <span class="built_in">count_if</span> (myvector.<span class="built_in">begin</span>(), myvector.<span class="built_in">end</span>(), IsOdd);</span><br><span class="line">  std::cout &lt;&lt; <span class="string">&quot;myvector contains &quot;</span> &lt;&lt; mycount  &lt;&lt; <span class="string">&quot; odd values.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="comment">//myvector contains 5 odd values.</span></span><br></pre></td></tr></table></figure>
<p>count_if函数需要传进一个返回值为bool类型的函数作为参数。</p>
<h4 id="与其他多态实现方式的对比"><a href="#与其他多态实现方式的对比" class="headerlink" title="与其他多态实现方式的对比"></a>与其他多态实现方式的对比</h4><h5 id="（1）使用虚函数实现："><a href="#（1）使用虚函数实现：" class="headerlink" title="（1）使用虚函数实现："></a>（1）使用虚函数实现：</h5><p>对基类的指针或者引用，在运行时通过虚函数表确认该<strong>指针或引用</strong>的实际类型，并调用实际类型的重写覆盖后的函数，以实现多态。</p>
<p>是晚绑定（运行时绑定）</p>
<h5 id="（2）使用模板实现："><a href="#（2）使用模板实现：" class="headerlink" title="（2）使用模板实现："></a>（2）使用模板实现：</h5><p>上文中的greater<int>()就是模版实现多态的例子。通过传入不同的模版参数，自动实现重载，可以实现函数对象和函数指针的多态。<br>        是早绑定（编译期绑定）</p>
<h5 id="3-使用std-function实现"><a href="#3-使用std-function实现" class="headerlink" title="(3)使用std::function实现"></a>(3)使用std::function实现</h5><p>也可以支持函数指针和函数对象（通过function的多态）<br>        是晚绑定（运行时绑定）</p>
<h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>将函数也对象化。函数可以作为参数传递，函数也可以作为变量储存，并且只要函数的参数和返回值相同，就可以被视为同一种类型的变量，不再需要模板来调用不同的函数。</p>
<hr>
<h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>当两个指针A，B同时指向一个变量C的时候，我们希望只有A，B均被析构的时候，C才被析构。</p>
<p>如何做到？引入智能指针！（包含在头文件<memory>中）</p>
<p>一篇CSDN上的说明的链接：<a href="https://blog.csdn.net/flowing_wind/article/details/81301001">https://blog.csdn.net/flowing_wind/article/details/81301001</a></p>
<h3 id="构造智能指针"><a href="#构造智能指针" class="headerlink" title="构造智能指针"></a>构造智能指针</h3><p>​        智能指针的创建：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))</span></span>;<span class="comment">//指向内容为1的一块内存</span></span><br><span class="line">shared_ptr&lt;<span class="keyword">int</span>&gt; p2;	<span class="comment">//空指针（不初始化）</span></span><br><span class="line"><span class="keyword">auto</span> p3=make_shared&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>);<span class="comment">//make_shared&lt;T&gt;(agrs)是一个函数，返回值是一个share_ptr,指向一个动态分配的类型为T的对象，args是用来初始化T的参数。</span></span><br><span class="line"><span class="keyword">int</span> a;shared_ptr&lt;<span class="keyword">int</span>&gt;<span class="built_in">p4</span>(a);<span class="comment">//用已有对象创建智能指针，p4指向a。</span></span><br></pre></td></tr></table></figure>
<p>让两个指针指向同一个位置：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> myint;</span><br><span class="line">  <span class="built_in">Myclass</span>(<span class="keyword">int</span> i):<span class="built_in">myint</span>(i)&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  shared_ptr&lt;Myclass&gt; p2=make_shared&lt;Myclass&gt;(<span class="number">2</span>);</span><br><span class="line">  shared_ptr&lt;Myclass&gt; p3=p2;<span class="comment">//p2和p3指向同一块内存</span></span><br><span class="line">    <span class="comment">//p2、p3都是智能指针，指向同一块内存。</span></span><br><span class="line">  <span class="comment">//auto p3(p2);和上面的句子等价</span></span><br><span class="line">  shared_ptr&lt;Myclass&gt; p4;</span><br><span class="line">  p4=p3;<span class="comment">//对已有的智能指针，也可以直接进行赋值。如果p4原本指向某个内存空间，该内存空间的所有智能指针的引用计数-1，然后p3指向空间的所有智能指针引用计数+1。此处p4构造之后是个空指针，所以只会给p3的内存空间引用计数+1；</span></span><br><span class="line">  cout&lt;&lt;p2&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;p3&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;p4&lt;&lt;endl;</span><br><span class="line">&#125;<span class="comment">//output:</span></span><br><span class="line"><span class="comment">//0x14b0e80</span></span><br><span class="line"><span class="comment">//0x14b0e80</span></span><br><span class="line"><span class="comment">//0x14b0e80</span></span><br></pre></td></tr></table></figure>
<h3 id="引用计数use-count"><a href="#引用计数use-count" class="headerlink" title="引用计数use_count()"></a>引用计数use_count()</h3><p>用obj.use_count()函数，可以得到智能指针obj此刻指向的物体（包括obj自己在内）共有几个智能指针指向它。use_count()</p>
<p>例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">4</span>))</span></span>;</span><br><span class="line">	cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 1</span></span><br><span class="line">	&#123;</span><br><span class="line">		shared_ptr&lt;<span class="keyword">int</span>&gt; p2 = p1;</span><br><span class="line">		cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 2</span></span><br><span class="line">		cout &lt;&lt; p2.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 2</span></span><br><span class="line">	&#125;	<span class="comment">//p2出作用域</span></span><br><span class="line">	cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果函数参数是智能指针类型，则在调用函数时，由于调用了拷贝构造构造智能指针作为参数，新构造出的智能指针指向同一对象，会发生count增加。如果想要避免，可以将函数参数类型改为智能指针的引用。</p>
<p>不用考虑的太复杂，<strong>引用传参本来就不发生构造和析构</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(shared_ptr&lt;<span class="keyword">int</span>&gt; p1)</span> </span>&#123;<span class="comment">//拷贝构造了智能指针作为参数</span></span><br><span class="line">    cout &lt;&lt; p1.<span class="built_in">use_count</span>();<span class="comment">//此时count为2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(shared_ptr&lt;<span class="keyword">int</span>&gt; &amp;p1)</span></span>&#123;<span class="comment">//参数是智能指针引用</span></span><br><span class="line">    cout &lt;&lt; p1.<span class="built_in">use_count</span>();<span class="comment">//此时count仍为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>)</span></span>;<span class="comment">//此时count为1</span></span><br><span class="line">    <span class="built_in">f1</span>(p1);</span><br><span class="line">    cout &lt;&lt; p1.<span class="built_in">use_count</span>();<span class="comment">//出f1函数体时，参数被析构，count回归到1</span></span><br><span class="line">    <span class="built_in">f2</span>(p1);</span><br><span class="line">    cout &lt;&lt; p1.<span class="built_in">use_count</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:2111</span></span><br></pre></td></tr></table></figure>
<h3 id="智能指针的实现原理"><a href="#智能指针的实现原理" class="headerlink" title="智能指针的实现原理"></a>智能指针的实现原理</h3><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-3f5ac434-77f3-4bf1-a1c6-ad1deeb5100a/f1880df9-0a4d-4ec5-93c4-a4a83cc1b9a8.png" style="zoom:50%;" /></p>
<p>如图，智能指针指向的是辅助指针Uptr，辅助指针再指向真正指向数据存放位置的指针p.</p>
<p>辅助指针Uptr有两个功能：一方面，它指向真正指向数据存放位置的指针p；另一方面，它具有成员count，记录有几个智能指针指向自己。每个指向“真正的”数据的指针p都只被一个辅助指针指向，p和Uptr一一对应。</p>
<p>基于上图原理给出以下结论：</p>
<ul>
<li>不能直接用智能指针给普通指针赋值，因为普通指针没有辅助指针。</li>
<li>一个普通指针最多给一个智能指针赋值，否则会出现多个辅助指针。</li>
<li>智能指针之间可以相互赋值，共同指向辅助指针即可。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">4</span>))</span></span>;</span><br><span class="line">	cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">// 1</span></span><br><span class="line">	<span class="keyword">int</span> *normal=p1;<span class="comment">//我们希望normal可以和p1指向相同的内存</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//output:</span></span><br><span class="line"><span class="comment">/*.code.tio.cpp:8:7: error: no viable conversion from &#x27;shared_ptr&lt;int&gt;&#x27; to &#x27;int *&#x27;</span></span><br><span class="line"><span class="comment">        int *normal=p1;</span></span><br><span class="line"><span class="comment">            ^      ~~*/</span>   </span><br></pre></td></tr></table></figure>
<p>那如果想让普通指针指向智能指针真正指向的位置该怎么办呢？利用p.get()函数！p.get()返回智能指针p真正指向的数据的<strong>裸指针</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *normal=p1.<span class="built_in">get</span>();</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *pi = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">2</span>);</span><br><span class="line">  <span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr</span><span class="params">(pi)</span></span>; <span class="comment">//用已有对象初始化</span></span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;ptr now points to &quot;</span>;</span><br><span class="line">  cout&lt;&lt;ptr.<span class="built_in">get</span>()&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">int</span> *p =ptr.<span class="built_in">get</span>();</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;p now points to &quot;</span>;</span><br><span class="line">  cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;But the count of ptr is &quot;</span>&lt;&lt;ptr.<span class="built_in">use_count</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line">ptr now points to <span class="number">0x1557e70</span></span><br><span class="line">p now points to <span class="number">0x1557e70</span></span><br><span class="line">But the count of ptr is <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>上面的例子说明， 虽然理论上可以这么做，但因为普通指针不和辅助指针发生关系，无法增加count的数量。因此一般<strong>不能混合使用普通指针和智能指针</strong>。如果我们希望有一个指向该物体的指针，并且不被记入count，考虑到安全性，可以使用weak_ptr代替普通指针。</p>
<h3 id="智能指针的初始化"><a href="#智能指针的初始化" class="headerlink" title="智能指针的初始化"></a>智能指针的初始化</h3><p>可以用智能指针初始化另一个智能指针：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr2</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>))</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">ptr3</span><span class="params">(ptr2)</span></span>;</span><br></pre></td></tr></table></figure>
<p>但是不能使用同一裸指针初始化多个智能指针（这样会出现多个辅助指针）</p>
<p>下面这个例子是错的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(); </span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(p)</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(p)</span></span>; </span><br></pre></td></tr></table></figure>
<h3 id="智能指针的析构"><a href="#智能指针的析构" class="headerlink" title="智能指针的析构"></a>智能指针的析构</h3><p>智能指针析构的时候，其内部的成员辅助指针并不一定会被析构，因为还可能有其他智能指针指向该辅助指针。在智能指针析构的时候时，其辅助指针内记录智能指针数量的成员count发生$count—$.只有$count—$后为0的时候，辅助指针才会被同时析构。</p>
<h3 id="智能指针的其他操作"><a href="#智能指针的其他操作" class="headerlink" title="智能指针的其他操作"></a>智能指针的其他操作</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p.<span class="built_in">get</span>()	<span class="comment">//获取裸指针,i.e.获得实际指针的情况</span></span><br><span class="line">p.<span class="built_in">reset</span>()	<span class="comment">//清除指针并减少引用计数，见下</span></span><br><span class="line">shared_ptr&lt;myType&gt; q=static_pointer_cast&lt;myType&gt;(p)<span class="comment">//不做类型检查，直接把一个其他类类智能指针转化为myType类智能指针。</span></span><br><span class="line">shared_ptr&lt;Base&gt; q=dynamic_pointer_cast&lt;Base&gt;(p)<span class="comment">//把一个其他类智能指针转化为Base类智能指针，还做类型检查。</span></span><br></pre></td></tr></table></figure>
<p>其中，dynamic_pointer_cast和static_pointer_cast所遵循的规则和我们在L9中学过的dynamic_cast、static_cast相同。<strong>但是其参数和返回值都是shared_ptr。</strong></p>
<p><strong>这里对dynamic_cast做一个说明</strong>：</p>
<ul>
<li>T2<em> pObj = dynamic_cast&lt;T2</em>&gt;(obj_p); 这一个语句里会出现两个T2，第一个是pObj的类型，第二个是obj_p的转换目标；</li>
<li>dynamic_cast一般用来做向下类型转换，因为向上类型转换直接赋值就可以了。</li>
<li>dynamic_pointer_cast参数都是智能指针。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;Base&gt; q=dynamic_pointer_cast&lt;Base&gt;(p);<span class="comment">//该dynamic_cast作用类似于下面的语句，但是结果是个shared_ptr</span></span><br><span class="line">Base*q=<span class="keyword">dynamic_cast</span>&lt;Base*&gt;(p.<span class="built_in">get</span>());</span><br></pre></td></tr></table></figure>
<p>备注：指向同一块内存空间的所有shared_ptr，<strong>不论指针本身的类型</strong>，都会给use_count++。</p>
<p>reset函数：将p指向另外一个对象。当()为空的时候，p指向null，当使用reset函数时，原来p指向的对象的count会-1。</p>
<p>reset和直接对指针赋值的区别：reset的参数是一个对象，但是直接对指针赋值的参数是一个地址or别的指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  shared_ptr&lt;<span class="keyword">int</span>&gt;<span class="built_in">sp</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">1</span>)) ;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;the address is&quot;</span>&lt;&lt;sp&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  sp.<span class="built_in">reset</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span> (<span class="number">2</span>));</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;the address is&quot;</span>&lt;&lt;sp&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  sp.<span class="built_in">reset</span>();</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;the address is&quot;</span>&lt;&lt;sp&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ouput:</span></span><br><span class="line">the address is0x17e1e70</span><br><span class="line">the address is0x17e1eb0</span><br><span class="line">the address is0</span><br></pre></td></tr></table></figure>
<h3 id="智能指针的问题"><a href="#智能指针的问题" class="headerlink" title="智能指针的问题"></a>智能指针的问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>;</span><span class="comment">//先声明，后定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line">    shared_ptr&lt;Child&gt; child;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Parent</span>() &#123;cout &lt;&lt; <span class="string">&quot;parent constructing&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    ~<span class="built_in">Parent</span>() &#123;cout &lt;&lt; <span class="string">&quot;parent destructing&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setChild</span><span class="params">(shared_ptr&lt;Child&gt; c)</span> </span>&#123;</span><br><span class="line">        child = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> &#123;</span></span><br><span class="line">    shared_ptr&lt;Parent&gt; parent;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Child</span>() &#123;cout &lt;&lt; <span class="string">&quot;child constructing&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    ~<span class="built_in">Child</span>() &#123;cout &lt;&lt; <span class="string">&quot;child destructing&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(shared_ptr&lt;Parent&gt; p)</span> </span>&#123;</span><br><span class="line">        parent = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">shared_ptr&lt;Parent&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> Parent())</span></span>;</span><br><span class="line">    <span class="function">shared_ptr&lt;Child&gt; <span class="title">c</span><span class="params">(<span class="keyword">new</span> Child())</span></span>;</span><br><span class="line">    p-&gt;<span class="built_in">setChild</span>(c);</span><br><span class="line">    c-&gt;<span class="built_in">setParent</span>(p);</span><br><span class="line">	<span class="comment">//p和c被销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">parent constructing</span><br><span class="line">child constructing			</span><br><span class="line"><span class="comment">//p和c没有发生析构！</span></span><br></pre></td></tr></table></figure>
<p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-3f5ac434-77f3-4bf1-a1c6-ad1deeb5100a/dd697686-1665-4628-abb6-b62979e4c5d7.png" style="zoom:50%;" /></p>
<p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-3f5ac434-77f3-4bf1-a1c6-ad1deeb5100a/d6a6c655-4725-4d69-8f94-08c588cf0c6d.png" style="zoom:50%;" /></p>
<p>如图，Parent和Child两个对象中的成员分别是指向对方的智能指针，导致p，c被析构之后，Parent和Child所在内存没有被析构。</p>
<p>解决方法：weak_ptr.</p>
<h3 id="弱引用weak-ptr"><a href="#弱引用weak-ptr" class="headerlink" title="弱引用weak_ptr"></a>弱引用weak_ptr</h3><p>弱引用指针指向对象的时候，不会被count计数。weak_ptr必须由shared_ptr构造，但是不会计数，<strong>相当于一个能够被智能指针赋值的“普通指针”。</strong></p>
<h4 id="构造弱引用指针"><a href="#构造弱引用指针" class="headerlink" title="构造弱引用指针"></a>构造弱引用指针</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">3</span>))</span></span>;</span><br><span class="line">weak_ptr&lt;<span class="keyword">int</span>&gt; wp1 = sp;<span class="comment">//weak_ptr必须由shared_ptr构造</span></span><br></pre></td></tr></table></figure>
<h4 id="弱引用指针的操作"><a href="#弱引用指针的操作" class="headerlink" title="弱引用指针的操作"></a>弱引用指针的操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">wp.<span class="built_in">use_count</span>()	<span class="comment">//获取引用计数，虽然弱引用指针不被count计数，但仍然可以获取引用次数count，count值为指向同一个对象的智能指针的数量。</span></span><br><span class="line">wp.<span class="built_in">reset</span>()			<span class="comment">//清除指针</span></span><br><span class="line">wp.<span class="built_in">expired</span>()		<span class="comment">//当弱引用指针的count==0时，失效，返回true。否则返回false。</span></span><br><span class="line">sp = wp.<span class="built_in">lock</span>()	<span class="comment">//从弱引用wp获得一个智能指针sp，该智能指针会增加count。</span></span><br></pre></td></tr></table></figure>
<h3 id="独享所有权unique-ptr"><a href="#独享所有权unique-ptr" class="headerlink" title="独享所有权unique_ptr"></a>独享所有权unique_ptr</h3><p>unique_ptr:每个对象只能由一个unique_ptr指向它。该对象不能被其他shared_ptr,weak_ptr指向。</p>
<p><strong>某个时刻只能有一个unique_ptr指向一个给定对象</strong>，由于一个unique_ptr“拥有”它指向的对象，因此unique_ptr不支持普通的拷贝或赋值操作。</p>
<p>注意到unique只是和shared与weak不能共享，<strong>但是仍然可以和普通指针和引用共享。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> u4 =make_unique&lt;<span class="keyword">int</span>&gt;(a);<span class="comment">//创建方式在之后讲述</span></span><br><span class="line">    <span class="keyword">int</span>&amp;b=a;</span><br><span class="line">    <span class="keyword">int</span>*x=&amp;a;</span><br><span class="line">    cout&lt;&lt;*x&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="unique-ptr的创建"><a href="#unique-ptr的创建" class="headerlink" title="unique_ptr的创建"></a>unique_ptr的创建</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt;u1;<span class="comment">//空指针</span></span><br><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt;<span class="built_in">u2</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">3</span>));<span class="comment">//新分配一块内存给unique_ptr.</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;unique_ptr&lt;<span class="keyword">int</span>&gt;<span class="built_in">u3</span>(a);<span class="comment">//用已有对象a创建unique_ptr.</span></span><br><span class="line"><span class="keyword">auto</span> u4 = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>);<span class="comment">//也是新分配一块内存给unique_ptr.make_unique函数自动返回unique_ptr类型的返回值，供编译器推导u4的类型。</span></span><br></pre></td></tr></table></figure>
<p>和weak_ptr不同，unique_ptr不需要和shared_ptr共同使用。实际上，unique_ptr不能和shared_ptr同时指向一个对象，也不能用shared_ptr构造unique_ptr。</p>
<p>下面这个例子就是错的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">sp</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">up</span><span class="params">(sp)</span></span>;</span><br></pre></td></tr></table></figure>
<p><strong>先给出结论</strong>，unique_ptr相比于普通指针具有如下的特点：</p>
<p>1.<strong>不可用unique_ptr给其他指针赋值：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>*p=<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">int</span>&amp;b=*p;</span><br><span class="line"><span class="comment">//可以！！！</span></span><br><span class="line">    <span class="keyword">auto</span> p=make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">int</span> *g=*p;</span><br><span class="line"><span class="comment">//不可以！！！</span></span><br></pre></td></tr></table></figure>
<p>2.<strong>不可以输出：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">auto</span> p=make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line">    cout&lt;&lt;p&lt;&lt;endl;</span><br><span class="line"><span class="comment">//不可以！！！</span></span><br></pre></td></tr></table></figure>
<p>3.<strong>不可以delete：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">auto</span> p=make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">output：</span><br><span class="line">    <span class="built_in">Error</span>(s):</span><br><span class="line"></span><br><span class="line"><span class="number">1152177172</span>/source.cpp: In function ‘<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>’:</span></span><br><span class="line"><span class="function"><span class="number">1152177172</span>/source.cpp:<span class="number">7</span>:<span class="number">12</span>: error: type ‘class std::unique_ptr&lt;int, std::default_delete&lt;int&gt; &gt;’ argument given to ‘delete’, expected pointer</span></span><br><span class="line"><span class="function">     delete p;</span></span><br><span class="line">            ^</span><br></pre></td></tr></table></figure>
<h4 id="unique-ptr的操作"><a href="#unique-ptr的操作" class="headerlink" title="unique_ptr的操作"></a>unique_ptr的操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt;u1;<span class="comment">//创建空unique_ptr</span></span><br><span class="line">u1=<span class="literal">nullptr</span>;<span class="comment">//此时会释放u1指向的对象的权限，但是对象不会被析构</span></span><br><span class="line">u1.<span class="built_in">release</span>();<span class="comment">//这个函数的返回值是一个指向该对象的普通指针，此时u1指针被破坏，具体见下</span></span><br><span class="line">u1.<span class="built_in">reset</span>();<span class="comment">//在改变u1指向的同时，会释放u1指向的对象</span></span><br></pre></td></tr></table></figure>
<p><strong>对于release</strong>的说明：(这些说明都是基于retexter，我发现glot根本不支持make_unique，而tio不会报错。再次体现了三个平台都很有用，都得用惯)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> u4 =make_unique&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;====================&quot;</span>&lt;&lt;endl;</span><br><span class="line">    u4.<span class="built_in">release</span>();</span><br><span class="line">    <span class="comment">//cout&lt;&lt;*u4&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">====================</span><br></pre></td></tr></table></figure>
<p><strong>如果我们把第11行的注释去掉，试图打印出release后的unique_ptr</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> u4 =make_unique&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;====================&quot;</span>&lt;&lt;endl;</span><br><span class="line">    u4.<span class="built_in">release</span>();</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="built_in">Error</span>(s):</span><br><span class="line"></span><br><span class="line"><span class="function">Invalid memory <span class="title">reference</span> <span class="params">(SIGSEGV)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">0</span></span><br><span class="line"><span class="function"></span>====================</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>可以见得，最后那个输出语句一定是非法的，<strong>release相当于破坏了u4</strong>，返回了一个裸指针，u4将无法被复用。<strong>值得注意</strong>的是，如果我们交换11、12行，先打印已经被release的u4再打印a，无法把a打印出来，因为当我们试图打印*u4的时候，程序就结束了，因而输出是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">auto</span> u4 =make_unique&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;====================&quot;</span>&lt;&lt;endl;</span><br><span class="line">    u4.<span class="built_in">release</span>();</span><br><span class="line">    cout&lt;&lt;*u4&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Error</span>(s):</span><br><span class="line"></span><br><span class="line"><span class="function">Invalid memory <span class="title">reference</span> <span class="params">(SIGSEGV)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">0</span></span><br><span class="line"><span class="function"></span>====================</span><br></pre></td></tr></table></figure>
<h4 id="将一个对象的所有权在两个unique-ptr之间转换的方法"><a href="#将一个对象的所有权在两个unique-ptr之间转换的方法" class="headerlink" title="将一个对象的所有权在两个unique_ptr之间转换的方法"></a>将一个对象的所有权在两个unique_ptr之间转换的方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法1:将p1指向的对象转移给p2</span></span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span> (<span class="number">1</span>))</span></span>;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(p1.release())</span></span>;<span class="comment">//release将p1置为空，并且返回裸指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法2:将p3指向的对象转移给p2</span></span><br><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt;<span class="built_in">p3</span>(<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">3</span>));</span><br><span class="line">p2.<span class="built_in">reset</span>(p3.<span class="built_in">release</span>());<span class="comment">//reset释放了p2原来指向的内存</span></span><br></pre></td></tr></table></figure>
<p>release成员返回unique_ptr当前保存的指针并将其置为空。因此，p2被初始化为p1原来保存的指针，而p1被置为空。<br>reset成员接受一个可选的指针参数，令unique_ptr重新指向给定的指针。<br>调用release会切断unique_ptr和它原来管理的的对象间的联系。release返回的指针通常被用来初始化另一个智能指针或给另一个智能指针赋值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意这里非常神奇，我们在之前给的构造方法中，要么是用构造新指针指向某个对象，比如：</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="function">unique_ptr&lt;<span class="keyword">int</span>&gt; <span class="title">p2</span><span class="params">(a)</span></span>;</span><br><span class="line"><span class="comment">//要么是先构造新指针，再用别的指针给他赋值，比如：</span></span><br><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt;u1;<span class="comment">//空指针</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line">u1=&amp;a;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> up1 = std::make_unique&lt;<span class="keyword">int</span>&gt;(<span class="number">20</span>);</span><br><span class="line"><span class="comment">//unique_ptr&lt;int&gt; up2 = up1; </span></span><br><span class="line">			<span class="comment">//错误，不能复制unique指针</span></span><br><span class="line">unique_ptr&lt;<span class="keyword">int</span>&gt; up2 = std::<span class="built_in">move</span>(up1);</span><br><span class="line">			<span class="comment">//可以移动unique指针//up1移动给up2，up1就被销毁了</span></span><br><span class="line"><span class="keyword">int</span>* p = up2.<span class="built_in">release</span>();</span><br><span class="line">			<span class="comment">//放弃指针控制权，返回裸指针</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>智能指针可以帮助管理内存，避免内存泄露。在手动维护指针不可行、复制对象开销太大时，智能指针是唯一选择。</p>
<p>缺点：</p>
<p>引用计数会影响性能</p>
<p>智能指针不总是智能，需要了解内部原理</p>
<p>需要小心环状结构和数组指针</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L4  创建与销毁·一</title>
    <url>/2022/01/12/CS/OOP/L4%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%94%80%E6%AF%81%C2%B7%E4%B8%80/</url>
    <content><![CDATA[<h1 id="L4-创建与销毁·一"><a href="#L4-创建与销毁·一" class="headerlink" title="L4 创建与销毁·一"></a>L4 创建与销毁·一</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>1.1.4 初始化列表和构造函数体的基本区别</li>
<li>1.2 委派构造函数实例</li>
<li>3.2 返回静态局部对象的引用</li>
</ul>
</blockquote>
<hr>
<h1 id="一、构造函数与析构函数"><a href="#一、构造函数与析构函数" class="headerlink" title="一、构造函数与析构函数"></a>一、构造函数与析构函数</h1><h2 id="1-0-面向对象程序的可靠性"><a href="#1-0-面向对象程序的可靠性" class="headerlink" title="1.0  面向对象程序的可靠性"></a>1.0  面向对象程序的可靠性</h2><p>oop三性：简单性、清晰性、普遍性。对用户定义类型进行严格的类型检查。隐藏实现，防止受到不必要的干扰。对象的初始化和清除，需要自动进行。忘记初始化或清除变量可能会导致程序崩溃。由类生成的对象是一种新型的变量，也要初始化。由于隐藏实现（访问权限控制），对象的有些私有数据成员只有类的设计者知道，而且只允许类的成员函数访问。尽管可以由通过显式调用对象成员函数来初始化对象，但这种做法缺少强制性，因而容易被程序员遗忘。</p>
<p>结论：</p>
<ul>
<li><p>如何进行初始化和清除(HOW)，应由类设计者决定。</p>
</li>
<li><p>何时进行初始化和清除(WHEN)，应由编译器来决定。</p>
</li>
</ul>
<h2 id="1-1-构造函数"><a href="#1-1-构造函数" class="headerlink" title="1.1  构造函数"></a>1.1  构造函数</h2><h3 id="1-1-1-意义"><a href="#1-1-1-意义" class="headerlink" title="1.1.1  意义"></a>1.1.1  意义</h3><p>对象的“生”（初始化工作）是由编译器在创建对象处自动生成调用构造函数的代码来完成的。构造函数是类的特殊成员函数，它用来确保类的每个对象都能正确地初始化。</p>
<h3 id="1-1-2-语法"><a href="#1-1-2-语法" class="headerlink" title="1.1.2  语法"></a>1.1.2  语法</h3><p>构造函数没有返回值类型，函数名与类名相同。<br>类的构造函数可以重载，即可以使用不同的函数参数进行对象初始化。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> ID;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> id) &#123; ID = id; &#125;</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> year, <span class="keyword">int</span> order) &#123; </span><br><span class="line">            ID = year * <span class="number">10000</span> + order; </span><br><span class="line">     &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-3-初始化列表"><a href="#1-1-3-初始化列表" class="headerlink" title="1.1.3  初始化列表"></a>1.1.3  初始化列表</h3><p>构造函数可以使用初始化列表初始化成员数据，使用“数据成员(初始值)”的形式。该列表在定义构造函数时使用，位置在函数体之前、函数参数列表之后，以冒号作开头。</p>
<h3 id="1-1-4-初始化列表和构造函数体的基本区别"><a href="#1-1-4-初始化列表和构造函数体的基本区别" class="headerlink" title="1.1.4  初始化列表和构造函数体的基本区别"></a>1.1.4  初始化列表和构造函数体的基本区别</h3><p>1.1.4.1  实现过程区别</p>
<p>构造函数可以分两个阶段进行：（1）初始化阶段；（2）函数体阶段。<br>函数体阶段由函数体内所有的语句组成。不管成员是否在构造函数初始化列表中显式初始化，类的数据成员初始化总是在初始化阶段进行，初始化阶段先于计算阶段。构造函数初始化列表是对类的成员做初始化，而在构造函数体内只是对类的数据成员进行了一次赋值操作。</p>
<p>也就是说，构造函数函数体内对于成员数据的赋值意味着初始化已经完成，仅仅是进行了赋值。这一点可以联系《创建与销毁·二》当中对于声明、定义、初始化、赋值的讨论一同理解。这也可以用于理解，为什么常量成员数据仅仅可以在初始化列表中初始化，但是不可以在函数体内赋值。（因为常量成员仅能进行初始化，却不能在初始化之后再赋值（因为常量成员不能更改）。而一个常量成员，即使在初始化列表中没有被显式初始化，也已经被初始化过了，一个初始化过的常量自然不能在函数体里被修改。）更加详细的讨论在《L5 创建与销毁·二》。</p>
<p>1.1.4.2  效率区别</p>
<p>如前文所述，初始化列表显然避免了函数体内不必要的一些赋值过程，这在类的成员数据较为复杂时能够显著地提高效率。</p>
<h3 id="1-1-5-初始化列表的初始顺序"><a href="#1-1-5-初始化列表的初始顺序" class="headerlink" title="1.1.5  初始化列表的初始顺序"></a>1.1.5  初始化列表的初始顺序</h3><p>初始化列表的成员是按照声明的顺序初始化的，而不是按照出现在初始化列表中的顺序。比如下列代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> ID1;</span><br><span class="line">	<span class="keyword">int</span> ID2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Student</span>(<span class="keyword">int</span> id) : <span class="built_in">ID2</span>(id), <span class="built_in">ID1</span>(ID2) &#123; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;ID1 exist &quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;ID1&lt;&lt;endl;</span><br><span class="line">	  cout&lt;&lt;<span class="keyword">this</span>-&gt;ID2&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">test</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">    Test.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：ID1 exist <span class="number">32767</span></span><br><span class="line">     <span class="number">100</span>在这个例子中，ID1在ID2之前声明，但其初始化依赖于ID2。初始化列表会按照声明顺序进行初始化，先用未知的ID2的值对ID1进行初始化，再用可知的id来初始化ID2。从而使得ID1的值不可预测。</span><br><span class="line">这里的不可预测在不同的编译器上表现不同。可能会有如上输出，也可能是warning（不是error，这里可以参考《第三次作业第二题》的解析）一般来说我们会参考g++编译器的输出，vs编译器有时会更严格。</span><br></pre></td></tr></table></figure>
<p>在这个例子中，ID1在ID2之前声明，但其初始化依赖于ID2。初始化列表会按照声明顺序进行初始化，先用未知的ID2的值对ID1进行初始化，再用可知的id来初始化ID2。从而使得ID1的值不可预测。</p>
<p>这里的不可预测在不同的编译器上表现不同。可能会有如上输出，也可能是warning（不是error，这里可以参考《第三次作业第二题》的解析）一般来说我们会参考g++编译器的输出，vs编译器有时会更严格。</p>
<h2 id="1-2-委派构造函数"><a href="#1-2-委派构造函数" class="headerlink" title="1.2  委派构造函数"></a>1.2  委派构造函数</h2><h3 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1  定义"></a>1.2.1  定义</h3><p>在构造函数的初始化列表中，还可以调用其他构造函数，称为“委派构造函数”。</p>
<h3 id="1-2-2-意义"><a href="#1-2-2-意义" class="headerlink" title="1.2.2  意义"></a>1.2.2  意义</h3><p>委派构造函数也是c++11中对c++的构造函数的一项改进，其目的就是减少程序员写构造函数的时间。通过委派其他构造函数，多构造函数的类编写起来就很简单容易。</p>
<h3 id="1-2-3-实例"><a href="#1-2-3-实例" class="headerlink" title="1.2.3  实例"></a>1.2.3  实例</h3><p>对比如下两个例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">Info</span>() : <span class="built_in">type</span>(<span class="number">1</span>), <span class="built_in">name</span>(<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">InitRest</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">int</span> i) : <span class="built_in">type</span>(i), <span class="built_in">name</span>(<span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">  <span class="built_in">InitRest</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">char</span> e) : <span class="built_in">type</span>(<span class="number">1</span>),, <span class="built_in">name</span>(e) &#123;</span><br><span class="line">  <span class="built_in">InitRest</span>();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">InitRest</span><span class="params">()</span> </span>&#123; <span class="comment">//其他初始化 &#125;</span></span><br><span class="line"> <span class="keyword">int</span> type;</span><br><span class="line"> <span class="keyword">char</span> name;</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">Info</span>() &#123; <span class="built_in">InitRest</span>(); &#125;  <span class="comment">//称为目标构造函数（被调用）</span></span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">int</span> i) : <span class="built_in">Info</span>() &#123; type = i; &#125;  <span class="comment">//委派构造函数（调用者）</span></span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">char</span> e) : <span class="built_in">Info</span>() &#123; name = e; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">InitRest</span><span class="params">()</span> </span>&#123; <span class="comment">// other int &#125;</span></span><br><span class="line"> <span class="keyword">int</span> type &#123;<span class="number">1</span>&#125;;</span><br><span class="line"> <span class="keyword">char</span> name &#123;<span class="string">&#x27;a&#x27;</span>&#125;;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>委派构造函数不能有初始化列表，因为C++中，构造函数不能同时使用委派和初始化列表。只能在函数体内为type，name等成员赋值。</p>
<p>在构造函数比较多时，可以有不止一个委派构造函数。目标构造函数也可以是委派构造函数，可以在委派构造函数中形成链状的委派构造关系。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>：</span><br><span class="line"> <span class="built_in">Info</span>() : <span class="built_in">Info</span>(<span class="number">1</span>) &#123;&#125;<span class="comment">//这个不带参数的构造函数的目标函数就在下方，而目标函数也有委派构造函数，从而形成了委派构造函数链。</span></span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">int</span> i) : <span class="built_in">Info</span>(i, <span class="string">&#x27;a&#x27;</span>) &#123;&#125;  <span class="comment">//可以委派成链状，但不能形成环。</span></span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">char</span> e) : <span class="built_in">Info</span>(<span class="number">1</span>, e) &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> <span class="built_in">Info</span>(<span class="keyword">int</span> i, <span class="keyword">char</span> e) : <span class="built_in">type</span>(i), <span class="built_in">name</span>(e) &#123;&#125;<span class="comment">//info()调用info(1)，info(1)调用info(1,&#x27;a&#x27;)</span></span><br><span class="line"> <span class="keyword">int</span> type;</span><br><span class="line"> <span class="keyword">char</span> name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这个例子其实蛮有意思的是，我们之前很少有见到构造函数放在private里面的例子。这个例子却实现了这一点。</p>
<h2 id="1-3-就地初始化"><a href="#1-3-就地初始化" class="headerlink" title="1.3  就地初始化"></a>1.3  就地初始化</h2><p>首先需要指出的是，在课程PPT中对于声明、初始化、定义这三个概念有些混用。三者的广义概念界定在《L4 创建与销毁·二》中进行了阐述。</p>
<p>C++11之前，类中的一般成员变量不能在类声明时进行初始化（定义），它们的初始化操作（定义）只能通过构造函数进行。C++11新增支持如下初始化操作，称为就地初始化。（类似于给类内对象提供了缺省值。）你可以认为就地初始化是一种特殊的机制，他可以使得定义和初始化在类内得以进行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//声明+初始化（定义）/</span></span><br><span class="line"><span class="keyword">double</span> b &#123;<span class="number">2.0</span>&#125;; <span class="comment">//声明+初始化（定义）</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123;&#125; <span class="comment">//a=1 b=2.0</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">a</span>(i) &#123;&#125; <span class="comment">//a=i b=2.0</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i, <span class="keyword">double</span> j):<span class="built_in">a</span>(i), <span class="built_in">b</span>(j) &#123;&#125;     <span class="comment">//a=i b=j</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意：就地初始化只是一种简便的表达方式，实际操作仍然在对象构造的时候执行。</p>
<h2 id="1-4-默认构造函数"><a href="#1-4-默认构造函数" class="headerlink" title="1.4  默认构造函数"></a>1.4  默认构造函数</h2><h3 id="1-4-1-定义"><a href="#1-4-1-定义" class="headerlink" title="1.4.1  定义"></a>1.4.1  定义</h3><p>不带任何参数的构造函数，或每个形参提供默认实参的构造函数，被称为“默认构造函数”，也称“缺省构造函数”。</p>
<h3 id="1-4-2-语法"><a href="#1-4-2-语法" class="headerlink" title="1.4.2  语法"></a>1.4.2  语法</h3><p>使用默认构造函数（没有参数）来生成对象时，对象定义的格式如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName a;    <span class="comment">//调用默认构造函数</span></span><br><span class="line">ClassName b = <span class="built_in">ClassName</span>();  <span class="comment">//同样调用默认构造函数</span></span><br></pre></td></tr></table></figure>
<p>注意和下方代码区别开来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ClassName <span class="title">c</span><span class="params">()</span></span>;<span class="comment">//这声明了一个返回值为ClassName,不带参数的函数</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-3-编译器的额外操作"><a href="#1-4-3-编译器的额外操作" class="headerlink" title="1.4.3  编译器的额外操作"></a>1.4.3  编译器的额外操作</h3><p>基于之后涉及到的组合的概念，在类的构造函数中，除了执行函数体内声明的语句，编译器还会做一些额外操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout &lt;&lt; <span class="string">&quot;A()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A a;</span><br><span class="line">    <span class="built_in">B</span>() &#123; cout &lt;&lt; <span class="string">&quot;B()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">B b;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>
<p>这里会先输出A的默认构造函数对应的输出，再输出B的默认构造函数对应的输出。</p>
<p>也就是说，如果类A里面有另一个类B作为这个类的成员，调用类A的默认构造函数时会先调用B的构造函数。先构造成员-再构造类。</p>
<h3 id="1-4-4-隐式定义的默认构造函数"><a href="#1-4-4-隐式定义的默认构造函数" class="headerlink" title="1.4.4  隐式定义的默认构造函数"></a>1.4.4  隐式定义的默认构造函数</h3><p>有时候我们没有手动定义默认构造函数，但我们仍然能够按上述方式定义变量。这是因为编译器帮我们隐式地合成了一个默认构造函数。</p>
<p><img src="https://s2.loli.net/2022/01/10/tVJ6PWm1eTjMNCc.png" alt="https://s2.loli.net/2022/01/10/tVJ6PWm1eTjMNCc.png"></p>
<p><img src="https://s2.loli.net/2022/01/10/HyuRqMQ6LKNcWfr.png" alt="https://s2.loli.net/2022/01/10/HyuRqMQ6LKNcWfr.png"></p>
<p>注意这个例子，b究竟是调用了哪一个构造函数？</p>
<p>我们将代码修改如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() &#123; cout&lt;&lt;<span class="string">&quot;A()&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> x)</span><br><span class="line">       &#123; cout &lt;&lt; <span class="string">&quot;A(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    A a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>(<span class="keyword">int</span> x=<span class="number">1</span>): <span class="built_in">a</span>(x) &#123;&#125;</span><br><span class="line">    <span class="built_in">B</span>():<span class="built_in">a</span>(<span class="number">1</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现会因为函数调用不明确而error，故而可以确定上述选择题是调用了缺省的构造函数而非隐式生成的默认构造函数。这一点在函数重载有讨论。</p>
<p>某种意义上，缺省的构造函数本质上已经实现了默认构造函数的功能。</p>
<p>另一方面，若用户已经定义了其他构造函数，编译器将不会隐式合成默认构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> b &#123;<span class="number">2.0</span>&#125;; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">a</span>(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;  <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>
<h3 id="1-4-5-显式声明默认构造函数"><a href="#1-4-5-显式声明默认构造函数" class="headerlink" title="1.4.5  显式声明默认构造函数"></a>1.4.5  显式声明默认构造函数</h3><p>出于某些需要，我们可以手动指定生成默认版本的构造函数：即便其他构造函数存在，编译器也会定义隐式默认构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> b &#123;<span class="number">2.0</span>&#125;; </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() = <span class="keyword">default</span>;    <span class="comment">// C++11起</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">a</span>(i) &#123;&#125;   </span><br><span class="line">&#125;;</span><br><span class="line">A a;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-6-显式删除危险构造函数"><a href="#1-4-6-显式删除危险构造函数" class="headerlink" title="1.4.6  显式删除危险构造函数"></a>1.4.6  显式删除危险构造函数</h3><p>有时候，我们也可以显式地声明禁用某些带有风险的构造函数。这种禁用不仅可以禁用编译器合成的默认构造函数，也可以用来禁止一些自动类型转换带来的构造函数调用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> b &#123;<span class="number">2.0</span>&#125;; </span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">a</span>(i) &#123;cout&lt;&lt;i&lt;&lt;endl;&#125;   </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="string">&#x27;c&#x27;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果 <span class="number">99</span></span><br></pre></td></tr></table></figure>
<p>这一代码存在风险，本意一定是希望他报错，但是实则不会。从正确性上讲，这样的代码没有问题，char和int可以类型转换，故而将‘c’转为了int，调用了参数为int的构造函数。但是从工程的角度讲，这是很危险的行为。因为在开发者看来，用字符初始化应该是未定义的行为。</p>
<p>故而显式地禁用某一构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">double</span> b &#123;<span class="number">2.0</span>&#125;; </span><br><span class="line">       <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">       <span class="built_in">A</span>() = <span class="keyword">default</span>;</span><br><span class="line">       <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">a</span>(i) &#123;&#125;</span><br><span class="line">       <span class="built_in">A</span>(<span class="keyword">char</span> ch) = <span class="keyword">delete</span>;   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="1-5-对象数组的初始化（在main中）"><a href="#1-5-对象数组的初始化（在main中）" class="headerlink" title="1.5  对象数组的初始化（在main中）"></a>1.5  对象数组的初始化（在main中）</h2><p>无参定义对象数组，必须要有默认构造函数<br>A a[50]; // 定义了一个具有50个元素的A类对象数组</p>
<p>如果构造函数带有参数<br>A a[3] = {1, 3, 5}; // 三个实参分别传递给3个数组元素的构造函数</p>
<p>带有多个参数<br>A a[3] = {A(1, 2), A(3, 5), A(0, 7)}; // 构造函数有两个整型参数</p>
<h2 id="1-6-析构函数"><a href="#1-6-析构函数" class="headerlink" title="1.6  析构函数"></a>1.6  析构函数</h2><h3 id="1-6-1-概述"><a href="#1-6-1-概述" class="headerlink" title="1.6.1  概述"></a>1.6.1  概述</h3><p>对象的“死”（清除和释放资源）是由编译器在对象作用域结束处自动生成调用析构函数代码来完成的，动态分配的内存就是一种典型的需要释放的资源。<br>当执行到“包含对象定义范围结束处”时，编译器自动调用对象的析构函数。清除对象占用的资源是无条件的，不需要任何选项。因此，析构函数没有参数，且只有一个，即清除方式唯一。</p>
<p>这在《创建与销毁·二》的3.4.1的例子中有所体现。</p>
<p><img src="https://s2.loli.net/2022/01/11/DPQkzN7uhonaWFd.png" alt="https://s2.loli.net/2022/01/11/DPQkzN7uhonaWFd.png"></p>
<p>没有显式定义拷贝构造函数，系统调用了隐式生成的拷贝构造函数，这当然是没有输出的。形参的构造用的是拷贝构造函数，可是析构却是共用的一个析构函数。</p>
<h3 id="1-6-2-语法"><a href="#1-6-2-语法" class="headerlink" title="1.6.2  语法"></a>1.6.2  语法</h3><p>一个类只有一个析构函数，名称是“~类名”，没有函数返回值，没有函数参数。编译器在对象生命期结束时自动调用类的析构函数，以便释放对象占用的资源，或其他后处理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassRoom</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span>* ID_list;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">ClassRoom</span>() : <span class="built_in">num</span>(<span class="number">0</span>), <span class="built_in">ID_list</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">    ~<span class="built_in">ClassRoom</span>() &#123;  <span class="comment">// 析构函数</span></span><br><span class="line">        <span class="keyword">if</span> (ID_list) <span class="keyword">delete</span>[] ID_list; <span class="comment">// 释放内存    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意到这个例子也体现了对于指针，delete之前应先检测是否为空指针。</p>
<h3 id="1-6-3-析构排序"><a href="#1-6-3-析构排序" class="headerlink" title="1.6.3  析构排序"></a>1.6.3  析构排序</h3><p>和默认构造函数一样，析构函数除了执行函数体内声明的语句，编译器还会做一些额外操作。例如在组合当中，会自动调用成员变量的析构函数，先执行自己的析构函数，再调用成员变量的析构。（这点与构造函数恰恰相反）以及最基本的，先构造的后析构。</p>
<h3 id="1-6-4-默认析构函数"><a href="#1-6-4-默认析构函数" class="headerlink" title="1.6.4  默认析构函数"></a>1.6.4  默认析构函数</h3><p>和构造函数类似，当用户没有自定义析构函数时，编译器会自动合成一个隐式的析构函数。</p>
<p><img src="https://s2.loli.net/2022/01/11/tvpBJmeGUr2dlS7.png" alt="https://s2.loli.net/2022/01/11/tvpBJmeGUr2dlS7.png"></p>
<p>问题在于隐式定义的析构函数不会delete指针成员，可能造成内存泄露。</p>
<h1 id="二、对象的析构与构造"><a href="#二、对象的析构与构造" class="headerlink" title="二、对象的析构与构造"></a>二、对象的析构与构造</h1><h2 id="2-1-局部对象的析构与构造"><a href="#2-1-局部对象的析构与构造" class="headerlink" title="2.1  局部对象的析构与构造"></a>2.1  局部对象的析构与构造</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1  定义"></a>2.2.1  定义</h3><p>作用域：该变量能够被引用的区域，例如，{}将会形成一个作用域。</p>
<p>非静态的局部对象：在程序执行到该局部对象的代码时被初始化。在局部对象生命周期结束、即所在作用域结束后被析构。这里注意与静态的局部对象进行对比。详见《L4 创建与销毁·二》。</p>
<p>非静态全局变量：在main()函数调用之前进行初始化。在同一编译单元中，按照定义顺序进行初始化。</p>
<p>编译单元：通常同一编译单元就是同一源文件。</p>
<p>不同编译单元间，对象初始化顺序不确定。</p>
<p>在main()函数执行完return之后，对象被析构。</p>
<h3 id="2-2-2-全局变量的局限性"><a href="#2-2-2-全局变量的局限性" class="headerlink" title="2.2.2  全局变量的局限性"></a>2.2.2  全局变量的局限性</h3><p>尽量少用全局对象。首先，全局对象的构造顺序不能完全确定，所以全局对象之间不能有依赖关系，否则会出现问题。其次，全局对象会增大代码的耦合性，导致程序难以复用或者测试。</p>
<p><img src="https://s2.loli.net/2022/01/11/sBzdFWmkgnp2KVD.png" alt="https://s2.loli.net/2022/01/11/sBzdFWmkgnp2KVD.png"></p>
<p>这道题就是强调了全局变量在main()函数执行完return之后被析构。而<code>local_obj</code>相当于是main的局部变量，会在全局变量后析构。</p>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><h2 id="3-1-定义与语法"><a href="#3-1-定义与语法" class="headerlink" title="3.1  定义与语法"></a>3.1  定义与语法</h2><p>同一个内存单元的两个不同名字。</p>
<p>格式具名变量的别名：类型名 &amp; 引用名 变量名<br>例：int v0; int &amp; v1 = v0; v1是变量v0的引用。引用必须在定义时进行初始化，且不能修改引用指向，这点和指针不同。</p>
<p>被引用变量名可以是类的成员变量，如int &amp; m = s.m;</p>
<h2 id="3-2-结合函数使用"><a href="#3-2-结合函数使用" class="headerlink" title="3.2  结合函数使用"></a>3.2  结合函数使用</h2><p>函数参数可以是引用类型，表示函数的形式参数与实际参数是同一个变量，改变形参将改变实参，使用得当也可避免许多不必要的形参拷贝。如调用以下函数将交换实参的值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function">  </span>&#123;  <span class="keyword">int</span> tmp = b; b = a; a = tmp; &#125;</span><br></pre></td></tr></table></figure>
<p>函数返回值可以是引用类型，但不得指向函数的非静态的临时变量。换言之，你可以返回临时变量（这相当于把它复制了一份 return 出去，它本身会被销毁），但不能返回非静态临时变量的引用。静态局部变量是可以作为返回值的，并且有着神奇的操作。（这一神奇的操作涉及到静态局部变量的作用，详见《L4 创建与销毁·二》1.2.2.2）</p>
<p><img src="https://s2.loli.net/2022/01/11/oJibuxv5syLw96Z.png" alt="https://s2.loli.net/2022/01/11/oJibuxv5syLw96Z.png"></p>
<p>这段代码存在非法内存访问。注意到func2定义的局部变量tmp是非静态的，故而func2结束之后立刻析构。而f被定义为了tmp的引用，tmp已经被销毁了，这块内存空间已经被释放。</p>
<p>被释放的内存，访问是危险的，但并非不可访问。现在一般的编译器都是允许访问，但访问的结果不确定，有可能是运行错误，有可能是不确定的值。这个可能需要等到学汇编会了解的更清楚。</p>
<p>故而这段代码在glot编译器上的结果为4_0。</p>
<p>然而我们对局部变量tmp加上static修饰：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">Int</span>() &#123; data = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="keyword">int</span> i): <span class="built_in">data</span>(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123;</span><br><span class="line">    a.data += b.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Int&amp; <span class="title">func2</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">func1</span>(a, b);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">static</span> <span class="title">tmp</span><span class="params">(a.data + b.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>  tmp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a, <span class="built_in">b</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> &amp;f = <span class="built_in">func2</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;f.data &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">4</span>_7</span><br></pre></td></tr></table></figure>
<p>非常神奇，我们不仅通过static修饰保留了局部变量，似乎还改变了这个局部变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">Int</span>() &#123; data = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="keyword">int</span> i): <span class="built_in">data</span>(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123;</span><br><span class="line">    a.data += b.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Int&amp; <span class="title">func2</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">func1</span>(a, b);</span><br><span class="line">    <span class="function">Int <span class="keyword">static</span> <span class="title">tmp</span><span class="params">(a.data + b.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>  tmp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Int a, <span class="built_in">b</span>(<span class="number">3</span>);</span><br><span class="line">    Int &amp;f = <span class="built_in">func2</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;f.data&lt;&lt;endl;</span><br><span class="line">    f.data++;</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;<span class="built_in">func2</span>(a,b).data&lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;a.data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">4</span>_7</span><br><span class="line"><span class="number">4</span>_8_7</span><br></pre></td></tr></table></figure>
<p>这似乎违反了静态局部变量只能够被定义它的函数体操作这一点，实则不然。我们之前叙述的是，静态局部变量不能在函数外被使用，但是但它的内存空间可以。上例是绕过了语言层面，直接对于内存进行了操作。</p>
<p>对于变量的操作，是指例如编写一行C语言代码，明确地操作这个变量，比如变量x++。但是操作可以通过指针，比如定义一个指针p来指向这个地址，然后对<em> p</em>进行各类操作。这时候编译器并不知道*p指向的内存空间究竟怎么来的，它只知道是一段内存空间，进行了一系列操作。</p>
<p>简而言之，你不能在函数体外使用静态局部变量的名字，但是可以使用这块内存空间。</p>
<p>另外，我在func2(a,b).data中第二次调用func2(a,b)时，由于之前已经定义了static int tmp，所以第二次不再用<code>Int static tmp(a.data + b.data;</code>来构造新的tmp，相当于构造tmp的这一行失效了，但是func1(a, b);仍然会进行，故而a还是加了3。</p>
<p>又比如下面这段代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">Int</span>() &#123; data = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="keyword">int</span> i): <span class="built_in">data</span>(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123;</span><br><span class="line">    a.data += b.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Int&amp; <span class="title">func2</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">func1</span>(a, b);</span><br><span class="line">    <span class="function">Int <span class="keyword">static</span> <span class="title">tmp</span><span class="params">(a.data + b.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Int a, <span class="built_in">b</span>(<span class="number">3</span>);</span><br><span class="line">    Int &amp;f = <span class="built_in">func2</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;f.data&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">func2</span>(a,b).data++;</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;<span class="built_in">func2</span>(a,b).data&lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;a.data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">4</span>_7</span><br><span class="line"><span class="number">7</span>_8_10</span><br></pre></td></tr></table></figure>
<p>我企图直接对func2(a,b).data++；因为我返回类型为tmp的引用，也成功实现了对于tmp的内存空间的操作。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Int</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">Int</span>() &#123; data = <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="built_in">Int</span>(<span class="keyword">int</span> i): <span class="built_in">data</span>(i) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123;</span><br><span class="line">    a.data += b.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Int&amp; <span class="title">func2</span><span class="params">(Int&amp; a, Int b)</span> </span>&#123; </span><br><span class="line">    <span class="built_in">func1</span>(a, b);</span><br><span class="line">    <span class="function">Int <span class="keyword">static</span> <span class="title">tmp</span><span class="params">(a.data + b.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span>  tmp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Int a, <span class="built_in">b</span>(<span class="number">3</span>);</span><br><span class="line">    Int &amp;f = <span class="built_in">func2</span>(a, b);</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;f.data&lt;&lt;endl;</span><br><span class="line">    tmp.data++;</span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;<span class="built_in">func2</span>(a,b).data&lt;&lt;<span class="string">&quot;_&quot;</span>&lt;&lt;a.data&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">error: use of undeclared identifier <span class="string">&#x27;tmp&#x27;</span></span><br><span class="line">    tmp.data++;</span><br><span class="line">    ^</span><br><span class="line"><span class="number">1</span> error generated.</span><br></pre></td></tr></table></figure>
<h2 id="3-3-引用的其他特点"><a href="#3-3-引用的其他特点" class="headerlink" title="3.3  引用的其他特点"></a>3.3  引用的其他特点</h2><p>不存在空引用。引用必须连接到一块合法的内存。</p>
<p>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</p>
<p>引用必须在创建时被初始化为一个对象。指针可以在初始化时置空，之后再指向对象。</p>
<p>引用的优势：更灵活地支持运算符重载。</p>
<p>引用的特性：创建时必须初始化、初始化后便不能指向其他对象，不存在空引用。</p>
<h1 id="四、运算符重载"><a href="#四、运算符重载" class="headerlink" title="四、运算符重载"></a>四、运算符重载</h1><h2 id="4-1-意义"><a href="#4-1-意义" class="headerlink" title="4.1  意义"></a>4.1  意义</h2><p>用户自定义类，没有对常用的运算符进行定义，比如想要表示两个类对象相加，无法采用a+b这种方式。可以采取定义一个add函数的方式，解决这种问题。但这种实现方式，在调用的时候，会和基础类型差别很大，缺少编程的一致性。需要过多地区分自定义类和基础类别，调用起来也不方便。因此，我们引入运算符重载。</p>
<h2 id="4-2-语法"><a href="#4-2-语法" class="headerlink" title="4.2  语法"></a>4.2  语法</h2><p>运算符重载需要按规则声明执行该运算的函数。例如 + 对应 operator+（operator就是运算的意思，相当于我人为定义了对于A类的+号）<br>运算重载一般有两种方式（注意参数不同），且只能用一种。</p>
<ul>
<li>全局函数型运算符重载</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A <span class="keyword">operator</span>+(A&amp; a1, A&amp; a2) &#123;</span><br><span class="line">    <span class="function">A <span class="title">new_a</span><span class="params">(a1.data + a2.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> new_a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用全局函数型重载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i) &#123; data = i; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">A <span class="keyword">operator</span>+(A&amp; a1, A&amp; a2) &#123;</span><br><span class="line">    <span class="function">A <span class="title">new_a</span><span class="params">(a1.data + a2.data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> new_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">2</span>)</span>, <span class="title">a2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    a1 += a2; <span class="comment">// 调用operator+=()</span></span><br><span class="line">    cout &lt;&lt; a1.data &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; (a1 + a2).data &lt;&lt; endl; <span class="comment">// 调用operator+()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的a1+a2相当于调用函数operator+(a1,a2);</p>
<ul>
<li>成员函数型运算符重载</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A <span class="keyword">operator</span>+(A&amp; a) &#123; </span><br><span class="line">	  <span class="function">A <span class="title">new_a</span><span class="params">(data + a.data)</span></span>;</span><br><span class="line">		<span class="keyword">return</span> new_a;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意理解参数的不同。定义为全局函数型运算符重载之后，需要指出对于哪两个对象进行操作。但是定义为成员函数型运算符重载时，这一函数是某一对象的成员函数。如果是双目运算符只需指明另一个数据为参数。</p>
<p>使用成员函数型重载：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> i) &#123; data = i; &#125;</span><br><span class="line">A&amp; <span class="keyword">operator</span>+=(A&amp; a) &#123; data += a.data; <span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">A <span class="keyword">operator</span>+(A&amp; a) &#123; </span><br><span class="line"><span class="function">A <span class="title">new_a</span><span class="params">(data + a.data)</span></span>;</span><br><span class="line"><span class="keyword">return</span> new_a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a1</span><span class="params">(<span class="number">2</span>)</span>, <span class="title">a2</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">    a1 += a2; <span class="comment">// 调用operator+=()</span></span><br><span class="line">    cout &lt;&lt; a1.data &lt;&lt; endl; </span><br><span class="line">    cout &lt;&lt; (a1 + a2).data &lt;&lt; endl; <span class="comment">// 调用operator+()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然对于+=和+都应该重载，不可能只重载+就解决问题。<br>这里的a1+a2相当于调用函数a1.operator+(a2);</p>
<h2 id="4-3-具体的重载实例"><a href="#4-3-具体的重载实例" class="headerlink" title="4.3  具体的重载实例"></a>4.3  具体的重载实例</h2><p>（进一步讨论参见选择题解析2）</p>
<h3 id="4-3-1-可重载类型"><a href="#4-3-1-可重载类型" class="headerlink" title="4.3.1  可重载类型"></a>4.3.1  可重载类型</h3><p>双目算术运算符</p>
<p><code>+</code>(加)，<code>-</code>(减)，<code>*</code>(乘)，<code>/</code>(除)，<code>%</code>(取模)</p>
<p>关系运算符<br><code>==</code>（等于)，<code>!=</code> (不等于)，<code>&lt;</code> (小于)，<code>&gt;</code> (大于），<code>&lt;=</code>(小于等于)，<code>&gt;=</code>(大于等于)</p>
<p>逻辑运算符<br><code>||</code>(逻辑或)，<code>&amp;&amp;</code>(逻辑与)，<code>!</code>(逻辑非)</p>
<p>单目运算符</p>
<p><code>+</code>(正)，<code>-</code>(负)，<code>*</code>(指针)，<code>&amp;</code>(取地址)</p>
<p>自增自减运算符<br><code>++</code>(自增)，<code>--</code>(自减)</p>
<p>位运算符<br><code>|</code> (按位或)，<code>&amp;</code> (按位与)，<code>~</code>(按位取反)，<code>^</code>(按位异或)，<code>&lt;&lt;</code> (左移),<code>&gt;&gt;</code>(右移)</p>
<p>赋值运算符<br><code>=, +=, -=, *=, /= , % = , &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=</code></p>
<p>空间申请与释放<br><code>new</code>,<code>delete</code>, <code>new[]</code> , <code>delete[]</code></p>
<p>其他运算符<br><code>()</code>(函数调用)，<code>-&gt;</code>(成员访问)，<code>,</code>(逗号)，</p>
<h3 id="4-3-2-前后缀重载"><a href="#4-3-2-前后缀重载" class="headerlink" title="4.3.2  前后缀重载"></a>4.3.2  前后缀重载</h3><p>4.3.2.1  声明</p>
<p>前缀运算符重载声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName <span class="keyword">operator</span>++();</span><br><span class="line">ClassName <span class="keyword">operator</span>--();</span><br></pre></td></tr></table></figure>
<p>后缀运算符重载声明：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName <span class="keyword">operator</span>++(<span class="keyword">int</span> dummy);</span><br></pre></td></tr></table></figure>
<p>Dummy表示哑元，实际上哑元可以没有名字。</p>
<p>（这里笔记写的略微有问题，参考选择题解析2）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName <span class="keyword">operator</span>++(<span class="keyword">int</span> dummy);</span><br><span class="line">++a等价于<span class="keyword">operator</span>++(a)</span><br><span class="line">a++ 等价于<span class="keyword">operator</span>++(a,<span class="keyword">int</span>)</span><br><span class="line">ClassName <span class="keyword">operator</span>--(<span class="keyword">int</span> dummy);</span><br></pre></td></tr></table></figure>
<p>哑元的意义：设想没有这一哑元，那么a++和++a的声明完全相同。然而实际上，两个函数的功能完全不同，需要实现重载。这一实现就是借助哑元达成的。</p>
<p>编译器在编译a++时，等价于operator++(a,int)，从而调用了后缀运算符。编译器自动识别，就像是a1+a2等价于a1.operator+(a2)，这种等价就是编译器自动等价。</p>
<p>4.3.2.2  语义识别</p>
<p>int a = ++b; //先完成b+1操作，再赋值<br>int a = b++; //先完成赋值，再b+1操作</p>
<p>4.3.2.3  前缀运算符重载实例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Test</span>(<span class="keyword">int</span> d) &#123;data = d;&#125;</span><br><span class="line">  Test&amp; <span class="keyword">operator</span>++ () &#123;</span><br><span class="line">    ++data;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>; </span><br><span class="line">  ++test;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.3.2.4  后缀运算符重载</p>
<p>4.3.2.4.1  实例一：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Test</span>(<span class="keyword">int</span> d) &#123;data = d;&#125;</span><br><span class="line">  Test <span class="keyword">operator</span>++ (<span class="keyword">int</span>) &#123;</span><br><span class="line">    <span class="function">Test <span class="title">test</span><span class="params">(data)</span></span>;</span><br><span class="line">    ++data;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>; </span><br><span class="line">  test++;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先需要指出的是，函数的返回值并不一定需要使用。这一段就是典型的例子，尽管我返回的是个Test对象，但是没有人接收这一对象，他会在主函数的对应语句（也就是test++）结束后被释放。虽然在这个例子里面，test++并没有用到Test类型的返回值，可以改为void，但是在其他情况下是需要用到这一个返回值的。</p>
<p>4.3.2.4.2 关于析构时机</p>
<p>对于此处局部对象的析构时机，结合第三次作业第二题的f1部分进行一定的解读。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Test <span class="title">f1</span><span class="params">(Test a)</span></span>&#123;</span><br><span class="line">    a.<span class="built_in">print</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">Test A = <span class="built_in">f1</span>(a);</span><br></pre></td></tr></table></figure>
<p>对于这一赋值构造(构造外面的A）+函数调用语句，构造A和析构返回值和形参的先后顺序：先执行完f1的函数体，暂不析构。然后执行完整个语句，具体到这个语句，就是外部对A的移动构造，再析构。</p>
<p>完成了对A的移动构造之后，就已经完成了两次对应移动构造的输出。分别是因为返回值优化被禁用而对返回值进行的规定的移动构造，以及返回的对象对于A的移动构造。接下来，这一语句执行完毕后才进行函数体的析构，也就是连续的两次析构。第一次析构掉返回值，第二次析构掉形参。（先构造的后析构）</p>
<p>但是这里的析构顺序其实还有进一步讨论：</p>
<blockquote>
<p>由于函数返回值是对象而在return时也会产生一次对象构造（通常会被编译器优化，但可以通过开启编译指令<code>-fon-elide-constructors</code>让编译器不优化），这个临时对象会在return语句执行时被创建，等return语句结束后，函数体内的对象被析构，然后这个临时变量被析构，最后才到作为参数的变量被析构。</p>
</blockquote>
<p>析构顺序是先析构函数体内对象，然后是返回值对象，最后是形参。虽然这和通常意义上的先构造的后析构有些矛盾，但是特例记住就好。</p>
<p>至于为什么对A是移动构造：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test A = <span class="built_in">f1</span>(a);<span class="comment">//f1(a)是个右值，因为你没法对f1(a)++; f1(a)是个右值，故而默认调用了移动构造函数</span></span><br></pre></td></tr></table></figure>
<p>这里需要意识到，f1(a)本身是个右值，但是A就是个左值了。</p>
<p>还值得说明的是，上文的析构时机是建立在主函数的语句既有赋值又有函数调用的基础上，也就是函数的返回值有赋值作用。如果函数返回值没有赋值的作用，那么返回值会立刻在函数体结束后被析构，而不是主函数的对应语句结束后析构。譬如上文简单的写a++就会让test立刻被析构。</p>
<p>4.3.2.4.3  实例二：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Test</span>(<span class="keyword">int</span> d) &#123;data = d;&#125;</span><br><span class="line">  Test <span class="keyword">operator</span>++ (<span class="keyword">int</span>) &#123;<span class="comment">//后缀重载</span></span><br><span class="line">    <span class="function">Test <span class="title">test</span><span class="params">(data)</span></span>;</span><br><span class="line">    ++data;</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>; </span><br><span class="line">  test=test++;</span><br><span class="line">  cout&lt;&lt;test.data&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>为什么会输出1？我们结合修改后的代码进行解释。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> data = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">Test</span>(<span class="keyword">int</span> d) &#123;data = d;&#125;</span><br><span class="line">  Test <span class="keyword">operator</span>++ (<span class="keyword">int</span>) &#123;</span><br><span class="line">    <span class="function">Test <span class="title">new_test</span><span class="params">(data)</span></span>;</span><br><span class="line">    ++data;</span><br><span class="line">    <span class="keyword">return</span> new_test;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>; </span><br><span class="line">  test=test++;</span><br><span class="line">  cout&lt;&lt;test.data&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>先构建了new_test，然后对原有的test.data++，然后把new_test返回给了test。注意到这一逻辑过程的先后顺序，我虽然对于test.data++了，但这步之后用返回的new_test（data还是1）对test进行了移动赋值，覆盖了++的效果，故而test.data还是1。</p>
<p>另一方面，避免主函数的局部变量和函数体局部变量重名必然是个好习惯！</p>
<p>4.3.2.5  全局型重载</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">A</span>() &#123; data = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i) &#123; data = i; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">A <span class="keyword">operator</span>++(A&amp; a) &#123;<span class="comment">//前缀</span></span><br><span class="line">    ++a.data;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">A <span class="keyword">operator</span>++(A&amp; a, <span class="keyword">int</span>) &#123; <span class="comment">//哑元，后缀</span></span><br><span class="line">    <span class="function">A <span class="title">new_a</span><span class="params">(a.data)</span></span>;</span><br><span class="line">    ++a.data;</span><br><span class="line">    <span class="keyword">return</span> new_a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; (++a).data &lt;&lt; endl; <span class="comment">// 2</span></span><br><span class="line">    cout &lt;&lt; (a++).data &lt;&lt; endl; <span class="comment">// 2</span></span><br><span class="line">    cout &lt;&lt; a.data &lt;&lt; endl; <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-3-函数运算符-重载"><a href="#4-3-3-函数运算符-重载" class="headerlink" title="4.3.3  函数运算符()重载"></a>4.3.3  函数运算符()重载</h3><p>在自定义类中也可以重载函数运算符() ，它使对象看上去如同是一个函数名，可以称之为函数对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;operator() called. &quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test sum;</span><br><span class="line">  <span class="keyword">int</span> s = <span class="built_in">sum</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">/// sum对象看上去象是一个函数，故也称“函数对象”</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;a + b = &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">int</span> t = sum.<span class="built_in"><span class="keyword">operator</span></span>()(<span class="number">5</span>, <span class="number">6</span>); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ReturnType <span class="title">operator</span><span class="params">()</span> <span class="params">(Parameters)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClassName Obj;</span><br><span class="line"><span class="built_in">Obj</span>(real_parameters); <span class="comment">//注意这里显然不是在调用构造函数！</span></span><br></pre></td></tr></table></figure>
<p>实际上在调用<code>Obj(real_parameters)</code>; 时，等价于调用了<code>Obj.operator() (real_parameters)</code>;</p>
<h3 id="4-3-4-数组下标重载"><a href="#4-3-4-数组下标重载" class="headerlink" title="4.3.4  数组下标重载"></a>4.3.4  数组下标重载</h3><p>函数声明形式：返回类型 operator[] (参数);</p>
<p>如果返回类型是引用，则数组运算符调用可以出现在等号左边，接受赋值，即Obj[index] = value;（也就是返回左值）如果返回类型不是引用，则只能出现在等号右边Var = Obj[index];（也就是成员函数函数返回了右值，但右值不可以赋值）</p>
<p>注意到，这里Obj是一个对象，而不是一个数组。这是对于一个类，定义了一个成员函数来重载数组下标。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span><span class="comment">//为了使用strcmp    </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> week_name[<span class="number">7</span>][<span class="number">4</span>] = &#123;<span class="string">&quot;mon&quot;</span>,<span class="string">&quot;tue&quot;</span>,<span class="string">&quot;wed&quot;</span>,<span class="string">&quot;thu&quot;</span>,<span class="string">&quot;fri&quot;</span>,<span class="string">&quot;sat&quot;</span>,<span class="string">&quot;sun&quot;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeekTemperature</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> temperature[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">int</span> error_temperature;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">const</span> <span class="keyword">char</span>* name) <span class="comment">// 字符串作下标</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(week_name[i], name) == <span class="number">0</span>) </span><br><span class="line">                <span class="keyword">return</span> temperature[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> error_temperature; <span class="comment">//没有匹配到字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WeekTemperature beijing;</span><br><span class="line">    beijing[<span class="string">&quot;mon&quot;</span>] = <span class="number">-3</span>;    </span><br><span class="line">    beijing[<span class="string">&quot;tue&quot;</span>] = <span class="number">-1</span>;</span><br><span class="line">    cout    &lt;&lt; <span class="string">&quot;Monday Temperature: &quot;</span> </span><br><span class="line">            &lt;&lt; beijing[<span class="string">&quot;mon&quot;</span>] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：Monday Temperature: <span class="number">-3</span></span><br></pre></td></tr></table></figure>
<p>const char*name:表示一个常量字符串，避免修改。这个字符串常量就是在[]里面的内容，比如[“test”]那你的参数就是test。（注意到必须要有双引号才能是字符串）</p>
<p>此处，对于private做一说明：temp是private，所以直接访问temp这个名字不可行，但是可通过其他方式访问其引用，进而可修改内存空间。</p>
<p>这个名字被保护了，但是他的内存单元没有被保护。private一般用于修饰类的内部属性（变量）和方法（函数）（即：那些不想暴露给外部的），它保证了它修饰的属性和方法不能在类的外部被【直接】访问，但可以通过类的一些public方法实现间接访问。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>: <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span> j):<span class="built_in">i</span>(j)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="keyword">this</span>-&gt;i;&#125;</span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span>&amp;b=test.i;</span><br><span class="line">  b++;</span><br><span class="line">  test.<span class="built_in">print</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里将会访问失败，因为主函数内不可访问直接private成员。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>: <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span> j):<span class="built_in">i</span>(j)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="keyword">this</span>-&gt;i;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">setTest</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;i;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Test <span class="title">test</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">int</span>&amp;b=test.<span class="built_in">setTest</span>();</span><br><span class="line">  b++;</span><br><span class="line">  test.<span class="built_in">print</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处，我通过setTest这一public方法得到了i的引用，再构造了另外一个引用。直接绕过了变量，对其指向的内存空间进行了操作。</p>
<h3 id="4-3-5-只能成员函数型重载的运算符"><a href="#4-3-5-只能成员函数型重载的运算符" class="headerlink" title="4.3.5  只能成员函数型重载的运算符"></a>4.3.5  只能成员函数型重载的运算符</h3><p><code>=</code>,<code>[]</code>,<code>()</code>,<code>-&gt;</code>只能通过成员函数来重载。</p>
<p>这里其实可以联系到之后学习的拷贝赋值运算和移动赋值运算，因为本质上二者就是实现方式值得推究的两种运算符重载。</p>
<p>当我们没有显式地在类内定义这两个运算符（重载）时，编译器会自动生成缺失的部分。编译器无法获知（或者至少没有尝试去获知）类以外已经重载了operator =，它在编译这个类时发现这个类没有重载operator =，于是就给它补上了一个。但如果之后又在类以外重载了一个operator =，这就会导致调用的时候不知道用哪个，产生歧义。综上，c++禁止了在类以外重载operator=。</p>
<p>换言之，编译器编译类时能看到类内重载的赋值运算符，就不会自动生成=的重载。但全局的编译器无法在编译时检测到,只有在链接的时候才能检测到。而此时会链接歧义函数。</p>
<p>仅仅是只是链接两个歧义函数并不会出错，在发生有歧义的调用的时候才会有问题。（也就是说，如果在类外重载operator=，而不调用=,是不会warning或者error的。）比如我们甚至可以同时定义int foo(int x, int y=1) 和int foo(int x) 这两个函数，只有使用了foo(x) 才会导致CE。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y=<span class="number">0</span>)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;1&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这不会有问题</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y=<span class="number">0</span>)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;1&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">func</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这就有问题</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-6-流运算符重载"><a href="#4-3-6-流运算符重载" class="headerlink" title="4.3.6  流运算符重载"></a>4.3.6  流运算符重载</h3><p>用户自定义的类，虽然可以像内置类型那样定义变量（对象），但想要使用流运算符输入、输出对象，则还需要为类定义流运算符重载。</p>
<p>4.3.6.1  语法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst );</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src );</span><br></pre></td></tr></table></figure>
<p>函数名为：operator&gt;&gt; 和 operator&lt;&lt;</p>
<p>不修改istream和ostream类的情况下，只能使用全局函数重载。</p>
<p>返回值为：istream&amp; 和 ostream&amp;，均为引用</p>
<p>参数分别：流对象的引用、目标对象的引用。对于输出流，目标对象一般是常量引用。</p>
<p>备注：因为流运算符往往需要输出private数据，故而往往设为友元函数并在类内声明，并尽量在类外时实现。同时，在类外实现时，已经不用再写friend了，friend只是一个全局函数在类内的标记。</p>
<p>为什么流运算符不能是成员函数重载？</p>
<p>实际上，这句话指的是，流运算符不能是某个对象的成员函数重载，因为我们在调用流运算符时，调用顺序是：cout&lt;&lt;a;而不是a&lt;&lt;cout;<br>从而可以看出，调用的是ostream类的一个成员函数，而不是a的类的成员函数。</p>
<p>4.3.6.2  实例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> i) : <span class="built_in">id</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; created\n&quot;</span>; &#125;   </span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst); </span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src); </span><br><span class="line">&#125;;  </span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst) &#123;</span><br><span class="line">        in &gt;&gt; dst.id;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src) &#123;</span><br><span class="line">    out &lt;&lt; src.id &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Test <span class="title">obj</span><span class="params">(<span class="number">1</span>)</span></span>;    </span><br><span class="line">    cout &lt;&lt; obj;  <span class="comment">// 等价于obj.operator&lt;&lt;(cout,obj)</span></span><br><span class="line">    cin &gt;&gt; obj;   <span class="comment">// 等价于obj.operator&gt;&gt;(cin,obj)     </span></span><br><span class="line">    cout &lt;&lt; obj;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到，函数体内用的都是in和out，而不是cin和cout，因为你在重载out，你希望你的out对于所有的输出流都适用，那么不能写cout。因为还有fout等等。如果写了cout，没有问题，但是没法给fout这些用，因此写out习惯更好。</p>
<p>参数的意义：cout &lt;&lt; asdfsad &lt;&lt; sadf; out即时ostream类对象cout，src即是test类对象asdfsad。函数结束后，返回了一个新的ostream&amp;，接下来继续输出。</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L8  虚函数</title>
    <url>/2022/01/12/CS/OOP/L8%20%E8%99%9A%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="L8-虚函数"><a href="#L8-虚函数" class="headerlink" title="L8 虚函数"></a>L8 虚函数</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>2.3 对象切片的理解</li>
<li>2.4 对象切片从内存空间角度的进一步讨论</li>
<li>3.3 虚函数表详解</li>
</ul>
</blockquote>
<hr>
<h1 id="一、向上类型转换"><a href="#一、向上类型转换" class="headerlink" title="一、向上类型转换"></a>一、向上类型转换</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1  定义"></a>1.1  定义</h2><p>派生类对象/引用/指针转换成基类对象/引用/指针，称为向上类型转换。只对public继承有效，在继承图上是上升的；对private、protected继承无效。</p>
<p>向上类型转换（派生类到基类）可以由编译器自动完成，是一种隐式类型转换。凡是接受基类对象/引用/指针的地方（如函数参数），都可以使用派生类对象/引用/指针，编译器会自动将派生类对象转换为基类对象以便使用。</p>
<h2 id="1-2-不允许非public继承的向上转换"><a href="#1-2-不允许非public继承的向上转换" class="headerlink" title="1.2  不允许非public继承的向上转换"></a>1.2  不允许非public继承的向上转换</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> data&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> data;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; data=i;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive1</span> :</span> <span class="keyword">private</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::getData;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derive1 d1;</span><br><span class="line">    cout&lt;&lt;d1.<span class="built_in">getData</span>();</span><br><span class="line">    Base&amp; b = d1;        <span class="comment">///不允许私有继承的向上转换</span></span><br><span class="line">    b.<span class="built_in">setData</span>(<span class="number">10</span>);    <span class="comment">///否则可以绕过D1，调用基类的setData函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">error: cannot cast <span class="string">&#x27;Derive1&#x27;</span> to its <span class="keyword">private</span> base class <span class="string">&#x27;Base&#x27;</span></span><br><span class="line">Base&amp; b = d1;        <span class="comment">///不允许私有继承的向上转换</span></span><br></pre></td></tr></table></figure>
<p>如果private继承也可以向上转换，那么基类对象里的public成员也可以被派生类调用了。而private继承的原意就是让基类成员在派生类里变成private属性，所以private继承不能向上转换。</p>
<h2 id="1-3-例子"><a href="#1-3-例子" class="headerlink" title="1.3  例子"></a>1.3  例子</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base obj)</span> </span>&#123; obj.<span class="built_in">print</span>(); &#125;<span class="comment">//调用Base对象的print.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">print</span>();    </span><br><span class="line">  <span class="built_in">fun</span>(d);       <span class="comment">/// 本意：希望对Derive::print调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Derive::<span class="built_in">print</span>()</span><br><span class="line">Base::<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<p>派生类会覆盖掉基类的同名函数，未发生切片前，想要让派生类使用基类的print，方法一是使用using关键字，方法二是启用命名空间。</p>
<h1 id="二、对象切片"><a href="#二、对象切片" class="headerlink" title="二、对象切片"></a>二、对象切片</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1  定义"></a>2.1  定义</h2><p>当派生类的对象b(不是指针或引用)被转换为基类的对象a时，派生类的对象被切片为对应基类的子对象。这句话的意义是a仅仅只能含有b中基类的部分，而b对象本身不受到影响。</p>
<p>切片过程不可逆，即便切片本身不改变指针的位置，改变了指针的类型，这一过程也不可逆。（见下文）</p>
<h2 id="2-2-例子"><a href="#2-2-例子" class="headerlink" title="2.2  例子"></a>2.2  例子</h2><p>例1：存储空间的变化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)<span class="comment">// 按照四字节进行内存对齐</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line">    <span class="keyword">public</span>:  <span class="keyword">int</span> att_i;<span class="comment">//表示属性</span></span><br><span class="line">    <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line">    <span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(Pet p)</span></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Pet size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Pet p;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Pet size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p) &lt;&lt; endl;</span><br><span class="line">  Dog g;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Dog size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(g) &lt;&lt; endl;</span><br><span class="line">  <span class="built_in">getSize</span>(g);   <span class="comment">/// 对象切片(传参)，p丢失了g的数据，但是g不受影响。</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Dog size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(g) &lt;&lt; endl;</span><br><span class="line">  p = g;        <span class="comment">/// 对象切片(赋值)，p丢失了g的数据，但是g不受影响。</span></span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Dog size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(g) &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Pet size:<span class="number">4</span></span><br><span class="line">Dog size:<span class="number">8</span></span><br><span class="line">Pet size:<span class="number">4</span></span><br><span class="line">Dog size:<span class="number">8</span></span><br><span class="line">Dog size:<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>例2：派生类数据无权访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>:  <span class="keyword">int</span> att_i;<span class="comment">//表示属性</span></span><br><span class="line">    <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"><span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Pet <span class="title">p</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; p.att_i &lt;&lt; endl;</span><br><span class="line">  <span class="function">Dog <span class="title">g</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; g.att_i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl;</span><br><span class="line">  p = g;        <span class="comment">/// 对象切片，只赋值基类数据</span></span><br><span class="line">  cout &lt;&lt; p.att_i &lt;&lt; endl;</span><br><span class="line">  <span class="comment">//cout &lt;&lt; p.att_j &lt;&lt; endl;  // 没有该参数，编译错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>例3：派生类方法无权访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;Pet::name()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">name</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;Dog::name()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getName</span><span class="params">(Pet p)</span></span>&#123;</span><br><span class="line">    p.<span class="built_in">name</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Dog g;</span><br><span class="line">  g.<span class="built_in">name</span>(); </span><br><span class="line">  <span class="built_in">getName</span>(g);   <span class="comment">/// 对象切片（传参），调用基类的 name 函数</span></span><br><span class="line">  Pet p = g;</span><br><span class="line">  p.<span class="built_in">name</span>();   <span class="comment">/// 对象切片（赋值），调用基类的 name 函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Dog::<span class="built_in">name</span>()</span><br><span class="line">Pet::<span class="built_in">name</span>()</span><br><span class="line">Pet::<span class="built_in">name</span>()</span><br></pre></td></tr></table></figure>
<h2 id="2-3-对象切片的理解"><a href="#2-3-对象切片的理解" class="headerlink" title="2.3  对象切片的理解"></a>2.3  对象切片的理解</h2><p>情况1：指针型向上类型转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_i;<span class="comment">//表示属性</span></span><br><span class="line"> <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line"> <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> Dog* g = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"> Pet* p = g;</span><br><span class="line"> cout &lt;&lt; g &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; p &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">int</span>* a = (<span class="keyword">int</span>*)g;<span class="comment">//指针转换</span></span><br><span class="line"> cout &lt;&lt; a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; a + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"> cout &lt;&lt; *a &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; *(a + <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"> cout &lt;&lt; p-&gt;att_i &lt;&lt; endl;</span><br><span class="line"> cout &lt;&lt; g-&gt;att_i &lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;g-&gt;att_j &lt;&lt; endl;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">0x1c94eb0</span> <span class="number">0x1c94eb0</span></span><br><span class="line"><span class="number">0x1c94eb0</span> <span class="number">0x1c94eb4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>在主函数中，我们使用了基类指针p指向派生类对象g。将p和g指向内存空间的地址打印出来，同时将g指向内存空间上的两个int地址打印出来，我们发现g和p都指向同一个地址（这个地址就是att_i）。</p>
<p>实际上，数据在内存中是连续紧密排列的。先排列基类数据att_i，再排列派生类数据att_j。而我们用基类指针指向派生类对象时，基类和派生类指针都指向同一个内存地址，即基类数据的地址。但是访问权限不同，基类指针只能访问基类的部分，派生类能访问所有部分。情况一类型的数据丢失，并非派生类数据销毁了，而是被转换生成的指针没有访问派生类数据的权限。</p>
<p>不过，当多重继承时，比如Class A同时Public继承B，C。(按照类的定义顺序从左到右)在内存中则先排列B，之后C，最后A。还是使用基类指针指向派生类对象的话，如果A类指针a和C类指针c不重合。a指向头部，c指向C的部分，访问权限也不同。</p>
<p><img src="https://s2.loli.net/2022/01/11/pgQlUWaPBh5RE9Y.png" alt="https://s2.loli.net/2022/01/11/pgQlUWaPBh5RE9Y.png"></p>
<p>情况二：拷贝型向上类型转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_i;<span class="comment">//表示属性</span></span><br><span class="line"> <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line"> <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Dog <span class="title">d</span><span class="params">(<span class="number">10</span>,<span class="number">12</span>)</span></span>;</span><br><span class="line">  Pet t;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;locate of d: &quot;</span>&lt;&lt;&amp;d&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;d.att_i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;d.att_j&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;locate of t: &quot;</span>&lt;&lt;&amp;t&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;t.att_i&lt;&lt;endl;</span><br><span class="line">  t=d;</span><br><span class="line">  cout&lt;&lt;t.att_i&lt;&lt;endl;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;locate of t: &quot;</span>&lt;&lt;&amp;t&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">locate of d: <span class="number">0x7ffefd9e81a0</span></span><br><span class="line"><span class="number">10</span> <span class="number">12</span></span><br><span class="line">locate of t: <span class="number">0x7ffefd9e8198</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">locate of t: <span class="number">0x7ffefd9e8198</span></span><br></pre></td></tr></table></figure>
<p>可以发现，在定义了Pet t后，就已经为t分配了内存空间，和d并不是同一块空间。接下来的t=d类似于一个部分拷贝赋值语句，并没有改变t和d的地址。比起指针型的切片简单许多。</p>
<p><img src="https://s2.loli.net/2022/01/11/mX4vOU5pabyKBNh.png" alt="https://s2.loli.net/2022/01/11/mX4vOU5pabyKBNh.png"></p>
<h2 id="2-4-进一步讨论"><a href="#2-4-进一步讨论" class="headerlink" title="2.4  进一步讨论"></a>2.4  进一步讨论</h2><p>编译器为glot平台</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_i;<span class="comment">//表示属性</span></span><br><span class="line"> <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"> <span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line"> <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(Pet p)</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;locate of p: &quot;</span>&lt;&lt;&amp;p&lt;&lt;endl;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Pet size:&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line">#</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;instruction.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MagicArray</span>:</span><span class="keyword">public</span> Instruction&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">MagicArray</span>(<span class="keyword">int</span> i):<span class="built_in">len</span>(i),<span class="built_in">num</span>(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> t)&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="keyword">int</span> t)&#123;</span><br><span class="line">        num=num+t;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp;vec)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            *it+=num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(vector&lt;<span class="keyword">double</span>&gt;&amp;vec)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">double</span>&gt;::iterator it=vec.<span class="built_in">begin</span>();it!=vec.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">            *it+=num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> Dog* g = <span class="keyword">new</span> <span class="built_in">Dog</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"> cout&lt;&lt;<span class="string">&quot;locate of g: &quot;</span>&lt;&lt;g&lt;&lt;endl;</span><br><span class="line"> Pet* j=g;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;locate of j: &quot;</span>&lt;&lt;j&lt;&lt;endl;</span><br><span class="line"> <span class="built_in">getSize</span>(*g);</span><br><span class="line"> cout&lt;&lt;g-&gt;att_i&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">delete</span> j;</span><br><span class="line">  cout&lt;&lt;g-&gt;att_i;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">locate of g: <span class="number">0x18beeb0</span></span><br><span class="line">locate of j: <span class="number">0x18beeb0</span></span><br><span class="line">locate of p: <span class="number">0x7ffe369b8848</span></span><br><span class="line">Pet size:<span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6334</span>（实际上是非法访问，不同编译器行为不同）</span><br></pre></td></tr></table></figure>
<p>这里对于拷贝型向上类型转换和指针型向上类型转换进行分析。思考一个问题，拷贝型向上类型转换是否会在参数被析构后破坏原有的派生类数据？</p>
<p>答案是不会的。<br>上述例子通过传递参数参数产生的切片实质是拷贝传参，相当于用派生类对象在另外一块地址上拷贝了一个基类对象。这一对象指针指针指向的内存和派生类指针指向的内存当然不是同一块，故而析构的时候不会有问题。</p>
<p>而对于指针型向上类型转换，在上文已经讨论过这一切片的本质——两个指向地址相同的指针，但是访问权限不同。</p>
<p>如同上文输出所示，情况一类型的切片生成的基类指针和派生类指针指向同一块空间。将基类指针所指空间释放后，破坏了派生类数据。</p>
<p>又例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>:  <span class="keyword">int</span> att_i;</span><br><span class="line">    <span class="built_in">Pet</span>(<span class="keyword">int</span> x=<span class="number">0</span>): <span class="built_in">att_i</span>(x) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"><span class="keyword">public</span>:  <span class="keyword">int</span> att_j;</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>): <span class="built_in">Pet</span>(x), <span class="built_in">att_j</span>(y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Dog <span class="title">g</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">  cout &lt;&lt; g.att_i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl;</span><br><span class="line">  Pet&amp; p = g;       <span class="comment">/// 引用向上转换</span></span><br><span class="line">  cout &lt;&lt; p.att_i &lt;&lt; endl;</span><br><span class="line">  p.att_i = <span class="number">1</span>;        <span class="comment">/// 修改基类存在的数据</span></span><br><span class="line">  cout &lt;&lt; p.att_i &lt;&lt; endl;</span><br><span class="line">  cout &lt;&lt; g.att_i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; g.att_j &lt;&lt; endl; <span class="comment">/// 影响派生类，但是将派生类转化为基类的引用后，原来的派生类对象并不会被销毁</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>课堂上的例子只强调了基类引用会影响派生类数据，实际上应结合地址和内存空间来理解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Instrument::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> :</span> <span class="keyword">public</span> Instrument &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Redefine interface function:</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Wind::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument&amp; i)</span> </span>&#123;</span><br><span class="line">  i.<span class="built_in">play</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Wind flute;</span><br><span class="line">  <span class="built_in">tune</span>(flute); <span class="comment">/// 引用的向上类型转换(传参)，编译器早绑定，无对象切片产生</span></span><br><span class="line">  Instrument &amp;inst = flute;  <span class="comment">/// 引用的向上类型转换(赋值)</span></span><br><span class="line">  inst.<span class="built_in">play</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Instrument::play</span><br><span class="line">Instrument::play</span><br></pre></td></tr></table></figure>
<p>同样的，Ins类的引用的权限不足以访问Wind的public接口。</p>
<p>最后，指针的基本知识：指针的值是指指针所指向的地址。而指针本身是一种数据结构，也需要内存空间存放，指针的地址就是存放指针的内存空间的地址。比如g是dog类型的指针</p>
<p><code>cout&lt;&lt;&quot;locate of g: &quot;&lt;&lt;g&lt;&lt;endl;</code>这是打印g指向的内存空间的地址。</p>
<p><code>cout&lt;&lt;&quot;locate of g: &quot;&lt;&lt;&amp;g&lt;&lt;endl;</code>这是存储g的内存空间的地址。</p>
<p>而对于变量，例如Pet p，&amp;取地址符即可输出地址。</p>
<p><code>cout&lt;&lt;&quot;locate of p: &quot;&lt;&lt;&amp;p&lt;&lt;endl;</code></p>
<h1 id="三、虚函数"><a href="#三、虚函数" class="headerlink" title="三、虚函数"></a>三、虚函数</h1><h2 id="3-1-函数调用绑定"><a href="#3-1-函数调用绑定" class="headerlink" title="3.1  函数调用绑定"></a>3.1  函数调用绑定</h2><p>把函数体与函数调用相联系称为捆绑(binding)。即将函数体的具体实现代码，与调用的函数名绑定，执行到调用代码时进入直接进入捆绑好的函数体内部。</p>
<p>当捆绑在程序运行之前（由编译器和链接器）完成，也即是运行之前已经决定了函数究竟调用哪个函数，称为早捆绑(early binding)。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Instrument::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> :</span> <span class="keyword">public</span> Instrument &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Redefine interface function:</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Wind::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument&amp; i)</span> </span>&#123;</span><br><span class="line">  i.<span class="built_in">play</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Wind flute;</span><br><span class="line">  <span class="built_in">tune</span>(flute); <span class="comment">/// 引用的向上类型转换(传参)，由于是编译器早绑定，编译器根据tune函数的参数类型（也就是instrument）决定要调用Instrument类型的play。所以在真正运行的时候，即使传进去的是一个Wind类型，编译器为了调用Instrument类型的成员函数，会对传进去的Wind对象进行切片，而不会去调用Wind的成员函数</span></span><br><span class="line">  Instrument &amp;inst = flute;  <span class="comment">/// 引用的向上类型转换(赋值)</span></span><br><span class="line">  inst.<span class="built_in">play</span>();<span class="comment">//这里也是同理。因为inst是Instrument类型的引用，早绑定决定了编译器必然要调用Instrument类型的play。而不管实际上传进去的是什么.</span></span><br><span class="line"><span class="comment">//如果对play函数加上virtual关键字，则两次调用都会调用Wind的play函数了。（虚函数内容见下）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Instrument::play</span><br><span class="line">Instrument::play</span><br></pre></td></tr></table></figure>
<p>此处inst是flute的引用，由于发生切片，编译器将tune中的函数调用i.play()与Instrument::play()绑定。</p>
<p>当捆绑根据对象的实际类型(上例中即子类Wind而非Instrument)，发生在程序运行时，称为晚捆绑(late binding)，又称动态捆绑或运行时捆绑。</p>
<p>也即是要求在运行时能确定对象的实际类型，并绑定正确的函数。</p>
<p>晚捆绑只对类中的虚函数起作用，使用 virtual 关键字声明虚函数。</p>
<h2 id="3-2-虚函数定义"><a href="#3-2-虚函数定义" class="headerlink" title="3.2  虚函数定义"></a>3.2  虚函数定义</h2><p>对于被派生类重新定义的成员函数，若它在基类中被声明为虚函数（如下所示），则通过基类指针或引用调用该成员函数时，编译器将根据所指（或引用）对象的实际类型决定是调用基类中的函数，还是调用派生类重写的函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ReturnType <span class="title">FuncName</span><span class="params">(argument)</span></span>; <span class="comment">//虚函数</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>若某成员函数在基类中声明为虚函数，当派生类override它时(同名，同参数函数) ，无论是否声明为虚函数，该成员函数都仍然是虚函数。</p>
<p>区分override和redefining：redefining是在派生类中重新定义同名、参数可能不同的函数，并屏蔽了基类的所有同名函数；override则是一种特殊的重写隐藏，要求不仅同名，参数也要相同，是一个针对虚函数的概念,使用条件更加严格）</p>
<p>什么是指针和引用的“实际类型”？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wind flute;</span><br><span class="line">Instrument*inst = &amp;flute;  <span class="comment">//指针inst的实际类型是Wind。</span></span><br><span class="line">Wind flute;</span><br><span class="line">Instrument &amp;inst = flute;  <span class="comment">//引用inst的实际类型是Wind。</span></span><br></pre></td></tr></table></figure>
<p>由此也能看出为什么只有在使用指针和引用的时候多态才可能发生，而对于对象，多态不会发生。比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wind flute;</span><br><span class="line">Instrument inst = flute;  <span class="comment">//拷贝切片后构造了Instrument对象inst。</span></span><br></pre></td></tr></table></figure>
<p>此时inst就是Instrument类型，没有“实际类型”和“表现类型“的区别。<br>这对于参数是Instrument类型的全局函数也适用。（见例1）</p>
<p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Instrument::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wind</span> :</span> <span class="keyword">public</span> Instrument &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Wind::play&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">     <span class="comment">/// 重写覆盖(稍后：重写隐藏和重写覆盖的区别）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tune</span><span class="params">(Instrument&amp; ins)</span> </span>&#123;</span><br><span class="line">  ins.<span class="built_in">play</span>(); <span class="comment">/// 由于 Instrument::play 是虚函数，编译时不再直接绑定，运行时根据 ins 的实际类型调用。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Wind flute;</span><br><span class="line">  <span class="built_in">tune</span>(flute); <span class="comment">/// 向上类型转换</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Wind::play</span><br></pre></td></tr></table></figure>
<p>注意到上方<code>void tune(Instrument&amp; ins) ;</code>的参数是引用（或指针），才成功起到了晚绑定效果。如果参数是<code>void tune(Instrument ins);</code> ，那么发生拷贝型切片，依然无法晚绑定。</p>
<h2 id="3-3-虚函数表"><a href="#3-3-虚函数表" class="headerlink" title="3.3  虚函数表"></a>3.3  虚函数表</h2><h3 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1  概述"></a>3.3.1  概述</h3><p>为了实现C++的多态，C++使用了一种动态绑定的技术。这个技术的核心是虚函数表（简称虚表）。3.3节介绍虚函数表是如何实现动态绑定的。</p>
<h3 id="3-3-2-类的虚表"><a href="#3-3-2-类的虚表" class="headerlink" title="3.3.2  类的虚表"></a>3.3.2  类的虚表</h3><p>每个包含了虚函数的类都包含一个属于整个类的虚表。 （只要有一个虚函数就行）</p>
<p>当一个类（A）继承另一个类（B）时，类A会继承类B的函数的调用权。所以如果一个基类包含了虚函数，那么其继承类也可调用这些虚函数，换句话说，一个类继承了包含虚函数的基类，那么这个类也拥有自己的虚表。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data1, m_data2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>类A包含虚函数vfunc1，vfunc2，由于类A包含虚函数，故类A拥有一个虚表。</p>
<p><img src="https://s2.loli.net/2022/01/11/Tk7vCDmz1NuWJrS.png" alt="https://s2.loli.net/2022/01/11/Tk7vCDmz1NuWJrS.png"></p>
<p>虚表是一个指针数组，其元素是虚函数的指针，每个元素对应一个虚函数的函数指针。需要指出的是，普通的函数即非虚函数，其调用并不需要经过虚表，所以虚表的元素并不包括普通函数的函数指针。</p>
<p>虚表内的条目，即虚函数指针的赋值发生在编译器的编译阶段，也就是说在代码的编译阶段，虚表就完成了构造。</p>
<h3 id="3-3-3-虚表指针"><a href="#3-3-3-虚表指针" class="headerlink" title="3.3.3  虚表指针"></a>3.3.3  虚表指针</h3><p>虚表是属于类的，而不是属于某个具体的对象，一个类只需要一个虚表即可，同一个类的所有对象都使用同一个虚表。 （但另一方面，不同的类的虚表不同，即使它们有继承关系）</p>
<p>每一个虚函数类对象内部包含一个指向所属类的虚表的指针，来指向自己所使用的虚表。为了让每个包含虚表的类的对象都拥有一个虚表指针，编译器在类中隐式添加了一个指针*vptr，用来指向虚表。这样，当类的对象在创建时便拥有了这个指针，且这个指针的值会自动被设置为指向类的虚表。</p>
<p>进一步而言，对象的虚表指针用来指向自己所属类的虚表，虚表中的函数指针会指向其继承的最近的一个类的虚函数与自身重写覆盖的虚函数。</p>
<p><img src="https://s2.loli.net/2022/01/11/eMF8PBQEz7yHVw9.png" alt="https://s2.loli.net/2022/01/11/eMF8PBQEz7yHVw9.png"></p>
<p>前文指出，一个继承类的基类如果包含虚函数，那个这个继承类也有拥有自己的不同的虚表。这个继承类的对象也包含一个虚表指针，用来指向它的虚表。</p>
<h3 id="3-3-4-动态绑定"><a href="#3-3-4-动态绑定" class="headerlink" title="3.3.4  动态绑定"></a>3.3.4  动态绑定</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> m_data1, m_data2;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> m_data3;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">public</span> B &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> m_data1, m_data4;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/01/11/JNYOrLjEof8aycn.png" alt="https://s2.loli.net/2022/01/11/JNYOrLjEof8aycn.png"></p>
<p>类A是基类，类B继承类A，类C又继承类B。由于这三个类都有虚函数，故编译器为每个类都创建了一个虚表，即类A的虚表（A vtbl），类B的虚表（B vtbl），类C的虚表（C vtbl）。类A，类B，类C的对象都拥有一个虚表指针，*__vptr，用来指向自己所属类的虚表。</p>
<p>注意到前文所述： 对象的虚表指针用来指向自己所属类的虚表，虚表中的函数指针会指向其继承的最近的一个类的虚函数（这也就是为什么C类对象的虚表中的函数指针会指向B::vfunc1)与自身重写覆盖的虚函数。</p>
<p>类A包括两个虚函数，故A vtbl包含两个指针，分别指向A::vfunc1()和A::vfunc2()。</p>
<p>类B继承于类A，故类B可以调用类A的函数，但由于类B重写了B::vfunc1()函数，故B vtbl的两个指针分别指向B::vfunc1()和A::vfunc2()。</p>
<p>类C继承于类B，故类C可以调用类B的函数，但由于类C重写了C::vfunc2()函数，故C vtbl的两个指针分别指向B::vfunc1()（指向继承的最近的一个类的函数）和C::vfunc2()。</p>
<p>总而言之，类X的虚函数表的函数指针指向继承链上所有没有发生重写覆盖的虚函数和被X类重写覆盖的虚函数。（但是，如果继承链上X之上的类中，某函数发生了重写覆盖，但同时重新声明了virtual关键字，那么它会继续出现在该类的派生类的虚函数表中。）而每一个类X的对象都有一个独属于自身的虚表指针，来指向X类的虚表。注意到，对于一个派生类对象y，y的虚表指针位于基类部分，也就是y的内存空间的头部。结合到前文叙述的“继承类的内存结构”，无论用哪一个基类的指针去指向一个派生类对象，基类指针都能有权访问派生类对象内存空间的头部，都有权访问派生类对象的虚函数指针，进而能够完全访问派生类的虚函数表。</p>
<p>这也可以解释，为什么只有指针型的切片能够实现晚绑定。因为拷贝型的切片无法访问原对象的内存空间头部，而是将这片内存空间上的数据在另一片内存空间拷贝了一番。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data1, m_data2;</span><br><span class="line">&#125;;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data3;</span><br><span class="line">&#125;;   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">vfunc2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_data1, m_data4;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B bObject;</span><br><span class="line">    A *p = &amp; bObject;</span><br><span class="line">    p-&gt;<span class="built_in">vfunc1</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序在执行p-&gt;vfunc1()时，检测到p是个指针（已经无需在意是什么类的指针了），且调用的函数是虚函数。 首先，根据虚表指针p-&gt;<strong>vptr来访问对象bObject对应的虚表。虽然指针p是基类A<em>类型，但是</em></strong>vptr也是基类的一部分，所以可以通过p-&gt;__vptr可以访问到对象对应的虚表。</p>
<p>然后，在虚表中查找所调用的函数对应的条目。由于虚表在编译阶段就已完成构造，所以可以根据所调用的函数定位到虚表中的对应条目。p-&gt;vfunc1()的调用对应B vtbl的第一项，即是B::vfunc1对应的条目。</p>
<p>最后，根据虚表中找到的函数指针，调用函数。从图3可以看到，B vtbl的第一项指向B::vfunc1()，所以 p-&gt;vfunc1()实质会调用B::vfunc1()函数。</p>
<p>又比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        A aObject;</span><br><span class="line">        A *p = &amp;aObject;</span><br><span class="line">        p-&gt;<span class="built_in">vfunc1</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>p指向类A的对象，当aObject在创建时，它的虚表指针<strong>vptr已设置为指向A vtbl，这样p-&gt;</strong>vptr就指向A vtbl。vfunc1在A vtbl对应在条目指向了A::vfunc1()函数，所以 p-&gt;vfunc1()实质会调用A::vfunc1()函数。</p>
<h3 id="3-3-5-动态绑定的条件"><a href="#3-3-5-动态绑定的条件" class="headerlink" title="3.3.5  动态绑定的条件"></a>3.3.5  动态绑定的条件</h3><ul>
<li>通过指针来调用函数</li>
<li>指针upcast向上类型转换</li>
<li>调用的是虚函数</li>
</ul>
<p>如果一个函数调用符合以上三个条件，编译器就会把该函数调用编译成动态绑定，其函数的调用过程走的是上述通过虚表的机制。</p>
<h3 id="3-3-6-虚指针大小"><a href="#3-3-6-虚指针大小" class="headerlink" title="3.3.6  虚指针大小"></a>3.3.6  虚指针大小</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(4) <span class="comment">//按照4字节进行内存对齐</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoVirtual</span>&#123;</span> <span class="comment">//没有虚函数</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneVirtual</span>&#123;</span> <span class="comment">//一个虚函数</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoVirtual</span>&#123;</span><span class="comment">//两个虚函数</span></span><br><span class="line">  <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">f2</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;int: &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NoVirtual: &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(NoVirtual)&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;void* : &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">void</span>*)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;OneVirtual: &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(OneVirtual)&lt;&lt;endl;</span><br><span class="line"> </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;TwoVirtual: &quot;</span>&lt;&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(TwoVirtual)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="keyword">int</span>: <span class="number">4</span></span><br><span class="line">NoVirtual: <span class="number">4</span></span><br><span class="line"><span class="keyword">void</span>* : <span class="number">8</span></span><br><span class="line">OneVirtual: <span class="number">12</span></span><br><span class="line">TwoVirtual: <span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>可以观察到，虚指针的大小为8字节，且虚指针只是指向了虚表，虚函数的个数只是影响虚表的大小，不影响虚指针的大小。</p>
<h3 id="3-3-7-总结"><a href="#3-3-7-总结" class="headerlink" title="3.3.7  总结"></a>3.3.7  总结</h3><p>通过使用这些虚函数表，即使使用的是基类的指针来调用函数，也可以达到正确调用运行中实际对象的虚函数。</p>
<p>把经过虚表调用虚函数的过程称为动态绑定，其表现出来的现象称为运行时多态。动态绑定区别于传统的函数调用，传统的函数调用我们称之为静态绑定，即函数的调用在编译阶段就可以确定下来。封装，继承，多态是面向对象设计的三个特征，而多态是面向对象设计的关键。C++通过虚函数表，实现了虚函数与对象的动态绑定，从而构建了C++面向对象程序设计的基石。</p>
<h2 id="3-4-虚函数与构造、析构"><a href="#3-4-虚函数与构造、析构" class="headerlink" title="3.4  虚函数与构造、析构"></a>3.4  虚函数与构造、析构</h2><h3 id="3-4-1-虚函数与构造函数"><a href="#3-4-1-虚函数与构造函数" class="headerlink" title="3.4.1  虚函数与构造函数"></a>3.4.1  虚函数与构造函数</h3><p>当创建一个包含有虚函数的对象时，必须初始化它的VPTR以指向相应的VTABLE。设置VPTR的工作由构造函数完成。编译器在构造函数的开头秘密的插入能初始化VPTR的代码。</p>
<p>构造函数不能也不必是虚函数。<br>不能：如果构造函数是虚函数，则创建对象时需要先知道VPTR，而在构造函数调用前，VPTR未初始化。<br>不必：构造函数的作用是提供类中成员初始化，调用时明确指定要创建对象的类型，没有必要是虚函数。</p>
<p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="built_in">Base</span>()&#123;<span class="built_in">foo</span>();&#125;   <span class="comment">///在构造函数中调用虚函数foo</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;<span class="built_in">foo</span>();&#125;; <span class="comment">///在普通函数中调用虚函数foo</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> _num;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Derived::foo &quot;</span>&lt;&lt;_num&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="keyword">int</span> j):<span class="built_in">Base</span>(),_num(j)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    Base &amp;b = d;</span><br><span class="line">    b.<span class="built_in">bar</span>();</span><br><span class="line">    b.<span class="built_in">foo</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Base::foo</span><br><span class="line">Derived::foo <span class="number">0</span></span><br><span class="line">Derived::foo <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>注意到，构造函数里调用的是Base::foo()，因为初始化列表是按照定义的先后顺序来初始化的，与初始化列表写法先后顺序无关。而我们已知，初始化是先初始化基类部分，再初始化派生类部分。故而Derived的初始化列表中调用Base来进行构造时，一定会先调用Base的本地版本的foo，因为_num还未被初始化。不过，如果将_num去掉又会如何？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="built_in">Base</span>()&#123;<span class="built_in">foo</span>();&#125;   <span class="comment">///在构造函数中调用虚函数foo</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;<span class="built_in">foo</span>();&#125;; <span class="comment">///在普通函数中调用虚函数foo</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Derived::foo&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">Derived</span>(<span class="keyword">int</span> j):<span class="built_in">Base</span>()&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derived <span class="title">d</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Base::foo</span><br></pre></td></tr></table></figure>
<p>依然只是调用了本地版本的foo函数，因为在构造函数中，基类中调用虚函数如果允许多态特性的话，就会使用派生类中还没有构造的部分，这有风险。故而C++11禁止了在未完成构造之前启用多态特性。</p>
<p>退回到例一。在构造d之后，b.bar()调用之后实际上为b.foo()，完成虚函数匹配调用，故而调用了<code>Derived::foo();</code></p>
<p>总结：</p>
<p>在构造函数中调用一个虚函数，被调用的只是这个函数的本地版本(即当前类的版本)，即虚机制在构造函数中不工作。</p>
<p>构造函数语句的执行顺序：(与构造函数初始化列表顺序无关)</p>
<ol>
<li>基类初始化</li>
<li>对象成员初始化</li>
<li>构造函数体</li>
</ol>
<h3 id="3-4-2-虚函数与析构函数"><a href="#3-4-2-虚函数与析构函数" class="headerlink" title="3.4.2  虚函数与析构函数"></a>3.4.2  虚函数与析构函数</h3><p>析构函数可以是虚的，且常常是虚的。虚析构函数仍需定义函数体。并且基类的析构函数是虚的，那么派生类的析构函数也是虚的。（这和重写覆盖要求同名同参数并不一样）</p>
<p>虚析构函数的用途：当删除基类对象指针时，编译器将根据指针所指对象的实际类型，调用相应的析构函数。</p>
<p>若基类析构不是虚函数，则删除基类指针所指派生类对象时，编译器仅自动调用基类的析构函数，而不会考虑实际对象是不是基类的对象。这可能会导致内存泄漏。</p>
<p>在析构函数中调用一个虚函数，被调用的只是这个函数的本地版本，即虚机制在析构函数中不工作。理由和构造函数类似，因为派生类先被析构。如果在基类的析构里允许启用多态性，可能就会访问到已经被派生类析构函数释放的内存，存在风险。</p>
<p>可以进一步这么理解：派生类的析构函数其实是只析构派生类多出的部分。更具体的细节是虚指针指向的子类虚函数表已经被释放了，会产生内存不安全，所以不允许析构函数启用多态性。（这个更具体的细节助教老师说有待商榷）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">Base1</span>() &#123; cout &lt;&lt; <span class="string">&quot;~Base1()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span> :</span> <span class="keyword">public</span> Base1 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">Derived1</span>() &#123; cout &lt;&lt; <span class="string">&quot;~Derived1()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Base2</span>() &#123; cout &lt;&lt; <span class="string">&quot;~Base2()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span> :</span> <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">Derived2</span>() &#123; cout &lt;&lt; <span class="string">&quot;~Derived2()\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Base1* bp = <span class="keyword">new</span> Derived1;</span><br><span class="line">  <span class="keyword">delete</span> bp; <span class="comment">/// 只调用了基类的析构函数</span></span><br><span class="line">  Base2* b2p = <span class="keyword">new</span> Derived2;</span><br><span class="line">  <span class="keyword">delete</span> b2p; <span class="comment">/// 派生类虚析构函数调用完后调用基类的虚析构函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">~<span class="built_in">Base1</span>()</span><br><span class="line">~<span class="built_in">Derived2</span>()</span><br><span class="line">~<span class="built_in">Base2</span>()</span><br></pre></td></tr></table></figure>
<p>有的时候我们可能会说，析构函数中不能调用虚函数，这句话是对的。这句话实际上是指，析构函数和构造函数中都没有多态性，但是还是可以完成调用本地版本。</p>
<p>总之，重要原则：总是将基类的析构函数设置为虚析构函数。</p>
<h2 id="3-5-overload-redefining-override"><a href="#3-5-overload-redefining-override" class="headerlink" title="3.5  overload,redefining,override"></a>3.5  overload,redefining,override</h2><h3 id="3-5-1-重载（overload）"><a href="#3-5-1-重载（overload）" class="headerlink" title="3.5.1  重载（overload）"></a>3.5.1  重载（overload）</h3><p>目的：提供同名函数的不同实现，属于静态多态。</p>
<p>函数名必须相同，函数参数必须不同，作用域相同。（如位于同一个类中；或同名全局函数）</p>
<h3 id="3-5-2-重写隐藏（redfining）"><a href="#3-5-2-重写隐藏（redfining）" class="headerlink" title="3.5.2  重写隐藏（redfining）"></a>3.5.2  重写隐藏（redfining）</h3><p>目的：在派生类中重新定义基类函数，实现派生类的特殊功能。</p>
<p>屏蔽了基类的所有其它同名函数。</p>
<p>如果该函数名在基类里是非虚函数，此时派生类里重新定义的函数无论参数是否相同（这种相同是不考虑默认值的），发生的都是重写隐藏；而如果该函数在基类里是虚函数，此时派生类里重新定义的函数如果参数相同，则发生override；如果参数不同，则发生redefining。</p>
<h3 id="3-5-3-重写覆盖（override）"><a href="#3-5-3-重写覆盖（override）" class="headerlink" title="3.5.3  重写覆盖（override）"></a>3.5.3  重写覆盖（override）</h3><p>目的：对基类的虚函数进行重定义，函数名和参数完全相同，返回值一般相同。（如果派生类定义新函数与基类虚函数的函数名相同而参数不同，派生类定义的函数会redefining基类虚函数，发生隐藏而不是覆盖）。</p>
<p>覆盖的由来：基类虚函数表中的虚函数指针会被派生类中重新定义的同名同参数的虚函数的指针覆盖掉，以此来实现动态绑定。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>非虚同名函数在同一个类中发生重载，在不同类（基类和派生类）中发生隐藏</strong>。</p>
<p><strong>虚同名函数，参数相同则在派生类中发生重写覆盖，参数不同则在派生类中发生重写隐藏</strong>。</p>
<p>重载：同级调用的优先匹配问题。<br>重写隐藏：派生类优先调用派生类同名函数。<br>重写覆盖：无论是基类还是派生类的指针，指向派生类对象只能调用派生类同名函数。（详细的总结见L7 组合与继承的3.3节）</p>
<p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo()&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> )</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo(int )&quot;</span>&lt;&lt;endl;&#125;<span class="comment">///重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Derived1::foo(int )&quot;</span>&lt;&lt;endl;&#125; <span class="comment">/// 是重写覆盖</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">float</span> )</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;Derived2::foo(float )&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line"><span class="comment">/// 同名不同参，不是重写覆盖，是重写隐藏</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Derived1 d1;</span><br><span class="line">        Derived2 d2;</span><br><span class="line">        Base* p1 = &amp;d1;</span><br><span class="line">        Base* p2 = &amp;d2;</span><br><span class="line">        Derived2 &amp;tag=d2;</span><br><span class="line">        Derived2 *pointer=&amp;d2;</span><br><span class="line">        d1.Base::<span class="built_in">foo</span>();</span><br><span class="line">        d2.Base::<span class="built_in">foo</span>();</span><br><span class="line">        p1-&gt;<span class="built_in">foo</span>();</span><br><span class="line">        p2-&gt;<span class="built_in">foo</span>();</span><br><span class="line">        d1.<span class="built_in">foo</span>(<span class="number">3</span>); <span class="comment">///派生类定义同名同参数虚函数，发生重写覆盖。我们通常意义上的重写覆盖是希望基类指针调用派生类函数，此处直接用派生类对象，那必然调用派生类函数</span></span><br><span class="line">        d2.<span class="built_in">foo</span>(<span class="number">3.0</span>);   <span class="comment">///调用的是派生类foo(float )</span></span><br><span class="line">        p1-&gt;<span class="built_in">foo</span>(<span class="number">3</span>);  <span class="comment">///重写覆盖，虚函数表中是派生类的 foo(int )</span></span><br><span class="line">        p2-&gt;<span class="built_in">foo</span>(<span class="number">3.0</span>);   </span><br><span class="line">        d2.<span class="built_in">foo</span>(<span class="number">3.0</span>);</span><br><span class="line">        tag.<span class="built_in">foo</span>(<span class="number">3.0</span>);</span><br><span class="line">        pointer-&gt;<span class="built_in">foo</span>(<span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">output:</span><br><span class="line">Base::<span class="built_in">foo</span>()</span><br><span class="line">Base::<span class="built_in">foo</span>()</span><br><span class="line">Base::<span class="built_in">foo</span>()</span><br><span class="line">Base::<span class="built_in">foo</span>()</span><br><span class="line">Derived1::<span class="built_in">foo</span>(<span class="keyword">int</span> )</span><br><span class="line">Derived2::<span class="built_in">foo</span>(<span class="keyword">float</span> )</span><br><span class="line">Derived1::<span class="built_in">foo</span>(<span class="keyword">int</span> )</span><br><span class="line">Base::<span class="built_in">foo</span>(<span class="keyword">int</span> )</span><br><span class="line">Derived2::<span class="built_in">foo</span>(<span class="keyword">float</span> )</span><br><span class="line">Derived2::<span class="built_in">foo</span>(<span class="keyword">float</span> )</span><br><span class="line">Derived2::<span class="built_in">foo</span>(<span class="keyword">float</span> )</span><br></pre></td></tr></table></figure>
<p>首先，<code>d1.foo();</code>与 <code>d2.foo();</code>都不合法，由于派生类都定义了带参数的foo，基类foo()对实例不可见，(发生了redefining重写隐藏）故而这两句会报错，但是我们可以用Base::。</p>
<p>其次，<code>p1-&gt;foo();</code>时，派生类没有同名同参数覆盖掉基类虚函数，虚函数表继承基类的foo()虚函数，故而调用了基类的foo();</p>
<p>最后， <code>p2-&gt;foo(3.0);</code> 这里没有发生重写覆盖，发生了重写隐藏。在权限足够的时候，比如从派生类对象或者派生类指针可以直接访问优先级最高的同名函数。但是用基类指针的访问权限仅限于基类部分，无法访问定义在派生类部分的优先级最高的函数，故而只能访问基类定义的同名函数中匹配的一个。</p>
<p>例2：</p>
<p><img src="https://s2.loli.net/2022/01/12/Vr6vdYRGTnpu2Ft.png" alt="https://s2.loli.net/2022/01/12/Vr6vdYRGTnpu2Ft.png"></p>
<p>对于A，注意重写覆盖的条件：在派生类中定义基类虚函数的同名同参函数。此处(1)不是虚函数，所以不是重写覆盖，是重写隐藏。<br>对于D，首先，(5)不是重写覆盖，是重写隐藏，因而直接调用(5)。第二，基类函数对于派生类对象不可见，派生类对象或派生类指针引用哪怕warning也会先调用自身的函数。如果自身的函数没有一个可以调用的，哪怕基类函数有可以调用的，派生类对象宁愿error也不会调用基类函数。</p>
<h2 id="3-6-override-关键字"><a href="#3-6-override-关键字" class="headerlink" title="3.6 override 关键字"></a>3.6 override 关键字</h2><p>重写覆盖要满足的条件很多，很容易写错，可以使用override关键字辅助检查。override关键字明确地告诉编译器一个函数是对基类中一个虚函数的重写覆盖，编译器将对重写覆盖要满足的条件进行检查，正确的重写覆盖才能通过编译。如果没有override关键字，但是满足了重写覆盖的各项条件，也能实现重写覆盖。它只是编译器的一个检查，正确实现override时，对编译结果没有影响。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo()&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> )</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Base::foo(int )&quot;</span>&lt;&lt;endl;&#125; <span class="comment">///重载</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived1</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> )</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;Derived1::foo(int )&quot;</span>&lt;&lt;endl;&#125; <span class="comment">/// 是重写覆盖</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived2</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">float</span> )</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;Derived2::foo(float )&quot;</span>&lt;&lt;endl;&#125; <span class="comment">/// 误把参数写错了，不是重写覆盖，是重写隐藏,但是仍然通过了编译</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived3</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> )</span> <span class="keyword">override</span> </span>&#123;cout&lt;&lt;<span class="string">&quot;Derived3::foo(int )&quot;</span>&lt;&lt;endl;<span class="comment">/// 重写覆盖正确，与Derived1等价</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">float</span> )</span> <span class="keyword">override</span> </span>&#123;&#125;; <span class="comment">/// 参数不同，不是重写覆盖，编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;&#125;; <span class="comment">/// bar 非虚函数，编译错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="3-7-final-关键字"><a href="#3-7-final-关键字" class="headerlink" title="3.7  final 关键字"></a>3.7  final 关键字</h2><p>在虚函数声明或定义中使用final关键字后，确保函数为虚且不可被派生类重写。可在继承关系链的“中途”进行设定，禁止后续派生类对指定虚函数重写，但是派生类仍可调用该虚函数。</p>
<p>在类定义中使用时，final指定此类不可被继承。</p>
<p>格式：final写在继承类类名后，继承方式前。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">final</span> :</span> <span class="keyword">public</span> A&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>final和overide在修饰函数时，都只能修饰虚函数。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">final</span> </span>&#123;&#125;; <span class="comment">/// 重写覆盖，且是最终覆盖</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> <span class="keyword">final</span> </span>&#123;&#125;; <span class="comment">/// bar 非虚函数，编译错误</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">final</span> :</span> <span class="keyword">public</span> A&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;&#125;; <span class="comment">/// A::foo 已是最终覆盖，编译错误</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B&#123; <span class="comment">/// B 不能被继承，编译错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L6  引用与复制</title>
    <url>/2022/01/12/CS/OOP/L6%20%E5%BC%95%E7%94%A8%E4%B8%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<h1 id="L6-引用与复制"><a href="#L6-引用与复制" class="headerlink" title="L6 引用与复制"></a>L6 引用与复制</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>2.4.2 默认生成移动构造函数</li>
<li>3.2.3 例二：完整定义所有函数但禁用返回值优化后的执行顺序</li>
<li>结合第三次作业第二题讨论返回值优化</li>
<li>结合第三次作业第三题讨论delete与检测</li>
<li>结合第三次作业第三题讨论move与类型转换</li>
<li>结合第三次作业第三题讨论置空操作</li>
<li>9.3 类型转换的实例详述</li>
</ul>
</blockquote>
<hr>
<h1 id="一、常量引用"><a href="#一、常量引用" class="headerlink" title="一、常量引用"></a>一、常量引用</h1><h2 id="1-1-常量引用的意义"><a href="#1-1-常量引用的意义" class="headerlink" title="1.1  常量引用的意义"></a>1.1  常量引用的意义</h2><p>按照最小特权原则：给函数足够的权限去完成相应的任务，但不要给予他任何多余的权限。例如函数void add(int&amp; a, int&amp; b)，如果将参数类型定义为int&amp;，则给予该函数在函数体内修改a和b的值的权限。</p>
<p>如果我们不想给予函数修改权限，则可以在参数中使用常量/常量引用<code>void add(const int&amp; a, const int&amp; b)</code>。此时函数中仅能读取a和b的值，无法对a, b进行任何修改操作。</p>
<h1 id="二、拷贝构造函数"><a href="#二、拷贝构造函数" class="headerlink" title="二、拷贝构造函数"></a>二、拷贝构造函数</h1><h2 id="2-1-定义与语法规则"><a href="#2-1-定义与语法规则" class="headerlink" title="2.1  定义与语法规则"></a>2.1  定义与语法规则</h2><p>拷贝构造函数是一种特殊的构造函数，它的参数是语言规定的，是同类对象的常量引用。<br>作用：用参数对象的内容初始化当前对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector::<span class="built_in">Vector</span>(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    capacity = other.capacity;</span><br><span class="line">    len = other.len;</span><br><span class="line">    array = <span class="keyword">new</span> Node[other.capacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        array[i] =other.array[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-2-调用时机"><a href="#2-2-调用时机" class="headerlink" title="2.2  调用时机"></a>2.2  调用时机</h2><p>拷贝构造函数被调用的三种常见情况。在这些情况下，编译器会自动调用“拷贝构造函数”，在已有对象基础上生成新对象。</p>
<p>用一个类对象定义另一个新的类对象：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test a;<span class="function">Test <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">Test c=a;</span><br></pre></td></tr></table></figure>
<p>函数调用时以类的对象为形参</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Func</span>(Test a)</span><br></pre></td></tr></table></figure>
<p>函数返回类对象（无返回值优化的情况下）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Test <span class="title">Func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="2-3-隐式拷贝构造函数"><a href="#2-3-隐式拷贝构造函数" class="headerlink" title="2.3  隐式拷贝构造函数"></a>2.3  隐式拷贝构造函数</h2><p>类的新对象被定义后，会调用构造函数或拷贝构造函数。如果调用拷贝构造函数且当前没有给类显式定义拷贝构造函数，编译器将自动合成“隐式定义的拷贝构造函数”，其功能是调用所有数据成员的拷贝构造函数或拷贝赋值运算符。</p>
<p>对于基础类型来说，默认的拷贝方式为位拷贝(Bitwise Copy)，即直接对整块内存进行复制。</p>
<p>位拷贝原本是C中的概念。在C++中，只有基础类型（int, double等）才会进行位拷贝；对于自定义类，编译器会递归调用所有数据成员的拷贝构造函数或拷贝赋值运算符。但一些教材中仍然把这种行为称为“位拷贝”，以区别用户自定义的拷贝方法。</p>
<p>隐式定义拷贝构造函数的缺陷：隐式定义拷贝构造函数在遇到指针类型成员时可能会出错,导致多个指针类型的变量指向同一个地址。</p>
<h2 id="2-4-执行顺序"><a href="#2-4-执行顺序" class="headerlink" title="2.4  执行顺序"></a>2.4  执行顺序</h2><h3 id="2-4-1-基本的执行顺序"><a href="#2-4-1-基本的执行顺序" class="headerlink" title="2.4.1  基本的执行顺序"></a>2.4.1  基本的执行顺序</h3><p>以下述的func函数为例，调用该函数时，函数中各类构造函数和析构函数的执行顺序如下。</p>
<p><img src="https://s2.loli.net/2022/01/11/zNMXaWyvsr35Gb7.png" alt="https://s2.loli.net/2022/01/11/zNMXaWyvsr35Gb7.png"></p>
<p>值得一提的是，实际上在主函数体内，假设我们禁用返回值优化。<code>Myclass a= func(d);</code>这个语句内的返回值类构造调用了拷贝构造，并且相关的析构非常值得研究，下文将在移动构造函数的例子中将进一步阐述。</p>
<h3 id="2-4-2-例子"><a href="#2-4-2-例子" class="headerlink" title="2.4.2  例子"></a>2.4.2  例子</h3><p>（编译指令g++ test.cpp —std=c++11 -fno-elide-constructors –o test）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123; <span class="comment">//构造函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test()&quot;</span> &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; src) &#123; <span class="comment">//拷贝构造</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;)&quot;</span> &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123; <span class="comment">//析构函数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Test <span class="title">copyObj</span><span class="params">(Test obj)</span> </span>&#123; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;func()...&quot;</span> &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Test</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">    Test t;</span><br><span class="line">    t = <span class="built_in">copyObj</span>(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line"><span class="built_in">main</span>()...</span><br><span class="line"><span class="built_in">Test</span>()  <span class="comment">//main函数内初始化 Test</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;)<span class="comment">//func参数 拷贝构造</span></span><br><span class="line"><span class="built_in">func</span>()...</span><br><span class="line"><span class="built_in">Test</span>()   <span class="comment">//初始化 Test类的对象</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) <span class="comment">//返回时拷贝构造</span></span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">~<span class="built_in">Test</span>()</span><br><span class="line">~<span class="built_in">Test</span>()</span><br></pre></td></tr></table></figure>
<p>对应关系并不复杂，如下图所示：</p>
<p><img src="https://s2.loli.net/2022/01/11/KPIF2NO1WwmTDhS.png" alt="https://s2.loli.net/2022/01/11/KPIF2NO1WwmTDhS.png"></p>
<p>其实最有意思的是，这里对于返回类对象的构造。</p>
<p>我们在第三次作业第二题当中学习过：</p>
<blockquote>
<p>“在禁用返回值优化的条件下，如果一个函数的返回值是某个对象，那在函数返回前需要调用拷贝构造函数构建返回值。</p>
</blockquote>
<p>即使我返回的东西就是我传进来的形参对象，返回前的这次构造仍然会发生，也就是这道题中f1的第二次构造函数调用。</p>
<p>但是对于返回值的构造调用的到底是移动构造函数，还是拷贝构造函数，对此C++11有规定：在无返回值优化的情况下，默认调用移动构造函数。”</p>
<p>按此理解，此处构造返回值理应调用移动构造，而非拷贝构造，似乎产生了矛盾。然而，当我们显式定义了拷贝构造，编译器就不会默认生成移动构造了。从而禁用了返回值优化后，在返回值的构造当中调用了拷贝构造而非移动构造，因为编译器不会默认生成移动构造，我也没有自己定义。</p>
<p>更进一步，如果我显式定义了拷贝赋值，就不会默认生成移动赋值了。如果两个都不定义，两个都会默认生成。</p>
<h2 id="2-5-拷贝构造函数的缺陷"><a href="#2-5-拷贝构造函数的缺陷" class="headerlink" title="2.5  拷贝构造函数的缺陷"></a>2.5  拷贝构造函数的缺陷</h2><p>当类内含指针类型的成员时，拷贝构造函数会使得两个指正指向同一内存空间。在析构时，该内存空间可能被反复释放。为避免指针被重复删除，不应使用隐式定义的拷贝构造函数。</p>
<p>以及，当<strong>对象较大</strong>时，频繁的拷贝构造会造成程序<strong>效率的显著下降</strong>。</p>
<p>故而，正常情况下，应尽可能避免使用拷贝构造函数。</p>
<h2 id="2-6-解决方法"><a href="#2-6-解决方法" class="headerlink" title="2.6  解决方法"></a>2.6  解决方法</h2><ul>
<li>使用引用/常量引用传参数或返回对象；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">引用或常量引用传递参数</span><br><span class="line"><span class="built_in">func</span>(MyClass a)改为<span class="built_in">func</span>(<span class="keyword">const</span> MyClass&amp; a)</span><br><span class="line">返回值为引用</span><br><span class="line"><span class="function">MyClass <span class="title">func</span><span class="params">(…)</span>改为MyClass&amp; <span class="title">func</span><span class="params">(…)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>将拷贝构造函数声明为private；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="keyword">const</span> MyClass&amp;)&#123;&#125;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>()=<span class="keyword">default</span>;</span><br><span class="line">      ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>用delete关键字让编译器不生成拷贝构造函数的隐式定义版本。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>()=<span class="keyword">default</span>;</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="keyword">const</span> MyClass&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、移动构造函数"><a href="#三、移动构造函数" class="headerlink" title="三、移动构造函数"></a>三、移动构造函数</h1><h2 id="3-1-右值与右值引用"><a href="#3-1-右值与右值引用" class="headerlink" title="3.1  右值与右值引用"></a>3.1  右值与右值引用</h2><h3 id="3-1-1-左右值"><a href="#3-1-1-左右值" class="headerlink" title="3.1.1  左右值"></a>3.1.1  左右值</h3><p>左值：可以取地址、有名字的值。<br>右值：不能取地址、没有名字的值;常见于常值、函数返回值、表达式。<br>虽然右值不能取地址也没有名字，但是右值可以运算。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure>
<p>其中a、b、c为左值，1、func函数返回值、a+b的结果为右值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;&amp;a=<span class="built_in">x</span>()+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    a++;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>右值可以运算，且右值引用接收右值后也可以运算。</p>
<p>左值可以取地址，并且可以被&amp;引用(左值引用)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *d = &amp;a;  <span class="keyword">int</span> &amp;d = a;<span class="comment">//允许</span></span><br><span class="line"><span class="keyword">int</span> *e = &amp;(a + b); <span class="keyword">int</span> &amp;e = a + b; <span class="comment">//非法</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-右值引用"><a href="#3-1-2-右值引用" class="headerlink" title="3.1.2  右值引用"></a>3.1.2  右值引用</h3><p>虽然右值无法取地址，但可以被&amp;&amp;引用(右值引用)</p>
<p>右值引用可以绑定右值：<code>int &amp;&amp;e = a+b;</code></p>
<p>右值引用无法绑定左值：<code>int &amp;&amp;e=a;//该操作非法</code></p>
<p>总之，左值引用能绑定左值，右值引用能绑定右值。特例：<strong>常量左值引用能也绑定右值</strong>，因为常量左值引用不会改变内存空间的数据，故而不会影响右值。也可以实现绑定。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;e = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;e = a*b;</span><br></pre></td></tr></table></figure>
<p>注意到，所有的引用（包括右值引用）本身都是左值，结合该规则和上表便可判断各种构造函数、赋值运算符中传递参数和取返回值的引用绑定情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;&amp;a=<span class="built_in">x</span>()+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    a++;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> &amp;b=a;</span><br><span class="line">    b++;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">x</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>如此例，右值引用本身是左值，可以被取地址。</p>
<p>例一：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ref</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;left &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ref</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;right &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">ref</span>(a);</span><br><span class="line">    <span class="built_in">ref</span>(<span class="number">2</span>); <span class="comment">//2是一个常量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line">left <span class="number">1</span></span><br><span class="line">right <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>如果没有定义 ref(int &amp;&amp;x) 函数会发生什么？</p>
<p>ref (int&amp;x)的函数参数类型是一个左值引用，而2是一个右值，不能调用ref (int&amp;x)。因此没有可供调用的函数。<br>[Error] invalid initialization of non-const reference of type ‘int&amp;’ from an rvalue of type ‘int’。</p>
<p>例二：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ref</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;left &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ref</span><span class="params">(<span class="keyword">int</span> &amp;&amp;x)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;right &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">ref</span>(x); <span class="comment">//调用哪一个函数？</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ref</span>(<span class="number">1</span>); <span class="comment">//1是一个常量</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//EncryptStratgy.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncryptStrategy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">encode</span><span class="params">(std::string mes)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertStrategy</span>:</span><span class="keyword">public</span> EncryptStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">string <span class="title">encode</span><span class="params">(string mes)</span></span>&#123;</span><br><span class="line">		string s=<span class="string">&quot;#&quot;</span>;</span><br><span class="line">		string tmp=mes;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tmp.<span class="built_in">size</span>();i=i+<span class="number">2</span>)&#123;</span><br><span class="line">			tmp.<span class="built_in">insert</span>(i,s);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> tmp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvertStrategy</span>:</span><span class="keyword">public</span> EncryptStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">string <span class="title">encode</span><span class="params">(string mes)</span></span>&#123;</span><br><span class="line">		string temp=mes;</span><br><span class="line">		<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=mes.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			temp[cnt]=mes[i];</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//verificationstrategy.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerificationStrategy</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">verify</span><span class="params">(std::string mes)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrefixStrategy</span>:</span><span class="keyword">public</span> VerificationStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">string <span class="title">verify</span><span class="params">(string mes)</span></span>&#123;</span><br><span class="line">		string ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">			ans.<span class="built_in">push_back</span>(mes[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntervalStrategy</span>:</span><span class="keyword">public</span> VerificationStrategy&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">string <span class="title">verify</span><span class="params">(string mes)</span></span>&#123;</span><br><span class="line">		string ans;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mes.<span class="built_in">size</span>();i=i+<span class="number">2</span>)&#123;</span><br><span class="line">			ans.<span class="built_in">push_back</span>(mes[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//userproxy.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;User.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;VerificationStrategy.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;EncryptStrategy.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserProxy</span>:</span><span class="keyword">public</span> User&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    RealUser* m_real;</span><br><span class="line">    EncryptStrategy* m_encrypt;</span><br><span class="line">    VerificationStrategy* m_veri;</span><br><span class="line">    <span class="built_in">UserProxy</span>(RealUser* r_u,EncryptStrategy* e_s,VerificationStrategy* v_s):<span class="built_in">m_real</span>(r_u),<span class="built_in">m_encrypt</span>(e_s),<span class="built_in">m_veri</span>(v_s)&#123;&#125;;</span><br><span class="line">    ~<span class="built_in">UserProxy</span>()&#123;</span><br><span class="line">        <span class="keyword">delete</span> m_real;</span><br><span class="line">        <span class="keyword">delete</span> m_encrypt;</span><br><span class="line">        <span class="keyword">delete</span> m_veri;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(string mes)</span></span>&#123;</span><br><span class="line">        string temp=m_encrypt-&gt;<span class="built_in">encode</span>(mes);</span><br><span class="line">        m_real-&gt;<span class="built_in">sendMessage</span>(temp);</span><br><span class="line">        cout&lt;&lt;m_veri-&gt;<span class="built_in">verify</span>(mes)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">输出：</span><br><span class="line">right <span class="number">1</span></span><br><span class="line">left <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如前文所述，所有引用本身都是左值，故而ref(1)首先调用ref(int &amp;&amp;x)函数，此时右值引用x为左值，因此ref(x)调用ref(int &amp;x)函数。</p>
<h2 id="3-2-移动构造函数"><a href="#3-2-移动构造函数" class="headerlink" title="3.2  移动构造函数"></a>3.2  移动构造函数</h2><h3 id="3-2-1-定义与意义"><a href="#3-2-1-定义与意义" class="headerlink" title="3.2.1  定义与意义"></a>3.2.1  定义与意义</h3><p>右值引用可以延续即将销毁变量的生命周期，用于构造函数可以提升处理效率，在此过程中尽可能少地进行拷贝。</p>
<p>使用右值引用作为参数的构造函数叫做移动构造函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ClassName</span>(ClassName&amp;&amp; VariableName);</span><br></pre></td></tr></table></figure>
<h3 id="3-2-2-两种构造本质区别"><a href="#3-2-2-两种构造本质区别" class="headerlink" title="3.2.2  两种构造本质区别"></a>3.2.2  两种构造本质区别</h3><p>移动构造函数与拷贝构造函数最主要的差别就是类中堆内存是重新开辟并拷贝，还是直接将指针指向那块地址。对于一些即将析构的临时类，移动构造函数直接利用了原来临时对象中的堆内存，新的对象无需开辟内存，临时对象无需释放内存，从而大大提高计算效率。</p>
<h3 id="3-2-3-例子"><a href="#3-2-3-例子" class="headerlink" title="3.2.3  例子"></a>3.2.3  例子</h3><p>例1：完整定义所有函数以及启用返回值优化</p>
<p>g++ test.cpp —std=c++11 -o test</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> * buf; <span class="comment">//// only for demo.</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//申请一块内存</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (buf) <span class="keyword">delete</span>[] buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; t) : <span class="built_in">buf</span>(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">            buf[i] = t.buf[i]; <span class="comment">//拷贝数据</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;) called. this-&gt;buf @ &quot;</span></span><br><span class="line">            &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(Test&amp;&amp; t) : <span class="built_in">buf</span>(t.buf) &#123; <span class="comment">//直接复制地址，避免拷贝</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(Test&amp;&amp;) called. this-&gt;buf @ &quot;</span></span><br><span class="line">            &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">        t.buf = <span class="literal">nullptr</span>; <span class="comment">//将t.buf改为nullptr，使其不再指向原来内存区域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Test <span class="title">GetTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test tmp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GetTemp(): tmp.buf @ &quot;</span></span><br><span class="line">        &lt;&lt; hex &lt;&lt; tmp.buf &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Test t)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun(Test t): t.buf @ &quot;</span></span><br><span class="line">        &lt;&lt; hex &lt;&lt; t.buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test a = <span class="built_in">GetTemp</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main() : a.buf @ &quot;</span> &lt;&lt; hex &lt;&lt; a.buf &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x7fa908c04b90</span></span><br><span class="line"><span class="built_in">GetTemp</span>(): tmp.buf @ <span class="number">0x7fa908c04b90</span></span><br><span class="line"><span class="built_in">main</span>() : a.buf @ <span class="number">0x7fa908c04b90</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. </span><br><span class="line">     <span class="keyword">this</span>-&gt;buf @ <span class="number">0x7fa908c04ba0</span></span><br><span class="line"><span class="built_in">fun</span>(Test t): t.buf @ <span class="number">0x7fa908c04ba0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x7fa908c04ba0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x7fa908c04b90</span></span><br></pre></td></tr></table></figure>
<p>没有调用移动构造函数，也少调用了几次拷贝构造函数。</p>
<p>关键点在于，返回值优化之后不会通过移动构造来构造返回值类，也不会通过移动构造来构造a，实现了直接return。</p>
<p>例2：完整定义所有函数但禁用返回值优化</p>
<p>g++ test.cpp —std=c++11 -fno-elide-constructors -o test</p>
<p>这里课件上的注释有些误导，我在rextester输出该段代码，采用的指令为g++-Wall -std=c++14 -O2 -fno-elide-constructors -o a.out source_file.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">output：</span><br><span class="line"><span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616ae70</span></span><br><span class="line"><span class="built_in">GetTemp</span>(): tmp.buf @ <span class="number">0x563a2616ae70</span></span><br><span class="line"><span class="built_in">Test</span>(Test&amp;&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616ae70</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0</span></span><br><span class="line"><span class="built_in">Test</span>(Test&amp;&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616ae70</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0</span></span><br><span class="line"><span class="built_in">main</span>() : a.buf @ <span class="number">0x563a2616ae70</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616beb0</span></span><br><span class="line"><span class="built_in">fun</span>(Test t): t.buf @ <span class="number">0x563a2616beb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616beb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x563a2616ae70</span></span><br></pre></td></tr></table></figure>
<p>禁用返回值优化但是同时定义了移动构造函数，故而需要通过移动构造来构造返回值类。之后立刻将tmp析构(由于移动构造已经将tmp的指针置空了，故而buf地址为0)，但是没有析构返回值类GetTemp。返回值类GetTemp对a移动构造，这使得GetTemp的buf地址也为0。这一步移动构造后，马上析构了GetTemp。</p>
<p>综上所述，<code>Test a = GetTemp();</code>这一语句的执行顺序是先构造tmp，移动构造返回值类。立刻析构tmp，返回值类移动构造a，接着析构返回值类。</p>
<p>结合例子2.4.1，我们来探究下4,5和返回值类在禁用返回值优化条件下的析构顺序。测试代码如下，编译指令为g++-Wall -std=c++14 -O2 -fno-elide-constructors -o a.out source_file.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> * buf; <span class="comment">//// only for demo.</span></span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//申请一块内存</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;~Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">if</span> (buf) <span class="keyword">delete</span>[] buf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; t) : <span class="built_in">buf</span>(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">            buf[i] = t.buf[i]; <span class="comment">//拷贝数据</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;) called. this-&gt;buf @ &quot;</span></span><br><span class="line">            &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Test</span>(Test&amp;&amp; t) : <span class="built_in">buf</span>(t.buf) &#123; <span class="comment">//直接复制地址，避免拷贝</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Test(Test&amp;&amp;) called. this-&gt;buf @ &quot;</span></span><br><span class="line">            &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">        t.buf = <span class="literal">nullptr</span>; <span class="comment">//将t.buf改为nullptr，使其不再指向原来内存区域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Test <span class="title">GetTemp</span><span class="params">(Test x)</span> </span>&#123;</span><br><span class="line">    Test tmp;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;GetTemp(): tmp.buf @ &quot;</span></span><br><span class="line">        &lt;&lt; hex &lt;&lt; tmp.buf &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Test t)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;fun(Test t): t.buf @ &quot;</span></span><br><span class="line">        &lt;&lt; hex &lt;&lt; t.buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test d;</span><br><span class="line">    Test a = <span class="built_in">GetTemp</span>(d);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;main() : a.buf @ &quot;</span> &lt;&lt; hex &lt;&lt; a.buf &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">fun</span>(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line"><span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c2e70</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3eb0</span></span><br><span class="line"><span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line"><span class="built_in">GetTemp</span>(): tmp.buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line"><span class="built_in">Test</span>(Test&amp;&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0</span></span><br><span class="line"><span class="built_in">Test</span>(Test&amp;&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3eb0</span></span><br><span class="line"><span class="built_in">main</span>() : a.buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3eb0</span></span><br><span class="line"><span class="built_in">fun</span>(Test t): t.buf @ <span class="number">0x5572ec8c3eb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3eb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c3ee0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5572ec8c2e70</span></span><br></pre></td></tr></table></figure>
<p>可以发现，先拷贝构造了x，接着构造tmp，移动构造GetTemp，马上析构tmp，移动构造a，析构GetTemp，析构x。故4和5之间可能还会进行非常多的操作。</p>
<p>例3：删除移动构造函数且禁用返回值优化</p>
<p>编译指令g++-Wall -std=c++14 -O2 -fno-elide-constructors -o a.out source_file.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> * buf; <span class="comment">//// only for demo.</span></span><br><span class="line"><span class="built_in">Test</span>() &#123;</span><br><span class="line">buf = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//申请一块内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Test</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;~Test(): this-&gt;buf @ &quot;</span> &lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (buf) <span class="keyword">delete</span>[] buf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; t) : <span class="built_in">buf</span>(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) </span><br><span class="line">buf[i] = t.buf[i]; <span class="comment">//拷贝数据</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Test(const Test&amp;) called. this-&gt;buf @ &quot;</span></span><br><span class="line">&lt;&lt; hex &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Test <span class="title">GetTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Test tmp;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;GetTemp(): tmp.buf @ &quot;</span></span><br><span class="line">&lt;&lt; hex &lt;&lt; tmp.buf &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Test t)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;fun(Test t): t.buf @ &quot;</span></span><br><span class="line">&lt;&lt; hex &lt;&lt; t.buf &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Test a = <span class="built_in">GetTemp</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;main() : a.buf @ &quot;</span> &lt;&lt; hex &lt;&lt; a.buf &lt;&lt; endl;</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e8e70</span></span><br><span class="line"><span class="built_in">GetTemp</span>(): tmp.buf @ <span class="number">0x5638c49e8e70</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e9eb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e8e70</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e8e70</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e9eb0</span></span><br><span class="line"><span class="built_in">main</span>() : a.buf @ <span class="number">0x5638c49e8e70</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp;) called. <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e9eb0</span></span><br><span class="line"><span class="built_in">fun</span>(Test t): t.buf @ <span class="number">0x5638c49e9eb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e9eb0</span></span><br><span class="line">~<span class="built_in">Test</span>(): <span class="keyword">this</span>-&gt;buf @ <span class="number">0x5638c49e8e70</span></span><br></pre></td></tr></table></figure>
<p>这里只有拷贝构造，编译器没有默认生成移动构造。拷贝构造了返回值类后，立刻析构了tmp，释放了尾号为70的空间。注意到，空间释放之后马上就可以再次被使用，所以返回值类去拷贝构造a时，用的便是上次被析构释放出来的尾号为70的空间。接下来析构掉返回值类，释放了尾号为b0的空间，下一次fun(a)当中对形参的拷贝构造马上就利用了b0空间。</p>
<h2 id="3-3-移动语句"><a href="#3-3-移动语句" class="headerlink" title="3.3  移动语句"></a>3.3  移动语句</h2><h3 id="3-3-1-语法与意义"><a href="#3-3-1-语法与意义" class="headerlink" title="3.3.1  语法与意义"></a>3.3.1  语法与意义</h3><p>移动构造函数加快了右值初始化的构造速度，故而希望对左值调用移动构造函数以加快左值初始化的构造速度。</p>
<p>std::move函数<br>输入：左值（包括变量等，该左值一般不再使用。移动后就不能再次使用）<br>返回值：该左值对应的右值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test a;</span><br><span class="line">Test b = std::<span class="built_in">move</span>(a) </span><br><span class="line"><span class="comment">//对于上个实例中定义的Test类，该处调用移动构造函数对b进行初始化</span></span><br></pre></td></tr></table></figure>
<p>move函数本身不对对象做任何操作，<strong>仅做类型转换</strong>，即转换为右值。移动的具体操作在移动构造函数内实现。</p>
<p>右值引用结合std::move可以显著提高swap函数的性能。</p>
<p>std::move引起移动构造函数或移动赋值运算的调用。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in">swap</span>(T&amp; a, T&amp; b) &#123; </span><br><span class="line">     <span class="function">T <span class="title">tmp</span><span class="params">(a)</span></span>; <span class="comment">//copy a to tmp </span></span><br><span class="line">     a = b; <span class="comment">//copy b to a </span></span><br><span class="line">     b = tmp; <span class="comment">//copy tmp to b </span></span><br><span class="line">&#125;</span><br><span class="line">改写为：</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in">swap</span>(T&amp; a, T&amp; b) &#123; </span><br><span class="line">     <span class="function">T <span class="title">tmp</span><span class="params">(std::move(a))</span></span>;</span><br><span class="line">     a = std::<span class="built_in">move</span>(b);</span><br><span class="line">     b = std::<span class="built_in">move</span>(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>避免3次不必要的拷贝操作</p>
<h3 id="3-3-2-例子"><a href="#3-3-2-例子" class="headerlink" title="3.3.2  例子"></a>3.3.2  例子</h3><p>禁用返回值优化</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test()\n&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//默认构造函数</span></span><br><span class="line">    ~<span class="built_in">Test</span>() &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;~Test()\n&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//析构函数</span></span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test &amp;con) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Test(const Test &amp;con)\n&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//拷贝构造函数  </span></span><br><span class="line"><span class="function">Test <span class="title">func</span><span class="params">(Test a)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Test</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Test a;</span><br><span class="line">  Test b = <span class="built_in">func</span>(a);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//我们用(1+)和(1-)这样的形式来对应类的构造和析构。</span></span><br><span class="line">output:</span><br><span class="line"><span class="built_in">Test</span>()                  <span class="comment">//(1+) 执行Test a；</span></span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test &amp;con) <span class="comment">//(2+)Test b = func(a);</span></span><br><span class="line">                        <span class="comment">//func(a)传参调用拷贝构造函数</span></span><br><span class="line"><span class="built_in">Test</span>()                  <span class="comment">//(3+)return Test();</span></span><br><span class="line">                        <span class="comment">//Test()对应的构造函数</span></span><br><span class="line"><span class="built_in">Test</span>(Test &amp;&amp;con)        <span class="comment">//(4+)return Test();</span></span><br><span class="line">                        <span class="comment">//为了传值调用的移动构造函数</span></span><br><span class="line">~<span class="built_in">Test</span>()                 <span class="comment">//(3-)return Test();</span></span><br><span class="line">                        <span class="comment">//Test()对应的析构函数</span></span><br><span class="line"><span class="built_in">Test</span>(Test &amp;&amp;con)        <span class="comment">//(5+)Test b = func(a);</span></span><br><span class="line">                        <span class="comment">//中给b传值时调用的移动构造函数</span></span><br><span class="line">~<span class="built_in">Test</span>()                 <span class="comment">//(4-)Test b = func(a);</span></span><br><span class="line">                       <span class="comment">//完成赋值后func(a)返回值对应的析构函数</span></span><br><span class="line">~<span class="built_in">Test</span>()                <span class="comment">//(2-)Test b = func(a);</span></span><br><span class="line">                       <span class="comment">//参数释放对应的析构函数</span></span><br><span class="line">~<span class="built_in">Test</span>()                <span class="comment">//(5-) 析构b</span></span><br><span class="line">~<span class="built_in">Test</span>()                <span class="comment">//(1-) 析构a</span></span><br></pre></td></tr></table></figure>
<p>这当中的析构顺序和3.2.3 例二完全相同。</p>
<h2 id="3-4-两类构造函数的调用时机"><a href="#3-4-两类构造函数的调用时机" class="headerlink" title="3.4  两类构造函数的调用时机"></a>3.4  两类构造函数的调用时机</h2><h3 id="3-4-1-判断依据"><a href="#3-4-1-判断依据" class="headerlink" title="3.4.1  判断依据"></a>3.4.1  判断依据</h3><p>引用的绑定规则：</p>
<p>拷贝构造函数的形参类型为常量左值引用，可以绑定常量左值、左值和右值。移动构造函数的形参类型为右值引用，可以绑定右值。引用的绑定存在优先级，例如常量左值引用和右值引用均能绑定右值，当传入实参类型为右值时优先匹配形参类型为右值引用的函数。</p>
<h3 id="3-4-2-拷贝构造函数的常见调用时机"><a href="#3-4-2-拷贝构造函数的常见调用时机" class="headerlink" title="3.4.2  拷贝构造函数的常见调用时机"></a>3.4.2  拷贝构造函数的常见调用时机</h3><p>用一个类对象/引用/常量引用初始化另一个新的类对象<br>以类的对象为函数形参，传入实参为类的对象/引用/常量引用<br>函数返回类对象（类中未显式定义移动构造函数，不进行返回值优化）</p>
<h3 id="3-4-3-移动构造函数的常见调用时机"><a href="#3-4-3-移动构造函数的常见调用时机" class="headerlink" title="3.4.3  移动构造函数的常见调用时机"></a>3.4.3  移动构造函数的常见调用时机</h3><p>用一个类对象的右值初始化另一个新的类对象（常配合std::move函数一起使用）: <code>Test b = func(a); Test b = std::move(a);</code> 与<code>Test b = a;</code> 不同</p>
<p>以类的对象为函数形参,传入实参为类对象的右值(常配合std::move函数使用):<code>func(Test());func(std::move(a));</code></p>
<p>与func(a)不同函数返回类对象（类中显式定义移动构造函数，不进行返回值优化）: <code>&#123;return Test(); or return tmp;&#125;</code>均调用移动构造</p>
<p><img src="https://s2.loli.net/2022/01/11/upOzJL2Vgl9PYfB.png" alt="https://s2.loli.net/2022/01/11/upOzJL2Vgl9PYfB.png"></p>
<p>注意到D是错的，返回值虽然是非静态临时变量的常量左值引用，但是返回类型根本不是引用，并不是返回临时变量的引用。</p>
<h1 id="四、拷贝与移动赋值运算符"><a href="#四、拷贝与移动赋值运算符" class="headerlink" title="四、拷贝与移动赋值运算符"></a>四、拷贝与移动赋值运算符</h1><h2 id="4-1-拷贝赋值运算符定义与意义"><a href="#4-1-拷贝赋值运算符定义与意义" class="headerlink" title="4.1  拷贝赋值运算符定义与意义"></a>4.1  拷贝赋值运算符定义与意义</h2><p>已定义的对象之间相互赋值，可通过调用对象的“拷贝赋值运算符函数”来实现的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> ClassName&amp; right) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;right) &#123;<span class="comment">// 避免自己赋值给自己</span></span><br><span class="line">        <span class="comment">// 将right对象中的内容拷贝到当前对象中...</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意作出区分：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ClassName a;</span><br><span class="line">ClassName b;</span><br><span class="line">a = b;</span><br><span class="line"><span class="comment">//此处为拷贝复制运算</span></span><br><span class="line">ClassName a = b;</span><br><span class="line"><span class="comment">//此处为定义新对象</span></span><br></pre></td></tr></table></figure>
<p>赋值重载函数必须要是类的非静态成员函数(non-static member function)，不能是友元函数。因为复制运算是对于这个类而言的，显然是类函数。同时，赋值运算依赖于具体的对象，不能是静态的。（详见L4 创建与销毁2笔记）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> Test&amp; right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;right)  cout &lt;&lt; <span class="string">&quot;same obj!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">            buf[i] = right.buf[i];  <span class="comment">//拷贝数据</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;operator=(const Test&amp;) called.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-2-移动赋值运算符作用与意义"><a href="#4-2-移动赋值运算符作用与意义" class="headerlink" title="4.2  移动赋值运算符作用与意义"></a>4.2  移动赋值运算符作用与意义</h2><p>和移动构造函数原理类似</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Test&amp; <span class="keyword">operator</span>= (Test&amp;&amp; right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;right)  cout &lt;&lt; <span class="string">&quot;same obj!\n&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">this</span>-&gt;buf = right.buf;  <span class="comment">//直接赋值地址</span></span><br><span class="line">        right.buf = <span class="literal">nullptr</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;operator=(Test&amp;&amp;) called.\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">swap</span>(Test&amp; a, Test&amp; b) &#123; </span><br><span class="line">     <span class="function">Test <span class="title">tmp</span><span class="params">(std::move(a))</span></span>; <span class="comment">// 第一行调用移动构造函数</span></span><br><span class="line">     a = std::<span class="built_in">move</span>(b);       <span class="comment">// std::move的结果为右值引用，</span></span><br><span class="line">     b = std::<span class="built_in">move</span>(tmp); <span class="comment">// 后两行均调用移动赋值运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-3-调用时机"><a href="#4-3-调用时机" class="headerlink" title="4.3  调用时机"></a>4.3  调用时机</h2><p>和拷贝/移动构造函数的调用时机类似，主要判断依据是引用的绑定规则</p>
<p>拷贝赋值运算符函数的形参类型为常量左值引用，可以绑定常量左值、左值和右值</p>
<p>移动赋值运算符函数的形参类型为右值引用，可以绑定右值(常量、表达式、函数返回)</p>
<p>引用的绑定存在优先级，例如常量左值引用和右值引用均能绑定右值，当赋值运算符右侧为右值时优先匹配形参类型为右值引用的赋值运算符函数</p>
<p>根据赋值运算符右侧变量的类型决定调用拷贝或移动赋值运算符函数</p>
<h2 id="4-4-自动合成的函数与运算符"><a href="#4-4-自动合成的函数与运算符" class="headerlink" title="4.4  自动合成的函数与运算符"></a>4.4  自动合成的函数与运算符</h2><p>类中特殊的成员函数/运算符，即便用户不显式定义，编译器也会根据自身需要自动合成。</p>
<p>默认构造函数<br>拷贝构造函数<br>移动构造函数（C++11起）<br>拷贝赋值运算符<br>移动赋值运算符（C++11起）<br>析构函数</p>
<h1 id="五、返回值优化"><a href="#五、返回值优化" class="headerlink" title="五、返回值优化"></a>五、返回值优化</h1><p>该部分主要是第三次作业第二题的解析，建议结合阅读。</p>
<h2 id="5-1-优化条件"><a href="#5-1-优化条件" class="headerlink" title="5.1  优化条件"></a>5.1  优化条件</h2><ol>
<li>return的值类型与函数前面的返回值类型相同。</li>
<li>return的是一个局部对象的左值。</li>
</ol>
<h2 id="5-2-优化意义"><a href="#5-2-优化意义" class="headerlink" title="5.2  优化意义"></a>5.2  优化意义</h2><ol>
<li>在禁用返回值优化的条件下，如果一个函数的返回值是某个对象，那在函数返回前需要调用构造函数构建返回值。</li>
<li>即使我返回的东西就是我传进来的形参对象，返回前的这次构造仍然会发生，也就是这道题中f1的第二次构造函数调用。</li>
<li>但是对于返回值的构造调用的到底是移动构造函数，还是拷贝构造函数，对此C++11有规定：在无返回值优化的情况下，默认调用移动构造函数。</li>
<li>综上所述，返回一个局部对象的左值，通过移动构造构造返回值，返回值再移动赋值或移动构造给主函数语句。</li>
</ol>
<h2 id="5-3-优化实例"><a href="#5-3-优化实例" class="headerlink" title="5.3  优化实例"></a>5.3  优化实例</h2><ul>
<li>如果开启了返回值优化，那么如果我的函数里新定义了一个Test对象。（比如：Test tmp; return tmp;)那编译器会给我优化，先用构造函数构造tmp，然后直接返回tmp。</li>
<li>这里甚至不会调用移动构造，也就是说甚至不是用tmp移动构造了要返回的对象，就是直接返回。</li>
<li>但如果没有开启优化，会首先调用默认构造函数构造tmp，然后调用移动构造函数将用tmp移动构造返回值。</li>
</ul>
<h2 id="5-4-返回值构造"><a href="#5-4-返回值构造" class="headerlink" title="5.4  返回值构造"></a>5.4  返回值构造</h2><ul>
<li>如果返回值是普通的Test的话，那么函数返回时需要根据return后面的表达式来构造一个Test对象，所以才有移动构造或者拷贝构造的事情。</li>
<li>如果函数返回类型是const &amp;或者&amp;，那return的时候就没必要再构造新的对象了，直接返回相应的引用。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">(<span class="number">5</span>)<span class="function"><span class="keyword">const</span> Test&amp; <span class="title">F</span><span class="params">(<span class="keyword">const</span> Test&amp; a)</span></span>&#123;</span><br><span class="line">    Test b = a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Test</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Test a;</span><br><span class="line">    <span class="keyword">const</span> Test &amp;A = <span class="built_in">F</span>(std::<span class="built_in">move</span>(a));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>比如此处，由于我的函数返回类型为引用，故而直接返回了返回值的引用。也就是Test(1)的常量左值引用。但是，在函数结束之后，这个常值引用所引用的Test(1)就被析构了，那这个常值引用就没用了。</p>
<p>总而言之，F的返回类型是一个常量左值引用，而返回值是Test(1)这一临时变量。临时变量会在函数体结束后被析构，从而引用失效。故而不能返回临时变量的引用，从而编译错误。</p>
<p>不过，Test(1)感觉只是个临时的右值，这能称为临时变量吗？<br>实际上是可以的，如果去看编译得到的汇编码，<code>return test(1);</code>和<code>Test ret = test(1); return ret;</code>生成的汇编码是一样的。</p>
<h2 id="5-5-例子"><a href="#5-5-例子" class="headerlink" title="5.5  例子"></a>5.5  例子</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Test</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; t)&#123;&#125;</span><br><span class="line">    <span class="built_in">Test</span>(Test&amp;&amp; t)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Test <span class="title">fn1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test tmp; <span class="keyword">return</span> tmp; <span class="comment">//(1)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Test&amp;&amp; <span class="title">fn2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test tmp; <span class="keyword">return</span> <span class="built_in">move</span>(tmp); <span class="comment">//(2)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Test <span class="title">fn3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test tmp; <span class="keyword">return</span> <span class="built_in">move</span>(tmp); <span class="comment">//(3)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Test&amp; a = <span class="built_in">fn1</span>(); <span class="comment">//(4)</span></span><br><span class="line">    Test&amp;&amp; b = <span class="built_in">fn1</span>(); <span class="comment">//(5)</span></span><br><span class="line">    Test c = <span class="built_in">fn1</span>(); <span class="comment">//(6)</span></span><br><span class="line">    Test&amp;&amp; d = <span class="built_in">fn2</span>(); <span class="comment">//(7)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建议做法包括(1)(4)(5)(6),避免多余拷贝，优化资源利用</p>
<p>Test fn1(); 满足返回值优化条件<br>可利用常量左值引用(2)，右值引用(5)，构造新对象(7)的方式接收返回值<br>不建议做法包括(2)(3)(7)<br>(2)(7) d会指向被析构的tmp，出现运行错误<br>std::move()将左值转变为右值，不进行返回值优化，(3)会移动构造临时变量</p>
<p>关于(2)(7)，首先记住，如果返回引用，只有返回常量局部变量的左值引用是合法的，其他的都不合法。即使在某些编译器上通过了，也很危险。在较为严格的编译器上不一定能通过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp;<span class="title">func</span><span class="params">()</span></span>&#123;<span class="keyword">static</span> <span class="keyword">int</span> x=<span class="number">0</span>;<span class="keyword">return</span> x;&#125;</span><br></pre></td></tr></table></figure>
<p>用此处(2)(7)举例，(2)(7)的意思是返回了一个右值的右值引用，把这个右值引用的返回值赋值给了一个右值引用。</p>
<p>我们写出如下一个类似的例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp;&amp;<span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">move</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>&amp;&amp;x=<span class="built_in">func</span>()+<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>采用glot平台运行，output：2</p>
<p>采用retexter平台运行，编译指令采用clang++-Wall -std=c++14 -stdlib=libc++ -O2 -o a.out source_file.cpp，输出结果为完全不确定的整数。虽然直觉上可以完成赋值，但是由于tmp不是静态局部变量，逐语句结束后会被析构，导致x在访问非法内存。</p>
<p>采用retexter平台运行，编译指令采用g++—Wall -std=c++14 -O2 -o a.out source_file.cpp，输出结果为1，warning如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1944460822</span>/source.cpp: In function <span class="string">&#x27;int&amp;&amp; func()&#x27;</span>:</span><br><span class="line"><span class="number">1944460822</span>/source.cpp:<span class="number">5</span>:<span class="number">25</span>: warning: function returns address of local variable [-Wreturn-local-addr]</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">move</span>(tmp);</span><br><span class="line">                         ^</span><br><span class="line"><span class="number">1944460822</span>/source.cpp:<span class="number">4</span>:<span class="number">9</span>: note: declared here</span><br><span class="line">     <span class="keyword">int</span> tmp=<span class="number">1</span>;</span><br><span class="line">         ^~~</span><br><span class="line"><span class="number">1944460822</span>/source.cpp: In function ‘<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>’:</span></span><br><span class="line"><span class="function"><span class="number">1944460822</span>/source.cpp:<span class="number">8</span>:<span class="number">19</span>: warning: ‘tmp’ is used uninitialized in this function [-Wuninitialized]</span></span><br><span class="line"><span class="function">     int&amp;&amp;x=</span><span class="built_in">func</span>()+<span class="number">1</span>;</span><br><span class="line">                   ^</span><br></pre></td></tr></table></figure>
<p>总而言之，返回非静态临时变量的引用风险极大。</p>
<p>备注：这个例子本身并不太好。如果实在想检测这样的函数，不应该用int类型。因为int是编译器自带的基本类型，采用过多的优化，故而glot输出2也是合理的。这样的检测最好使用自定义类型并完整地定义所有的构造，析构，拷贝构造，移动构造，移动赋值与拷贝赋值，确保编译器优化不多。</p>
<h1 id="六、delete-与检测"><a href="#六、delete-与检测" class="headerlink" title="六、delete 与检测"></a>六、delete 与检测</h1><p>该部分为第三次作业第三题的解析，建议结合阅读</p>
<hr>
<h2 id="6-1-Delete-的意义"><a href="#6-1-Delete-的意义" class="headerlink" title="6.1  Delete 的意义"></a>6.1  Delete 的意义</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span>[]array;<span class="comment">//delete：释放指针指向的内存区</span></span><br></pre></td></tr></table></figure>
<p>故而delete之后，内存区的数据就清除了。</p>
<p>delete释放的是指针指向的内存空间，指针变量本身仍然存在可以使用（用于赋值etc）。但是调用array[i]会产生运行时错误segmentation fault，因为它没有指向一块内存空间用于存储数据。</p>
<p>清除不等同于设为0。而且实际上，在这道题里面，如果delete之后还把array[i]赋值为0，不仅没有意义（因为内存已经被清除了），而且会因为调用了多次Node的拷贝构造函数而浪费了效率。比如下面这个写法纯属浪费效率，还有错误。在delete[]array;语句后，如果想进行赋值为0的操作，array要重新申请指向一块内存。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector&amp;Vector::<span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;	<span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;array != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;<span class="keyword">delete</span>[]array;&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; capacity; i++)</span><br><span class="line">        &#123;array[i] = <span class="number">0</span>;&#125;......&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-2-Delete的检测"><a href="#6-2-Delete的检测" class="headerlink" title="6.2  Delete的检测"></a>6.2  Delete的检测</h2><p>建议在delete前检测指针是否为空指针，因为空指针delete会报错。</p>
<h2 id="6-3-赋值的检测"><a href="#6-3-赋值的检测" class="headerlink" title="6.3  赋值的检测"></a>6.3  赋值的检测</h2><p>和delete相似，建议赋值也要先进行检测，避免浪费效率</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector&amp;Vector::<span class="keyword">operator</span>=(<span class="keyword">const</span> Vector&amp; other)</span><br><span class="line">&#123;	   <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other) </span><br><span class="line">        <span class="comment">//建议赋值的时候检测是否相同，检测的原理本质上就是检测地址是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;array != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123; <span class="keyword">delete</span>[]array; &#125;......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="七、move-与类型转换"><a href="#七、move-与类型转换" class="headerlink" title="七、move 与类型转换"></a>七、move 与类型转换</h1><p>该部分为第三次作业第二题的解析，建议结合阅读</p>
<hr>
<h2 id="7-1-move-的意义"><a href="#7-1-move-的意义" class="headerlink" title="7.1  move 的意义"></a>7.1  move 的意义</h2><p>move的作用就是仅仅把左右值这个属性改为右值，其余的属性不变。</p>
<h2 id="7-2-例子"><a href="#7-2-例子" class="headerlink" title="7.2  例子"></a>7.2  例子</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Test <span class="title">F</span><span class="params">(<span class="keyword">const</span> Test&amp; a)</span></span>&#123;</span><br><span class="line">    Test b = std::<span class="built_in">move</span>(a);</span><br><span class="line"><span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Test A = <span class="built_in">F</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个地方极其有趣的是F函数体内对b的构造是采用了拷贝构造而非移动构造。</p>
<p>这是由于move和const的双重作用。如同前文所述，move一定可以把任意对象调整为右值，不管是不是const。</p>
<p>深层次地说，变量储存在内存里的时候存的都是它的数据，而不会专门开辟一块空间来说明它是不是const，是不是&amp;等，const和&amp;这些“类型”是由编译器来处理的。</p>
<p>我们说类型转换，指的就是改变类型，而不变动它在内存里的储存形式。比如一个指针，它在内存里存的就是一串数字表示地址，我们看它的内存情况时，完全可以把这块内存当做存的是一个整型变量。我们强行把指针当做整型变量来看的时候就是进行了一个类型转换。</p>
<p>所以std::move(a)这个表达式的类型就是const&amp;&amp;，因为它发生了类型转换。而转换之后，a转为const&amp;&amp;，这是一个常量右值引用，C++固定其只能够被const&amp;绑定。故而在构造函数重载的情况下调用了相应const&amp;的拷贝构造函数。</p>
<h2 id="7-3-进一步讨论"><a href="#7-3-进一步讨论" class="headerlink" title="7.3  进一步讨论"></a>7.3  进一步讨论</h2><p><img src="https://s2.loli.net/2022/01/11/DsEUd8jN6yZuRoh.png" alt="https://s2.loli.net/2022/01/11/DsEUd8jN6yZuRoh.png"></p>
<p>这张表给出了关于绑定和左右值的关系。左边的一列是参数的属性，Lvalue是指左值，rvalue是指右值，const是指常量。上方一行给出了能够绑定的类型。而表中的次序代表多种绑定时的优先级。从而可见，常量右值优先在我们的两个构造函数当中只能绑定const&amp;。（因为没有const&amp;&amp;类型的重载，故而绑定的是）从而调用了拷贝构造函数。</p>
<h1 id="八、置空性讨论"><a href="#八、置空性讨论" class="headerlink" title="八、置空性讨论"></a>八、置空性讨论</h1><h2 id="8-0-析构置空"><a href="#8-0-析构置空" class="headerlink" title="8.0  析构置空"></a>8.0  析构置空</h2><p>析构函数需要将成员数据中的指针指向的内存空间置空（delete）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector::~<span class="built_in">Vector</span>()</span><br><span class="line">&#123;<span class="keyword">if</span> (array != <span class="literal">nullptr</span>) &#123; <span class="keyword">delete</span>[]array; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>下文以A=B为例，讨论赋值过程中的置空性</p>
<h2 id="8-1-移动置空"><a href="#8-1-移动置空" class="headerlink" title="8.1  移动置空"></a>8.1  移动置空</h2><ul>
<li>每次移动时，我们将B完全置空但是不delete。</li>
</ul>
<h3 id="8-1-1-移动和拷贝的语义区别"><a href="#8-1-1-移动和拷贝的语义区别" class="headerlink" title="8.1.1  移动和拷贝的语义区别"></a>8.1.1  移动和拷贝的语义区别</h3><p>移动和拷贝的语义区别在于，被拷贝的对象之后还可能会被使用的，而被移动的对象必须置空（但不是delete，delete出现在赋值置空和析构置空当中）。因为移动的本质原理是把对同一块内存空间更换为新指针，并且将原指针置空。</p>
<h3 id="8-1-2-移动和拷贝的原理区别"><a href="#8-1-2-移动和拷贝的原理区别" class="headerlink" title="8.1.2 移动和拷贝的原理区别"></a>8.1.2 移动和拷贝的原理区别</h3><p>8.1.2.1拷贝的原理</p>
<p>A与B各自有一个指针，如果A！=B时，两个指针指向两块独立的内存空间。（A=B时无需拷贝）现将A内存空间里所有数据清除（为什么要清除在2.2.1进行了解释），接着把B的内存空间内所有数据传递给A的内存空间。这一传递过程不会破坏B的数据，但是效率较低。</p>
<p>8.1.2.2移动的原理</p>
<p>A与B各自有一个指针。如果A！=B时，两个指针指向两块独立的内存空间。（A=B时无需移动）如果此时A的指针指向的内存空间不为空，也就是A指针不为空指针，那么将A的指针指向的内存空间通过delete清除，A指针即转为空指针。将B的指针赋值给A的指针，并将B指针置为空指针。这一过程实际上是改变了内存空间的指针但是没有改变内存空间。</p>
<h3 id="8-1-3-移动过程中B指针置空"><a href="#8-1-3-移动过程中B指针置空" class="headerlink" title="8.1.3  移动过程中B指针置空"></a>8.1.3  移动过程中B指针置空</h3><p>在析构函数里，我们会调用delete。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Vector::~<span class="built_in">Vector</span>()</span><br><span class="line">&#123;<span class="keyword">if</span> (array != <span class="literal">nullptr</span>) &#123; <span class="keyword">delete</span>[]array; &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>倘若不把B指针置空，那么我们会析构delete一次B指针指向的内存空间，然而A指针不为空。在析构时，又将对同一个内存空间delete一次。Delete一空的空间是不允许的。故而移动构造必然要将B指针置空以避免多次delete同一空间。这样也导致了B指针不能再次使用（整个B无法再去赋值），这就是为什么移动构造必然要破坏用来构造的对象：因为不能出现两个指针指向同一块空间的情况。</p>
<p>同样的，为了模拟这种对B指针的破坏性，在第三部分技术细节里提及了Node的移动构造机制。这一机制也将“B指针”（实际上是原来的int）置空，故而被移动了的Node也是没法再次利用的。</p>
<h3 id="8-1-4-移动过程中B完全置空"><a href="#8-1-4-移动过程中B完全置空" class="headerlink" title="8.1.4 移动过程中B完全置空"></a>8.1.4 移动过程中B完全置空</h3><p>我们在上文已经叙述了为什么需要将B指针置空。实际上，由于B对象被移动之后已经不再次使用，需要将其完全置空（所有的成员数据都要置空，而不只是B里面的指针对象），从而避免内存泄漏。（这里点到为止，具体的细节参见第三部分）</p>
<h2 id="8-2-赋值置空"><a href="#8-2-赋值置空" class="headerlink" title="8.2  赋值置空"></a>8.2  赋值置空</h2><ul>
<li>Def每次赋值时，我们需要通过delete将A置空</li>
</ul>
<h3 id="8-2-1-拷贝赋值"><a href="#8-2-1-拷贝赋值" class="headerlink" title="8.2.1  拷贝赋值"></a>8.2.1  拷贝赋值</h3><p>拷贝赋值时，检测完A==B后，我们需要使用delete将A置空。</p>
<p>这里为什么要先清除A的原内存空间？</p>
<p>首先，我们的移动赋值需要二者赋值完后完全相同，如果A原内存空间超出B的那部分容积有多于内容，不清除将A则无法使得A与B完全相同。其次，不清除更大的问题是内存泄露严重。</p>
<p>注意到拷贝赋值现将A的内存空间delete之后，A的指针需要指向一块内存空间才能使A接受B的拷贝赋值。故需要申请新的内存空间。（与B的内存空间大小完全相同）</p>
<h3 id="8-2-2-移动赋值"><a href="#8-2-2-移动赋值" class="headerlink" title="8.2.2  移动赋值"></a>8.2.2  移动赋值</h3><p>综合前文所述，移动需要将B完全置空但是不delete，而赋值需要将A通过delete置空之后再次申请新的空间。所以用B移动赋值A的时候需要两次置空，一次delete（对A的）而另一次不delete（对B的）。</p>
<h1 id="九、类型转换"><a href="#九、类型转换" class="headerlink" title="九、类型转换"></a>九、类型转换</h1><h2 id="9-1-意义"><a href="#9-1-意义" class="headerlink" title="9.1  意义"></a>9.1  意义</h2><p>当编译器发现表达式和函数调用所需的数据类型和实际类型不同时，便会进行自动类型转换。</p>
<p>自动类型转换可通过定义特定的<strong>转换运算符</strong>和<strong>构造函数</strong>来完成。</p>
<p>除自动类型转换外，在有必要的时候还可以进行强制类型转换。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123; &#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3.5</span>);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-2-语法"><a href="#9-2-语法" class="headerlink" title="9.2  语法"></a>9.2  语法</h2><p>方法一：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span> <span class="comment">//目标类Destination</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Dst</span>() &#123; cout &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span> <span class="comment">//源类Source</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Src</span>() &#123; cout &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Src::operator Dst() called&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Dst</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在源类中定义“源类中重载目标类型转换运算符”</p>
<p>注意：不需要指定返回类型，因为operator后Dst()已经指明，返回值是Dst()，返回函数名故而不需要返回类型。这是类型转换的固定语法，如同构造函数不需要就好。</p>
<p>方法二：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span>;</span>  <span class="comment">// 前置类型声明，因为在Dst中要用到Src类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Dst</span>() &#123; cout &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="built_in">Dst</span>(<span class="keyword">const</span> Src&amp; s) &#123; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Dst::Dst(const Src&amp;)&quot;</span> &lt;&lt; endl; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Src</span>() &#123; cout &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在目标类中定义“目标类中定义源类对象作参数的构造函数”。</p>
<p>两种方法任选一种即可运行。<br>但是一定要注意区分两种转换方式，如果没有做区分，常常会导致转换方向错误。此外，两种自动类型转换的方法不能同时使用，使用时必须任选其中一种。</p>
<h2 id="9-3-例子"><a href="#9-3-例子" class="headerlink" title="9.3  例子"></a>9.3  例子</h2><p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dst</span> &#123;</span> <span class="comment">//目标类Destination</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Dst</span>() &#123; cout &lt;&lt; <span class="string">&quot;Dst::Dst()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Src</span> &#123;</span> <span class="comment">//源类Source</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Src</span>() &#123; cout &lt;&lt; <span class="string">&quot;Src::Src()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Src::operator Dst() called&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Dst</span>(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform</span><span class="params">(Dst d)</span> </span>&#123; &#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Src s;</span><br><span class="line">  <span class="function">Dst <span class="title">d1</span><span class="params">(s)</span></span>;</span><br><span class="line">  Dst d2 = s; </span><br><span class="line">  <span class="built_in">Transform</span>(s); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">Src::<span class="built_in">Src</span>()</span><br><span class="line"><span class="function">Src::<span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> called</span></span><br><span class="line"><span class="function"><span class="title">Dst::Dst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Src::<span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> called</span></span><br><span class="line"><span class="function"><span class="title">Dst::Dst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Src::<span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> called</span></span><br><span class="line"><span class="function"><span class="title">Dst::Dst</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<p>注意到强制类型转换并不会发生类似切片的效果，只是用某一个类型生成了另一类型而已。这里主函数内Dst d2 = s;等价于Dst d2(s)；而<code>void Transform(Dst d);</code>调用的参数本该是Dst类型，由于定义了从s到Dst的类型转换，故而也可以执行，并进行了转换。</p>
<p>例2：寻找错误</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallInt</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">(SmallInt&amp;)</span></span>; <span class="comment">//错误：不是成员函数；无论哪种转换方式，都是定义在类内的成员函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallInt</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span></span>;   </span><br><span class="line"><span class="comment">//错误：不能返回类型 </span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">(<span class="keyword">int</span> = <span class="number">0</span>)</span> <span class="keyword">const</span></span>; <span class="comment">//错误：在源类中定义目标类的重载运算符需要参数列表为空</span></span><br><span class="line"><span class="keyword">operator</span> <span class="keyword">int</span>*() <span class="keyword">const</span> &#123;<span class="keyword">return</span> <span class="number">42</span>;&#125; </span><br><span class="line"><span class="comment">//错误：42不是一个合法指针,本意：将SmallInt对象转换为int* 指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例3：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallInt</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmallInt</span> (<span class="keyword">int</span> i=<span class="number">0</span>): <span class="built_in">val</span>(i)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;SmallInt_Init&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造函数:以int为参数的SmallInt构造函数，从而将int转换为SmallInt</span></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; </span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Int_Transform&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> val; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转换运算符:从SmallInt转换为int；在源类中定义“目标类型转换运算符”</span></span><br><span class="line"><span class="comment">//注意到这个例子既有int到smallint的转换，也有smallint到int的转换。</span></span><br><span class="line"><span class="comment">//smallint既做了源类，又做了目标类</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        cout &lt;&lt; val &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SmallInt si;</span><br><span class="line">    si.<span class="built_in">print</span>();</span><br><span class="line">    si = <span class="number">4.10</span>;</span><br><span class="line">    si.<span class="built_in">print</span>();</span><br><span class="line">    si = si + <span class="number">3</span>;</span><br><span class="line">    si.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="number">0</span></span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Int_Transform</span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>首先，这里定义的val是size_t类型。它是一种“整型”类型，里面保存的是一个整数，就像int, long一样。这种整数用来记录一个大小(size)。</p>
<p>size_t的全称应该是size type，就是说“一种用来记录大小的数据类型”。通常我们用sizeof(XXX)操作，这个操作所得到的结果就是size_t类型。因为size_t类型的数据其实是保存了一个整数，所以它也可以做加减乘除，也可以转化为int并赋值给int类型的变量。</p>
<p>注意第二个SmallInt_Init;出现在si = 4.10，首先内置类型转换将double转换为int，然后调用构造函数构造了以int 4为参数的SmallInt（4），隐式地将4转换成SmallInt类型。之后把这个Smallint（4）赋值给Si，系统自动生成了Smallint的赋值运算符重载。</p>
<p><code>si = si + 3；</code>首先执行si + 3，之后执行赋值语句。</p>
<p>这可能有两种情况：情况一，把si转为int，然后执行int的加法，得到7；得到7之后的步骤即为赋值语句si=7，和上方的si=4类似。调用构造函数构造了以int 7为参数的SmallInt（7），隐式地将7转换成SmallInt类型，之后再调用编译器自动生成的赋值运算符重载。情况二，把3转为smallint再和si相加。这就有个问题，我们没有显式地重载smallint的+运算符，故而无法这个转换即是完成了，也无法继续。</p>
<p>另一方面，如果我们在此基础上重载了smallint的+运算符，我们不仅有smallint转为int然后两个int相加再构造smallint(7)再赋值这条路，同时还有3利用构造函数隐式转为smallint之后两个smallint相加，再赋值给si这条路。会出现路径歧义而编译错误。如何只进行第二条路，我们通过例4来实现。</p>
<p>例4：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallInt</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmallInt</span>(<span class="keyword">int</span> i=<span class="number">0</span>): <span class="built_in">val</span>(i)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;SmallInt_Init&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    SmallInt&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SmallInt &amp;src)&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span> == &amp;src ) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;operator=&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val = src.val;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">SmallInt <span class="keyword">operator</span>+(<span class="keyword">const</span> SmallInt&amp; b) &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;operator+&quot;</span>&lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">SmallInt</span>(<span class="keyword">this</span>-&gt;val + b.val);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SmallInt si;</span><br><span class="line">    si = <span class="number">4.10</span>;</span><br><span class="line">    si = si + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">SmallInt_Init</span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="keyword">operator</span>=</span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="keyword">operator</span>+</span><br><span class="line">SmallInt_Init</span><br><span class="line"><span class="keyword">operator</span>=</span><br></pre></td></tr></table></figure>
<p>这一例子验证了之前的理解。我们有了si=smallint（4）对应的=拷贝赋值运算符重载的输出。在si=si+3这一步，首先把3转为了smallint（3），接着利用了operator+。注意到operator+的返回值再次调用了构造函数，接着把返回值拷贝赋值给si。</p>
<p>但是例四是如何避免了路径歧义呢？注意到我们删除了从smallint转为int的类型转换运算符，故而没有路径一，只有路径二。</p>
<h2 id="9-4-禁止自动类型转换"><a href="#9-4-禁止自动类型转换" class="headerlink" title="9.4  禁止自动类型转换"></a>9.4  禁止自动类型转换</h2><p>如果用<strong>explicit</strong>修饰类型转换运算符或类型转换构造函数，则相应的类型转换必须显式地进行。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">Dst</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">或使用</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Dst</span><span class="params">(<span class="keyword">const</span> Src&amp; s)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在例1中如果使用explicit，那么：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Src s;</span><br><span class="line">  <span class="function">Dst <span class="title">d1</span><span class="params">(s)</span></span>;        <span class="comment">//可以执行，被认为是显式初始化</span></span><br><span class="line">  <span class="comment">//Dst d2 = s;     //错误，隐式转换</span></span><br><span class="line">  <span class="comment">//Transform(s); //错误，隐式转换</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-5-四类强制类型转换"><a href="#9-5-四类强制类型转换" class="headerlink" title="9.5  四类强制类型转换"></a>9.5  四类强制类型转换</h2><p>const_cast，去除类型的const或volatile属性。<br>static_cast，类似于C风格的强制转换。无条件转换，静态类型转换。<br>dynamic_cast，动态类型转换，如派生类和基类之间的多态类型转换。<br>reinterpret_cast，仅仅重新解释类型，但没有进行二进制的转换。</p>
<p>之前的例子重写为：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Src s;</span><br><span class="line">  <span class="function">Dst <span class="title">d1</span><span class="params">(s)</span></span>;</span><br><span class="line"></span><br><span class="line">  Dst d2 = <span class="keyword">static_cast</span>&lt;Dst&gt;(s);</span><br><span class="line">  <span class="built_in">Transform</span>(<span class="keyword">static_cast</span>&lt;Dst&gt;(s));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L9  多态与模板</title>
    <url>/2022/01/12/CS/OOP/L9%20%E5%A4%9A%E6%80%81%E4%B8%8E%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="L9-多态与模板"><a href="#L9-多态与模板" class="headerlink" title="L9 多态与模板"></a>L9 多态与模板</h1><h1 id="一、抽象类与纯虚函数"><a href="#一、抽象类与纯虚函数" class="headerlink" title="一、抽象类与纯虚函数"></a>一、抽象类与纯虚函数</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1  定义"></a>1.1  定义</h2><p>虚函数还可以进一步声明为纯虚函数，只要包含有一个纯虚函数的类，即为“抽象类”。语法如下：</p>
<p><code>virtual 返回类型 函数名(形式参数) = 0;</code></p>
<p><strong>抽象类不允许定义对象</strong>。（new也算是定义对象。）</p>
<p>定义基类为抽象类的主要用途是为派生类规定共性“接口”。能避免赋值型对象切片：保证只有指针和引用能被向上类型转换。（因为抽象类无法定义对象，但是可以定义指针和引用）</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">/// 可在类外定义函数体提供默认实现。派生类通过 A::f() 调用</span></span><br><span class="line">&#125;;</span><br><span class="line">A obj; <span class="comment">/// 不准抽象类定义对象！编译不通过！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pet::motion</span><span class="params">()</span></span>&#123; cout &lt;&lt; <span class="string">&quot;Pet motion: &quot;</span> &lt;&lt; endl; &#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;Pet::<span class="built_in">motion</span>(); cout &lt;&lt; <span class="string">&quot;dog run&quot;</span> &lt;&lt; endl; &#125; </span><br><span class="line">&#125;;<span class="comment">//重写覆盖后，也可以通过如d1.Base::foo();来调用基类函数。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span> <span class="keyword">public</span> Pet &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;Pet::<span class="built_in">motion</span>(); cout &lt;&lt; <span class="string">&quot;bird fly&quot;</span> &lt;&lt; endl; &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Pet* p = <span class="keyword">new</span> Dog; <span class="comment">/// 向上类型转换</span></span><br><span class="line">  p-&gt;<span class="built_in">motion</span>();</span><br><span class="line">  p = <span class="keyword">new</span> Bird; <span class="comment">/// 向上类型转换</span></span><br><span class="line">  p-&gt;<span class="built_in">motion</span>();</span><br><span class="line">  <span class="comment">//p = new Pet; /// 不允许定义抽象类对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output:Pet motion: </span><br><span class="line">dog run</span><br><span class="line">Pet motion: </span><br><span class="line">bird fly</span><br></pre></td></tr></table></figure>
<p>注意到在L8 3.5中有提到过，重写覆盖override与重写隐藏redefining相似，也可以通过如d1.Base::foo();来调用基类函数。此例中虽然发生了重写覆盖，但是通过直接调用Pet::motion();来调用了基类函数。</p>
<h2 id="1-2-抽象类继承"><a href="#1-2-抽象类继承" class="headerlink" title="1.2  抽象类继承"></a>1.2  抽象类继承</h2><p>基类纯虚函数被派生类重写覆盖之前仍是纯虚函数。因此当继承一个抽象类时，除纯虚析构函数外（随后解释），必须实现所有纯虚函数，否则继承出的类也是抽象类。</p>
<h2 id="1-3-纯虚析构函数"><a href="#1-3-纯虚析构函数" class="headerlink" title="1.3  纯虚析构函数"></a>1.3  纯虚析构函数</h2><p>析构函数也可以是纯虚函数，<strong>纯虚析构函数仍然需要函数体</strong>。</p>
<p>目的：使基类成为抽象类，不能创建基类的对象。如果有其他函数是纯虚函数，则析构函数无论是否为纯虚的，基类均为抽象类。</p>
<p>实际上编程的时候不会写纯虚析构函数，只需要写虚析构函数就可以了。</p>
<h2 id="1-4-纯虚析构函数和其他纯虚函数的区别"><a href="#1-4-纯虚析构函数和其他纯虚函数的区别" class="headerlink" title="1.4 纯虚析构函数和其他纯虚函数的区别"></a>1.4 纯虚析构函数和其他纯虚函数的区别</h2><p>一般的纯虚函数被派生类重写覆盖之前仍是纯虚函数。如果派生类不覆盖纯虚函数，那么派生类也是抽象类。</p>
<p>但对于对于纯虚析构函数而言，即便派生类中不显式实现析构函数，编译器也会自动合成默认析构函数，完成重写覆盖，使得派生类不是抽象类。故而，即使派生类不显式覆盖纯虚析构函数，只要派生类完全覆盖了其他纯虚函数，该派生类就不是抽象类，可以定义派生类对象。</p>
<p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>=<span class="number">0</span>; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive1</span>:</span> <span class="keyword">public</span> Base &#123;&#125;; <span class="comment">//Derive1仍为抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive2</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derive2::func&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Derive1 d1; //编译错误，Derive1仍为抽象类</span></span><br><span class="line">    Derive2 d2;</span><br><span class="line">    d2.<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Derive2::func</span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>()=<span class="number">0</span>; </span><br><span class="line">&#125;;</span><br><span class="line">Base::~<span class="built_in">Base</span>() &#123;cout&lt;&lt;<span class="string">&quot;Base destroyed&quot;</span>&lt;&lt;endl;&#125;<span class="comment">//纯虚函数不能在类内写函数体，需要挪到类外</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive1</span>:</span> <span class="keyword">public</span> Base &#123;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive2</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Derive2</span>() &#123;cout&lt;&lt;<span class="string">&quot;Derive2 destroyed&quot;</span>&lt;&lt;endl;&#125; &#125;;<span class="comment">//这里的vistual写不写无所谓</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base* p1 = <span class="keyword">new</span> Derive1;</span><br><span class="line">Base* p2 = <span class="keyword">new</span> Derive2;</span><br><span class="line"><span class="keyword">delete</span> p1;</span><br><span class="line">cout &lt;&lt; “------” &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Base destroyed</span><br><span class="line">------</span><br><span class="line">Derive2 destroyed</span><br><span class="line">Base destroyed</span><br></pre></td></tr></table></figure>
<p>例3：</p>
<p><img src="https://s2.loli.net/2022/01/12/TSJjsAitxkrKHWe.png" alt="https://s2.loli.net/2022/01/12/TSJjsAitxkrKHWe.png"></p>
<p>A.晚捆绑依赖于虚函数表与虚函数，只对类中虚函数起作用，并且只对基类指针和引用起作用。<br>D.一个纯虚函数就会使得一个类成为纯虚函数</p>
<h1 id="二、向下类型转换"><a href="#二、向下类型转换" class="headerlink" title="二、向下类型转换"></a>二、向下类型转换</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1  定义"></a>2.1  定义</h2><p>指向派生类对象的基类指针/引用转换成派生类指针/引用，则称为向下类型转换。（类层次中向下移动）</p>
<p>当我们用基类指针表示各种派生类时(向上类型转换)，保留了他们的共性，但是丢失了他们的特性。如果此时要表现特性，则可以使用向下类型转换。</p>
<p>比如我们可以使用基类指针数组对各种派生类对象进行管理，当具体处理时我们可以将基类指针转换为实际的派生类指针，进而调用派生类专有的接口。</p>
<p>但是需要注意到，这里是说用基类指针可以管理派生类，故而可以把这个指针向下转换，生成实际使用的派生类指针。但是，如果是基类指针管理基类对象，也就是基类指针本来就指向基类对象时，基类对象本身就没有派生类多出的数据和服务，还要把这个基类指针向下转换为派生类指针，要么是错的，要么是危险的。</p>
<h2 id="2-2-转换方式"><a href="#2-2-转换方式" class="headerlink" title="2.2  转换方式"></a>2.2  转换方式</h2><h3 id="2-2-1-安全向下类型转换（基类向派生类的转换）"><a href="#2-2-1-安全向下类型转换（基类向派生类的转换）" class="headerlink" title="2.2.1  安全向下类型转换（基类向派生类的转换）"></a>2.2.1  安全向下类型转换（基类向派生类的转换）</h3><p>C++提供了一个特殊的显式类型转换，称为dynamic_cast，是一种安全的向下类型转换。使用dynamic_cast的对象必须有虚函数，因为它使用了存储在虚函数表中的信息判断实际的类型。</p>
<p>所谓对象必须有虚函数，实际上是指有继承关系时，基类和派生类都有虚函数。基类有虚函数，是多态的，那么派生类当然也有虚函数。重写覆盖是用虚函数覆盖虚函数，仍然可以用Base::的方式调用基类虚函数，不破坏多态性。而重写隐藏更不会破坏其多态性。</p>
<p>语法：<br>T2是T1的派生类，obj_p，obj_r分别是T1类型的指针和引用，二者都指向一个派生类T2的对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T2* pObj = <span class="keyword">dynamic_cast</span>&lt;T2*&gt;(obj_p);</span><br><span class="line">转换为T2指针，运行时失败返回<span class="literal">nullptr</span></span><br><span class="line">T2&amp; refObj = <span class="keyword">dynamic_cast</span>&lt;T2&amp;&gt;(obj_r);</span><br><span class="line">转换为T2引用，运行失败时抛出bad_cast异常</span><br></pre></td></tr></table></figure>
<h3 id="2-2-2-快速向下类型转换"><a href="#2-2-2-快速向下类型转换" class="headerlink" title="2.2.2  快速向下类型转换"></a>2.2.2  快速向下类型转换</h3><p>如果我们知道目标的操作是安全的，可以使用static_cast来加快速度。<br>static_cast在编译时静态浏览类层次，只检查继承关系。没有继承关系的类之间，必须具有转换途径才能进行转换（要么自定义，要么是语言语法支持），否则不过编译。因为快速，static_cast运行时无法确认是否正确转换。</p>
<p>语法：</p>
<p>T2是T1的派生类，obj_p，obj_r分别是T1类型的指针和引用，二者都指向一个派生类T2的对象。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">T2* pObj = <span class="keyword">static_cast</span>&lt;T2*&gt;(obj_p);</span><br><span class="line">  <span class="comment">//转换为T2指针</span></span><br><span class="line">T2&amp; refObj = <span class="keyword">static_cast</span>&lt;T2&amp;&gt;(obj_r);</span><br><span class="line">  <span class="comment">//转换为T2引用</span></span><br></pre></td></tr></table></figure>
<p>不安全：如果基类指针本来就指向基类对象，向下类型转换就是不合法的。此时不保证指向目标是T2对象，可能导致非法内存访问。</p>
<p>例1：第一类不合法转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span> </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line">    <span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">int</span> i&#123;<span class="number">2018</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d; B b;</span><br><span class="line">    <span class="comment">//D d1 = static_cast&lt;D&gt;(b); ///未定义类型转换方式,注意这个直接是对象的转换而不是指针的转换</span></span><br><span class="line">    <span class="comment">//    D d2 = dynamic_cast&lt;D&gt;(b); ///这是不合法的，dynamic_cast只允许指针和引用转换</span></span><br><span class="line"> </span><br><span class="line">    D* pd1 = <span class="keyword">static_cast</span>&lt;D*&gt;(&amp;b); <span class="comment">/// 有继承关系，允许转换,让D类型指针pd1指向了B类型的对象b</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (pd1 != <span class="literal">nullptr</span>)&#123;      </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;static_cast, B*(B) --&gt; D*: OK&quot;</span> &lt;&lt; endl;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;D::i=&quot;</span> &lt;&lt; pd1-&gt;i &lt;&lt;endl;</span><br><span class="line">&#125; <span class="comment">/// 但是不安全：pd1访问D中成员i时，可能是非法访问</span></span><br><span class="line"></span><br><span class="line">    D* pd2 = <span class="keyword">dynamic_cast</span>&lt;D*&gt;(&amp;b);</span><br><span class="line">    <span class="keyword">if</span> (pd2 == <span class="literal">nullptr</span>) <span class="comment">/// 不允许不安全的转换</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;dynamic_cast, B*(B) --&gt; D*: FAILED&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    B* pb = &amp;d; </span><br><span class="line">    D* pd3 = <span class="keyword">static_cast</span>&lt;D*&gt;(pb); </span><br><span class="line">    <span class="keyword">if</span> (pd3 != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;       </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;static_cast, B*(D) --&gt; D*: OK&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;D::i=&quot;</span> &lt;&lt; pd3-&gt;i &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    D* pd4 = <span class="keyword">dynamic_cast</span>&lt;D*&gt;(pb); </span><br><span class="line">    <span class="keyword">if</span> (pd4 != <span class="literal">nullptr</span>)&#123;<span class="comment">/// 转换正确   </span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;dynamic_cast, B*(D) --&gt; D*: OK&quot;</span> &lt;&lt; endl;   </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;D::i=&quot;</span> &lt;&lt; pd4-&gt;i &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Output：</span><br><span class="line"><span class="keyword">static_cast</span>, B*(B) --&gt; D*: OK</span><br><span class="line">D::i=<span class="number">4817112</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>, B*(B) --&gt; D*: FAILED</span><br><span class="line"><span class="keyword">static_cast</span>, B*(D) --&gt; D*: OK</span><br><span class="line">D::i=<span class="number">2018</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>, B*(D) --&gt; D*: OK</span><br><span class="line">D::i=<span class="number">2018</span></span><br></pre></td></tr></table></figure>
<p>注意到前文提过危险转换的情况，如果基类指针本来就指向基类对象，向下类型转换就是不合法的。从而我们观察到，使用dynamic_cast将&amp;b转为D的指针是错误的，返回了空指针。而static_cast虽然实现了转换，但是输出的完全是非法内存。且在大多数编译器上，static_cast这样操作会RE。</p>
<p>另一方面，我们现在讨论的的都是指针转换，而对象的直接转换是类型转换，故而不加其他定义时用static_cast和dynamic_cast都是不安全的。</p>
<p>例2：第二类不合法转换</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name, type;</span><br><span class="line">    <span class="built_in">Animal</span>(<span class="keyword">const</span> std::string &amp;_name, <span class="keyword">const</span> std::string &amp;_type): <span class="built_in">name</span>(_name), <span class="built_in">type</span>(_type) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Dog</span>(<span class="keyword">const</span> std::string &amp;_name): <span class="built_in">Animal</span>(_name, <span class="string">&quot;dog&quot;</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Bird</span>(<span class="keyword">const</span> std::string &amp;_name): <span class="built_in">Animal</span>(_name, <span class="string">&quot;bird&quot;</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(Animal* animal, std::vector&lt;Dog&gt; &amp; dogzone, std::vector&lt;Bird&gt; &amp; birdzone)</span></span>&#123;</span><br><span class="line">    Dog* point1 =<span class="keyword">dynamic_cast</span>&lt;Dog*&gt;(animal);</span><br><span class="line">    Bird* point2 =<span class="keyword">dynamic_cast</span>&lt;Bird*&gt;(animal); </span><br><span class="line">    <span class="keyword">if</span>(point1!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            dogzone.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(*point1));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        birdzone.<span class="built_in">push_back</span>(std::<span class="built_in">move</span>(*point2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个题放上了伪代码，给出了第二类非法转换的例子。一个基类派D生出了多个派生类A,B,C。比如基类指针d指向了派生类A对象a，但是如果我们把d向下类型转换为B类指针，也是非法转换。从这个角度可以看出，在上例中，Animal类的type是private，没有接口是没法访问的。我们本来需要根据type来决定向下转换的类型，但是访问不了。于是我们直接向下类型转换，直接通过是否转为nullptr来检测是否转换正确。</p>
<h3 id="2-2-3-总结"><a href="#2-2-3-总结" class="headerlink" title="2.2.3  总结"></a>2.2.3  总结</h3><p>dynamic_cast与static_cast：</p>
<p>相同点：都可完成向下类型转换</p>
<p>不同点：static_cast在编译时静态执行向下类型转换。二dynamic_cast会在运行时检查被转换的对象是否确实是正确的派生类。额外的检查需要 <code>RTTI (Run-Time Type Information)</code>，因此要比static_cast慢一些，但是更安全。</p>
<p><strong>一般使用dynamic_cast进行向下类型转换</strong>。</p>
<p>指针转换的重要原则：</p>
<p>清楚指针所指向的真正对象</p>
<ol>
<li>指针或引用的向上转换总是安全的；</li>
<li>向下转换时用dynamic_cast，安全检查；</li>
<li>避免对象之间的转换。尽可能用指针、引用进行转换。这样可以通过验证虚函数表判断转换是否安全。</li>
</ol>
<p>引例——历史遗留问题，关于传参的本质</p>
<p>（下面这个程序有很大问题）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"> <span class="keyword">int</span> tmp = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x=<span class="number">1</span>,<span class="built_in">y</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">swap</span>(x,y);</span><br><span class="line"> cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>我们试图运行该程序，很显然，输出了2。我们似乎已经察觉到了地址和指针之间的美妙关系，也就是直接输出指针的值就是指针指向的地址。我们隐约察觉到，这里int*a貌似会指向x的地址，所以我们试图把地址打印出来。</p>
<p>（下面这个程序有很大问题）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line"> <span class="keyword">int</span> tmp = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x=<span class="number">1</span>,<span class="built_in">y</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">swap</span>(x,y);</span><br><span class="line"> cout&lt;&lt;&amp;x&lt;&lt;endl;</span><br><span class="line"> cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">0x7ffebcbe46e8</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>看上去很对，但是，似乎少了点什么？我们swap函数里对int*a的输出呢？这些程序有什么问题？</p>
<p>原因是，在std空间里本身就包含有swap函数，这么写swap根本无法调用我们自己定义的swap，故而不可使用std空间。（这也告诫了我们少用std空间，或者把函数名字起的复杂点）</p>
<p>我们禁用了std空间后：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"> <span class="keyword">int</span> tmp = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x=<span class="number">1</span>,<span class="built_in">y</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">swap</span>(x,y);</span><br><span class="line"> std::cout&lt;&lt;x&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">main.cpp:<span class="number">11</span>:<span class="number">2</span>: error: no matching function <span class="keyword">for</span> call to <span class="string">&#x27;swap&#x27;</span></span><br><span class="line"> <span class="built_in">swap</span>(x,y);</span><br><span class="line"> ^~~~</span><br><span class="line">main.cpp:<span class="number">3</span>:<span class="number">6</span>: note: candidate function <span class="keyword">not</span> viable: no known conversion from <span class="string">&#x27;int&#x27;</span> to <span class="string">&#x27;int *&#x27;</span> <span class="keyword">for</span> <span class="number">1</span>st argument; <span class="function">take the address of the argument with &amp;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function">     ^</span></span><br><span class="line"><span class="function">1 error generated.</span></span><br></pre></td></tr></table></figure>
<p>我们终于发现了问题，在调用参数的时候，我们根本无法让一个int x传入int<em>a。首先，传参数的过程可以理解为赋值语句：比如我们函数定义void swap(int a, int b);那么调用时，swap(x,y);需要inta=x，intb=y;这两个赋值语句都没法实现。但是我们调用swap(&amp;x,&amp;y)时，实际上是int</em>a=&amp;x，int*b=&amp;y，这两个赋值都可以实现，且&amp;x和&amp;y实际上是取地址而不是取引用的意思。</p>
<p>修改好的程序如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"> std::cout&lt;&lt;a&lt;&lt;std::endl;<span class="comment">//调用swap函数时，构造int*型的两个形参a,b.这两个指针分别指向主函数里的两个int型变量a,b的地址。（by abuse of notation...)</span></span><br><span class="line"> <span class="keyword">int</span> tmp = *a;<span class="comment">//*a是指针a指向的内容，把它赋值给tmp；</span></span><br><span class="line"> *a = *b;<span class="comment">//修改*a就是修改a指向的内容的值，也就是修改主函数里面变量a的值。</span></span><br><span class="line"> *b = tmp;<span class="comment">//同理。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> a=<span class="number">1</span>,<span class="built_in">b</span>(<span class="number">2</span>);</span><br><span class="line"> std::cout&lt;&lt;&amp;a&lt;&lt;std::endl;</span><br><span class="line"> <span class="built_in">swap</span>(&amp;a,&amp;b);</span><br><span class="line"> std::cout&lt;&lt;a&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="number">0x7fff8f992eb8</span></span><br><span class="line"><span class="number">0x7fff8f992eb8</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>从这个例子可以看出来，对实参取地址，然后int*a=&amp;x，就会使得a指针确切的指向x的内存空间，所以可以通过指针a控制x的内存空间。哪怕x的生命周期结束了，退出了函数体之后把a指针析构掉，因为我们没有人为定义delete a，而默认析构函数不会delete a，故而也不会影响x的内存空间。综上所述，终于解决了历史遗留问题。我们再做两个实验来验证下：</p>
<p>实验一，在函数体内delete a，果然清除了x内存空间，导致x非法访问。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"> std::cout&lt;&lt;a&lt;&lt;std::endl;</span><br><span class="line"> <span class="keyword">int</span> tmp = *a;</span><br><span class="line"> *a = *b;</span><br><span class="line"> *b = tmp;</span><br><span class="line"> <span class="keyword">delete</span> a;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x=<span class="number">1</span>,<span class="built_in">y</span>(<span class="number">2</span>);</span><br><span class="line"> std::cout&lt;&lt;&amp;x&lt;&lt;std::endl;</span><br><span class="line"> <span class="built_in">swap</span>(&amp;x,&amp;y);</span><br><span class="line"> std::cout&lt;&lt;x&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="built_in">free</span>(): invalid pointer</span><br></pre></td></tr></table></figure>
<p>实验二，传引用也是如此：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span> <span class="comment">//此时函数体里的形参是主函数里两个变量a,b的引用（也就是别名）</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line"> std::cout&lt;&lt;&amp;a&lt;&lt;std::endl;</span><br><span class="line"> <span class="keyword">int</span> tmp = a;</span><br><span class="line"> a = b;</span><br><span class="line"> b = tmp;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> x=<span class="number">1</span>,<span class="built_in">y</span>(<span class="number">2</span>);</span><br><span class="line"> std::cout&lt;&lt;&amp;x&lt;&lt;std::endl;</span><br><span class="line"> <span class="built_in">swap</span>(x,y);</span><br><span class="line"> std::cout&lt;&lt;x&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">0x7fff2af01638</span></span><br><span class="line"><span class="number">0x7fff2af01638</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>基于上述引例，考察下这个例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> &#123;</span> <span class="keyword">public</span>:  <span class="keyword">virtual</span> ~<span class="built_in">Pet</span>() &#123;&#125; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> :</span> <span class="keyword">public</span> Pet &#123; </span><br><span class="line"><span class="keyword">public</span>:     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;dog run&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> :</span> <span class="keyword">public</span> Pet &#123;</span><br><span class="line"><span class="keyword">public</span>:     <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;bird fly&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">(Pet* p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> d = <span class="keyword">dynamic_cast</span>&lt;Dog*&gt;(p); <span class="comment">/// 向下类型转换</span></span><br><span class="line">    <span class="keyword">auto</span> b = <span class="keyword">dynamic_cast</span>&lt;Bird*&gt;(p);    <span class="comment">/// 向下类型转换</span></span><br><span class="line">    <span class="keyword">if</span> (d) <span class="comment">/// 运行时根据实际类型表现特性 if(d)等价于if (d!=nullptr)</span></span><br><span class="line">        d-&gt;<span class="built_in">run</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b)</span><br><span class="line">        b-&gt;<span class="built_in">fly</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Pet* p[<span class="number">2</span>];</span><br><span class="line">    p[<span class="number">0</span>] = <span class="keyword">new</span> Dog; <span class="comment">/// 向上类型转换</span></span><br><span class="line">    p[<span class="number">1</span>] = <span class="keyword">new</span> Bird; <span class="comment">/// 向上类型转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">action</span>(p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">dog run</span><br><span class="line">bird fly</span><br></pre></td></tr></table></figure>
<p>注意到，在这个例子里面，向下类型转换都不是重点，重点在传参的这一步。因为我们的p[i]是的类型是Pet<em>，指向的内存空间是Dog或者Bird，所以这个传参是合法的！也就是赋值语句，传参过程中pet</em> p=p[i]是合法的，这个传参就是合法的！(将传参视为给函数参数列表里的形参赋值的过程）</p>
<h1 id="三、抽象类与纯虚函数"><a href="#三、抽象类与纯虚函数" class="headerlink" title="三、抽象类与纯虚函数"></a>三、抽象类与纯虚函数</h1><h2 id="3-1-多重继承"><a href="#3-1-多重继承" class="headerlink" title="3.1  多重继承"></a>3.1  多重继承</h2><p>优点：清晰，符合直觉；结合多个接口</p>
<p>缺点：<br>二义性：如果派生类D继承的两个基类A,B，有同名成员a，则访问D中a时，编译器无法判断要访问的哪一个基类成员。<br>钻石型继承树（DOD：Diamond Of Death）带来的数据冗余：右图中如果 InputFile 和 OutputFile 都含有继承自 File 的 filename 变量，则 IOFile 会有两份独立的 filename，而这实际上并不需要。</p>
<p>优化方案：</p>
<p>最多继承一个非抽象类（has-a），可以继承多个抽象类（接口）。这样可以避免多重继承的二义性，也可以一个对象可以实现多个接口。</p>
<h2 id="3-2-例子"><a href="#3-2-例子" class="headerlink" title="3.2  例子"></a>3.2  例子</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhatCanSpeak</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">WhatCanSpeak</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;  &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhatCanMotion</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">WhatCanMotion</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>= <span class="number">0</span>;   &#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> :</span> <span class="keyword">public</span> WhatCanSpeak, <span class="keyword">public</span> WhatCanMotion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;say&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;walk&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSpeak</span><span class="params">(WhatCanSpeak* obj)</span> </span>&#123; obj-&gt;<span class="built_in">speak</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doMotion</span><span class="params">(WhatCanMotion* obj)</span> </span>&#123; obj-&gt;<span class="built_in">motion</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Human human;</span><br><span class="line">    <span class="built_in">doSpeak</span>(&amp;human); <span class="built_in">doMotion</span>(&amp;human);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">say</span><br><span class="line">walk</span><br></pre></td></tr></table></figure>
<h1 id="四、多态-Polymorphism"><a href="#四、多态-Polymorphism" class="headerlink" title="四、多态 Polymorphism"></a>四、多态 Polymorphism</h1><h2 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1  定义"></a>4.1  定义</h2><p>按照基类的接口定义，调用指针或引用所指对象的接口函数，函数执行过程因对象实际所属派生类的不同而呈现不同的效果（表现），这个现象被称为“多态”。这个定义非常繁琐，实际上就是按照实际类型调用函数罢了。</p>
<p>当利用基类指针/引用调用函数时，虚函数在运行时确定执行哪个版本，取决于引用或指针对象的真实类型。</p>
<p>非虚函数在编译时绑定，故而调用在指针权限范围内优先级最高的函数。关于指针的权限范围在L8已经叙述过。</p>
<p>当利用类的对象直接调用函数时，无论什么函数，均在编译时绑定。</p>
<p>产生多态效果的条件：继承+虚函数+(引用或指针)</p>
<h2 id="4-2-优势"><a href="#4-2-优势" class="headerlink" title="4.2  优势"></a>4.2  优势</h2><p>全部设计抽象类指针指向派生类后，C++语言可以用一段相同的代码，在运行时完成不同的任务，这些不同运行结果的差异由派生类之间的差异决定，不必对每一个派生类特殊处理，只需要调用抽象基类的接口即可。大大提高程序的可复用性。另一方面，不同派生类对同一接口的实现不同，能达到不同的效果，提高了程序可拓展性和可维护性。</p>
<p>例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>&#123;</span> </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">speak</span>();</span><br><span class="line">    <span class="built_in">motion</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Animal speak&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Animal motion&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Bird singing&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Bird flying&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fish</span> :</span> <span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Fish cannot speak ...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Fish swimming&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Fish fish;</span><br><span class="line">  Bird bird;</span><br><span class="line">  fish.<span class="built_in">action</span>();     <span class="comment">///不同调用方法</span></span><br><span class="line">  bird.<span class="built_in">action</span>();</span><br><span class="line">  Animal *pBase1 = <span class="keyword">new</span> Fish;</span><br><span class="line">  Animal *pBase2 = <span class="keyword">new</span> Bird;</span><br><span class="line">  pBase1-&gt;<span class="built_in">action</span>(); <span class="comment">///同一调用方法，根据</span></span><br><span class="line">  pBase2-&gt;<span class="built_in">action</span>(); <span class="comment">///实际类型完成相应动作 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Fish cannot speak ...</span><br><span class="line">Fish swimming</span><br><span class="line">Bird singing</span><br><span class="line">Bird flying</span><br><span class="line">Fish cannot speak ...</span><br><span class="line">Fish swimming</span><br><span class="line">Bird singing</span><br><span class="line">Bird flying</span><br></pre></td></tr></table></figure>
<p>很有意思的是，直接通过派生类对象调用action函数时，由于派生类没有重定义action，故而直接调用了基类的action。之后以fish为例，调用了fish.speak()和fish.motion()。然而注意到，Fish类已经重写覆盖了Animal的虚函数speak()，故而会调用自身重定义的speak()，motion()同理。</p>
<p>下方的通过基类指针调用就是典型的重写覆盖+动态绑定。</p>
<h1 id="五、函数模板与类模板"><a href="#五、函数模板与类模板" class="headerlink" title="五、函数模板与类模板"></a>五、函数模板与类模板</h1><h2 id="5-1-意义与定义"><a href="#5-1-意义与定义" class="headerlink" title="5.1  意义与定义"></a>5.1  意义与定义</h2><p>如果我们想实现对于整数、浮点数、自定义类的排序函数，这些排序本质上算法是相同的，但是我们可能需要写很多个相似的函数。</p>
<p>有些算法实现与类型无关，所以可以将函数的参数类型也定义为一种特殊的“参数”，这样就得到了“函数模板”。</p>
<p>定义函数模板的方法（可以不写在分开的两行）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"> <span class="function">ReturnType <span class="title">Func</span><span class="params">(Args)</span>；</span></span><br></pre></td></tr></table></figure>
<p>如：任意类型两个变量相加的“函数模板”</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"> <span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure>
<p>注：typename也可换为class</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure>
<p>模板必须在头文件中实现，原因比较复杂，涉及链接原理，不做赘述。</p>
<h2 id="5-2-实例化与自动推导"><a href="#5-2-实例化与自动推导" class="headerlink" title="5.2  实例化与自动推导"></a>5.2  实例化与自动推导</h2><p>函数模板在调用时，编译器能自动推导出实际参数的类型（这个过程叫做实例化）。所以，形式上调用一个函数模板与普通函数没有区别，如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">9</span>, <span class="number">3</span>);      </span><br><span class="line">cout &lt;&lt; <span class="built_in">sum</span>(<span class="number">2.1</span>, <span class="number">5.7</span>);</span><br></pre></td></tr></table></figure>
<p>调用类型需要满足函数的要求。本例中，要求类型 T 定义了加法运算符。</p>
<p>当多个参数的类型不一致并且不强制要求类型推导时，无法推导：</p>
<p><code>cout &lt;&lt; sum(9, 2.1); //编译错误</code></p>
<p>可以强制指定类型推导方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> </span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;sum&lt;<span class="keyword">int</span>&gt;(<span class="number">9.9</span>,<span class="number">2.5</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;sum&lt;<span class="keyword">float</span>&gt;(<span class="number">9.9</span>,<span class="number">2.5</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;sum&lt;<span class="keyword">double</span>&gt;(<span class="number">9.9</span>,<span class="number">2.5</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">12.4</span></span><br><span class="line"><span class="number">12.4</span></span><br></pre></td></tr></table></figure>
<p>从上例中可看出先转换再进行加法。</p>
<p>例1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123; <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i] &gt; data[j])</span><br><span class="line">                std::<span class="built_in">swap</span>(data[i], data[j]); <span class="comment">//交换元素位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr_a[] = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr_a, <span class="number">5</span>);  <span class="comment">//调用int类型的sort</span></span><br><span class="line">    <span class="built_in">output</span>(arr_a, <span class="number">5</span>); <span class="comment">//调用int类型的output</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> arr_b[] = &#123;<span class="number">3.2</span>, <span class="number">2.1</span>, <span class="number">4.3</span>, <span class="number">1.5</span>, <span class="number">5.7</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr_b, <span class="number">5</span>); <span class="comment">//调用float类型的sort</span></span><br><span class="line">    <span class="built_in">output</span>(arr_b, <span class="number">5</span>);  <span class="comment">//调用float类型的output</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1.5</span> <span class="number">2.1</span> <span class="number">3.2</span> <span class="number">4.3</span> <span class="number">5.7</span></span><br></pre></td></tr></table></figure>
<p>例2：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123; <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i] &gt; data[j])</span><br><span class="line">                std::<span class="built_in">swap</span>(data[i], data[j]); <span class="comment">//交换元素位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">MyInt</span>(<span class="keyword">int</span> val): <span class="built_in">data</span>(val) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyInt arr_c[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr_c, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">output</span>(arr_c, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">main.cpp: In instantiation of ‘<span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T*, <span class="keyword">int</span>)</span> [with T </span>= MyInt]’:</span><br><span class="line">main.cpp:<span class="number">33</span>:<span class="number">15</span>:   required from here</span><br><span class="line">main.cpp:<span class="number">9</span>:<span class="number">15</span>: error: no match <span class="keyword">for</span> ‘<span class="keyword">operator</span>&gt;’ (operand types are ‘MyInt’ <span class="keyword">and</span> ‘MyInt’)</span><br></pre></td></tr></table></figure>
<p>模板编译错误会引起上百行的错误，关注上方几行。sort中需要operator&gt; 但MyInt并不支持，no match for ‘operator&gt;’ (operand types are ‘MyInt’ and ‘MyInt’)</p>
<p>稍作修改：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123; <span class="comment">//选择排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i] &gt; data[j])</span><br><span class="line">                std::<span class="built_in">swap</span>(data[i], data[j]); <span class="comment">//交换元素位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(T* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInt</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">MyInt</span>(<span class="keyword">int</span> val): <span class="built_in">data</span>(val) &#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> MyInt&amp; b)&#123; <span class="comment">//用于sort</span></span><br><span class="line">        <span class="keyword">return</span> data &gt; b.data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream&amp;  <span class="comment">//用于output</span></span><br><span class="line">            <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="keyword">const</span> MyInt&amp; obj)&#123;</span><br><span class="line">        out &lt;&lt; obj.data;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyInt arr_c[] = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr_c, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">output</span>(arr_c, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>完全重载了流运算符和大小运算符。</p>
<h2 id="5-3-模板原理"><a href="#5-3-模板原理" class="headerlink" title="5.3  模板原理"></a>5.3  模板原理</h2><p>对函数模板的处理是在编译期进行的，<strong>每当编译器发现对模板的一种参数的使用，就生成对应参数的一份代码</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">sum</span><span class="params">(T a, T b)</span> </span>&#123;<span class="keyword">return</span> a + b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//生成并编译int sum(int, int)</span></span><br><span class="line">    <span class="keyword">double</span> b = <span class="built_in">sum</span>(<span class="number">1.0</span>, <span class="number">2.0</span>); <span class="comment">//生成并编译double sum(double, double)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、类模板"><a href="#六、类模板" class="headerlink" title="六、类模板"></a>六、类模板</h1><h2 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1  定义"></a>6.1  定义</h2><p>在定义类时也可以将一些类型信息抽取出来，用模板参数来替换，从而使类更具通用性。这种类被称为“类模板”。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(T _data): <span class="built_in">data</span>(_data) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; data &lt;&lt; endl; &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//函数模板可以自动推导类型，但是类模板不可以</span></span><br><span class="line">    a.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>成员函数也可以如此定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    T data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(T _data): <span class="built_in">data</span>(_data) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> A&lt;T&gt;::<span class="built_in">print</span>() &#123; cout &lt;&lt; data &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">A&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    a.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-2-模板参数"><a href="#6-2-模板参数" class="headerlink" title="6.2  模板参数"></a>6.2  模板参数</h2><p>我们可以将类模板视为一种特殊的“函数”，需要向其中传入参数才能够定义一个完整的类，而这些传入的参数有两种。一种是类型参数，也就是在Typename或者Class之后的参数(下例中的小T)，第二种是非类型参数，这个可能有非常多种，比如整数，枚举，指针（指向对象或函数），引用（引用对象或引用函数），无符号整数(unsigned)等等，比如下例就是无符号整数来定义了数组的大小。</p>
<p>实际上，模板比较复杂时，尖括号里可以放很多，可以是类型也可以是非类型。当然类型参数也可以有多个。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">unsigned</span> size&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">array</span> &#123;</span></span><br><span class="line">      T elems[size];</span><br><span class="line">  &#125;; </span><br><span class="line">  array&lt;<span class="keyword">char</span>, 10&gt; array0;</span><br></pre></td></tr></table></figure>
<p>注意到，size只是一个无符号整数的名字而已，unsigned和Typename才是关键，完整的传入两个参数才可形成一个完整的类，并定义这个类的对象。</p>
<p>一个模板可能会写出多个新的类，这些类是不同的，不过碰巧都用了同一个模板的名字。（比如上例中的array模板名字）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">unsigned</span> size&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">array</span> &#123;</span></span><br><span class="line">  T elems[size];</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="comment">//array&lt;char, n&gt; array0; //不能使用变量</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">5</span>;</span><br><span class="line">  array&lt;<span class="keyword">char</span>, m&gt; array1; <span class="comment">//可以使用常量</span></span><br><span class="line">  array&lt;<span class="keyword">char</span>, 5&gt; array2; <span class="comment">//或具体数值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所有模板参数必须在编译期确定，因而不可以使用变量。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">unsigned</span> <span class="title">size</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T data[size];</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123; <span class="comment">//选择排序</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(data[i] &gt; data[j])</span><br><span class="line">                    std::<span class="built_in">swap</span>(data[i], data[j]); <span class="comment">//交换两者位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            std::cin &gt;&gt; data[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyArr&lt;<span class="keyword">int</span>, <span class="number">5</span>&gt; arr_a;</span><br><span class="line">    arr_a.<span class="built_in">input</span>();</span><br><span class="line">    arr_a.<span class="built_in">sort</span>();</span><br><span class="line">    arr_a.<span class="built_in">output</span>();</span><br><span class="line">    </span><br><span class="line">    MyArr&lt;<span class="keyword">float</span>, <span class="number">5</span>&gt; arr_b;</span><br><span class="line">    arr_b.<span class="built_in">input</span>();</span><br><span class="line">    arr_b.<span class="built_in">sort</span>();</span><br><span class="line">    arr_b.<span class="built_in">output</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Input：<span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">3.2</span> <span class="number">2.1</span> <span class="number">4.3</span> <span class="number">1.5</span> <span class="number">5.7</span></span><br><span class="line">Output：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1.5</span> <span class="number">2.1</span> <span class="number">3.2</span> <span class="number">4.3</span> <span class="number">5.7</span></span><br></pre></td></tr></table></figure>
<h2 id="6-3-模板与多态"><a href="#6-3-模板与多态" class="headerlink" title="6.3  模板与多态"></a>6.3  模板与多态</h2><p>模板使用泛型标记，使用同一段代码，来关联不同但相似的特定行为，最后可以获得不同的结果。模板也是多态的一种体现。</p>
<p>但模板的关联是在编译期处理，称为<strong>静多态</strong>。</p>
<p>模板的特点：</p>
<p>往往和<strong>函数重载</strong>同时使用；高效，省去函数调用；编译后代码增多</p>
<p>基于继承和虚函数的多态在运行期处理，称为动多态</p>
<p>虚函数的特点：运行时，灵活方便；侵入式，必须继承；存在函数调用</p>
<p>所谓的省去函数调用是指，如果doSomethingOnA和doSomethingOnB的实现除了类型不同，其他基本一致的话则可省去如下代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">typeof</span>(a)==A)&#123;</span><br><span class="line"> <span class="built_in">doSomethingOnA</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">typeof</span>(a)==B)&#123;</span><br><span class="line"> <span class="built_in">doSomethingOnB</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接写一个模板然后dosomethingOnWhatever</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L5  创建与销毁·二</title>
    <url>/2022/01/12/CS/OOP/L5%20%E5%88%9B%E5%BB%BA%E4%B8%8E%E9%94%80%E6%AF%81%C2%B7%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="L5-创建与销毁·二"><a href="#L5-创建与销毁·二" class="headerlink" title="L5 创建与销毁·二"></a>L5 创建与销毁·二</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分：</p>
<ul>
<li>1.1 对四类变量的区别</li>
<li>1.2 静态变量与相关概念的界定</li>
<li>1.2.5 extern修饰符的详细讨论</li>
<li>1.3 类变量与相关概念的界定</li>
</ul>
</blockquote>
<hr>
<h1 id="速览表格"><a href="#速览表格" class="headerlink" title="速览表格"></a>速览表格</h1><p><img src="https://s2.loli.net/2022/01/11/1PSAfKNFsVgw2a6.png" alt="https://s2.loli.net/2022/01/11/1PSAfKNFsVgw2a6.png"></p>
<h1 id="一、变量与静态变量"><a href="#一、变量与静态变量" class="headerlink" title="一、变量与静态变量"></a>一、变量与静态变量</h1><h2 id="1-1-四类变量的区别"><a href="#1-1-四类变量的区别" class="headerlink" title="1.1  四类变量的区别"></a>1.1  四类变量的区别</h2><h3 id="1-1-1-按存储区域分"><a href="#1-1-1-按存储区域分" class="headerlink" title="1.1.1  按存储区域分"></a>1.1.1  按存储区域分</h3><p>全局变量、静态全局变量和静态局部变量都存放在内存的静态存储区域，局部变量存放在内存的栈区。静态储存区在函数结束后不会销毁，而栈区在函数结束后会退栈而销毁。</p>
<h3 id="1-1-2-按作用域分"><a href="#1-1-2-按作用域分" class="headerlink" title="1.1.2  按作用域分"></a>1.1.2  按作用域分</h3><p>1.1.2.1  动态变量</p>
<p>全局变量：在整个工程文件内都有效；“在函数外定义的变量”，即从定义变量的位置到本源文件结束都有效。由于同一文件中的所有函数都能引用全局变量的值，因此如果在一个函数中改变了全局变量的值，就能影响到其他函数中全局变量的值。<br>所谓整个工程，是指所有的文件都可以用，不单单在定义全局变量的那个文件。</p>
<p>局部变量：在定义它的函数内有效，但是函数返回后失效。“在函数内定义的变量”，即在一个函数内部定义的变量，只在本函数范围内有效。</p>
<p>注意：全局变量和静态变量如果没有手工初始化，则由编译器初始化为0。局部变量的值不可知。</p>
<p>1.1.2.2  静态变量(static)</p>
<p>静态决定了两件事，第一就是存储后不会立刻销毁。第二是自带有一定的限定变量作用区域的功能，强化全局/局部的具体作用域。</p>
<p>静态全局变量：只在定义它的文件内有效，效果和全局变量一样，只是就在本文件内部。</p>
<p>静态局部变量：只在定义它的函数内有效，只是程序仅分配一次内存，函数返回后，该变量不会消失；静态局部变量的生存期虽然为整个工程，但是其作用仍与局部变量相同，即只能在定义该变量的函数内使用该变量。退出该函数后， 尽管该变量还继续存在。(局部决定其无法被其他函数使用只能被同一函数下次再用。静态决定其保存在静态区，无法被立刻销毁)</p>
<p>这里还继续存在意味着很重要的性质，对于这个函数而言，静态局部变量是可以复用的。静态局部变量在静态存储区内分配存储单元。在程序整个运行期间都不释放。而自动变量（即动态局部变量）属于动态存储类别，存储在动态存储区空间(而不是静态存储区空间)，每一次该函数调用结束后即释放。</p>
<p>为静态局部变量赋初值是在编译时进行的，即只赋初值一次，在程序运行时它已有初值。以后每次调用函数时不再重新赋初值而只是保留上次函数调用结束时的值。而为自动变量赋初值，不是在编译时进行的，而是在函数调用时进行，每调用一次函数重新给一次初值，相当于执行一次赋值语句。</p>
<p>如果在定义局部变量时不赋初值的话，对静态局部变量来说，编译时自动赋初值0(对数值型变量)或空字符(对字符型变量)。而对自动变量来说，如果不赋初值，则它的值是一个不确定的值。这是由于每次函数调用结束后存储单元已释放，下次调用时又重新另分配存储单元，而所分配的单元中的值是不确定的。</p>
<p>虽然静态局部变量在函数调用结束后仍然存在，但其他函数是不能引用它的。也就是说，在其他函数中它是“不可见”的。 （这个不可见是指静态局部变量的名称不可在其他函数内被操作。但是由于其内存并没有被析构掉，我们依然能够对这块内存进行操作，这一神奇的操作详见《L4 创建与销毁·一》3.2部分）</p>
<p>静态变量与全局变量最明显的区别就在于：全局变量在其定义后所有函数都能用，但是静态全局变量只能在一个文件里面使用，而静态局部变量只能在一个函数里使用。</p>
<h3 id="1-1-3-形参变量"><a href="#1-1-3-形参变量" class="headerlink" title="1.1.3  形参变量"></a>1.1.3  形参变量</h3><p>只在被调用期间才分配内存单元，调用结束立即释放。</p>
<p>在函数体内，形参的等级最高。当全局变量名与形参名冲突的时候，函数会操作形参，而不是全局变量。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdio.h&quot;</span></span></span><br><span class="line">  <span class="keyword">int</span> Max = <span class="number">1</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> Max)</span></span></span><br><span class="line"><span class="function">  </span>&#123; Max = <span class="number">2</span>;&#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="built_in">add</span>(Max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Max = %d&quot;</span>,Max);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>这个结果当然是Max=1。但是进入函数后，用int Max(形参)=Max(实参)来构造了形参，形参的优先级高于全局变量，但改变形参不改变全局变量，且函数执行完后，形参释放。</p>
<h2 id="1-2-静态变量"><a href="#1-2-静态变量" class="headerlink" title="1.2  静态变量"></a>1.2  静态变量</h2><h3 id="1-2-0-意义"><a href="#1-2-0-意义" class="headerlink" title="1.2.0  意义"></a>1.2.0  意义</h3><p>static的本质意义在于可控制变量的存储方式和可见性。</p>
<p>在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉。如果想将函数中此变量的值保存至下一次调用时，应该如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static关键字则可以很好的解决这个问题。</p>
<p>另一方面，在 C++ 中，需要一个数据对象为整个类而非某个对象服务，同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。</p>
<h3 id="1-2-1-定义"><a href="#1-2-1-定义" class="headerlink" title="1.2.1  定义"></a>1.2.1  定义</h3><p>使用static修饰的变量。例如static int i=1;</p>
<h3 id="1-2-2-初始化"><a href="#1-2-2-初始化" class="headerlink" title="1.2.2  初始化"></a>1.2.2  初始化</h3><p>初次定义时需要初始化。如果是在函数体内的静态局部变量，则只会初始化一次，之后如果再次调用该函数，还有初始化语句，但这些之后的初始化语句失效。也即是在一个函数执行一次这个过程中，不能两次定义同一个static数据成员。一个函数执行多次，那么每次都可以有静态局部变量定义的语句，但是只有第一次有效。</p>
<p>而静态全局变量只能初始化一次，之后再初始化则报错。</p>
<h3 id="1-2-3-静态局部变量"><a href="#1-2-3-静态局部变量" class="headerlink" title="1.2.3  静态局部变量"></a>1.2.3  静态局部变量</h3><p>静态局部变量存储在静态存储区，生命周期将持续到整个程序结束。</p>
<h3 id="1-2-4-静态全局变量"><a href="#1-2-4-静态全局变量" class="headerlink" title="1.2.4  静态全局变量"></a>1.2.4  静态全局变量</h3><p>静态全局变量具有内部可链接性，作用域仅限其声明的源文件，不能被其他源文件所用，可以避免和其他源文件中的同名变量冲突。</p>
<p>显式static修饰的全局变量和全局函数即是在其他.cpp里使用extern也不能用。</p>
<h3 id="1-2-5-extern-修饰符"><a href="#1-2-5-extern-修饰符" class="headerlink" title="1.2.5  extern 修饰符"></a>1.2.5  extern 修饰符</h3><p>首先需要指出的是，非显式static修饰的全局变量和全局函数默认都是非静态的，即可共享的，但是必须在其他文件里用extern来声明才可以用。</p>
<p>extern 修饰符通常用于当有两个或多个文件希望共享相同的全局变量或函数的时候。一般情况下，没有显式加上static修饰的全局变量（譬如int x）是默认非静态的。如果想在其他的编译单元中使用同一个全局变量，倘若再次定义int x，必然造成重复定义。于是使用extern int x来声明而不再次定义。（注意，不可以extern一个显式static修饰的全局变量，因为static修饰的全局变量的作用域只限于它被定义的那个cpp文件）这样以来，该全局变量对extern它的所有的程序文件都可见的。</p>
<p>进一步讲，我们已知不可以在头文件中定义全局变量，譬如int x。（这等价于int x=0） include的功能很简单，就是复制粘贴。故而对于每个包含了该头文件的cpp文件，复制粘贴后相当于都定义了一次非静态的全局变量int x=0，造成重复定义而链接失败。从而只能在头文件中声明变量，extern int x。</p>
<p>另一方面，全局函数也是默认非static的。但extern修饰对于一个不带static修饰的全局函数没有必要，因为当我们在另一cpp中声明（而非重定义）这一全局函数时，系统会默认视为extern。从而，在另一cpp中调用这一全局函数，不需要extern修饰，但是仍需声明。这样一来，尽量也不在头文件中定义函数。假设在头文件中定义函数，复制粘贴后还是重定义，也只能在头文件中声明函数。不过对于非显式static修饰的函数而言，不带extern的声明会被编译器视为自动带上extern。</p>
<p>综上，extern用于实现只声明，不定义。（不分配空间并赋值）</p>
<p>进一步的例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// func.cpp </span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    x += a;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// main.cpp </span></span><br><span class="line">______(填空)_____<span class="comment">//仅仅只需填写 int add(int)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里不必然声明extern int x，因为调用add后，add和x在一个cpp下，是可以调用的。然而，必须要在main.cpp当中声明add才可以调用。注意到，extern对于非显式static修饰的全局函数没有必要是指不写extern也会自动变extern，而不是说在其他cpp中调用这个函数不需要声明。</p>
<p>另外，编译器能够识别int add(int)和int add(int x)为同一个函数，名字和形参类型一样就是一个函数。</p>
<p>更进一步：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// func.cpp </span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    x += a;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// main.cpp </span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">10</span>；</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">add</span>(<span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我的两个x定义在两个cpp里，且对于各自的cpp而言而言他们都是非static的，故而会multi-definition。</p>
<p>结论：对于头文件，尽量只声明函数而不实现函数。尽量只声明全局变量而不定义全局变量。</p>
<h3 id="1-2-6-全局变量与局部变量"><a href="#1-2-6-全局变量与局部变量" class="headerlink" title="1.2.6  全局变量与局部变量"></a>1.2.6  全局变量与局部变量</h3><p>全局变量和局部变量是从变量的作用域的角度划分。<br>静态变量和动态变量是从变量的内存分配的角度划分。</p>
<p>全局变量本身是非静态存储方式，静态全局变量是静态存储方式。这两者在存储方式上并无不同，区别在于非静态全局变量的作用域是整个源程序，当一个源程序由多个源文件组成时，非静态的全局变量在各个源文件（所有的cpp文件）中都是有效的。而静态全局变量则限制了其作用域，即只在定义该变量的源文件（某个cpp文件）内有效，在同一源程序的其它源文件中不能使用它。（具体解释是静态全局变量仅仅内部可链接）</p>
<h3 id="1-2-7-内部可链接与外部可链接"><a href="#1-2-7-内部可链接与外部可链接" class="headerlink" title="1.2.7  内部可链接与外部可链接"></a>1.2.7  内部可链接与外部可链接</h3><p>编译单元：简单来说一个cpp文件就是一个编译单元。当一个c或cpp文件在编译时，预处理器首先递归包含头文件，形成一个含有所有必要信息的单个源文件，这个源文件就是一个编译单元。</p>
<p>事实上，编译每个编译单元(.cpp)时是相互独立的，即每个cpp文件之间是不知道对方的存在的。（不考虑#include “xxx.cpp” 这种奇葩的写法）编译器会分别将每个编译单元(.cpp)进行编译，生成相应的obj文件。然后链接器会将所有的obj文件进行链接，生成最终可执行文件。</p>
<p>我们知道C++中声明和定义可以分开。例如我们可以一个函数声明定义放在b.cpp中，在a.cpp只需再声明一下这个函数，就可以在a.cpp中使用这个函数。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">show</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;&#125;<span class="comment">//这个是a.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span>void show()</span></span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;<span class="comment">//这个是b.cpp</span></span><br></pre></td></tr></table></figure>
<p>而通过之前的了解，我们知道每个编译单元间是相互独立不知道彼此的存在的。那么a.cpp又是如何知道show函数的定义的呢？</p>
<p>其实在编译一个编译单元(.cpp)生成相应的obj文件过程中，编译器会将分析这个编译单元(.cpp)，将其所能提供给其他编译单元(.cpp)使用的函数，变量定义记录下来。而将自己缺少的函数，变量的定义也记录下来。所以可以认为a.obj和b.obj记录了以下的信息：</p>
<blockquote>
<p>a.obj:我能提供main函数的定义，我需要show函数的定义</p>
<p>b.obj:我能提供show函数的定义</p>
</blockquote>
<p>然后在链接器连接的时候就会知道a.obj需要show函数定义，而b.obj中恰好提供了show函数的定义，通过链接，在最终的可执行文件中我们能看到show函数的运行。</p>
<p>内部连接：如果一个名称对编译单元(.cpp)来说是局部的，在链接的时候其他的编译单元无法链接到它且不会与其它编译单元(.cpp)中的同样的名称相冲突。例如static函数，inline函数等（注：用static修饰的函数，本限定在本源码文件中，不能被本源码文件以外的代码文件调用。而普通的函数，默认是extern的，也就是说，可以被其它代码文件调用该函数）</p>
<p>外部连接：如果一个名称对编译单元(.cpp)来说不是局部的，而在链接的时候其他的编译单元可以访问它，也就是说它可以和别的编译单元交互。例如非静态全局变量就是外部链接。</p>
<p>PPT第14和15页有两个比较简单的例子，可以简单看一看。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        cout &lt;&lt; data &lt;&lt; endl; <span class="comment">// 编译错误</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    A a;  </span><br><span class="line">    a.<span class="built_in">output</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Vehicle.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> wheel = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> wings = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> max_wheel_num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> max_wing_num = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_wheel</span><span class="params">()</span> </span>&#123; wheel++; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add_wing</span><span class="params">()</span> </span>&#123; wings++; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">finished</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (wheel == max_wheel_num)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">Vehicle</span>() &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I am running&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">set_max_wheel_num</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; max_wheel_num = x; <span class="keyword">return</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">set_max_wing_num</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; max_wing_num = x; <span class="keyword">return</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Plane.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Vehicle.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> :</span> <span class="keyword">public</span> Vehicle &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Plane</span>() &#123;</span><br><span class="line">        <span class="built_in">set_max_wheel_num</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">set_max_wing_num</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;I am running and flying&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">finished</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((wheel == <span class="number">3</span>) &amp;&amp; (wings == <span class="number">2</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> [Error] invalid use of member <span class="string">&#x27;A::data&#x27;</span> in <span class="keyword">static</span> member function</span><br></pre></td></tr></table></figure>
<h2 id="1-3-static-数据成员（类变量）"><a href="#1-3-static-数据成员（类变量）" class="headerlink" title="1.3  static 数据成员（类变量）"></a>1.3  static 数据成员（类变量）</h2><h3 id="1-3-0-声明、定义、初始化、赋值"><a href="#1-3-0-声明、定义、初始化、赋值" class="headerlink" title="1.3.0  声明、定义、初始化、赋值"></a>1.3.0  声明、定义、初始化、赋值</h3><p>声明（declaration ）指定了一个变量的标识符，用来描述变量的种类，是类型还是对象，或者函数等。声明，用于编译器(compiler)识别变量名所引用的实体。</p>
<p>广义的角度上来讲定义是声明的特例，一般情况下把分配了内存空间的声明称作定义，不需要存储空间的声明称作声明。</p>
<p>对于全局变量，<code>int a;</code>这是定义性声明，或称定义。<code>extern int a;</code>这是引用性声明。对于.h文件里的class，仅仅<code>static int x；</code>这是声明（没有分配内存空间）。如果在class里就写上<code>static int x=0；</code>（就地初始化），这里既完成了声明，又完成了定义（分配了内存空间），但是这么写不规范，大多编译器都会报错。（下文会解释）</p>
<p><code>extern int a;</code>只能全局变量用，只声明但是不分配。但是全局变量int a既完成了声明也完成了定义，编译器默认赋值为0。对于class，static int a就起到了只声明不分配（也就是只声明不定义）的作用。</p>
<p>初始化和定义的意义相近，广义上将就是分配了储存空间并完成了赋初始值。而赋值就是给已经完成定义的内存空间赋值。</p>
<h3 id="1-3-1-静态数据成员定义与基本性质"><a href="#1-3-1-静态数据成员定义与基本性质" class="headerlink" title="1.3.1  静态数据成员定义与基本性质"></a>1.3.1  静态数据成员定义与基本性质</h3><p>使用static修饰的数据成员，是隶属于类的，称为类的静态数据成员，也称“类变量”。该数据成员被该类的所有对象共享，即所有对象中的这个数据域处在同一内存位置，在类实例化对象前已分配内存空间。</p>
<p>类的静态成员（数据、函数）既可以通过对象来访问，也可以通过类名来访问，如ClassName::static_var或者a.static_var（a为ClassName类的对象）</p>
<p>类的静态成员在实现文件(.cpp)中赋初值，格式为：<code>Type ClassName::static_var = Value;</code></p>
<p>和全局变量一样，类的静态数据成员在程序开始前初始化。应该在h文件里声明（不分配内存空间），在cpp文件里定义（分配内存空间且初始化）。</p>
<p>最好不要在h文件里定义（也就是写static int x=0）。如果这么做，可能会导致重复定义（重复分配内存空间），故而这么写不太好。可能造成重定义而无法完成链接，编译失败。</p>
<h3 id="1-3-2-例子"><a href="#1-3-2-例子" class="headerlink" title="1.3.2  例子"></a>1.3.2  例子</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        cout &lt;&lt; data &lt;&lt; endl; <span class="comment">// 编译错误</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    A a;  </span><br><span class="line">    a.<span class="built_in">output</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> [Error] invalid use of member <span class="string">&#x27;A::data&#x27;</span> in <span class="keyword">static</span> member function</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/01/11/kK3hdEZISCcznH5.png" alt="https://s2.loli.net/2022/01/11/kK3hdEZISCcznH5.png"></p>
<p>这个例子的意义：注意到我通过构造函数构造了个Test数组，含有10个对象，每调用一次构造函数就会给count++；从而加了10次。（这其实也体现了static数据是整个类共享的）</p>
<h2 id="1-4-static成员函数"><a href="#1-4-static成员函数" class="headerlink" title="1.4  static成员函数"></a>1.4  static成员函数</h2><h3 id="1-4-1-定义与基本性质"><a href="#1-4-1-定义与基本性质" class="headerlink" title="1.4.1  定义与基本性质"></a>1.4.1  定义与基本性质</h3><p>在返回值前面添加static修饰的成员函数，称为类的静态成员函数。</p>
<p>和静态数据成员类似，类的静态成员函数既可以通过对象来访问，也可以通过类名来访问，如ClassName::static_function或者a.static_function(a为ClassName类的对象）</p>
<p>静态成员函数属于整个类，在类实例化对象之前已经分配了内存空间。<br>类的非静态成员必须在类实例化对象后才分配内存空间。如果使用静态成员函数访问非静态成员，相当于没有定义一个变量却要使用它。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        cout &lt;&lt; data &lt;&lt; endl; <span class="comment">// 编译错误</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    A a;  </span><br><span class="line">    a.<span class="built_in">output</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> [Error] invalid use of member <span class="string">&#x27;A::data&#x27;</span> in <span class="keyword">static</span> member function</span><br></pre></td></tr></table></figure>
<p>看上去output将会输出a的data，而且a已经初始化了，貌似可以输出。但是由于Static成员函数没有this指针，故而output没法得知输出的是this-&gt;data，从而编译失败。</p>
<p>但是静态成员函数是可以修改静态数据成员的，比如这段代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">int</span> member1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">float</span> member2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">Test</span>(<span class="keyword">int</span> mem):<span class="built_in">member1</span>(mem)&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">MyMember1</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> member1;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Mymember2</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> member2;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">float</span> Test::member2 = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>这里Mymember2是可以访问member2的，因为member2是静态数据成员。</p>
<p>与静态数据成员有区别的是，静态成员函数可以在.h中实现。（可以但是不推荐，志愿者说希望实现都放到相应的.cpp里面）</p>
<p>PPT上的例子较为简单，可自行阅读。</p>
<h1 id="二、常量数据成员与函数"><a href="#二、常量数据成员与函数" class="headerlink" title="二、常量数据成员与函数"></a>二、常量数据成员与函数</h1><h2 id="2-1-常量"><a href="#2-1-常量" class="headerlink" title="2.1  常量"></a>2.1  常量</h2><h3 id="2-1-1-定义"><a href="#2-1-1-定义" class="headerlink" title="2.1.1  定义"></a>2.1.1  定义</h3><p>常量关键字const常用于修饰变量、引用/指针、函数返回值。</p>
<h3 id="2-1-2-性质"><a href="#2-1-2-性质" class="headerlink" title="2.1.2  性质"></a>2.1.2  性质</h3><p>修饰变量时（如const int n = 1;），必须就地初始化，该变量的值在其生命周期内都不会发生变化。修饰引用/指针时（如int a=1; const int&amp; b=a;），不能通过该引用/指针修改相应变量的值，常用于函数参数以保证函数体中无法修改参数的值。修饰函数返回值时（如const int* func() {…}），函数返回值的内容（或其指向的内容）不能被修改。</p>
<h2 id="2-2-常量数据成员-const"><a href="#2-2-常量数据成员-const" class="headerlink" title="2.2  常量数据成员(const)"></a>2.2  常量数据成员(const)</h2><h3 id="2-2-1-定义"><a href="#2-2-1-定义" class="headerlink" title="2.2.1  定义"></a>2.2.1  定义</h3><p>使用const修饰的数据成员，称为类的常量数据成员，在对象（具体某个对象，而非一个类共有）的整个生命周期里不可更改。</p>
<h3 id="2-2-2-初始化"><a href="#2-2-2-初始化" class="headerlink" title="2.2.2  初始化"></a>2.2.2  初始化</h3><p>构造函数的初始化列表中被初始化，就地初始化，但是不允许在构造函数的函数体中通过赋值来设置。</p>
<h3 id="2-2-3-对“不能赋值”的理解"><a href="#2-2-3-对“不能赋值”的理解" class="headerlink" title="2.2.3  对“不能赋值”的理解"></a>2.2.3  对“不能赋值”的理解</h3><p>为什么不能在构造函数里面初始化常量？</p>
<blockquote>
<p>构造函数也是函数，常量的意思就是函数不可以改。——cqq</p>
<p>常量只能定义不能赋值，在任何函数体里的都算是赋值语句，构造函数体也算。——cyd</p>
<p>当执行到构造函数的函数体里的时候，实例已经构造完成了（this指针已经存在），这时就只能修改它的一些非const属性了。——单带师</p>
</blockquote>
<h2 id="2-3-常量成员函数"><a href="#2-3-常量成员函数" class="headerlink" title="2.3  常量成员函数"></a>2.3  常量成员函数</h2><h3 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1  定义"></a>2.3.1  定义</h3><p>成员函数也能用const来修饰，称为常量成员函数。</p>
<h3 id="2-3-2-意义"><a href="#2-3-2-意义" class="headerlink" title="2.3.2  意义"></a>2.3.2  意义</h3><p>实现语句不能修改类的数据成员，即不能改变对象状态（内容）。</p>
<p>非常量对象的常量成员函数不能访问不修改对象状态的非常量成员函数。</p>
<p>所谓常量成员函数不能修改类的数据成员，这句话是对的，因为这是PPT的原话，但是这句话有很多问题。首先，实际上A类a对象的常量成员函数不能修改a的所有成员数据，但是可以修改A类的静态数据成员，甚至还可以修改A类另外一个b对象的成员数据，就只是不能修改独属于自己的成员数据。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">int</span> member1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">float</span> member2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> zcy=<span class="number">0</span>;</span><br><span class="line">   <span class="built_in">Test</span>(<span class="keyword">int</span> mem):<span class="built_in">member1</span>(mem)&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">MyMember1</span><span class="params">(Test &amp;a)</span> <span class="keyword">const</span> </span>&#123;a.zcy+=<span class="number">100</span>;<span class="keyword">return</span> member1;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Mymember2</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> member2;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">float</span> Test::member2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Test <span class="title">a</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	a.<span class="built_in">MyMember1</span>(b);</span><br><span class="line">	cout&lt;&lt;b.zcy&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-3-写法"><a href="#2-3-3-写法" class="headerlink" title="2.3.3  写法"></a>2.3.3  写法</h3><p><code>ReturnType Func(…) const &#123;…&#125;</code></p>
<p>注意区别：<code>const ReturnType Func(…) &#123;…&#125;</code></p>
<p>后者是返回值为常量，也就是前文提及的“修饰函数返回值时（如const int* func() {…}），函数返回值的内容（或其指向的内容）不能被修改。”</p>
<h2 id="2-4-常量对象"><a href="#2-4-常量对象" class="headerlink" title="2.4  常量对象"></a>2.4  常量对象</h2><p>若对象被定义为常量(const ClassName a;)，则它只能调用以const修饰的成员函数与静态成员函数。不能调用任何既非常量，也非静态的函数。以及，常量对象可以成为非常量成员函数的参数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">int</span> member1;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">float</span> member2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> zcy=<span class="number">0</span>;</span><br><span class="line">   <span class="built_in">Test</span>(<span class="keyword">int</span> mem):<span class="built_in">member1</span>(mem)&#123;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;当然调用不了&quot;</span>&lt;&lt;endl;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;这个调用的了&quot;</span>&lt;&lt;endl;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">MyMember1</span><span class="params">(Test &amp;a)</span> <span class="keyword">const</span> </span>&#123;a.zcy+=<span class="number">100</span>;<span class="keyword">return</span> member1;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">Mymember2</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> member2;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">float</span> Test::member2 = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Test <span class="title">a</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> Test <span class="title">c</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">c.<span class="built_in">func2</span>();</span><br><span class="line">a.<span class="built_in">MyMember1</span>(b);</span><br><span class="line">cout&lt;&lt;b.zcy&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">这个调用的了</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>
<h2 id="2-5-常量静态变量"><a href="#2-5-常量静态变量" class="headerlink" title="2.5  常量静态变量"></a>2.5  常量静态变量</h2><h3 id="2-5-1-定义"><a href="#2-5-1-定义" class="headerlink" title="2.5.1  定义"></a>2.5.1  定义</h3><p>我们可以定义既是常量也是静态的变量。常量意味着不可改，静量意味着特定的作用区域。我们可以进一步定义常量静态成员数据，作为不可更改的类变量。</p>
<h3 id="2-5-2-定义方法"><a href="#2-5-2-定义方法" class="headerlink" title="2.5.2  定义方法"></a>2.5.2  定义方法</h3><p>和静态变量一样，在类内只进行声明（不分配空间），在.cpp里才定义。（完成内存分配并赋初值）</p>
<blockquote>
<p>（回顾：static成员数据要在cpp里声明，在.h里定义；而const类型要在初始化列表里初始化或者就地初始化）</p>
</blockquote>
<p>写成const static和static const没有区别。</p>
<p>有两个例外：int和enum（枚举型）类型可以就地初始化。（但也不推荐这么写）故而，静态数据成员必须在类外定义，但是常量静态数据成员中int和enum（枚举型）类型可以就地初始化。</p>
<p>故而判断题：常量静态的成员变量只能在类外进行初始化。是错的，这不是“你可以在类内写，但是不推荐”这意思，而是强调了两个特例。</p>
<h3 id="2-5-3-访问权限"><a href="#2-5-3-访问权限" class="headerlink" title="2.5.3  访问权限"></a>2.5.3  访问权限</h3><p>常量静态变量和静态变量一样，满足访问权限的任意函数均可访问，但由于const的修饰都不能修改。</p>
<h2 id="2-6-常量静态函数不存在"><a href="#2-6-常量静态函数不存在" class="headerlink" title="2.6  常量静态函数不存在"></a>2.6  常量静态函数不存在</h2><p>常量成员函数依赖于具体的对象，不能修改对象的数据成员。静态成员函数不依赖于对象，它属于整个类，只能调用静态成员。故而对于函数而言，常量和静态是矛盾的。</p>
<h2 id="2-7-重载匹配性"><a href="#2-7-重载匹配性" class="headerlink" title="2.7  重载匹配性"></a>2.7  重载匹配性</h2><p><img src="https://s2.loli.net/2022/01/11/vFdsRK7MBulipCO.png" alt="https://s2.loli.net/2022/01/11/vFdsRK7MBulipCO.png"></p>
<p>常量成员函数和非常量成员函数构成重载时，传入两函数的参数中this指针的类型不同。常量成员函数的传入指针类型是const Num<em>，而非常量成员函数的传入指针类型是Num</em>，所以非常量对象会优先匹配非常量成员函数，而不是进行类型转换，将this 转换为const this再使用。</p>
<h1 id="三、构造与析构"><a href="#三、构造与析构" class="headerlink" title="三、构造与析构"></a>三、构造与析构</h1><h2 id="3-1-常量对象的构造与析构"><a href="#3-1-常量对象的构造与析构" class="headerlink" title="3.1  常量对象的构造与析构"></a>3.1  常量对象的构造与析构</h2><p>常量对象和非常量对象基本相同。<br>常量全局对象：在main()函数调用之前进行初始化，在main()函数执行完return，程序结束时，对象被析构。<br>常量局部对象：在程序执行到该局部对象的代码时被初始化。在局部对象生命周期结束、即所在作用域结束后被析构。</p>
<h2 id="3-2-静态对象的构造与析构"><a href="#3-2-静态对象的构造与析构" class="headerlink" title="3.2  静态对象的构造与析构"></a>3.2  静态对象的构造与析构</h2><p>静态全局对象的构造与析构时机和普通全局对象相同。（即：在main()调用前初始化，在main（）执行完return后被析构）</p>
<p>静态局部对象在程序执行到该静态局部对象的代码时被初始化，但是离开作用域不析构。第二次执行到该对象代码时，不再初始化，直接使用上一次的对象。（这里和静态局部变量非常相似）</p>
<p>在main()函数结束后被析构。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;=n)</span><br><span class="line">			<span class="function"><span class="keyword">static</span> A <span class="title">static_obj</span><span class="params">(<span class="string">&quot;static&quot;</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如这段代码，虽然看上去会给static_obj多次构造，但是由于其是静态局部对象，故而只会构造一次。之后每次利用上一次剩下部分。（相当于函数里内，第一次以后的对静态局部变量的构造失效）</p>
<h2 id="3-3-类静态对象构造与析构"><a href="#3-3-类静态对象构造与析构" class="headerlink" title="3.3  类静态对象构造与析构"></a>3.3  类静态对象构造与析构</h2><p>类A的对象a作为类B的静态变量。比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> A a; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>a的构造与析构表现和全局对象类似，即在main()函数调用之前进行初始化，在main()函数执行完return，程序结束时，对象被析构。a作为b的类对象，和B是否实例化无关。（这个和类里面的默认类型的静态变量,比如B里面的对象static int c;是一样的）</p>
<p><img src="https://s2.loli.net/2022/01/11/tg7ZEfJmuDk63eV.png" alt="https://s2.loli.net/2022/01/11/tg7ZEfJmuDk63eV.png"></p>
<p>这个例子值得注意的就是，fun函数体类的静态局部对象只有一次构造，并没有四次。</p>
<p>另外，<code>A B::a1(“static B::a1”);</code>是什么意思？<br>这里是在类外定义B的static数据成员a1，而前面的A则是在使用构造函数。这里必须指定是B::a1，不然<code>A a1(“static B::a1”);</code>则会定义一个全局变量，而不是构造B的static数据成员。</p>
<h2 id="3-4-参数对象构造与析构"><a href="#3-4-参数对象构造与析构" class="headerlink" title="3.4  参数对象构造与析构"></a>3.4  参数对象构造与析构</h2><h3 id="3-4-1-传递形参"><a href="#3-4-1-传递形参" class="headerlink" title="3.4.1  传递形参"></a>3.4.1  传递形参</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(A b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In fun: b.s=&quot;</span> &lt;&lt; b.s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br></pre></td></tr></table></figure>
<p>在函数被调用时，b被构造，调用拷贝构造函数（见拷贝构造一节的PPT）进行初始化。默认情况下，对象b的属性值和a一致。在函数结束时，调用析构函数，b被析构。</p>
<p><img src="https://s2.loli.net/2022/01/11/Z147ePBAHWhI2c5.png" alt="https://s2.loli.net/2022/01/11/Z147ePBAHWhI2c5.png"></p>
<p>结合后续学习的拷贝构造和移动构造，我们当然可以确定形参会发生一次拷贝构造，但是为什么没有相应的输出呢？</p>
<p>因为，没有显式定义拷贝构造函数，系统调用了隐式生成的拷贝构造函数，这当然是没有输出的。形参的构造用的是拷贝构造函数，可是析构却是共用的一个析构函数。</p>
<h3 id="3-4-2-传递引用与指针"><a href="#3-4-2-传递引用与指针" class="headerlink" title="3.4.2  传递引用与指针"></a>3.4.2  传递引用与指针</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(A &amp;b)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;In fun: b.s=&quot;</span> &lt;&lt; b.s &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fun</span>(a);</span><br></pre></td></tr></table></figure>
<p>在函数被调用时，b不需要被拷贝构造，因为b是a的引用。在函数结束时，也不需要调用析构函数，因为b只是一个引用，而不是A的对象。</p>
<h3 id="3-4-3-类成员含有指针"><a href="#3-4-3-类成员含有指针" class="headerlink" title="3.4.3  类成员含有指针"></a>3.4.3  类成员含有指针</h3><p>如果传入形参而不是引用或指针，由于拷贝构造不会将被拷贝者置空，故而形参和实参的指针指向了完全相同的地址。但是形参会在函数体结束后析构，将形参指向的空间释放掉。我的实参又会在主函数结束后析构，这时实参指向的空间将会被再次析构，反复析构，析构空的内存空间，从而报错。</p>
<p>这另一方面启发我们，含有指针的类，一般希望用移动构造而非拷贝构造。</p>
<h3 id="3-4-4-传入引用的优点"><a href="#3-4-4-传入引用的优点" class="headerlink" title="3.4.4  传入引用的优点"></a>3.4.4  传入引用的优点</h3><p>尽量使用对象引用作为参数，这样做还可以减少时间开销。（因为省去了拷贝构造形参的时间）</p>
<h1 id="四、对象的-new-和-delete"><a href="#四、对象的-new-和-delete" class="headerlink" title="四、对象的 new 和 delete"></a>四、对象的 new 和 delete</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1  概述"></a>4.1  概述</h2><p>new：生成一个类对象（注意不是类静态对象），并返回地址。（调用默认构造函数，生成了100个A类对象） A <em>pA=new A[100]; （调用默认构造函数）A </em>pA=new A（100）（调用带参数的构造函数，构造了一个A类对象）</p>
<p>delete：删除该类对象，释放内存资源。（调用析构函数）</p>
<p><code>delete pA;</code>（释放生成的那个A类对象）；<code>delete [] pA;</code>（释放生成的那100个A类对象）</p>
<h2 id="4-2-图示"><a href="#4-2-图示" class="headerlink" title="4.2  图示"></a>4.2  图示</h2><p>对于大多数编译器，这个过程可以如下概述。   </p>
<p><img src="https://s2.loli.net/2022/01/11/IRrh3fpX9QvMS7W.png" alt="https://s2.loli.net/2022/01/11/IRrh3fpX9QvMS7W.png"></p>
<p><img src="https://s2.loli.net/2022/01/11/hSsgBUed3YrWAak.png" alt="https://s2.loli.net/2022/01/11/hSsgBUed3YrWAak.png"></p>
<p><img src="https://s2.loli.net/2022/01/11/fNFlxUQiBdMbKHa.png" alt="https://s2.loli.net/2022/01/11/fNFlxUQiBdMbKHa.png"></p>
<p><img src="https://s2.loli.net/2022/01/11/p7r5ERiJfT6t9dK.png" alt="https://s2.loli.net/2022/01/11/p7r5ERiJfT6t9dK.png"></p>
<p><img src="https://s2.loli.net/2022/01/11/AoqHudFcbUpXYrQ.png" alt="https://s2.loli.net/2022/01/11/AoqHudFcbUpXYrQ.png"></p>
<h2 id="4-3-匹配项"><a href="#4-3-匹配项" class="headerlink" title="4.3  匹配项"></a>4.3  匹配项</h2><h3 id="4-3-1-搭配使用"><a href="#4-3-1-搭配使用" class="headerlink" title="4.3.1  搭配使用"></a>4.3.1  搭配使用</h3><p>new和delete要配套使用；new 和 delete，new[] 和 delete[]。</p>
<h3 id="4-3-2-搭配不当"><a href="#4-3-2-搭配不当" class="headerlink" title="4.3.2  搭配不当"></a>4.3.2  搭配不当</h3><p>对于大多编译器，如果同时使用new[]和delete，会有什么后果？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">A *pA = <span class="keyword">new</span> A[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">delete</span> pA;</span><br></pre></td></tr></table></figure>
<p>该delete命令做了两件事：调用一次 pA 指向的对象的析构函数，释放pA地址的内存。因为，只调用了一次析构函数，故而如果类对象中有大量申请内存的操作，那么因为没有调用析构函数，这些内存无法被释放，造成内存泄漏。</p>
<p>此外，直接释放pA指向的内存空间，这个会造成严重的段错误，程序必然会崩溃。因为分配空间的起始地址是pA-4byte。（delete[] pA的释放地址自动转换为pA-4byte）。</p>
<p><img src="https://s2.loli.net/2022/01/11/JtHQEs9OX1jiCfc.png" alt="https://s2.loli.net/2022/01/11/JtHQEs9OX1jiCfc.png"></p>
<p>new是会调用类A的构造函数的。（过程：分配内存-初始化-返回指针）<br>注意到这里第四个，我实际上是构造了A的指针数组，构造了10个A*类型的指针，但是没调用构造函数。</p>
<h1 id="五、友元"><a href="#五、友元" class="headerlink" title="五、友元"></a>五、友元</h1><h2 id="5-1-定义与基本性质"><a href="#5-1-定义与基本性质" class="headerlink" title="5.1  定义与基本性质"></a>5.1  定义与基本性质</h2><p>A类声明B为友元类或者友元函数，则B具有访问A的private及protected成员的访问权限，即可以访问A的一切成员。</p>
<p>友元的声明只能在类内进行。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test</span>(<span class="keyword">int</span> i) : <span class="built_in">id</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;obj_&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot; created\n&quot;</span>; &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst); </span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src); </span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; in, Test&amp; dst) &#123;</span><br><span class="line">    in &gt;&gt; dst.id;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Test&amp; src) &#123;</span><br><span class="line">    out &lt;&lt; src.id;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;   <span class="comment">// 以上类中声明了Test类的两个友元函数 —— 全局流运算符重载函数，</span></span><br><span class="line">    <span class="comment">// 使这两个函数在实现时可以访问对象的私有成员（如int id）.  </span></span><br><span class="line"><span class="comment">//并且，这两个流运算符任然是全局函数</span></span><br><span class="line"><span class="comment">//注意，&gt;&gt;的两个参数都不能加const，而&lt;&lt;的ostream参数不能加const</span></span><br></pre></td></tr></table></figure>
<p>流运算符重载往往会声明为友元函数，因为经常需要输出私有成员数据。</p>
<p>被友元声明的函数一定不是当前类的成员函数，即使该函数的定义写在当前类内。（注意事项一定不是，而不是不一定是）当前类的成员函数也不需要友元修饰。（因为成员函数本身就可以访问所有数据成员）</p>
<h2 id="5-2-跨类友元"><a href="#5-2-跨类友元" class="headerlink" title="5.2  跨类友元"></a>5.2  跨类友元</h2><h3 id="5-2-1-定义"><a href="#5-2-1-定义" class="headerlink" title="5.2.1  定义"></a>5.2.1  定义</h3><p>可以声明别的类的成员函数，为当前类的友元。其他类的构造函数、析构函数也可以是友元。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; </span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">X::foo</span><span class="params">(Y)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="title">X::X</span><span class="params">(Y)</span>, X::~<span class="title">X</span><span class="params">()</span></span>; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>X的构造函数X::X()和析构函数X::~X()为Y的友元函数，则在它们的函数体内可直接访问/修改Y的私有成员。</p>
<h3 id="5-2-2-区域无关性"><a href="#5-2-2-区域无关性" class="headerlink" title="5.2.2  区域无关性"></a>5.2.2  区域无关性</h3><p>友元的声明与当前所在域是否为private或public无关。</p>
<p><img src="https://s2.loli.net/2022/01/11/GQfuOc2b5KD1eyl.png" alt="https://s2.loli.net/2022/01/11/GQfuOc2b5KD1eyl.png"></p>
<h3 id="5-2-3-不冲突性"><a href="#5-2-3-不冲突性" class="headerlink" title="5.2.3  不冲突性"></a>5.2.3  不冲突性</h3><p>一个普通函数可以是多个类的友元函数。</p>
<h2 id="5-3-友元类"><a href="#5-3-友元类" class="headerlink" title="5.3  友元类"></a>5.3  友元类</h2><p>可对class/struct/union进行友元声明，代表该类的所有成员函数均为友元函数。</p>
<p>对基础类型的友元声明会被忽略（因为没有实际价值）。编译器可能会发出警告，但不会认为是错误。</p>
<p><img src="https://s2.loli.net/2022/01/11/LJ51QTet64hOywo.png" alt="https://s2.loli.net/2022/01/11/LJ51QTet64hOywo.png"></p>
<p>两行的区别：friend Y必须先定义class Y，但是friend class X可以不用先定义class X。</p>
<h2 id="5-4-友元的注意事项"><a href="#5-4-友元的注意事项" class="headerlink" title="5.4  友元的注意事项"></a>5.4  友元的注意事项</h2><h3 id="5-4-1-非对称性"><a href="#5-4-1-非对称性" class="headerlink" title="5.4.1  非对称性"></a>5.4.1  非对称性</h3><p>类A中声明B是A的友元类，则B可以访问A的私有成员，但A不能访问B的私有成员。</p>
<h3 id="5-4-2-非传递性"><a href="#5-4-2-非传递性" class="headerlink" title="5.4.2  非传递性"></a>5.4.2  非传递性</h3><p>你的附庸的附庸不是你的附庸。</p>
<h3 id="5-4-3-不可继承"><a href="#5-4-3-不可继承" class="headerlink" title="5.4.3  不可继承"></a>5.4.3  不可继承</h3><h3 id="5-4-4-友元声明不能定义新的class"><a href="#5-4-4-友元声明不能定义新的class" class="headerlink" title="5.4.4  友元声明不能定义新的class"></a>5.4.4  友元声明不能定义新的class</h3><p><img src="https://s2.loli.net/2022/01/11/k9plcrx1AvFo6Vt.png" alt="https://s2.loli.net/2022/01/11/k9plcrx1AvFo6Vt.png"></p>
<p>左图是我先有了B才能定义B为A的友元。而右边企图在X类内定义Y为友元类，并给出Y的定义，这是不合法的。（不过friend class Y; 倒是可以，即使so far还没有定义Y）</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>oop笔记  L7  组合与继承</title>
    <url>/2022/01/12/CS/OOP/L7%20%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="L7-组合与继承"><a href="#L7-组合与继承" class="headerlink" title="L7 组合与继承"></a>L7 组合与继承</h1><blockquote>
<p>如果阅读时间不够充足，建议阅读课堂的扩展部分。</p>
<ul>
<li>1.1.3 public接口访问private数据</li>
<li>3.3 重写覆盖的总结</li>
</ul>
</blockquote>
<h1 id="一、组合"><a href="#一、组合" class="headerlink" title="一、组合"></a>一、组合</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1  定义"></a>1.1  定义</h2><p>如果对象a是对象b的一个组成部分，则称b为a的整体对象，a为b的部分对象。并把b和a之间的关系，称为“整体－部分”关系（也可称为“组合”或“has-a”关系）。</p>
<h2 id="1-2-两种实现方式"><a href="#1-2-两种实现方式" class="headerlink" title="1.2  两种实现方式"></a>1.2  两种实现方式</h2><h3 id="1-2-1-公有成员"><a href="#1-2-1-公有成员" class="headerlink" title="1.2.1  公有成员"></a>1.2.1  公有成员</h3><p>已有类的对象作为新类的公有数据成员，这样通过允许直接访问子对象而“提供”旧类接口。</p>
<h3 id="1-2-2-私有成员"><a href="#1-2-2-私有成员" class="headerlink" title="1.2.2  私有成员"></a>1.2.2  私有成员</h3><p>已有类的对象作为新类的私有数据成员。新类可以调整旧类的对外接口，可以不使用旧类原有的接口（相当于对接口作了转换）</p>
<p>我们有如下命名两类组合方式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Wheel w;<span class="comment">//private组合</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Engine e; <span class="comment">//public组合</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-public接口访问private数据"><a href="#1-2-3-public接口访问private数据" class="headerlink" title="1.2.3  public接口访问private数据"></a>1.2.3  public接口访问private数据</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> _num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;_num=n;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> _num;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;_num=n;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Wheel w;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Engine e; <span class="comment">/// 公有成员，直接访问其接口</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setWheel</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;w.<span class="built_in">set</span>(n);&#125; <span class="comment">/// 提供私有成员的访问接口</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Car c;</span><br><span class="line">  c.e.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">  c.<span class="built_in">setWheel</span>(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Car由Engine和Wheel两部分组成。如果我的Wheel设为私有，那么我没法直接在类外（主函数里）访问w.set(n)，因为类外无法访问私有成员。私有成员的所有接口会在类外整体私有化，但是私有成员的public接口仍然可以被类内函数调用。可以设置public接口setwheel，setweel是个public的类内函数，可以访问类内private成员，从而我能够通过此接口访问到private数据成员wheel w的public接口，但是也无法直接访问private部分的private数据。同理，观察wheel类和Engine类的写法，其实也是这种给private对象添加public接口的思想。</p>
<p>将此例子进一步阐述：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> _num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Wheel</span>(<span class="keyword">int</span> x)&#123;_num=x;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;_num=n;&#125;<span class="comment">//没有get函数是没法直接在Car类里访问到private成员的private的</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getwheelvalue</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;_num;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Engine</span>(<span class="keyword">int</span> y)&#123;_num=y;&#125;</span><br><span class="line">    <span class="keyword">int</span> _num;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;_num=n;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  Wheel w;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Engine e; <span class="comment">/// 公有成员，直接访问其接口</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setWheel</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;w.<span class="built_in">set</span>(n);&#125; <span class="comment">/// 提供私有成员的访问接口</span></span><br><span class="line">  <span class="built_in">Car</span>(<span class="keyword">int</span> x,<span class="keyword">int</span> y):<span class="built_in">w</span>(x),<span class="built_in">e</span>(y)&#123;&#125;;</span><br><span class="line">  <span class="comment">//Car(int x):Egine(x),Wheel(x)&#123;&#125;;</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;my Engine is &quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;e._num&lt;&lt;<span class="string">&quot; my Wheel is &quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;w.<span class="built_in">getwheelvalue</span>()&lt;&lt;endl;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">Car <span class="title">c</span><span class="params">(<span class="number">5</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">  c.<span class="built_in">print</span>();</span><br><span class="line">  c.e.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">  c.<span class="built_in">setWheel</span>(<span class="number">4</span>);</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output:</span><br><span class="line">my Engine is <span class="number">3</span> my Wheel is <span class="number">5</span></span><br><span class="line">my Engine is <span class="number">1</span> my Wheel is <span class="number">5</span></span><br><span class="line">my Engine is <span class="number">1</span> my Wheel is <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>第一，Wheel w是Car的私有成员，Car的public接口可以访问Car的private数据成员，故而可以访问w，但是无法访问私有数据成员的私有数据成员，故而无法直接在print中输出w._num，我们选择了再对Wheel设计私有数据成员的接口getwheelvalue来访问wheel的_num。</p>
<p>第二，对于Car的构造函数的初始化列表，当Car的数据成员是int x时，我们写的是x(i)，而不是int(i)。（否则，如果有多个int类的成员，初始化就无法进行了）所以这里写的也是w(x)，而不是Wheel(x)。这里其实也体现了基本数据和自定义类的类比关系。</p>
<p>第三，我们这里采用了初始化列表来构造Car，而不是采用函数体内赋值。因为C++11直接禁止了这类的函数体内赋值。</p>
<p>我们对此的理解：如果是函数体内赋值来构造Car，那么需要定义Wheel和Engine的默认构造函数（如果我们不定义带有参数的构造函数，系统会自动生成）除此之外，类似w=5这样的语句还需要隐式调用带有参数的构造函数生成Wheel（5）,然后调用隐式生成的移动赋值语句给w赋值。这个方式比起初始化列表效率低下太多。（如此禁止可能还有其他的因果关系）</p>
<p>这其实就是1.3.1的第一句话的理解。</p>
<h2 id="1-3-构造与析构"><a href="#1-3-构造与析构" class="headerlink" title="1.3  构造与析构"></a>1.3  构造与析构</h2><h3 id="1-3-1-子对象参数构造"><a href="#1-3-1-子对象参数构造" class="headerlink" title="1.3.1 子对象参数构造"></a>1.3.1 子对象参数构造</h3><p>子对象构造时若需要参数，则应在当前类的构造函数的初始化列表中进行。不能够通过先默认构造。然后再在函数体内赋值。</p>
<p>具体而言，C++11的规定是其他类的子对象必须要通过初始化列表来构造，如果不写在初始化列表里，那么就调用默认构造。</p>
<p>如果A类内组合有其他类B的对象，那么B的对象必须要通过初始化列表来构造，可以不写初始化列表，那么会调用B的默认构造函数。但是一定不能在A的构造函数体内进行构造，效率太低。</p>
<p>这个地方感觉会和我们的理解发生冲突，因为类当中经常会需要int数据成员。int是一个类，那难道int只能在初始化列表里赋值吗？</p>
<p>这个理解是错的。int不能算是一个类，它和char,long,double都只是基本的变量类型。组合指的是类和类之间，数据成员里的int，这不是组合。基本数据类型和自己写的类不是一个东西。而且对于短赋值语句，尽量能放初始化列表就不放函数体内，前者效率更高。</p>
<p>但是Vector是个封装好了的类，<code>#include &lt;vector&gt; using std::vector</code>就是把包含它的库搞到你的程序中。</p>
<h3 id="1-3-2-子对象默认构造"><a href="#1-3-2-子对象默认构造" class="headerlink" title="1.3.2  子对象默认构造"></a>1.3.2  子对象默认构造</h3><p>若使用默认构造函数来构造子对象，则不用做任何处理。</p>
<h3 id="1-3-3-构造次序"><a href="#1-3-3-构造次序" class="headerlink" title="1.3.3  构造次序"></a>1.3.3  构造次序</h3><p>先完成子对象构造，再完成父对象构造。</p>
<h3 id="1-3-4-析构次序"><a href="#1-3-4-析构次序" class="headerlink" title="1.3.4  析构次序"></a>1.3.4  析构次序</h3><p>子对象构造的次序仅由在类中声明的次序所决定。</p>
<p>析构函数的次序与构造函数相反，也就是完全反着析构一次即可。</p>
<h3 id="1-3-5-例子"><a href="#1-3-5-例子" class="headerlink" title="1.3.5  例子"></a>1.3.5  例子</h3><p>例1：构造与析构的执行顺序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S1</span> &#123;</span> <span class="comment">//Single1类别</span></span><br><span class="line">  <span class="keyword">int</span> ID;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">S1</span>(<span class="keyword">int</span> id) : <span class="built_in">ID</span>(id) &#123; cout &lt;&lt; <span class="string">&quot;S1(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  ~<span class="built_in">S1</span>() &#123; cout &lt;&lt; <span class="string">&quot;~S1()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S2</span> &#123;</span><span class="comment">//Single2类别</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">S2</span>() &#123; cout &lt;&lt; <span class="string">&quot;S2()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  ~<span class="built_in">S2</span>() &#123; cout &lt;&lt; <span class="string">&quot;~S2()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C3</span> &#123;</span><span class="comment">//Composite3类别</span></span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">  S1 sub_obj1; <span class="comment">/// 构造函数带参数</span></span><br><span class="line">  S2 sub_obj2; <span class="comment">/// 构造函数不带参数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">C3</span>() : <span class="built_in">num</span>(<span class="number">0</span>), <span class="built_in">sub_obj1</span>(<span class="number">123</span>) <span class="comment">/// 构造函数初始化列表中构造子对象</span></span><br><span class="line">        &#123; cout &lt;&lt; <span class="string">&quot;C3()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="built_in">C3</span>(<span class="keyword">int</span> n) : <span class="built_in">num</span>(n), <span class="built_in">sub_obj1</span>(<span class="number">123</span>) </span><br><span class="line">        &#123; cout &lt;&lt; <span class="string">&quot;C3(int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="built_in">C3</span>(<span class="keyword">int</span> n, <span class="keyword">int</span> k) : <span class="built_in">num</span>(n), <span class="built_in">sub_obj1</span>(k) </span><br><span class="line">        &#123; cout &lt;&lt; <span class="string">&quot;C3(int, int)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  ~<span class="built_in">C3</span>() &#123; cout &lt;&lt; <span class="string">&quot;~C3()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  C3 a, <span class="built_in">b</span>(<span class="number">1</span>), <span class="built_in">c</span>(<span class="number">2</span>), <span class="built_in">d</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">S1</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S2</span>()</span><br><span class="line"><span class="built_in">C3</span>()</span><br><span class="line"><span class="built_in">S1</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S2</span>()</span><br><span class="line"><span class="built_in">C3</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S1</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S2</span>()</span><br><span class="line"><span class="built_in">C3</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S1</span>(<span class="keyword">int</span>)</span><br><span class="line"><span class="built_in">S2</span>()</span><br><span class="line"><span class="built_in">C3</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span><br><span class="line">~<span class="built_in">C3</span>()</span><br><span class="line">~<span class="built_in">S2</span>()</span><br><span class="line">~<span class="built_in">S1</span>()</span><br><span class="line">~<span class="built_in">C3</span>()</span><br><span class="line">~<span class="built_in">S2</span>()</span><br><span class="line">~<span class="built_in">S1</span>()</span><br><span class="line">~<span class="built_in">C3</span>()</span><br><span class="line">~<span class="built_in">S2</span>()</span><br><span class="line">~<span class="built_in">S1</span>()</span><br><span class="line">~<span class="built_in">C3</span>()</span><br><span class="line">~<span class="built_in">S2</span>()</span><br><span class="line">~<span class="built_in">S1</span>()</span><br></pre></td></tr></table></figure>
<p>输出结果，前面12行，每三行为一个单位，是一个构造。且先按照声明次序构造子对象sub_obj1，之后是sub_obj2，最后完成C3构造。</p>
<p>至于析构顺序，那就纯粹是把前12行向下对折。</p>
<p>例2：对象组合的拷贝与赋值（对课件上的例子进行优化，更清楚些）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">C1</span>(<span class="keyword">int</span> n):<span class="built_in">i</span>(n)&#123;cout&lt;&lt;<span class="string">&quot;C1 with int: &quot;</span>&lt;&lt;n&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">C1</span>(<span class="keyword">const</span> C1 &amp;other) <span class="comment">/// 显式定义拷贝构造函数</span></span><br><span class="line">        &#123;i=other.i; cout &lt;&lt; <span class="string">&quot;C1(const C1 &amp;other)&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="built_in">C2</span>(<span class="keyword">int</span> n):<span class="built_in">j</span>(n)&#123;cout&lt;&lt;<span class="string">&quot;C2 with int: &quot;</span>&lt;&lt;n&lt;&lt;endl;&#125;</span><br><span class="line">    C2&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> C2&amp; right)&#123;<span class="comment">/// 显式定义赋值运算符</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;right)&#123;</span><br><span class="line">            j = right.j;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator=(const C2&amp;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C3</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C1 c1;</span><br><span class="line">    C2 c2;</span><br><span class="line">    <span class="built_in">C3</span>():<span class="built_in">c1</span>(<span class="number">0</span>), <span class="built_in">c2</span>(<span class="number">0</span>)&#123;cout&lt;&lt;<span class="string">&quot;C3 without arg&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="built_in">C3</span>(<span class="keyword">int</span> i, <span class="keyword">int</span> j):<span class="built_in">c1</span>(i), <span class="built_in">c2</span>(j)&#123;cout&lt;&lt;<span class="string">&quot;C3 with i and j&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot;c1.i = &quot;</span> &lt;&lt; c1.i &lt;&lt; <span class="string">&quot; c2.j = &quot;</span> &lt;&lt; c2.j &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">C3 <span class="title">a</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="function">C3 <span class="title">b</span><span class="params">(a)</span></span>;  <span class="comment">//C1执行显式定义的拷贝构造，C2执行隐式定义的拷贝构造</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;b: &quot;</span>;</span><br><span class="line">    b.<span class="built_in">print</span>();</span><br><span class="line">    C3 c;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c: &quot;</span>;</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">    c = a;  <span class="comment">//C1执行隐式定义的拷贝赋值，C2执行显式定义的拷贝赋值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;c: &quot;</span>;</span><br><span class="line">    c.<span class="built_in">print</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">C1 with <span class="keyword">int</span>: <span class="number">1</span></span><br><span class="line">C2 with <span class="keyword">int</span>: <span class="number">2</span></span><br><span class="line"><span class="function">C3 with i <span class="keyword">and</span> j</span></span><br><span class="line"><span class="function"><span class="title">C1</span><span class="params">(<span class="keyword">const</span> C1 &amp;other)</span></span></span><br><span class="line"><span class="function">b: c1.i =</span> <span class="number">1</span> c2.j = <span class="number">2</span></span><br><span class="line">C1 with <span class="keyword">int</span>: <span class="number">0</span></span><br><span class="line">C2 with <span class="keyword">int</span>: <span class="number">0</span></span><br><span class="line">C3 without arg</span><br><span class="line">c: c1.i = <span class="number">0</span> c2.j = <span class="number">0</span></span><br><span class="line"><span class="keyword">operator</span>=(<span class="keyword">const</span> C2&amp;)</span><br><span class="line">c: c1.i = <span class="number">1</span> c2.j = <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>例3：区分数据来源</p>
<p>错误的是：</p>
<p><img src="https://s2.loli.net/2022/01/11/JLqScl8DQyCdGO3.png" alt="https://s2.loli.net/2022/01/11/JLqScl8DQyCdGO3.png"></p>
<p>注意，int data{2018};和int data=2018;这两个写法一致。这里B类的print函数输出的是B的data，而不是数据成员a的data。但是构造函数B(int i)a(i)是用2019在构造a，这一个小细节比较坑。</p>
<h1 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1  定义"></a>2.1  定义</h2><p>一般－特殊”结构，也称“分类结构”，是由一组具有“一般－特殊”关系的类所组成的结构，C++使用继承来表达类间的“一般－特殊结构”。</p>
<p>A继承B，则：<br>属性和服务上：类A具有类B全部的属性和服务，而且具有自己特有的某些属性或服务。A为B的特殊类，B为A的一般类。</p>
<p>对象关系上：类A的全部对象都是类B的对象，而且类B中存在不属于类A的对象。A是B的特殊类，B是A的一般类。</p>
<h2 id="2-2-继承方式与语法"><a href="#2-2-继承方式与语法" class="headerlink" title="2.2  继承方式与语法"></a>2.2  继承方式与语法</h2><p>被继承的已有类，被称为基类(base class)，也称“父类”、“一般类”。<br>通过继承得到的新类，被为派生类(derived class，也称“子类”、“扩展类”、“特殊类”。</p>
<p>常见的继承方式：public, private</p>
<p><code>class Derived : [private] Base &#123; .. &#125;;</code> 缺省继承方式为private继承。</p>
<p><code>class Derived : public Base &#123; ... &#125;;</code></p>
<p>protected 继承很少被使用</p>
<p><code>class Derived : protected Base &#123; ... &#125;;</code></p>
<p>注意，protect数据经过继承可以给子类访问，但是private数据经过继承不能给子类访问，且二者都不能类外访问。这里描述的是protect数据类型，而不是protect继承，protect继承很少用到。</p>
<h2 id="2-3-无法继承"><a href="#2-3-无法继承" class="headerlink" title="2.3  无法继承"></a>2.3  无法继承</h2><p>构造函数：创建派生类对象时，必须调用派生类的构造函数。派生类构造函数调用基类的构造函数，以创建派生对象的基类部分。C++11新增了继承构造函数的机制（使用using），但默认不继承。</p>
<p>析构函数：释放对象时，先调用派生类析构函数，再调用基类析构函数。这个和组合相似。</p>
<p>赋值运算符：编译器不会继承基类的赋值运算符（参数为基类）。但会自动合成隐式定义的派生类的赋值运算符（参数为派生类），其功能为调用基类的赋值运算符。</p>
<p>友元函数：不是类成员，故而无法继承</p>
<p>例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot;Base::f()&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">    Base &amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> Base &amp;right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> != &amp;right)&#123;</span><br><span class="line">            k = right.k;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;operator= (const Base &amp;right)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span>:</span> <span class="keyword">public</span> Base&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Derive d, d2;</span><br><span class="line">    cout &lt;&lt; d.k &lt;&lt; endl; <span class="comment">//Base数据成员被继承</span></span><br><span class="line">    d.<span class="built_in">f</span>(); <span class="comment">//Base::f()被继承</span></span><br><span class="line">    </span><br><span class="line">    Base e;</span><br><span class="line">    <span class="comment">//d = e; //编译错误，Base的赋值运算符不被继承</span></span><br><span class="line">    d = d2;  <span class="comment">//调用隐式定义的赋值运算符，派生类隐式合成的赋值运算符会调用基类的赋值运算符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Base::<span class="built_in">f</span>()</span><br><span class="line"><span class="keyword">operator</span>= (<span class="keyword">const</span> Base &amp;right)</span><br></pre></td></tr></table></figure>
<p>注意前文提及派生类会自动生成赋值运算符，参数为派生类。也就是仅仅在派生类对象间赋值，基类和派生类相互赋值在不定义类型转换的情况下是不允许的。</p>
<h2 id="2-4-构造与析构"><a href="#2-4-构造与析构" class="headerlink" title="2.4  构造与析构"></a>2.4  构造与析构</h2><p>继承与组合在构造以及析构上的执行顺序类似。</p>
<p>基类中的数据成员，通过继承成为派生类对象的一部分，需要在构造派生类对象的过程中调用基类构造函数来正确初始化。</p>
<p>若没有显式调用，则编译器会自动调用基类的默认构造函数。</p>
<p>若想要显式调用，则只能在派生类构造函数的初始化成员列表中进行，既可以调用基类中不带参数的默认构造函数，也可以调用合适的带参数的其他构造函数。先执行基类的构造函数来初始化继承来的数据，再执行派生类的构造函数。</p>
<p>对象析构时，先执行派生类析构函数，再执行由编译器自动调用的基类的析构函数。</p>
<p>例1：隐式调用默认构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() : <span class="built_in">data</span>(<span class="number">0</span>) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">            <span class="comment">/// 默认构造函数</span></span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i) : <span class="built_in">data</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derive</span>() &#123; cout &lt;&lt; <span class="string">&quot;Derive::Derive()&quot;</span> &lt;&lt; endl; &#125; </span><br><span class="line">    <span class="comment">/// 无显式调用基类构造函数，则调用基类默认构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derive obj; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// g++ 1.cpp –o 1.out -std=c++11</span></span><br><span class="line">Output：</span><br><span class="line">Base::<span class="built_in">Base</span>(<span class="number">0</span>)</span><br><span class="line">Derive::<span class="built_in">Derive</span>()</span><br></pre></td></tr></table></figure>
<p>先完成了基类部分的构造，再完成了派生类部分的构造。</p>
<p>例2：显式调用了基类带参数的构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() : <span class="built_in">data</span>(<span class="number">0</span>) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">            <span class="comment">/// 默认构造函数</span></span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i) : <span class="built_in">data</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; data &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derive</span>(<span class="keyword">int</span> i) : <span class="built_in">Base</span>(i) &#123; cout &lt;&lt; “Derive::<span class="built_in">Derive</span>()” &lt;&lt; endl; &#125; </span><br><span class="line">    <span class="comment">/// 显式调用基类构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derive <span class="title">obj</span><span class="params">(<span class="number">356</span>)</span></span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// g++ 1.cpp –o 1.out -std=c++11</span></span><br></pre></td></tr></table></figure>
<p>显式调用了基类的带参数的构造函数只能在初始化列表中进行。</p>
<p>例4：启用using关键字</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i) : <span class="built_in">data</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> Base::Base;       <span class="comment">///相当于 Derive(int i):Base(i)&#123;&#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derive <span class="title">obj</span><span class="params">(<span class="number">356</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// g++ 1.cpp –o 1.out -std=c++11</span></span><br><span class="line">Output:</span><br><span class="line">Base::<span class="built_in">Base</span>(<span class="number">356</span>)</span><br></pre></td></tr></table></figure>
<p>在派生类中使用 <code>using Base::Base;</code> 来继承基类构造函数，相当于给派生类“定义”了相应参数的构造函数。如果基类里有多个不同参数的构造函数，using语句会分别构造对应的不同参数的构造函数。</p>
<p>例5：using一并启用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i) : <span class="built_in">data</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i, <span class="keyword">int</span> j) </span><br><span class="line">        &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; “,<span class="string">&quot; &lt;&lt; j &lt;&lt; &quot;</span>)\n<span class="string">&quot;;&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">class Derive : public Base &#123;</span></span><br><span class="line"><span class="string">public:</span></span><br><span class="line"><span class="string">    using Base::Base;       ///相当于 Derive(int i):Base(i)&#123;&#125;;</span></span><br><span class="line"><span class="string">                     ///加上 Derive(int i, int j):Base(i，j)&#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">int main() &#123;</span></span><br><span class="line"><span class="string">    Derive obj1(356);</span></span><br><span class="line"><span class="string">    Derive obj2(356, 789);</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125; // g++ 1.cpp –o 1.out -std=c++11</span></span><br><span class="line"><span class="string">Output：</span></span><br><span class="line"><span class="string">Base::Base(356)</span></span><br><span class="line"><span class="string">Base::Base(356,789)</span></span><br></pre></td></tr></table></figure>
<p>当基类存在多个构造函数时，使用using会给派生类自动构造多个相应的构造函数。注意这里是指一个基类有多个构造函数，而不是多重继承。</p>
<p>如果基类的某个构造函数被声明为私有成员函数，则不能在派生类中声明继承该构造函数。（在L4·创建与销毁·一的1.2.3节有叙述过结合委派构造函数将构造函数设置为私有成员函数的例子）</p>
<p>如果派生类使用了继承构造函数，编译器就不会再为派生类生成隐式定义的默认构造函数。</p>
<p>例6：通过using Base::Base来继承构造函数有限制，可能需要派生类在基类基础之外没有没有新的数据成员，但是派生类可以有新的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="keyword">int</span> i) : <span class="built_in">data</span>(i) &#123; cout &lt;&lt; <span class="string">&quot;Base::Base(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="comment">//int a=100；就地初始化</span></span><br><span class="line">    <span class="keyword">using</span> Base::Base;       <span class="comment">///相当于 Derive(int i):Base(i)&#123;&#125;;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Derive <span class="title">obj</span><span class="params">(<span class="number">356</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;obj.a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// g++ 1.cpp –o 1.out -std=c++11</span></span><br></pre></td></tr></table></figure>
<p>当a不就地初始化时，通过using Base::Base;来的构造函数会使得a的值完全不确定，而就地初始化化后可以确定。</p>
<h2 id="2-5-两类继承方式的选择"><a href="#2-5-两类继承方式的选择" class="headerlink" title="2.5  两类继承方式的选择"></a>2.5  两类继承方式的选择</h2><h3 id="2-5-1-public继承"><a href="#2-5-1-public继承" class="headerlink" title="2.5.1  public继承"></a>2.5.1  public继承</h3><p>基类中公有成员仍能在派生类中保持公有。原接口可沿用，最常用。<br>is-a：基类对象能使用的地方，派生类对象也能使用。</p>
<h3 id="2-5-2-private继承"><a href="#2-5-2-private继承" class="headerlink" title="2.5.2  private继承"></a>2.5.2  private继承</h3><p>is-implementing-in-terms-of(照此实现)：用基类接口实现派生类功能。移除了 is-a 关系。</p>
<p>通常不使用，用private组合替代。可用于隐藏/公开基类的部分接口。公开方法：using 关键字。</p>
<h2 id="2-6-成员访问权限"><a href="#2-6-成员访问权限" class="headerlink" title="2.6  成员访问权限"></a>2.6  成员访问权限</h2><p>基类中的私有成员，不允许在派生类成员函数中访问，也不允许派生类的对象访问它们，仅允许基类的公开接口访问他们，但是基类的公开接口在不同的继承当中访问权限不同。（组合当中也是如此）</p>
<p>那么如何访问基类中的私有成员？</p>
<p><img src="https://s2.loli.net/2022/01/11/n9mCbMNykwcExtz.png" alt="https://s2.loli.net/2022/01/11/n9mCbMNykwcExtz.png"></p>
<p>情况一，public继承。派生类对象和派生类成员函数可以访问基类的公开接口从而访问基类私有成员。</p>
<p><img src="https://s2.loli.net/2022/01/11/t7QaHINzCE6Vkl5.png" alt="https://s2.loli.net/2022/01/11/t7QaHINzCE6Vkl5.png"></p>
<p>情况二，private继承。和private组合同理，在类外既无法直接访问基类的private成员，也无法访问基类的public成员。（因为继承之后被私有化了）</p>
<p>任何继承当中，基类的private成员都无法被派生类的共有接口访问，仅仅可以被基类的共有部分访问。private继承中，基类的public接口不能派生类对象直接访问，但是可以被派生类对象的的共有接口可以访问。</p>
<p>故而我们先设置基类的公有接口访问基类的私有成员，接着设计派生类的公有接口访问基类的公有接口，从而间接实现了访问基类的私有成员。</p>
<p>访问基类私有部分只能通过基类的public接口实现。private继承时，基类public接口仅可派生类成员函数访问，从而访问基类私有部分需要两次间接访问。而public继承时，基类public接口对派生类函数和类外函数都是开放的。可以派生类对象直接访问基类public接口，也可以派生类对象的成员函数访问基类public接口。</p>
<ul>
<li>基类中的公有成员</li>
</ul>
<p>允许在派生类成员函数中被访问。</p>
<p>若是使用public继承方式，则成为派生类公有成员，可以被派生类的对象访问，也可以被派生类成员函数访问。</p>
<p>若是使用private/protected继承方式，则成为派生类私有/保护成员，不能在类外直接访问。若想让某public成员数据在private/protected继承后能被派生类的对象访问，可在派生类public部分用关键字using声明它的名字。（.h文件里）或者按照上文设计派生类的共有接口访问基类的public成员，但是也无法直接访问派生类对象的基类的public成员。</p>
<p>所谓不能派生类的对象访问：这里是指直接在类外通过obj.data的方式访问，而不是说不可以通过派生类的成员函数来访问。</p>
<ul>
<li>基类中的保护成员</li>
</ul>
<p>保护成员允许在派生类成员函数中被访问，但不能被外部函数访问，也不允许对象直接访问。</p>
<p>例1：public直接继承基类共有接口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">baseFunc</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in Base::baseFunc()...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive1</span>:</span> <span class="keyword">public</span> Base &#123;&#125;; <span class="comment">// D1类的继承方式是public继承</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive1 obj1; </span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;calling obj1.baseFunc()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  obj1.<span class="built_in">baseFunc</span>(); <span class="comment">// 基类接口成为派生类接口的一部分，派生类对象可调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">calling obj1.<span class="built_in">baseFunc</span>()...</span><br><span class="line"><span class="function">in <span class="title">Base::baseFunc</span><span class="params">()</span>...</span></span><br></pre></td></tr></table></figure>
<p>例2：private间接访问基类共有接口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">baseFunc</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in Base::baseFunc()...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive2</span>:</span> <span class="keyword">private</span> Base </span><br><span class="line">&#123;<span class="comment">/// 私有继承， is-implementing-in-terms-of：用基类接口实现派生类功能</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deriveFunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; “<span class="function">in <span class="title">Derive2::deriveFunc</span><span class="params">()</span>, </span></span><br><span class="line"><span class="function">                  calling <span class="title">Base::baseFunc</span><span class="params">()</span>...&quot; &lt;&lt; endl</span>;</span><br><span class="line">    <span class="built_in">baseFunc</span>(); <span class="comment">/// 私有继承时，基类接口在派生类成员函数中可以使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive2 obj2; </span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;calling obj2.deriveFunc()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  obj2.<span class="built_in">deriveFunc</span>(); </span><br><span class="line">  <span class="comment">//obj2.baseFunc(); ERROR: 不允许在类外直接访问基类接口</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例3：private继承结合using启用基类共有接口</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">baseFunc</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;in Base::baseFunc()...&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive3</span>:</span> <span class="keyword">private</span> Base &#123;<span class="comment">// B的私有继承</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">/// 私有继承时，在派生类public部分声明基类成员名字</span></span><br><span class="line">  <span class="keyword">using</span> Base::baseFunc; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive3 obj3;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;calling obj3.baseFunc()...&quot;</span> &lt;&lt; endl;</span><br><span class="line">  obj3.<span class="built_in">baseFunc</span>(); <span class="comment">//基类接口在派生类public部分声明，则派生类对象可调用</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例4：保护成员的访问</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">int</span> b&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">private</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getA</span><span class="params">()</span></span>&#123;cout&lt;&lt;a&lt;&lt;endl;&#125; <span class="comment">///编译错误，不可访问基类中私有成员</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getB</span><span class="params">()</span></span>&#123;cout&lt;&lt;b&lt;&lt;endl;&#125; <span class="comment">///可以访问基类中保护成员</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">getB</span>();</span><br><span class="line">  <span class="comment">//cout&lt;&lt;d.b; ///编译错误，派生类对象不可访问基类中保护成员</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>小结：</p>
<ul>
<li>public继承</li>
</ul>
<p>基类的公有成员，保护成员，私有成员作为派生类的成员时，都保持原有的状态。</p>
<ul>
<li>private继承</li>
</ul>
<p>基类的公有成员，保护成员，私有成员作为派生类的成员时，都作为私有成员。</p>
<ul>
<li>protected继承</li>
</ul>
<p>基类的公有成员，保护成员作为派生类的成员时，都成为保护成员，基类的私有成员仍然是私有的。</p>
<p><img src="https://s2.loli.net/2022/01/11/DgsWhda1cTPLMYX.png" alt="https://s2.loli.net/2022/01/11/DgsWhda1cTPLMYX.png"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>先理清楚基类的public的访问权限：</li>
</ul>
<p>基类的public在private继承中成为private，仅允许派生类的成员函数访问，不允许派生类对象直接访问。<br>基类的public在protect继承中成为protect，仅允许派生类的成员函数访问，不允许派生类对象直接访问。<br>基类的public在public继承中还是public，可以在派生类成员函数中访问，也可以派生类对象直接访问。</p>
<ul>
<li>之后是基类的private的访问权限：</li>
</ul>
<p>基类的private，在三种继承方式中均是private，只能通过基类的public函数访问，不可以派生类对象直接访问。基类的public函数在三种继承方式中访问权限不同。public继承，则基类的public函数可以类外直接访问。Protect和private继承，基类的public函数只允许派生类函数访问。</p>
<ul>
<li>最后是基类的protect的访问权限：</li>
</ul>
<p>基类的protect很简单，三种继承都是必然允许派生类的成员函数访问，不允许对象直接访问。基类的protect在public与protect继承中还是protect，但在private继承后虽然是private属性，但也允许基类的public函数与派生类的public函数访问，不能对象直接访问。</p>
<ul>
<li>单独讨论protect继承：</li>
</ul>
<p>Protect继承会使得基类的public和protect成为protect，只能派生类成员函数访问。而private经过protect继承，还是只能基类的public函数访问，而基类的public成员函数只能派生类成员函数访问，派生类成员函数无法直接访问此时的基类private数据。</p>
<p>例题：</p>
<p><img src="https://s2.loli.net/2022/01/11/5IB8R9QrqKLOgm6.png" alt="https://s2.loli.net/2022/01/11/5IB8R9QrqKLOgm6.png"></p>
<p>protect对象不可类外访问，但是可以被继承类的成员函数访问。</p>
<h2 id="2-7-组合与继承的关系"><a href="#2-7-组合与继承的关系" class="headerlink" title="2.7  组合与继承的关系"></a>2.7  组合与继承的关系</h2><p>优点：支持增量开发，引入新代码而不影响已有代码正确性。</p>
<p>相似点：实现代码重用。，将子对象引入新类，使用构造函数的初始化成员列表初始化。</p>
<p>不同点：<br>组合——嵌入一个对象以实现新类的功能，has-a 关系，无重写隐藏。<br>继承——沿用已存在的类提供的接口，is-a与is-implementing-in-terms-of，有重写隐藏。</p>
<h1 id="三、重载与重写隐藏"><a href="#三、重载与重写隐藏" class="headerlink" title="三、重载与重写隐藏"></a>三、重载与重写隐藏</h1><h2 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1  定义"></a>3.1  定义</h2><p>重载(overload)：</p>
<p>目的：提供同名函数的不同实现，属于静态多态。<br>函数名必须相同，函数参数必须不同，作用域相同（如位于同一个类中；或同名全局函数）。</p>
<p>重写隐藏(redefining)：</p>
<p>目的：在派生类中重新定义基类函数，实现派生类的特殊功能。<br>屏蔽了基类的所有其它同名函数。<br>函数名必须相同，函数参数可以不同。</p>
<p>组合不会发生重写隐藏，但是继承会。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wheel</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">inflate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Wheel::inflate&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Wheel::start&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Engine::start&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  Engine engine;</span><br><span class="line">  Wheel wheel[<span class="number">4</span>];</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Car::start&quot;</span>&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Car car;</span><br><span class="line">  car.wheel[<span class="number">0</span>].<span class="built_in">inflate</span>();   </span><br><span class="line">  car.engine.<span class="built_in">start</span>();</span><br><span class="line">  car.wheel[<span class="number">2</span>].<span class="built_in">start</span>();</span><br><span class="line">  car.<span class="built_in">start</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Wheel::inflate</span><br><span class="line">Engine::start</span><br><span class="line">Wheel::start</span><br><span class="line">Car::start</span><br></pre></td></tr></table></figure>
<p>在组合中，我们实现了对于每一类的同名函数调用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Pet eat&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Pet sleep&quot;</span>&lt;&lt;endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span> :</span> <span class="keyword">public</span> Pet&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;cout&lt;&lt;<span class="string">&quot;Duck eat&quot;</span>&lt;&lt;endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Duck duck;</span><br><span class="line">  duck.<span class="built_in">eat</span>();</span><br><span class="line">  duck.<span class="built_in">sleep</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Duck eat</span><br><span class="line">Pet sleep</span><br></pre></td></tr></table></figure>
<p>然而在继承中，很明显Pet类的eat函数被派生类重定义，无法被调用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::f()\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125; <span class="comment">/// 重载</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125; <span class="comment">///重载</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(T)\n&quot;</span>; &#125; <span class="comment">///重载</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125; <span class="comment">///重写隐藏</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">4.9</span>);     <span class="comment">/// 编译警告。执行自动类型转换。</span></span><br><span class="line">  <span class="comment">//  d.f();        /// 被屏蔽，编译错误</span></span><br><span class="line">  <span class="comment">//  d.f(T()); /// 被屏蔽，编译错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在retexter_gcc编译器上无法警告，但是使用clang编译器的警告如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1869255217</span>/source.cpp:<span class="number">18</span>:<span class="number">7</span>: warning: implicit conversion from <span class="string">&#x27;double&#x27;</span> to <span class="string">&#x27;int&#x27;</span> changes value from <span class="number">4.9</span> to <span class="number">4</span> [-Wliteral-conversion]</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">4.9</span>);           </span><br><span class="line">    ~ ^~~</span><br><span class="line"><span class="number">1</span> warning generated.</span><br></pre></td></tr></table></figure>
<h2 id="3-2-using-一并使用"><a href="#3-2-using-一并使用" class="headerlink" title="3.2  using 一并使用"></a>3.2  using 一并使用</h2><p>和对构造函数的继承一样，using可以一并启用所有被重写覆盖的同名函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f()\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(T)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> Base::f;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">4.9</span>);</span><br><span class="line">  d.<span class="built_in">f</span>();</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="built_in">T</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">Derive::<span class="built_in">f</span>(<span class="number">10</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">4.9</span>)</span><br><span class="line">Base::<span class="built_in">f</span>()</span><br><span class="line">Base::<span class="built_in">f</span>(T)</span><br></pre></td></tr></table></figure>
<p>并且注意到，Derive和Base都有void f(int i)函数，此处没有发生重定义，而是调用了派生类的void f(int i)。</p>
<p>另外一种在派生类中调用基类同名函数的方法是直接使用对应的类名。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::print()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(Base obj)</span> </span>&#123; obj.<span class="built_in">print</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.Base::<span class="built_in">print</span>();    </span><br><span class="line">  <span class="built_in">fun</span>(d); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Base::<span class="built_in">print</span>()</span><br><span class="line">Base::<span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<p>此处调用d.Base::print();没有导致任何一个同名函数被覆盖。</p>
<h2 id="3-3-总结"><a href="#3-3-总结" class="headerlink" title="3.3  总结"></a>3.3  总结</h2><p>所谓的重写隐藏（redefining）其实本质上是一种调用优先级问题。派生类默认优先调用自身的函数。如果不启用using关键字，那么除非使用类名，否则无法调用基类的函数，哪怕发生类型转换提示warning也要优先调用自身的函数。而启用了using关键字后，不使用命名空间时，仍然优先调用自身的函数。但是不同于没有启用using关键字的时候，此时如果无法直接调用自身的函数（比如需要类型转换），那么哪怕强制使用派生类的类名也会调用基类的函数。</p>
<p>此处启用using关键字：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f()\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(T)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> Base::f;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.Base::<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">4.9</span>);</span><br><span class="line">  d.Derive::<span class="built_in">f</span>(<span class="number">4.9</span>);</span><br><span class="line">  d.<span class="built_in">f</span>();</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="built_in">T</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">Derive::<span class="built_in">f</span>(<span class="number">10</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">10</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">4.9</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">4.9</span>)</span><br><span class="line">Base::<span class="built_in">f</span>()</span><br><span class="line">Base::<span class="built_in">f</span>(T)</span><br></pre></td></tr></table></figure>
<p>此处不启用using关键字：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f()\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> d)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(&quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base::f(T)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Derive::f(&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;)\n&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.Base::<span class="built_in">f</span>(<span class="number">10</span>);</span><br><span class="line">  d.<span class="built_in">f</span>(<span class="number">4.9</span>);</span><br><span class="line">  d.Base::<span class="built_in">f</span>(<span class="number">4.9</span>);</span><br><span class="line">  d.Base::<span class="built_in">f</span>();</span><br><span class="line">  d.Base::<span class="built_in">f</span>(<span class="built_in">T</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Output：</span><br><span class="line">Derive::<span class="built_in">f</span>(<span class="number">10</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">10</span>)</span><br><span class="line">Derive::<span class="built_in">f</span>(<span class="number">4</span>)</span><br><span class="line">Base::<span class="built_in">f</span>(<span class="number">4.9</span>)</span><br><span class="line">Base::<span class="built_in">f</span>()</span><br><span class="line">Base::<span class="built_in">f</span>(T)</span><br></pre></td></tr></table></figure>
<p>不启用using关键字时直接调用f()和f(T)是不合法的。</p>
<h2 id="3-4-using关键字作用总结"><a href="#3-4-using关键字作用总结" class="headerlink" title="3.4  using关键字作用总结"></a>3.4  using关键字作用总结</h2><ol>
<li>（在派生类中）继承基类所有构造函数、恢复被屏蔽的所有同名基类成员函数</li>
<li>指示命名空间using namespace std;</li>
<li>将另一个命名空间的成员引入当前命名空间<br>如：<code>using std::cout; cout &lt;&lt; endl;</code></li>
<li>定义类型别名，如：<code>using a = int;</code></li>
</ol>
<p>例题：</p>
<p><img src="https://s2.loli.net/2022/01/11/3ksWr1YQbBpcMdL.png" alt="https://s2.loli.net/2022/01/11/3ksWr1YQbBpcMdL.png"></p>
<p>D选项，注意到B中只using了A的构造函数，没有恢复A的f函数。</p>
<h1 id="四、多重继承"><a href="#四、多重继承" class="headerlink" title="四、多重继承"></a>四、多重继承</h1><h2 id="4-1-定义、意义和潜在风险"><a href="#4-1-定义、意义和潜在风险" class="headerlink" title="4.1  定义、意义和潜在风险"></a>4.1  定义、意义和潜在风险</h2><p>派生类同时继承多个基类</p>
<p>格式：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> MiddleA, <span class="keyword">public</span> MiddleB&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>数据存储风险</p>
<p>如果派生类D继承的两个基类A,B，是同一基类Base的不同继承，则A,B中继承自Base的数据成员会在D有两份独立的副本，可能带来数据冗余。</p>
<p>二义性风险</p>
<p>如果派生类D继承的两个基类A,B，有同名成员函数或同名成员数据a，则访问D中a时，编译器无法判断要访问的哪一个基类成员。</p>
<p>二义性例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleA</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addA</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;A::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleB</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addB</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> MiddleA, <span class="keyword">public</span> MiddleB&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Derive d;</span><br><span class="line">    d.<span class="built_in">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">main.cpp:<span class="number">22</span>:<span class="number">7</span>: error: member <span class="string">&#x27;bar&#x27;</span> found in multiple base classes of different types</span><br><span class="line">    d.<span class="built_in">bar</span>();</span><br><span class="line">      ^</span><br><span class="line">main.cpp:<span class="number">10</span>:<span class="number">8</span>: note: <span class="function">member found by ambiguous name lookup</span></span><br><span class="line"><span class="function">  <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;A::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">       ^</span><br><span class="line">main.cpp:<span class="number">15</span>:<span class="number">8</span>: note: <span class="function">member found by ambiguous name lookup</span></span><br><span class="line"><span class="function">  <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">       ^</span><br><span class="line"><span class="number">1</span> error generated.</span><br></pre></td></tr></table></figure>
<p>稍作修改</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleA</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addA</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">abar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;A::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleB</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addB</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bbar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> MiddleA, <span class="keyword">public</span> MiddleB&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Derive d;</span><br><span class="line">    d.<span class="built_in">abar</span>();</span><br><span class="line">    d.<span class="built_in">bbar</span>();</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">A::bar</span><br><span class="line">B::bar</span><br></pre></td></tr></table></figure>
<p>例2：同名成员操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">int</span> a&#123;<span class="number">0</span>&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleA</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addA</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;A::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleB</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">addB</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; ++a &lt;&lt; endl; &#125;;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;B::bar&quot;</span> &lt;&lt; endl; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derive</span> :</span> <span class="keyword">public</span> MiddleA, <span class="keyword">public</span> MiddleB&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Derive d;</span><br><span class="line">  d.<span class="built_in">addA</span>(); <span class="comment">/// 输出 a=1。</span></span><br><span class="line">  d.<span class="built_in">addB</span>(); <span class="comment">/// 仍然输出 a=1。</span></span><br><span class="line">  d.<span class="built_in">addB</span>(); <span class="comment">/// 输出 a=2。</span></span><br><span class="line">  cout &lt;&lt; d.MiddleA::a &lt;&lt; endl; </span><br><span class="line"><span class="comment">/// 输出A中的成员a的值 1</span></span><br><span class="line"> cout &lt;&lt; d.MiddleB::a &lt;&lt; endl; </span><br><span class="line"><span class="comment">/// 输出B中的成员a的值 2</span></span><br><span class="line">  d.MiddleA::<span class="built_in">bar</span>(); </span><br><span class="line">  d.MiddleB::<span class="built_in">bar</span>(); </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">output：</span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">a=<span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">A::bar</span><br><span class="line">B::bar</span><br></pre></td></tr></table></figure>
<p>注意到，多重继承的二义性并没有导致重复定义，编译器通过命名空间区分了二者不同的a与bar。但是不加命名空间，则无法区分。</p>
<h2 id="4-2-多重继承的析构顺序"><a href="#4-2-多重继承的析构顺序" class="headerlink" title="4.2  多重继承的析构顺序"></a>4.2  多重继承的析构顺序</h2><p>结合之后提到的虚函数，多重继承也会配合多态会动态调用析构函数，先析构基类部分，再析构派生类部分。析构顺序也是和构造顺序反向，但是构造顺序是按照申明顺序来的。比如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhatCanSpeak</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">WhatCanSpeak</span>() &#123;cout &lt;&lt; <span class="string">&quot;obj cannot speak&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;  </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>= <span class="number">0</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhatCanMotion</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">WhatCanMotion</span>() &#123;cout &lt;&lt; <span class="string">&quot;obj cannot move&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>= <span class="number">0</span>;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;what.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Alien</span>:</span> <span class="keyword">public</span> WhatCanMotion,<span class="keyword">public</span> WhatCanSpeak</span><br><span class="line">&#123;   <span class="keyword">public</span>:</span><br><span class="line">std::string name;</span><br><span class="line"><span class="built_in">Alien</span>(std::string x):name&#123;x&#125;&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;std::cout&lt;&lt;name&lt;&lt;<span class="string">&quot; is speaking&quot;</span>&lt;&lt;std::endl;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;std::cout&lt;&lt;name&lt;&lt;<span class="string">&quot; stops&quot;</span>&lt;&lt;std::endl;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motion</span><span class="params">()</span></span>&#123;std::cout&lt;&lt;name&lt;&lt;<span class="string">&quot; is moving&quot;</span>&lt;&lt;std::endl;&#125;</span><br><span class="line">~<span class="built_in">Alien</span>()&#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对于Alien的析构是构造的反向。而构造是先构造WhatCanMotion，之后WhatCanSpeak，最后再是派生类部分，故而析构顺序是先派生类，之后WhatCanSpeak，最后WhatCanMotion。</p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
  </entry>
  <entry>
    <title>每天一个Unix入坟小技巧</title>
    <url>/2022/01/12/CS/%E5%85%B6%E4%BB%96/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAUnix%E5%85%A5%E5%9D%9F%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="GCC-amp-G"><a href="#GCC-amp-G" class="headerlink" title="GCC&amp;G++"></a>GCC&amp;G++</h1><p>gcc 最开始的时候是 GNU C Compiler, 如你所知，就是一个c编译器。但是后来因为这个项目里边集成了更多其他不同语言的编译器，GCC就代表 the GNU Compiler Collection，所以表示一堆编译器的合集。 g++则是GCC的c++编译器。</p>
<p>现在你在编译代码时调用的gcc，已经不是当初那个c语言编译器了，更确切的说他是一个驱动程序，根据代码的后缀名来判断调用c编译器还是c++编译器 (g++)。比如你的代码后缀是*.c，他会调用c编译器还有linker去链接c的library。如果你的代码后缀是cpp, 他会调用g++编译器，当然library call也是c++版本的。</p>
<p>当然我说了这么多你可能感到有些混乱，没关系，你就把gcc当成c语言编译器，g++当成c++语言编译器用就是了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gcc main.cpp -O2 -o cpp2c</span><br><span class="line">选择编译器，目标文件，-O2优化等级，-o指定目标文件（否则默认为a.out）</span><br><span class="line">最后一步的可执行文件，叫啥都无所谓，后缀名也可以自己随便写</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./cpp2c &lt; <span class="number">09.</span><span class="keyword">in</span> &gt; cpp2c.output</span><br><span class="line">这一串是在重定向，将<span class="number">09.</span><span class="keyword">in</span>输入给可执行文件cpp2c，随后把输出传递到</span><br><span class="line">cpp2c.output里面</span><br><span class="line">注意./表示在同级文件夹下执行某某操作</span><br></pre></td></tr></table></figure>
<p>在lab1的调试过程中，首先将标准代码编译为了std.out，然后不断地向std.out输入0X.in文件，重定向到std.out里面。</p>
<p>之后调用diff函数比较</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">diff cpp2c.output std.out</span><br></pre></td></tr></table></figure>
<p>更详细的g++操作：</p>
<p><a href="https://www.cnblogs.com/lidan/archive/2011/05/25/2239517.html">g++参数介绍</a></p>
<p>总结一下 GCC 的一些参数用法，也给出了其他一些常用的参数：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="literal">-o</span> filename 指定输出的文件名</span><br><span class="line"><span class="literal">-S</span> 输出汇编代码</span><br><span class="line"><span class="literal">-c</span> 编译到对象文件（object file， .o/.obj）</span><br><span class="line"><span class="literal">-E</span> 对代码进行预处理</span><br><span class="line"><span class="literal">-g</span> 打开调试符号</span><br><span class="line">为了调试方便，一般需要打开 <span class="literal">-g</span> 选项，否则调试的时候可能会遇到无法设置断点，或者在断点无法看到变量信息等问题</span><br><span class="line"><span class="literal">-Werror</span> 把所有的 warning 当成 error</span><br><span class="line"><span class="literal">-O</span>&#123;,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,s,fast,g&#125; 设置优化选项</span><br><span class="line"></span><br><span class="line">&gt; gcc time.cpp <span class="literal">-S</span> <span class="literal">-O2</span> <span class="literal">-g</span> <span class="literal">-Werror</span> <span class="literal">-o</span> time.s</span><br><span class="line">&gt; gcc time.cpp <span class="literal">-S</span> <span class="literal">-O2</span> <span class="literal">-g</span> <span class="literal">-o</span> time.s</span><br><span class="line">&gt; gcc time.cpp <span class="literal">-E</span> <span class="literal">-O</span> <span class="literal">-o</span> time.s</span><br></pre></td></tr></table></figure>
<h1 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h1><p><a href="https://zh.wikipedia.org/wiki/Objdump">objdump - 维基百科，自由的百科全书</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-s </span><br><span class="line">--full-contents </span><br><span class="line">显示指定section的完整内容。默认所有的非空section都会被显示。 </span><br><span class="line"></span><br><span class="line">-S </span><br><span class="line">--<span class="built_in">source</span> </span><br><span class="line">尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。</span><br><span class="line">把反汇编的代码和调试信息里的代码信息合在一起显示，隐含了-d参数。</span><br><span class="line"></span><br><span class="line">-d 反汇编可执行的段（如.text）</span><br><span class="line">-D 反汇编所有的段，即使这个段存储的是数据，也当成指令来解析。</span><br><span class="line"></span><br><span class="line">-t 显示函数的符号列表。</span><br><span class="line"></span><br><span class="line">--adjust-vma OFFSET 把反汇编出来的地址都加上一个偏移，常用于嵌入式开发。</span><br><span class="line"></span><br><span class="line">-M &#123;intel,att&#125; 用 Intel 或者 AT&amp;T 风格显示 X86 汇编；默认情况下用的是AT&amp;T风格。</span><br><span class="line"></span><br><span class="line">如果用的是 MSVC，那么默认的 X86 汇编风格是 Intel 风格；如果用的是 objdump、 gdb、gcc等工具，</span><br><span class="line">一般默认的汇编风格是AT&amp;T。</span><br></pre></td></tr></table></figure>
<p><a href="https://man.linuxde.net/objdump">objdump命令_Linux objdump 命令用法详解：显示二进制文件信息</a></p>
<h1 id="gdb-amp-lldb"><a href="#gdb-amp-lldb" class="headerlink" title="gdb&amp;lldb"></a>gdb&amp;lldb</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g++ main.cpp -g -o debug</span><br><span class="line">这里用-g生成调试文件</span><br><span class="line">lldb debug</span><br><span class="line">进入调试模式</span><br><span class="line">b <span class="number">31</span></span><br><span class="line">在第<span class="number">31</span>行加入断点</span><br><span class="line">r</span><br><span class="line">进入执行，并且在断点断掉</span><br><span class="line">q</span><br><span class="line">退出lldb</span><br></pre></td></tr></table></figure>
<p><a href="https://lldb.llvm.org/use/map.html">LLDB</a></p>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><p>我比较喜欢温和的删除方式，-ri（或者-ir）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ls</span><br><span class="line">01.in             05.in             09.in             CMakeLists.txt    cpp2c.output      input             report lab1.md</span><br><span class="line">02.in             06.in             10.in             cmake-build-debug debug             input.zip         std</span><br><span class="line">03.in             07.in             10.out            code              debug.dSYM        main.cpp          std.cpp</span><br><span class="line">04.in             08.in             10.output         cpp2c             hello             makedata.py       std.out</span><br><span class="line">&gt; rm -ir 10.out</span><br><span class="line">remove 10.out? y</span><br><span class="line">&gt; rm -ir debug hello cpp2c debug.dSYM 10.output std.out</span><br><span class="line">remove debug? y</span><br><span class="line">remove hello? y</span><br><span class="line">remove cpp2c? y</span><br><span class="line">examine files <span class="keyword">in</span> directory debug.dSYM? y</span><br><span class="line">examine files <span class="keyword">in</span> directory debug.dSYM/Contents? y</span><br><span class="line">examine files <span class="keyword">in</span> directory debug.dSYM/Contents/Resources? y</span><br><span class="line">examine files <span class="keyword">in</span> directory debug.dSYM/Contents/Resources/DWARF? y</span><br><span class="line">remove debug.dSYM/Contents/Resources/DWARF/debug? y</span><br><span class="line">remove debug.dSYM/Contents/Resources/DWARF? y</span><br><span class="line">remove debug.dSYM/Contents/Resources? y</span><br><span class="line">remove debug.dSYM/Contents/Info.plist? y</span><br><span class="line">remove debug.dSYM/Contents? y</span><br><span class="line">remove debug.dSYM? y</span><br><span class="line">remove 10.output? y</span><br><span class="line">remove std.out? y</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3cschool.cn/linux/linux-9yfc2oyy.html">linux删除文件夹命令使用方法_w3cschool</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	试了试暴力删除我的downloads文件夹，非常爽（X</span><br><span class="line">&gt; rm -ir *</span><br><span class="line">当然这个操作不会删除隐藏文件夹</span><br><span class="line"></span><br><span class="line">删除下载文件夹的的时候，简直慢死了，后来</span><br><span class="line">&gt; rm -rf *</span><br><span class="line">系统居然还让我确认删不删除，hhh</span><br><span class="line"></span><br><span class="line">其实也可以试试用来清空回收站，注意到回收站的位置就好啦</span><br><span class="line"><span class="built_in">cd</span> ~/.trash</span><br><span class="line"></span><br><span class="line">btw，桌面的位置蛮有意思</span><br><span class="line">&gt; <span class="built_in">cd</span> /users/zhaochen20/desktop</span><br><span class="line"></span><br><span class="line">同样也可以用来删除文件夹</span><br><span class="line">&gt; rm -ir 0073_78_02</span><br><span class="line">examine files <span class="keyword">in</span> directory 0073_78_02? y</span><br><span class="line">remove 0073_78_02? y</span><br></pre></td></tr></table></figure>
<p><strong>草草草！！！太危险了，我快乐地打开iterm，然后</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; rm -rf *</span><br><span class="line">zsh: sure you want to delete all 19 files <span class="keyword">in</span> /Users/zhaochen20 [yn]? n</span><br><span class="line">才想起来我的iterm的默认工作路径是用户路径，而不是desktop（这样做很合理嘛！</span><br><span class="line">好在zsh询问了我，不然电脑就废了</span><br><span class="line">所以还是不要用rm -rf，太危险了</span><br></pre></td></tr></table></figure>
<h1 id="git同步"><a href="#git同步" class="headerlink" title="git同步"></a>git同步</h1><p><a href="https://scofieldwyq.github.io/2016/02/29/git%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%BA%93%E5%90%8C%E6%AD%A5%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/">git从远程库同步到本地仓库</a></p>
<p>经常出bug，不如用github.desktop方便。</p>
<h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html">Linux 常用命令学习 | 菜鸟教程</a></p>
<h1 id="python输出重定向"><a href="#python输出重定向" class="headerlink" title="python输出重定向"></a>python输出重定向</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -u [scene.py](http://scene.py) &gt; out.log</span><br></pre></td></tr></table></figure>
<p>-u表示不经过缓冲，直接保存。</p>
<p>对于文件I/O实际上利用缓冲区会输出更快，但是不写入缓冲会直观很多。</p>
<h1 id="mysql基础命令"><a href="#mysql基础命令" class="headerlink" title="mysql基础命令"></a>mysql基础命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">-u user</span><br><span class="line">-p password</span><br></pre></td></tr></table></figure>
<p>在命令行登陆mysql</p>
<p>接下来创建database，先有了database才能在里面创建表单，存数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE menagerie;</span><br><span class="line">mysql&gt; USE menagerie</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>
<p>添加字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter table NAME add column int(11)</span><br></pre></td></tr></table></figure>
<h1 id="创建文件、复制文件、重命名"><a href="#创建文件、复制文件、重命名" class="headerlink" title="创建文件、复制文件、重命名"></a>创建文件、复制文件、重命名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch test.cpp</span><br><span class="line">mv a.cpp b.cpp</span><br><span class="line">//这里通过mv操作实现了重命名，但是如果源文件夹下方就有b.cpp，会导致覆盖，但是也足够方便了</span><br><span class="line">草草草！！！这里是mv，不是rm。。。</span><br><span class="line">cp -i a.cpp b.cpp</span><br></pre></td></tr></table></figure>
<h1 id="复制和移动文件夹"><a href="#复制和移动文件夹" class="headerlink" title="复制和移动文件夹"></a>复制和移动文件夹</h1><p>cp对于文件而言是-i，对于文件夹而言是-r</p>
<p>mv不需要参数，也可以加上-i(表示询问，如果需要覆盖，则会询问)，-f(force into)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -r /Users/zhaochen20/Documents/GitHub/bypass-thu-cst /Users/zhaochen20/Documents</span><br><span class="line"></span><br><span class="line">zhaochen20@air-server:~$ ls</span><br><span class="line"> DSA   hacker   iou_for_3d_version   kidd  <span class="string">&#x27;not found&#x27;</span>   __pycache__</span><br><span class="line">zhaochen20@air-server:~$ mv -i hacker DSA</span><br><span class="line">zhaochen20@air-server:~$ mv -i kidd DSA</span><br><span class="line">zhaochen20@air-server:~$ mv -i not\ found DSA</span><br><span class="line">zhaochen20@air-server:~$ ls</span><br><span class="line">DSA  iou_for_3d_version  __pycache__</span><br></pre></td></tr></table></figure>
<h1 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tree </span><br><span class="line">	这是在Unbuntu下的命令，apt-get是Ubuntu的包管理器，对应到mac上应该是brew，且大概率不用加sudo</span><br><span class="line">tree -a</span><br></pre></td></tr></table></figure>
<h1 id="istats"><a href="#istats" class="headerlink" title="istats"></a>istats</h1><p>查看风扇、cpu等等</p>
<h1 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h1><p>感觉属实也不是很方便，但是比vim简单些</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano -w 1.in</span><br><span class="line">此处使用-w是为了不让nano自己换行，不然在服务器上会爆炸</span><br><span class="line">随后进入一个编辑界面</span><br><span class="line">ctrl + o保存文本</span><br><span class="line">保存了之后可以手动修改名字，直接敲键盘就好了</span><br><span class="line">保存了之后还会回到nano界面</span><br><span class="line">ctrl + x就可以退出了</span><br></pre></td></tr></table></figure>
<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>vim属实比较复杂</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim 1.in</span><br><span class="line">按住i可以进入insert界面,注意是进入了界面就按下i，不然只能退了重开</span><br><span class="line">注意左下方的小提示，会有一个大写的INSERT</span><br><span class="line">退出vim的话，输入：，然后输入wq（write and quit）</span><br><span class="line">如果长期按住<span class="built_in">shift</span>+:没有用的话，大概率是因为你在中文输入法里，换下输入法就好了</span><br></pre></td></tr></table></figure>
<h1 id="du"><a href="#du" class="headerlink" title="du"></a>du</h1><p>显示文件大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -h</span><br><span class="line">h:hunmanreadable，用人类可读的的方式K,M,G来显示大小</span><br><span class="line">默认的时候du是显示当前工作路径下所有文件</span><br><span class="line">du -s</span><br><span class="line">summarize，显示总和即可</span><br><span class="line">du -hs</span><br><span class="line">如你所愿，但是运行时间肉眼可辨析，估计算法复杂度不行，hhh</span><br><span class="line">&gt; du -hs</span><br><span class="line"> 16G	.</span><br><span class="line">&gt; du -hs /users/zhaochen20/</span><br><span class="line"> 49G	/users/zhaochen20/</span><br><span class="line"></span><br><span class="line">btw，我试图对于整个系统目录去查看大小</span><br><span class="line">&gt; du -hs /</span><br><span class="line">大多数的目录都denied permission</span><br><span class="line">最后的大小是169G</span><br></pre></td></tr></table></figure>
<p>终于下定决心买了macos效率手册了，好耶！！！</p>
<p>草，垃圾书，没啥东西，qwq</p>
<h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程</a></p>
<h1 id="为本地仓库开辟git"><a href="#为本地仓库开辟git" class="headerlink" title="为本地仓库开辟git"></a>为本地仓库开辟git</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">ls -ah</span><br><span class="line">查看隐藏文件</span><br><span class="line">git remote add origin git@github.com:zhaochenyang20/picture.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<h1 id="originlab作图方法"><a href="#originlab作图方法" class="headerlink" title="originlab作图方法"></a>originlab作图方法</h1><p><a href="https://zhuanlan.zhihu.com/p/79331341">不能再详细啦！Origin 的27种作图步骤</a></p>
<h1 id="从服务器拷贝文件"><a href="#从服务器拷贝文件" class="headerlink" title="从服务器拷贝文件"></a>从服务器拷贝文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; scp -r zhaochen20@<span class="number">103.242</span><span class="number">.175</span><span class="number">.247</span>:/home/aidrive/tb5zhh/SpecCluster/tbw/temp_result /Users/zhaochen20</span><br></pre></td></tr></table></figure>
<p>这个命令是在本地跑的，不然服务器会找不到本地的地址。以及，-r是recursive，复制文件，必须要有。反过来，从本地上传到服务器，其实也是一样的，更改方向即可。</p>
<h1 id="file"><a href="#file" class="headerlink" title="file"></a>file</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; file echo</span><br><span class="line">echo: ASCII text</span><br><span class="line">&gt; file <span class="string">&quot;report n+e.md&quot;</span></span><br><span class="line">report n+e.md: Unicode text, UTF-<span class="number">8</span> text, <span class="keyword">with</span> very long lines (<span class="number">468</span>)</span><br><span class="line">Windows 下可执行文件后缀一般是 exe/msi，其他平台下可执行文件没有后缀</span><br></pre></td></tr></table></figure>
<h1 id="man"><a href="#man" class="headerlink" title="man"></a>man</h1><p><a href="https://wangchujiang.com/linux-command/c/man.html">man</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; man ascii</span><br><span class="line"></span><br><span class="line">     The hexadecimal <span class="built_in">set</span>:</span><br><span class="line"></span><br><span class="line">     00 nul   01 soh   02 stx   03 etx   04 eot   05 enq   06 ack   07 bel</span><br><span class="line">     08 bs    09 ht    0a nl    0b vt    0c np    0d cr    0e so    0f si</span><br><span class="line">     10 dle   11 dc1   12 dc2   13 dc3   14 dc4   15 nak   16 syn   17 etb</span><br><span class="line">     18 can   19 em    1a sub   1b esc   1c fs    1d gs    1e rs    1f us</span><br><span class="line">     20 sp    21  !    22  <span class="string">&quot;    23  #    24  $    25  %    26  &amp;    27  &#x27;</span></span><br><span class="line"><span class="string">     28  (    29  )    2a  *    2b  +    2c  ,    2d  -    2e  .    2f  /</span></span><br><span class="line"><span class="string">     30  0    31  1    32  2    33  3    34  4    35  5    36  6    37  7</span></span><br><span class="line"><span class="string">     38  8    39  9    3a  :    3b  ;    3c  &lt;    3d  =    3e  &gt;    3f  ?</span></span><br><span class="line"><span class="string">     40  @    41  A    42  B    43  C    44  D    45  E    46  F    47  G</span></span><br><span class="line"><span class="string">     48  H    49  I    4a  J    4b  K    4c  L    4d  M    4e  N    4f  O</span></span><br><span class="line"><span class="string">     50  P    51  Q    52  R    53  S    54  T    55  U    56  V    57  W</span></span><br><span class="line"><span class="string">     58  X    59  Y    5a  Z    5b  [    5c  \    5d  ]    5e  ^    5f  _</span></span><br><span class="line"><span class="string">     60  `    61  a    62  b    63  c    64  d    65  e    66  f    67  g</span></span><br><span class="line"><span class="string">     68  h    69  i    6a  j    6b  k    6c  l    6d  m    6e  n    6f  o</span></span><br><span class="line"><span class="string">     70  p    71  q    72  r    73  s    74  t    75  u    76  v    77  w</span></span><br><span class="line"><span class="string">     78  x    79  y    7a  z    7b  &#123;    7c  |    7d  &#125;    7e  ~    7f del</span></span><br></pre></td></tr></table></figure>
<h1 id="git同步到本地"><a href="#git同步到本地" class="headerlink" title="git同步到本地"></a>git同步到本地</h1><p>github desktop是首选，但是也会炸裂，所以也可以在本地merge it</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line">$ git merge</span><br></pre></td></tr></table></figure>
<h1 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mkdir 2020012363</span><br><span class="line">&gt; zip -r 2020012363.zip 2020012363</span><br><span class="line">  adding: 2020012363/ (stored 0%)</span><br><span class="line">  adding: 2020012363/2020012363.pdf (deflated 9%)</span><br><span class="line">  adding: 2020012363/5.txt (deflated 80%)</span><br><span class="line">  adding: 2020012363/4.txt (deflated 78%)</span><br><span class="line">  adding: 2020012363/3.txt (deflated 57%)</span><br><span class="line">  adding: 2020012363/2.txt (deflated 61%)</span><br><span class="line">  adding: 2020012363/1.txt (deflated 85%)</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/capecape/article/details/78548723">linux 压缩和解压缩命令gz、tar、zip、bz2_cape的博客-CSDN博客_gz压缩命令</a></p>
<h1 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; mv -i base ../../PA2/not\ found/</span><br><span class="line">.为当前路径，..为父路径，“\ ”意为转义了空格</span><br><span class="line">&gt; <span class="built_in">cd</span> ../../PA2/not\ found</span><br><span class="line">&gt; ls</span><br><span class="line">CMakeLists.txt    base              checker_orgin.py  cmake-build-debug main.cpp          makedata.py       not found.md</span><br></pre></td></tr></table></figure>
<h1 id="利用window对拍"><a href="#利用window对拍" class="headerlink" title="利用window对拍"></a>利用window对拍</h1><p>其实本质上只用解决本地git的冲突以及重新编译。毕竟M1是用的ARM，可想而知无法执行X86的程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">本地强行解决冲突不要用github desktop，直接git bash里面fetch+merge</span><br><span class="line">然后进行对拍还是在wsl里面</span><br></pre></td></tr></table></figure>
<h1 id="g-判断内存泄漏、访问越界与溢出"><a href="#g-判断内存泄漏、访问越界与溢出" class="headerlink" title="g++判断内存泄漏、访问越界与溢出"></a>g++判断内存泄漏、访问越界与溢出</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先是内存泄漏</span><br><span class="line">在g++命令尾部加上-fsanitize=address指令，可以显示内存在何处泄漏，访问越界等等</span><br><span class="line"></span><br><span class="line">&gt; g++ not_found.cpp -O2 -o main -fsanitize=address</span><br></pre></td></tr></table></figure>
<p><a href="https://www.osc.edu/resources/getting_started/howto/howto_use_address_sanitizer">HOWTO: Use Address Sanitizer</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关于溢出</span><br><span class="line">在g++命令尾部加上-ftrapv指令，可以显示是否有溢出，然而无法显示何处溢出</span><br></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/38960763/ftrapv-and-fwrapv-which-is-better-for-efficiency">“-ftrapv” and “-fwrapv”: Which is better for efficiency?</a></p>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p><a href="https://blog.csdn.net/chnyifan/article/details/104705437">zsh: permission denied问题的解决办法_sido的博客-CSDN博客</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1441802">获取程序运行时间 - Linux Shell 脚本</a></p>
<p>第一次写shell出现的问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macos没有原生的timeout，然而有gtimeout</span><br><span class="line">brew install coreutils</span><br><span class="line">gtimeout</span><br><span class="line">或者：<span class="built_in">alias</span> timeout=gtimeout</span><br><span class="line"></span><br><span class="line">很神奇的是，macos上很多shell命令的确和linux不同，譬如我试图得到毫秒时间时：</span><br><span class="line">&gt; <span class="built_in">echo</span> $(($(date +%s%N)/<span class="number">1000000</span>))</span><br><span class="line">zsh: bad math expression: operator expected at `N/1000000<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt; echo $(($(gdate +%s%N)/1000000))</span></span><br><span class="line"><span class="string">1639814534008</span></span><br><span class="line"><span class="string">因为macos的date不支持%N，所以故技重施</span></span><br><span class="line"><span class="string">&gt; alias date=gdate</span></span><br></pre></td></tr></table></figure>
<p><a href="https://qastack.cn/superuser/599072/how-to-get-bash-execution-time-in-milliseconds-under-mac-os-x">在Mac OS X下如何获取以毫秒为单位的Bash执行时间？</a></p>
<p>很多问题常常不出现在你以为的地方，譬如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span><span class="string">&quot;当前的hash_strategy是<span class="variable">$&#123;i&#125;</span>，当前的collision_stratedy是<span class="variable">$&#123;k&#125;</span>，输入文件是<span class="variable">$&#123;j&#125;</span>&quot;</span></span><br><span class="line">			start=$(date +%s)</span><br><span class="line">			gtimeout 10 time ./main <span class="variable">$&#123;i&#125;</span> <span class="variable">$&#123;k&#125;</span> &lt; ./data_set/input/<span class="variable">$&#123;j&#125;</span> &gt; $./data_set/output/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;k&#125;</span>_<span class="variable">$&#123;j&#125;</span></span><br><span class="line">			end=$(date +%s)</span><br><span class="line">			take=$(( end - start ))</span><br><span class="line">			<span class="built_in">echo</span> <span class="string">&quot;Time taken to execute commands is <span class="variable">$&#123;take&#125;</span> seconds.&quot;</span></span><br><span class="line"></span><br><span class="line">问题一：</span><br><span class="line">当我以为问题是出在gtimeout的时候，实际问题出在：</span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot;当前的hash_strategy是<span class="variable">$&#123;i&#125;</span>，当前的collision_stratedy是<span class="variable">$&#123;k&#125;</span>，输入文件是<span class="variable">$&#123;j&#125;</span>&quot;</span></span><br><span class="line">这个<span class="built_in">echo</span>后面没加空格，系统把这一整个语句当做了一个指令，当然没有起到传递参数的效果</span><br><span class="line">这样的例子还有不少:</span><br><span class="line">&gt; ./main 1 1&lt;poj_1.in</span><br><span class="line">[1]    34910 segmentation fault  ./main 1 1&lt; poj_1.in</span><br><span class="line">系统会把1&lt;poj_1.in视为一个参数</span><br><span class="line">综上所述，命令行加空格是非常必要的</span><br><span class="line"></span><br><span class="line">问题二：</span><br><span class="line">理论上使用了f-string的地方都要加$，但是不要多加$./data_set/output/<span class="variable">$&#123;i&#125;</span>_<span class="variable">$&#123;k&#125;</span>_<span class="variable">$&#123;j&#125;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://cloud.tencent.com/developer/article/1441802">获取程序运行时间 - Linux Shell 脚本</a></p>
<p><a href="https://blog.csdn.net/tianya_lu/article/details/104936012">shell获取时间精确到毫秒级_天涯路的专栏-CSDN博客_shell 当前时间 毫秒</a></p>
<p><a href="https://blog.csdn.net/weixin_40509040/article/details/121221676">一种解决方法 Error: No such file or directory @ rb_sysopen_Tonq_csdn-CSDN博客</a></p>
<h1 id="nohup与tmux在后台执行命令"><a href="#nohup与tmux在后台执行命令" class="headerlink" title="nohup与tmux在后台执行命令"></a><code>nohup</code>与<code>tmux</code>在后台执行命令</h1><ul>
<li>实测本地也可以用<code>tmux</code>来执行挂在后台执行任务</li>
<li>而<code>nohup</code>可能天生就是用来处理这个问题的</li>
</ul>
<p><a href="https://www.runoob.com/linux/linux-comm-nohup.html">Linux nohup 命令</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">经典指令如下：</span><br><span class="line">nohup /root/runoob.sh &gt; runoob.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>此处的<code>2&gt;&amp;1 &amp;</code>自然有其固定用意，可以参考上方链接。</p>
<h1 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; curl cip.cc</span><br><span class="line">IP	: 20.112.30.102</span><br><span class="line">地址	: 美国  美国</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">数据二	: 美国 | DXC Technology</span><br><span class="line"></span><br><span class="line">数据三	: 美国 | 微软</span><br><span class="line"></span><br><span class="line">URL	: [&lt;http://www.cip.cc/20.112.30.102&gt;](&lt;http://www.cip.cc/20.112.30.102&gt;)</span><br></pre></td></tr></table></figure>
<h1 id="gitignore-与取消修改"><a href="#gitignore-与取消修改" class="headerlink" title="gitignore 与取消修改"></a>gitignore 与取消修改</h1><ul>
<li>想要 ignore 什么东西，直接在项目根目录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch .gitignore</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;./DS_Store&quot;</span> &gt;&gt; .gitignore</span><br><span class="line">/// <span class="built_in">echo</span> 直接追加式写入文件</span><br></pre></td></tr></table></figure>
<ul>
<li>注意 gitignore 内部的文件地址格式不太一样，不用 <code>./</code> 表示相对当前目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">SRT_crawler/Fall_2021/hex.sql</span><br><span class="line">.DS_Store/</span><br><span class="line">*.sql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>linux入门</tag>
      </tags>
  </entry>
  <entry>
    <title>exchange preparations</title>
    <url>/2022/01/12/%E5%87%BA%E5%9B%BD/exchange_preparations/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6883aafcca52ea217b49519b1a97511ccb66231d1e6a6b2fdbddffa2c74d8017"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>2023春季</tag>
        <tag>人类社会观察</tag>
      </tags>
  </entry>
  <entry>
    <title>如何有效的读一篇论文</title>
    <url>/2022/01/11/%E7%A3%95%E7%9B%90/paper_reading/</url>
    <content><![CDATA[<h1 id="十问论文"><a href="#十问论文" class="headerlink" title="十问论文"></a>十问论文</h1><ul>
<li>论文试图解决什么问题？</li>
<li>这是否是一个新的问题？</li>
<li>这篇文章要验证一个什么科学假设？</li>
<li>有哪些相关研究？如何归类？谁是这一课题在领域内值得关注的研究员？</li>
<li>论文中提到的解决方案之关键是什么？</li>
<li>论文中的实验是如何设计的？</li>
<li>用于定量评估的数据集是什么？代码有没有开源？</li>
<li>论文中的实验及结果有没有很好地支持需要验证的科学假设？</li>
<li>这篇论文到底有什么贡献？</li>
<li>下一步呢？有什么工作可以继续深入？</li>
</ul>
<h1 id="李沐讲论文阅读"><a href="#李沐讲论文阅读" class="headerlink" title="李沐讲论文阅读"></a>李沐讲论文阅读</h1><ul>
<li>可以从头读到尾，时间上不值得</li>
</ul>
<h2 id="pass-1"><a href="#pass-1" class="headerlink" title="pass 1"></a>pass 1</h2><ul>
<li>先读标题和摘要，然后跳到结论，读到这里就知道论文在讲什么了</li>
<li>之后看看实验部分关键的图和表，再看看方法里关键的图和表</li>
</ul>
<p>读到此处你就能知道这篇论文大概在讲什么，质量如何，结果如何，方法看上去怎么样，是不是适合自己——这才是最重要的——决定要不要继续读下去。</p>
<h2 id="pass-2"><a href="#pass-2" class="headerlink" title="pass 2"></a>pass 2</h2><ul>
<li>沿着从标题一直读到最后</li>
<li>忽视一些细节，可以不在乎公式和证明，但是一定要理解到重要的图和表的意义</li>
<li>每张图的 x 轴，y 轴什么意思，点什么意思，作者提出的方法和其他人的方法的区别</li>
<li>对整个论文的大概部分都有所了解</li>
<li>如果发现引用的重要文献没有读过，可以把相关文献圈出来</li>
</ul>
<p>这一边决定了要不要再精读下去，如果你觉得这个文章太难，可以再读读参考文献，递归阅读。</p>
<h2 id="pass-3"><a href="#pass-3" class="headerlink" title="pass 3"></a>pass 3</h2><ul>
<li>知道每句话和每段在干什么</li>
<li>换了我来，我会如何</li>
<li>这个文章还能怎么往前走</li>
</ul>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
      </tags>
  </entry>
  <entry>
    <title>和恩贤学长的交流小记</title>
    <url>/2022/01/10/%E5%87%BA%E5%9B%BD/talk_with_zex/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8f41a082d28a62f1d3e2c18d8154570c8c166244d3a6dd1dbd97cbb1000d08f2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
  </entry>
  <entry>
    <title>OOP笔记readme</title>
    <url>/2022/01/10/CS/OOP/oop_tutorial_readme/</url>
    <content><![CDATA[<h1 id="readme"><a href="#readme" class="headerlink" title="readme"></a>readme</h1><p><img src="https://p9.itc.cn/q_70/images03/20211214/365060e046e6489887d140ebb2814c3d.jpeg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这位读者，非常欢迎你点开这份技能文档。如你所见，这份文档与技能文档项目中的其他文档不尽相同。没错，技能文档的初衷主要是希望能够超脱计算机系大多<code>fly bitch</code>的课程本身，默默地带给文档的阅读者课堂以外的能力提升。</p>
<p>而你即将阅读的<code>oop</code>文档却不尽相同，这份文档是主笔人<code>zhaochen20</code>在<code>2021</code>年春季学期的课程笔记。好事多磨，这份文档几经周折，直到<code>2022</code>年才得以与智能体的活动推广一同上线。然而为时不晚，一字班的同学开春之后才会学习<code>oop</code>课程，希望这份文档能够加深阅读者对<code>C++</code>语言乃至计算机系统的一些认识。同时，也希望这份文档作为主笔人与审核人给予<code>2021</code>年的一句道别。</p>
<p>将原本的<code>markdown</code><a href="https://cloud.tsinghua.edu.cn/d/efad6ff51b394ab49550/">链接附在此处</a>，里面还有一些期末备考的资料，建议妥善利用。</p>
<h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><p>建议结合<a href="https://cloud.tsinghua.edu.cn/d/0cf641207e874e0a8b69/">刘知远老师</a>的课件一同学习，虽然这份文档完全展开了课堂内容(因为<code>oop</code>课程多少还是比较言简意赅的)，然而看着课件能够对学习脉络更为清晰。</p>
<p>另外，在学习<code>oop</code>初期，会讲述配置环境的问题。不得不说，在学习<code>oop</code>的过程过程中，没有理解到<code>makefile</code>的精华是一大遗憾。然而我个人认为直接上来就学习<code>makefile</code>还是比较<code>fly bitch</code>。</p>
<p>给出的建议是，如果你使用<code>windows</code>电脑，先给自己的电脑配好<code>wsl2</code>，然后学习基本的<code>linux</code>命令。这里可以推荐<a href="http://product.dangdang.com/29341422.html">《第一代码——行<code>linux</code>命令行》一书</a>，的确对命令行讲的很清楚。如果你是<code>macos</code>用户(不管是黑苹果还是白苹果x)，请务必给自己的电脑装上<code>iterm2</code>，同时自行谷歌(百度)如何优化<code>iterm2</code>。</p>
<p>此处再附上<code>zhaochen20</code>个人博客里的<a href="https://zhaochenyang20.github.io/2022/01/12/Linux/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAUnix%E5%85%A5%E5%9D%9F%E5%B0%8F%E6%8A%80%E5%B7%A7/"><code>unix</code>学习笔记</a>。顺带强推一波<code>macos</code>电脑，如果你不打游戏的话，我想没有比<code>macos</code>更适合计算机系的电脑了。</p>
<p>最后，由于笔记实际上绝大多数都是主笔人<code>zhaochen20</code>一人所写，难免有所错误。</p>
<p>如果有误，可以前往<code>zhaochen20</code>的<a href="https://zhaochenyang20.github.io/">博客留言</a>。</p>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>首先，本文档的内容完全基于刘知远老师的课程体系而建立，诚挚地感谢刘知远老师与他的教学团队对<code>oop</code>课程的悉心付出。</p>
<p>随后，致谢主笔人<code>zhaochen20</code>本人，他在<code>2021</code>年<code>5</code>月份狂肝了大概<code>112</code>小时写出了初稿。</p>
<p>而后，对整理且做修改工作的<code>yiyj13</code>致以感谢，祝愿他进入信息学院后能够有所收获有所成。</p>
<p>最后，正如细心的读者可能发现的那样，这份文档最后两节的文风与前文不尽相同，自然，这并非主笔人完成。</p>
<p>出于一些特定的缘由，也表示对最后两节作者的尊重，主笔人在此真诚地感谢他的一位故人。</p>
<p><del><code>Without whom, this tutorial would have been released half a year earlier.</code></del></p>
<p> <del><code>Not every story has an happy endding. Anyway, this is why we shall call it a story.</code></del></p>
<p>期望以后的主笔人能够苦中作乐，整理文稿的同学亦能心想事成，也祝愿阅读文档并学习<code>oop</code>课程的同学能够有所收获，在<code>2022</code>年智能体比赛中斩获佳绩。</p>
<p>赵晨阳</p>
<p><code>2022</code>年<code>1</code>月<code>10</code>日夜</p>
<p>于<code>AIR</code></p>
]]></content>
      <categories>
        <category>oop</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>贵系改革</tag>
      </tags>
  </entry>
  <entry>
    <title>Vision Transformer Learning Log</title>
    <url>/2022/01/10/%E7%A3%95%E7%9B%90/VIT/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/10/GQ3poJkgA6sryzD.jpg" alt="Photo by Alistair MacKenzie (WvM3RQSElRc).jpg"></p>
<h1 id="从Attenion-Is-All-You-Need到An-Image-is-Worth-16x16-Words"><a href="#从Attenion-Is-All-You-Need到An-Image-is-Worth-16x16-Words" class="headerlink" title="从Attenion Is All You Need到An Image is Worth 16x16 Words"></a>从Attenion Is All You Need到An Image is Worth 16x16 Words</h1><h2 id="Why-“Attenion-is-all-you-need”"><a href="#Why-“Attenion-is-all-you-need”" class="headerlink" title="Why “Attenion is all you need”?"></a>Why “Attenion is all you need”?</h2><h3 id="RNN与CNN的劣势"><a href="#RNN与CNN的劣势" class="headerlink" title="RNN与CNN的劣势"></a><code>RNN</code>与<code>CNN</code>的劣势</h3><p><code>RNN</code>很不容易并行化 <code>(hard to parallel）</code></p>
<p><code>CNN</code>可以并行化，但是<code>CNN</code>只能考虑非常有限的内容。如果要考虑长时间的<code>dependency</code>，需要堆叠<code>filter</code>。堆叠越深，上层的<code>filter</code>就可以考虑越多的资讯。然而，堆叠很多层才能看到较为长时的资讯。（怀疑原文是台湾同胞写的，特别喜欢用资讯一个词）</p>
<h3 id="self-attention的作用"><a href="#self-attention的作用" class="headerlink" title="self-attention的作用"></a><code>self-attention</code>的作用</h3><p> 概括言之：并行化且全局化</p>
<p>具体实现在<a href="https://zhuanlan.zhihu.com/p/340149804">知乎</a>上写的很清楚，还可以参考<a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=34">李宏毅的机器学习</a>。李宏毅的机器学习推荐从<a href="https://www.bilibili.com/video/BV1Wv411h7kN?p=22"><code>CNN</code></a></p>
<p>开始，听<code>P22、P23、P24、P34、P35</code>。</p>
<h3 id="multi-head-self-atteniton"><a href="#multi-head-self-atteniton" class="headerlink" title="multi-head self-atteniton"></a><code>multi-head self-atteniton</code></h3><p>概括而言就是基于<code>q</code>转移出更多的转移向量。其作用类似于<code>CNN</code>里面的<code>multi-channel</code>，卷积核更多后能够监视的咨询更多。<code>head</code>更多后能够监视的内容也更多。</p>
<h3 id="postion-encoding"><a href="#postion-encoding" class="headerlink" title="postion-encoding"></a><code>postion-encoding</code></h3><p><code>RNN</code>虽然丢失了并行性，然而由于其运行逻辑几乎就是语义逻辑，天然就涵盖了位置信息。然而<code>self-attention</code>由于其高并行度，反而丧失了位置信息。比如A的年龄比B大，如果不考虑位置信息，对于<code>attention</code>而言，和B的年龄比A大毫无区别。(实际上不考虑位置信息，则这个句子会被<code>attenion</code>完全乱序理解，理解为A龄B年比大也没有问题)</p>
<p>所以<code>attention</code>需要有位置信息来保证序列性。</p>
<h3 id="attention和CNN的关系"><a href="#attention和CNN的关系" class="headerlink" title="attention和CNN的关系"></a><code>attention</code>和<code>CNN</code>的关系</h3><p><code>self-attention</code>是更广义的<code>CNN</code>，则这个模型更加<code>flexible</code>。而我们认为，一个模型越<code>flexible</code>，训练它所需要的数据量就越多，所以在训练<code>self-attention</code>模型时就需要更多的数据。</p>
<p>这一点在<code>ViT</code>中更明显，狗家为了训他，用了<code>3</code>亿张图片的<code>JFT-300</code>，而如果不使用这么多数据而只使用<code>ImageNet</code>，则性能不如<code>CNN</code>。侧面体现每次狗家的论文都特别阔气。</p>
<h1 id="End-to-End-Object-Detection-with-Transformers"><a href="#End-to-End-Object-Detection-with-Transformers" class="headerlink" title="End-to-End Object Detection with Transformers"></a>End-to-End Object Detection with Transformers</h1><h2 id="文章概述"><a href="#文章概述" class="headerlink" title="文章概述"></a>文章概述</h2><h3 id="论文试图解决的问题"><a href="#论文试图解决的问题" class="headerlink" title="论文试图解决的问题"></a><a href="https://zhuanlan.zhihu.com/p/438770010">论文试图解决的问题</a></h3><p>文章把目标检测看做是一种<code>set prediction</code>的问题，通过引入<code>transformer</code>且设置了一个独特的<code>set prediction loss</code>，解决了传统的检测方法中需要很多手工设计<code>hand-designed</code>的模块：诸如非极大值抑制，<code>anchor</code>的设计等等。经过<code>COCO</code>数据集测试，新算法在速度和精度上都比<code>Faster-RCNN</code>高。</p>
<h3 id="文章验证的科学假设"><a href="#文章验证的科学假设" class="headerlink" title="文章验证的科学假设"></a>文章验证的科学假设</h3><p>能否通过引入<code>transformer</code>和二分匹配的策略计算<code>loss</code>，去优化掉传统检测方法中的<code>hand-designed</code>模块。</p>
<h3 id="解决方案的关键"><a href="#解决方案的关键" class="headerlink" title="解决方案的关键"></a>解决方案的关键</h3><p>基于匈牙利算法的<code>set prediction loss</code></p>
<h2 id="原理解读"><a href="#原理解读" class="headerlink" title="原理解读"></a>原理解读</h2><p>文章所做的工作，就是将<code>transformers</code>运用到了<code>object detection</code>领域，并且取得了不错的结果。</p>
<p>一次预测，端到端训练，<code>set loss function</code>和二分匹配</p>
<p>第一个是用<code>transformer</code>的<code>encoder-decoder</code>架构一次性生成<code>N</code>个<code>box prediction</code>。其中<code>N</code>是一个事先设定的、远远大于<code>image</code>中<code>object</code>个数的一个整数。</p>
<p>第二个是设计了<code>bipartite matching loss</code>，基于预测的<code>boxex</code>和<code>ground truth boxes</code>的二分图匹配计算<code>loss</code>的大小，从而使得预测的<code>box</code>的位置和类别更接近于<code>ground truth</code>。</p>
<p><code>DETR</code>整体结构可以分为四个部分：<code>backbone，encoder，decoder</code>和<code>FFN</code></p>
<p><img src="https://s2.loli.net/2022/01/11/GrEiMJgLR8Z4NzK.png" alt="image.png"></p>
<h3 id="backbone"><a href="#backbone" class="headerlink" title="backbone"></a><code>backbone</code></h3><p>将图像转换为<code>feature map</code></p>
<h3 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a><code>encoder</code></h3><p>通道压缩，转化为序列化数据，位置编码</p>
<h4 id="与初始的encoder区别"><a href="#与初始的encoder区别" class="headerlink" title="与初始的encoder区别"></a>与初始的<code>encoder</code>区别</h4><ul>
<li>输入编码器的位置编码需要考虑<code>2-D</code>空间位置。</li>
<li>位置编码向量需要加入到每个<code>Encoder Layer</code>中。</li>
<li>在编码器内部位置编码<code>Positional Encoding</code>仅仅作用于<code>Query</code>和<code>Key</code>，即只与<code>Query</code>和<code>Key</code>相加，<code>Value</code>不做任何处理。</li>
</ul>
<h3 id="decoder"><a href="#decoder" class="headerlink" title="decoder"></a><code>decoder</code></h3><p><code>DETR</code>的<code>Transformer Decoder</code>是一次性处理全部的<code>object queries</code>，即一次性输出全部的<code>predictions</code>；而不像原始的<code>Transformer</code>是<code>auto-regressive</code>的，从左到右一个词一个词地输出。这个过程我们表达为：<code>decodes the N objects in parallel at each decoder layer</code></p>
<h4 id="DETR的Decoder主要有两个输入"><a href="#DETR的Decoder主要有两个输入" class="headerlink" title="DETR的Decoder主要有两个输入"></a><code>DETR</code>的<code>Decoder</code>主要有两个输入</h4><ol>
<li><code>Transformer Encoder</code>输出的<code>Embedding</code>与 <code>position encoding</code>之和</li>
<li><code>Object queries</code></li>
</ol>
<h4 id="DETR是怎么训练"><a href="#DETR是怎么训练" class="headerlink" title="DETR是怎么训练"></a><code>DETR</code>是怎么训练</h4><p>我们用<code>scipy.optimize</code>这个库中的 <code>linear_sum_assignment</code>函数找到最优的匹配，这个过程我们称之为匈牙利算法<code>Hungarian Algorithm</code>，即根据两个集合之间的连接权重去寻找集合间的最优匹配，连接权重大的优先匹配。根据匈牙利算法得出的预测值，计算<code>loss</code>。</p>
<p>简单来说，就是本文固定输出为<code>N=100</code>个预测目标，然后与之相应的<code>Groundtruth</code>也会使用空标记来进行补齐，达到<code>100</code>个。然后双方数目一样后，就可以用匈牙利算法进行二部图匹配，将预测框逐个分配给最优匹配的<code>groundtruth</code>框。</p>
<h1 id="Deformable-DETR-Deformable-Transformer-For-End-To-End-Object-Detection"><a href="#Deformable-DETR-Deformable-Transformer-For-End-To-End-Object-Detection" class="headerlink" title="Deformable DETR: Deformable Transformer For End-To-End Object Detection"></a>Deformable DETR: Deformable Transformer For End-To-End Object Detection</h1><h2 id="初代DETR"><a href="#初代DETR" class="headerlink" title="初代DETR"></a>初代<code>DETR</code></h2><h3 id="Deformable-Convolution的意义"><a href="#Deformable-Convolution的意义" class="headerlink" title="Deformable Convolution的意义"></a><code>Deformable Convolution</code>的意义</h3><p><code>DETR</code>即一种全新的卷积结构。这种方法将固定形状的卷积过程改造成了能适应物体形状的可变的卷积过程，从而使结构适应物体形变的能力更强。</p>
<p>传统的<code>CNN</code>只能靠一些简单的方法(比如<code>max pooling</code>)来适应物体的形变，如果形变的太厉害就无能为力了。因为<code>CNN</code>的卷积核的<code>geometric structure</code>是固定的——卷积核总是在固定位置对输入特征特征进行采样。</p>
<h3 id="传统解决物体形变的方式"><a href="#传统解决物体形变的方式" class="headerlink" title="传统解决物体形变的方式"></a>传统解决物体形变的方式</h3><ol>
<li><p>使用大量的数据进行训练。比如用<code>ImageNet</code>数据集，再在其基础上做翻转等变化来扩展数据集，通俗地说就是通过穷举的方法使模型能够适应各种形状的物体，这种方法收敛较慢而且要设计复杂的网络结构才能达到理想的结果。</p>
</li>
<li><p>设计一些特殊的算法来适应形变。比如<code>SIFT</code>，目标检测时用滑动窗口法来适应目标在不同位置上的分类也属于这类。</p>
</li>
</ol>
<p>对第一种方法，如果用训练中没有遇到过的新形状物体(但同属于一类)来做测试，由于新形状没有训练过，会造成测试不准确，而且靠数据集来适应形变的训练过程太耗时，网络结构也必须设计的很复杂。</p>
<p>对于第二种方法，如果物体的形状极其复复杂，要设计出能适应这种复杂结构的算法就更困难了。</p>
<h3 id="方法提出"><a href="#方法提出" class="headerlink" title="方法提出"></a>方法提出</h3><p>为了解决<code>CNN</code>的卷积核的<code>geometric structure</code>是<code>fixed</code>的问题，代季峰老师等人提出<code>Deformable Convolution</code>方法，它对感受野上的每一个点加一个偏移量，偏移的大小是通过学习得来的，偏移后感受野不再是个正方形，而是和物体的实际形状相匹配。这么做的好处就是无论物体怎么形变，卷积的区域始终覆盖在物体形状的周围。</p>
<p><img src="https://pic1.zhimg.com/v2-979535a9858b3e61b958f81d88262ff0_r.jpg" alt=""></p>
<h3 id="方法意义"><a href="#方法意义" class="headerlink" title="方法意义"></a>方法意义</h3><p>作者认为可形变卷积的优势还是很大的</p>
<ul>
<li>对物体的形变和尺度建模的能力比较强。</li>
<li>感受野比一般卷积大很多，因为有偏移的原因，实际上相关实验已经表明了DNN网络很多时候受感受野不足的条件制约；但是对于一般的空洞而言，卷积空洞是固定的，对不同的数据集不同情况可能最适合的空洞大小是不同的，但是可形变卷积的偏移是可以根据具体数据的情况进行学习的。</li>
</ul>
<h3 id="初代DETR方法缺陷"><a href="#初代DETR方法缺陷" class="headerlink" title="初代DETR方法缺陷"></a>初代<code>DETR</code>方法缺陷</h3><h4 id="训练时间长"><a href="#训练时间长" class="headerlink" title="训练时间长"></a>训练时间长</h4><p>相比于已有的检测器，DETR需要更久的训练才能达到收敛<code>500 epochs</code>，比<code>Faster R-CNN</code>慢了<code>10-20</code>倍。</p>
<h4 id="计算复杂度高"><a href="#计算复杂度高" class="headerlink" title="计算复杂度高"></a>计算复杂度高</h4><p>发现<code>DETR</code>对小目标的性能很差，现代许多种检测器通常利用多尺度特征，从高分辨率<code>High Resolution</code>的特征图中检测小物体。但是高分辨率的特征图会大大提高<code>DETR</code>复杂度。</p>
<h2 id="Deformable-DETR"><a href="#Deformable-DETR" class="headerlink" title="Deformable DETR"></a><code>Deformable DETR</code></h2><p><code>Deformable DETR</code>利用了可变形卷积<code>Deformable Convolution</code>的稀疏空间采样的本领，以及<code>Transformer</code>对于相关性建模的能力，针对此提出了一种<code>Deformable Attention Module</code>，只关注一个<code>feature map</code>中的一小部分关键的位置，起到<code>pre-filter</code>的作用，可以自然地结合上<code>FPN</code>，聚集多尺度特征。作者使用它来替换<code>Transformer</code>的<code>attention moudle</code>。</p>
<p>设计初衷为：传统的<code>attention</code>的每个<code>query</code>都会和所有的<code>key</code>做<code>attention</code>，而<code>Deformable Attention</code>只是用固定一部分<code>key</code>和<code>query</code>去做<code>attention</code>，降低了收敛时间。</p>
<h1 id="An-Image-is-Worth-16x16-Words-Transformers-for-Image-Recognition-at-Scale"><a href="#An-Image-is-Worth-16x16-Words-Transformers-for-Image-Recognition-at-Scale" class="headerlink" title="An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale"></a>An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale</h1><p><del>因为还是<code>ICLR 2021 under review</code>，所以作者目前还是匿名的，但是看其实验用到的<code>TPU</code>，能够大概猜出应该是<code>Google</code>爸爸的文章（看着实验的配置，不得不感慨钞能力的力量）。</del></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>近年来，<code>Transformer</code>已经成了<code>NLP</code>领域的标准配置，但是<code>CV</code>领域还是<code>CNN</code>（如<code>ResNet, DenseNet</code>等）占据了绝大多数的<code>SOTA</code>结果。</p>
<p>最近<code>CV</code>界也有很多文章将<code>transformer</code>迁移到<code>CV</code>领域，这些文章总的来说可以分为两个大类：</p>
<ol>
<li>将<code>self-attention</code>机制与常见的<code>CNN</code>架构结合；</li>
<li>用<code>self-attention</code>机制完全替代<code>CNN</code>。</li>
</ol>
<p>本文采用的也是第<code>2</code>种思路。虽然已经有很多工作用<code>self-attention</code>完全替代<code>CNN</code>，且在理论上效率比较高，但是它们用了特殊的<code>attention</code>机制，无法从硬件层面加速，所以目前<code>CV</code>领域的<code>SOTA</code>结果还是被<code>CNN</code>架构所占据。</p>
<p>文章不同于以往工作的地方，就是尽可能地将<code>NLP</code>领域的<code>transformer</code>不作修改地(开盒即用地)搬到<code>CV</code>领域来(<code>ViT</code>其实只用到了<code>Transformer</code>的<code>Encoder</code>，而并没有用到<code>Decoder</code>)</p>
<p>本着尽可能少修改的原则，作者将原版的<code>Transformer</code>开箱即用地迁移到分类任务上面。并且作者认为没有必要总是依赖于<code>CNN</code>，只用<code>Transformer</code>也能够在分类任务中表现很好，尤其是在使用大规模训练集的时候。同时，在大规模数据集上预训练好的模型，在迁移到中等数据集或小数据集的分类任务上以后，也能取得比<code>CNN</code>更优的性能。</p>
<h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><p><a href="https://zhuanlan.zhihu.com/p/266311690">来自此处链接</a></p>
<h3 id="图片预处理：分块和降维"><a href="#图片预处理：分块和降维" class="headerlink" title="图片预处理：分块和降维"></a>图片预处理：分块和降维</h3><p>将图像转化为序列化数据，首先将图像分割成一个个<code>patch</code>，然后将每个<code>patch reshape</code>成一个向量，得到所谓的<code>flattened patch</code>。</p>
<h3 id="Patch-Embedding"><a href="#Patch-Embedding" class="headerlink" title="Patch Embedding"></a>Patch Embedding</h3><p>对每个向量都做一个线性变换(即全连接层)，这里我们称其为<code>Patch Embedding</code>。</p>
<h3 id="Positional-Encoding"><a href="#Positional-Encoding" class="headerlink" title="Positional Encoding"></a>Positional Encoding</h3><p>由于<code>transformer</code>模型本身是没有位置信息的，和<code>NLP</code>中一样，我们需要用<code>position embedding</code>将位置信息加到模型中去。</p>
<h3 id="MLP-Classification-Head"><a href="#MLP-Classification-Head" class="headerlink" title="MLP Classification Head"></a><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%B1%82%E6%84%9F%E7%9F%A5%E5%99%A8">MLP Classification Head</a></h3><p><img src="https://pic2.zhimg.com/80/v2-7439a17c2e9aa981c95d783a93cb8729_1440w.jpg" style="zoom:50%;" /></p>
<h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>我们发现： 当在最小数据集<code>ImageNet</code>上进行预训练时，尽管进行了大量的正则化等操作，但<code>ViT</code>大模型的性能不如<code>ViT-Base</code>模型。</p>
<p>稍微大一点的<code>ImageNet-21k</code>预训练，它们的表现也差不多。</p>
<p>只有到了<code>JFT 300M</code>，我们才能看到更大的<code>ViT</code>模型全部优势。在更大的数据集上，<code>ViT</code>超过了所有的模型，取得了<code>SOTA</code>。</p>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端工程狮 CSS</title>
    <url>/2022/01/10/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/css/</url>
    <content><![CDATA[<h1 id="2022年1月11日"><a href="#2022年1月11日" class="headerlink" title="2022年1月11日"></a>2022年1月11日</h1><p><code>hexo</code>渲染<code>css</code>代码貌似有些问题，于是我把内容拷贝到了<code>notion</code>上，把<code>notion</code><a href="https://lead-alley-0ca.notion.site/web-CSS-affe792edc8d4b369fded4c1c537e70c">链接放在这儿</a>。</p>
<p>顺带，今天用<code>mv</code>指令意外直接覆盖了之前写的一篇博客，我天。</p>
<p>考虑下，以后用<code>mv</code>实现重命名应该长点心眼。</p>
<h1 id="2022年1月12日"><a href="#2022年1月12日" class="headerlink" title="2022年1月12日"></a>2022年1月12日</h1><hr>
<h1 id="盒模型基础"><a href="#盒模型基础" class="headerlink" title="盒模型基础"></a>盒模型基础</h1><h2 id="盒模型导论"><a href="#盒模型导论" class="headerlink" title="盒模型导论"></a>盒模型导论</h2><p><img src="https://www.runoob.com/images/box-model.gif" alt="https://www.runoob.com/images/box-model.gif"></p>
<p><strong>盒模型的内容顾名思义理解即可。</strong></p>
<ul>
<li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li>
<li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li>
<li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li>
<li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</li>
</ul>
<p>指定一个<code>CSS</code>元素的宽度和高度属性时，你只是设置了内容区域的宽度和高度。要知道，完整大小的元素，还必须添加内边距，边框和外边距。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">25px</span> solid green;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="盒模型框架"><a href="#盒模型框架" class="headerlink" title="盒模型框架"></a>盒模型框架</h2><h3 id="边框border"><a href="#边框border" class="headerlink" title="边框border"></a>边框<code>border</code></h3><p><code>border-style</code>样式：<a href="https://www.runoob.com/css3/css3-border-radius.html">创建圆角的方法</a></p>
<p><code>border-width</code>宽度</p>
<p><code>border-color</code>：<code>border-color</code>单独使用是不起作用的，必须得先使用<code>border-style</code>来设置边框样式</p>
<h3 id="轮廓outline"><a href="#轮廓outline" class="headerlink" title="轮廓outline"></a>轮廓<code>outline</code></h3><p>轮廓<code>outline</code>是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<p><code>CSS outline</code>属性规定元素轮廓的样式、颜色和宽度。</p>
<p><code>outline</code>是不占空间的，既不会增加额外的<code>width</code>或者<code>height</code>（这样不会导致浏览器渲染时出现<code>reflow</code>或是<code>repaint</code>）</p>
<p><code>outline</code>有可能是非矩形的</p>
<h3 id="外边距margin与填充padding"><a href="#外边距margin与填充padding" class="headerlink" title="外边距margin与填充padding"></a>外边距<code>margin</code>与填充<code>padding</code></h3><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a478b1da-564e-439a-b24a-e774b64adec8/Untitled.png" alt="Untitled"></p>
<p>百分数都是相对父容器宽度的。</p>
<p>外边距，<code>margin collapse</code>边距合并只发生在垂直方向上。</p>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h2><ul>
<li><strong><code>p&#123; &#125;</code></strong>: 为所有<strong><code>p</code></strong>元素指定一个样式。</li>
<li><strong><code>.marked&#123; &#125;</code></strong>: 为所有<strong><code>class=&quot;marked&quot;</code></strong>的元素指定一个样式。</li>
<li><strong><code>.marked p&#123; &#125;</code></strong>: 为所有<strong><code>class=&quot;marked&quot;</code></strong>元素内的<strong><code>p</code></strong>元素指定一个样式。</li>
<li><strong><code>p.marked&#123; &#125;</code></strong>: 为所有<strong><code>class=&quot;marked&quot;</code></strong>的<strong><code>p</code></strong>元素指定一个样式。</li>
</ul>
<h1 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h1><h2 id="position"><a href="#position" class="headerlink" title="position"></a><code>position</code></h2><p>参考菜鸟教程的<a href="https://www.runoob.com/css/css-positioning.html">位置示意图</a>就好了</p>
<p><code>static、fixed、relative、absolute、sticky</code></p>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a><code>z-index</code></h2><p><code>z-index</code>属性指定了一个元素的堆叠顺序，一个元素可以有正数或负数的堆叠顺序，且数值越大越靠前展示。</p>
<p>如果两个定位元素重叠，没有指定<code>z-index</code>，最后定位在<code>HTML</code>代码中的元素将被显示在最前面。</p>
<p>中间省略了一些诸如尺寸，显示，溢出，浮动一类的细节，就不造轮子了</p>
<h1 id="组合选择符"><a href="#组合选择符" class="headerlink" title="组合选择符"></a>组合选择符</h1><h2 id="组合方式"><a href="#组合方式" class="headerlink" title="组合方式"></a>组合方式</h2><ul>
<li><p><a href="https://www.runoob.com/try/try.php?filename=trycss_sel_element_element">后代选择器(以空格  分隔)</a></p>
</li>
<li><p>子元素选择器(以大于&gt; 号分隔）：</p>
<p>与后代选择器相比，子元素选择器<code>Child selectors</code>只能选择作为某元素直接/一级子元素的元素。</p>
</li>
<li><p>相邻兄弟选择器（以加号+分隔）：</p>
<p>相邻兄弟选择器<code>Adjacent sibling selector</code>可选择紧接在另一元素后的元素，且二者有相同父元素。</p>
</li>
<li><p>普通兄弟选择器（以波浪号～分隔）：</p>
<p>后续兄弟选择器选取所有指定<a href="https://www.runoob.com/try/try.php?filename=trycss_sel_element_tilde">元素之后的相邻兄弟元素</a>。</p>
</li>
</ul>
<h1 id="2022年1月14日"><a href="#2022年1月14日" class="headerlink" title="2022年1月14日"></a>2022年1月14日</h1><p>这几天因为交换的事情耽误了前端学习，今天继续<br><a href="https://www.wolai.com/gz8pTznBcwPtmKNUDTsMCd">这是一个<code>BootStrap Studio</code>的教程</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Tutorials"><code>mozilla</code>的<code>web</code>教程</a>与<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS"><code>css</code>教程</a>，貌似火狐的教程更新一些，但是不够系统化。</p>
<h2 id="伪类与伪元素"><a href="#伪类与伪元素" class="headerlink" title="伪类与伪元素"></a>伪类与伪元素</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><code>CSS</code>伪类是添加到选择器的关键字，指定要选择的元素的特殊状态。例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a> 可被用于在用户将鼠标悬停在按钮上时改变按钮的颜色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*标准语法*/</span></span><br><span class="line">selector:pseudo-class &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有用户指针悬停的按钮 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>伪类连同伪元素一起，他们允许你不仅仅是根据文档<code>DOM</code>树中的内容对元素应用样式，而且还允许你根据诸如像导航历史这样的外部因素来应用样式（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited"><code>:visited</code></a>），同样的，可以根据内容的状态（例如在一些表单元素上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked"><code>:checked</code></a>），或者鼠标的位置（例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a> 让你知道是否鼠标在一个元素上悬浮）来应用样式。</p>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。下例中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line"><code>::first-line</code></a> 伪元素可改变段落首行文字的样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 每一个 &lt;p&gt; 元素的第一行。 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-line</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>与伪元素比较，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes"><code>pseudo-classes</code></a> 能够根据<strong>特定状态</strong>改变元素样式。</p>
</li>
<li><p>与伪类相反，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements"><code>pseudo-elements</code></a> 可被用于为一个元素的<strong>特定部分</strong>应用样式。</p>
</li>
</ul>
<h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>导航条基本上是一个链接列表，所以使用 <code>&lt;ul&gt;</code> 和<code>&lt;li&gt;</code>元素非常有意义</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt; </span><br><span class="line">&lt;title&gt;示例网页&lt;/title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 鼠标移动到选项上修改背景颜色 */</span></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#home</span>&quot;&gt;主页&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#news</span>&quot;&gt;新闻&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#contact</span>&quot;&gt;联系&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#about</span>&quot;&gt;关于&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="active"><a href="#active" class="headerlink" title="active"></a><code>active</code></h3><p>通过<code>activate</code>属性设置一个默认高亮的选项，且<code>hover</code>效果对默认选项不起作用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">&lt;title&gt;示例网页&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> class=&quot;active&quot; href=&quot;<span class="selector-id">#home</span>&quot;&gt;主页&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#news</span>&quot;&gt;新闻&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#contact</span>&quot;&gt;联系&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#about</span>&quot;&gt;关于&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="全屏导航条"><a href="#全屏导航条" class="headerlink" title="全屏导航条"></a>全屏导航条</h3><p>左边是全屏高度的固定导航条，右边是可滚动的内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">&lt;title&gt;示例网页&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.active</span>) &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> class=&quot;active&quot; href=&quot;<span class="selector-id">#home</span>&quot;&gt;主页&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#news</span>&quot;&gt;新闻&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#contact</span>&quot;&gt;联系&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#about</span>&quot;&gt;关于&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">margin-left</span>:<span class="number">25%</span>;<span class="attribute">padding</span>:<span class="number">1px</span> <span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">1000px</span>;&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">h2</span>&gt;Fixed Full-<span class="attribute">height</span> Side <span class="selector-tag">Nav</span>&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">h3</span>&gt;Try <span class="selector-tag">to</span> scroll this area, and see how the sidenav sticks <span class="selector-tag">to</span> the page&lt;/<span class="selector-tag">h3</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;Notice that this <span class="selector-tag">div</span> element has <span class="selector-tag">a</span> <span class="attribute">left</span> <span class="attribute">margin</span> of <span class="number">25%</span>. This is because the side navigation is set <span class="selector-tag">to</span> <span class="number">25%</span> <span class="attribute">width</span>. If you remove the <span class="attribute">margin</span>, the sidenav will overlay/sit on <span class="attribute">top</span> of this <span class="selector-tag">div</span>.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">p</span>&gt;Also notice that we have set <span class="attribute">overflow</span>:auto to sidenav. This will add a scrollbar when the sidenav is too long (for example if it has over <span class="number">50</span> links inside of it).&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Some text..&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="水平导航条"><a href="#水平导航条" class="headerlink" title="水平导航条"></a>水平导航条</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt; </span><br><span class="line">&lt;title&gt;&gt;示例网页&lt;/title&gt; </span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">ul</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">list-style-type</span>:none;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">display</span>:block;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">120px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>:bold;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#FFFFFF</span>;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#98bf21</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">4px</span>;</span><br><span class="line">	<span class="attribute">text-decoration</span>:none;</span><br><span class="line">	<span class="attribute">text-transform</span>:uppercase;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#7A991A</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#home</span>&quot;&gt;主页&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#news</span>&quot;&gt;新闻&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#contact</span>&quot;&gt;联系&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">li</span>&gt;&lt;<span class="selector-tag">a</span> href=&quot;<span class="selector-id">#about</span>&quot;&gt;关于&lt;/<span class="selector-tag">a</span>&gt;&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="固定位置"><a href="#固定位置" class="headerlink" title="固定位置"></a>固定位置</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;下拉菜单实例&lt;/title&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.dropdown</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">8px</span> <span class="number">16px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span> <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropdown-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;dropdown&quot;&gt;</span><br><span class="line">  &lt;<span class="selector-tag">span</span>&gt;鼠标移动到此处&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;dropdown-<span class="attribute">content</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;something&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;something&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="提示工具"><a href="#提示工具" class="headerlink" title="提示工具"></a>提示工具</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">&lt;title&gt;提示工具示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span> style=&quot;<span class="attribute">text-align</span>:center;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;tooltip&quot;&gt;鼠标移动到这</span><br><span class="line">  &lt;<span class="selector-tag">span</span> class=&quot;tooltiptext&quot;&gt;提示文本&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="菜鸟教程上的如下例子"><a href="#菜鸟教程上的如下例子" class="headerlink" title="菜鸟教程上的如下例子"></a>菜鸟教程上的如下例子</h3><ul>
<li><p>底部提示框/顶部箭头</p>
</li>
<li><p>右侧提示框/左侧箭头</p>
</li>
<li><p>左侧提示框/右侧箭头</p>
</li>
</ul>
<h3 id="淡入效果"><a href="#淡入效果" class="headerlink" title="淡入效果"></a>淡入效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-<span class="number">8</span>&quot;&gt;</span><br><span class="line">&lt;title&gt;淡入效果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> <span class="selector-class">.tooltiptext</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">60px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 淡入 - 1秒内从 0% 到 100% 显示: */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.tooltiptext</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: visible;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span> style=&quot;<span class="attribute">text-align</span>:center;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">h2</span>&gt;提示工具淡入效果&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;鼠标移动到以下元素，提示工具会再一秒内从 <span class="number">0%</span> 到 <span class="number">100%</span> 完全显示。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;tooltip&quot;&gt;鼠标移动到我这</span><br><span class="line">  &lt;<span class="selector-tag">span</span> class=&quot;tooltiptext&quot;&gt;提示文本&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="图片廊"><a href="#图片廊" class="headerlink" title="图片廊"></a>图片廊</h3><p><a href="https://www.runoob.com/css/css-image-gallery.html">现学现卖得了</a>，不再贴上代码。</p>
<h3 id="图片透明度"><a href="#图片透明度" class="headerlink" title="图片透明度"></a>图片透明度</h3><p>使用<code>CSS</code>很容易<a href="https://www.runoob.com/css/css-image-transparency.html">创建透明的图像</a>。</p>
<h2 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h2><p>这一段菜鸟教程讲的属实不行，改用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries">火狐</a>。</p>
<p>每条媒体查询语句都由一个可选的媒体类型和任意数量的媒体特性表达式构成。可以使用多种逻辑操作符合并多条媒体查询语句。媒体查询语句不区分大小写。</p>
<p>当媒体类型与在其上显示文档的设备匹配并且所有媒体功能表达式都计算为<code>true</code>时，媒体查询将计算为<code>true</code>。 涉及未知媒体类型的查询始终为<code>false</code>。</p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>具有特定属性的<code>HTML</code>元素样式不仅仅是<code>class</code>和<code>id</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[title]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[title=runoob]</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">5px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2022年1月15日"><a href="#2022年1月15日" class="headerlink" title="2022年1月15日"></a>2022年1月15日</h1><ul>
<li><p>今天我一定学完前端(X</p>
</li>
<li><p>今天我一定学完<code>CSS</code>(X，还有<code>CSS3</code>标准呢！</p>
</li>
<li><p>今天我一定学完<a href="https://www.runoob.com/css/css-tutorial.html">菜鸟教程的基础<code>CSS</code>教程</a>好吧！</p>
</li>
</ul>
<h2 id="CSS表单"><a href="#CSS表单" class="headerlink" title="CSS表单"></a><code>CSS</code>表单</h2><p>有一些比较有意思的组件</p>
<ul>
<li>输入框聚焦</li>
<li>带动画的搜索框——基于<code>transition</code>属性实现<a href="https://www.runoob.com/css3/css3-animations.html">动画</a></li>
<li>下拉菜单(本质上就是<code>select</code>属性)</li>
</ul>
<h2 id="CSS计数器"><a href="#CSS计数器" class="headerlink" title="CSS计数器"></a><code>CSS</code>计数器</h2><p>属实觉得没啥用，emmm….</p>
<p><a href="https://www.runoob.com/css/css-counters.html">或许会有用的吧…</a></p>
<h2 id="网页布局"><a href="#网页布局" class="headerlink" title="网页布局"></a>网页布局</h2><p><img src="https://www.runoob.com/wp-content/uploads/2019/04/DBD1E737-47C5-445E-BFEC-7547210D88D5.jpg" alt="网页布局示意图"></p>
<ul>
<li><code>header</code>：头部区域，位于整个网页的顶部，一般用于设置网页的标题或者网页的<code>logo</code></li>
<li><code>topnav</code>：菜单导航条包含了一些链接，可以引导用户浏览其他页面——这里导航栏并非如上文那样仅仅使用了简单的一个<code>ul</code>属性解决，而是利用了<code>topnav</code>类</li>
<li><code>footer</code>：底部区域在网页的最下方，一般包含版权信息和联系方式</li>
</ul>
<h3 id="内容区域"><a href="#内容区域" class="headerlink" title="内容区域"></a>内容区域</h3><p>内容区域蛮有趣的，单独讲讲。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/04/D105F34E-6592-47AC-A9DF-EEDC1E2172B3.jpg" alt="三种布局的示意图"></p>
<p>内容区域一般有三种形式:</p>
<ul>
<li><code>1</code>列：一般用于移动端</li>
<li><code>2</code>列：一般用于平板设备</li>
<li><code>3</code>列：一般用于<code>PC</code>桌面设备——<code>13</code>寸<code>mac</code>的桌面简直是时代眼泪…</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建三个相等的列 */</span></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 列后清除浮动 */</span></span><br><span class="line"><span class="selector-class">.row</span>:after &#123;</span><br><span class="line">  content: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 响应式布局 - 小于 600 px 时改为上下布局 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>为了达到缩放效果，我们得使用响应式布局(之后会深入讨论)</p>
</li>
<li><p>现在更高级的方式是使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"><code>CSS Flexbox</code></a>来创建列的布局</p>
</li>
</ul>
<h2 id="important"><a href="#important" class="headerlink" title="!important"></a><code>!important</code></h2><p>CSS 中的<code>!important</code>规则用于增加样式的权重。</p>
<ul>
<li><code>!important</code>与优先级无关，但它与最终的结果直接相关。</li>
<li>使用一个 <code>!important</code>规则时，此声明将覆盖任何其他声明。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#myid</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.myclass</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上实例中，尽管<code>ID</code>选择器和类选择器具有更高的优先级，但三个段落背景颜色都显示为红色，因为<code>!important</code>规则会覆盖<code>background-color</code>属性。</p>
<ul>
<li>使用<code>!important</code>是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找<code>bug</code>变得更加困难了。</li>
<li>当两条相互冲突的带有<code>!important</code>规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。</li>
</ul>
<h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><ul>
<li>永远不要使用<code>!important</code></li>
<li>一定要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li>
<li>只有在需要覆盖全站或外部 CSS 的特定页面中使用 <code>!important</code></li>
<li>永远不要在你的插件中使用 <code>!important</code></li>
<li>永远不要在全站范围的 CSS 代码中使用 <code>!important</code></li>
</ul>
<h2 id="css总结"><a href="#css总结" class="headerlink" title="css总结"></a><code>css</code>总结</h2><p>本着<a href="https://www.runoob.com/css/css-examples.html">开盒即用</a>的想法，白嫖就好了…</p>
<p><code>to be continued...</code></p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Tesla and the Metaverse</title>
    <url>/2022/01/10/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/tesla/</url>
    <content><![CDATA[<h1 id="预调研"><a href="#预调研" class="headerlink" title="预调研"></a>预调研</h1><h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p><strong>特斯拉科技</strong>（英语：Tesla Inc.），又称为<strong>特斯拉汽车</strong>，是<a href="https://zh.wikipedia.org/wiki/美國">美国</a>最大的<a href="https://zh.wikipedia.org/wiki/電動汽車">电动汽车</a>及<a href="https://zh.wikipedia.org/wiki/太陽能板">太阳能板</a><a href="https://zh.wikipedia.org/wiki/公司">公司</a>，并与<a href="https://zh.wikipedia.org/wiki/松下">松下</a>合作电池业务，产销电动汽车、车载计算机（FSD系统)，太阳能板及储能<a href="https://zh.wikipedia.org/wiki/設備">设备</a>与系统解决方案。特斯拉是世界上最早的<a href="https://zh.wikipedia.org/wiki/自動駕駛汽車">自动驾驶汽车</a>生产商，至2018年，特斯拉汽车已经成为<a href="https://zh.wikipedia.org/wiki/世界">世界</a>最畅销<a href="https://zh.wikipedia.org/wiki/充電">充电</a>式汽车公司。2021年10月，成为第六家市值破1兆美元的巨头企业。</p>
<h2 id="产业"><a href="#产业" class="headerlink" title="产业"></a>产业</h2><h3 id="上海"><a href="#上海" class="headerlink" title="上海"></a>上海</h3><p><strong>特斯拉上海超级工厂</strong>（英语：Tesla Giga Shanghai，或者Gigafactory 3）是<a href="https://zh.wikipedia.org/wiki/特斯拉_(公司">特斯拉</a>)首座<a href="https://zh.wikipedia.org/wiki/美国">美国</a>本土以外的超级工厂，位于<a href="https://zh.wikipedia.org/wiki/上海">上海</a><a href="https://zh.wikipedia.org/wiki/特斯拉上海超级工厂#cite_note-新華-3">[3]</a>。该厂主要负责生产特斯拉<a href="https://zh.wikipedia.org/wiki/Tesla_Model_3">Tesla Model 3</a>、<a href="https://zh.wikipedia.org/wiki/Tesla_Model_Y">Tesla Model Y</a><a href="https://zh.wikipedia.org/wiki/特斯拉上海超级工厂#cite_note-4">[4]</a>。截至2021年1月，工厂年产能为25万辆，计划增加至45万辆<a href="https://zh.wikipedia.org/wiki/特斯拉上海超级工厂#cite_note-:0-5">[5]</a>。</p>
<h3 id="加州"><a href="#加州" class="headerlink" title="加州"></a>加州</h3><p><strong>特斯拉工厂</strong>（Tesla Factory）是<a href="https://zh.wikipedia.org/wiki/特斯拉_(公司">特斯拉公司</a>)位于<a href="https://zh.wikipedia.org/wiki/美國">美国</a><a href="https://zh.wikipedia.org/wiki/加利福尼亞州">加利福尼亚州</a><a href="https://zh.wikipedia.org/wiki/費利蒙_(加利福尼亞州">弗里蒙特</a>)的一个<a href="https://zh.wikipedia.org/wiki/汽车">汽车</a><a href="https://zh.wikipedia.org/wiki/工廠">工厂</a>。1962年，<a href="https://zh.wikipedia.org/wiki/通用汽车">通用汽车</a>创建了该汽车工厂，1982年该工厂转手给<a href="https://zh.wikipedia.org/wiki/新聯合汽車製造公司">新联合汽车制造公司</a>使用<a href="https://zh.wikipedia.org/wiki/特斯拉工廠#cite_note-sjbj-1">[1]</a>。2010年，该工厂归特斯拉使用<a href="https://zh.wikipedia.org/wiki/特斯拉工廠#cite_note-tesla_factory_release2-2">[2]</a>。目前该工厂生产特斯拉旗下的<a href="https://zh.wikipedia.org/wiki/特斯拉S型">Model S</a>、<a href="https://zh.wikipedia.org/wiki/特斯拉X型">Model X</a>和<a href="https://zh.wikipedia.org/wiki/Tesla_Model_3">Tesla Model 3</a><a href="https://zh.wikipedia.org/wiki/特斯拉工廠#cite_note-SJ_Merc_June_2018_racism_lawsuit-3">[3]</a>。  </p>
<h3 id="德州"><a href="#德州" class="headerlink" title="德州"></a>德州</h3><p>斯拉计划将其总部从加利福尼亚州硅谷的帕洛阿尔托(Palo Alto)搬到德克萨斯州奥斯汀，在那里它正在建造一个大规模的汽车和电池综合工厂。马斯克与加州的关系有时很不稳定，例如，在因新冠而关闭特斯拉在加州弗里蒙特的工厂的争论中，他已经宣布将特斯拉总部和未来的项目搬到德州。</p>
<h2 id="元宇宙"><a href="#元宇宙" class="headerlink" title="元宇宙"></a>元宇宙</h2><p>美国科技业巨贾马斯克对当今科技业2大热门题材元宇宙和Web 3.0嗤之以鼻，笑称「没人会想把屏幕整天绑在脸上」；另方面则大赞他共同创办的脑植芯片公司Neuralink未来展望。</p>
<p>身为电动车大厂特斯拉（Tesla）和航天业巨擘太空探索科技公司（SpaceX）执行长的马斯克，22日上网路媒体「巴比伦蜜蜂」（Babylon Bee）谈话节目时坦言，的确有很多人跟他讨论元宇宙（metaverse）。</p>
<p>不过马斯克表示：「我不认为有人会整天在脸上绑一个该死的屏幕。我不确定自己是否一定看好元宇宙这玩意。」</p>
<p>「长远来看，精密的Neuralink（技术）就能让你完全融入虚拟现实。我认为我们不太可能遁入元宇宙中，这个词只是听起来很时髦。」</p>
<p>Neuralink是一家神经科技公司，主要研发如何利用大脑植入芯片来透过电脑补强人类肢体能力。</p>
<p>马斯克还说，他不看好人们会抛弃实体世界转移到虚拟世界，「那会毁了你的视力，不是吗？我目前还见不到有说服力的元宇宙情境或Web 3.0，那听起来比较像是行销而非现实」。</p>
<p>美国社群媒体巨头脸书（Facebook）今年稍早将公司改名为Meta，似乎是替元宇宙概念背书。彭博行业研究（Bloomberg Intelligence）更预估，到了2024年，元宇宙市场商机将达到8000亿美元。</p>
<p>不过对于Neuralink，马斯克宣称它「能够让瘫痪的人利用大脑操作手机，速度还比用手指的人更快」。</p>
<p>然而，元宇宙目前已开始出现游戏产业应用，而Neuralink仍处于研发阶段。</p>
<h1 id="参观记录"><a href="#参观记录" class="headerlink" title="参观记录"></a>参观记录</h1><h2 id="特斯拉与马斯克"><a href="#特斯拉与马斯克" class="headerlink" title="特斯拉与马斯克"></a>特斯拉与马斯克</h2><h3 id="特斯拉的愿景"><a href="#特斯拉的愿景" class="headerlink" title="特斯拉的愿景"></a>特斯拉的愿景</h3><p>加速可再生能源</p>
<h3 id="Elon-Musk"><a href="#Elon-Musk" class="headerlink" title="Elon Musk"></a>Elon Musk</h3><p>马斯克出生于南非。时代周刊认为，没有人能够比肩他对地球生命、甚至是对外星生命所产生的影响。</p>
<h3 id="尼古拉·特斯拉"><a href="#尼古拉·特斯拉" class="headerlink" title="尼古拉·特斯拉"></a>尼古拉·特斯拉</h3><h3 id="特斯拉开放专利"><a href="#特斯拉开放专利" class="headerlink" title="特斯拉开放专利"></a>特斯拉开放专利</h3><p>技术上真正的优势是创新速度。最好的专利是保护和吸引天才工程师的能力。</p>
<h2 id="特斯拉的使命"><a href="#特斯拉的使命" class="headerlink" title="特斯拉的使命"></a>特斯拉的使命</h2><p>加速世界向可持续能源的转变</p>
<p>光储充一体化</p>
<h2 id="发展规划"><a href="#发展规划" class="headerlink" title="发展规划"></a>发展规划</h2><h3 id="2006-2016"><a href="#2006-2016" class="headerlink" title="2006~2016"></a><code>2006~2016</code></h3><p>降低价格，提高产量</p>
<h3 id="2016-2026"><a href="#2016-2026" class="headerlink" title="2016~2026"></a><code>2016~2026</code></h3><p>太阳能板——屋顶本身就是太阳能板</p>
<p>扩充产品线，满足细分市场需求</p>
<h3 id="自动辅助驾驶"><a href="#自动辅助驾驶" class="headerlink" title="自动辅助驾驶"></a>自动辅助驾驶</h3><p>主动安全与被动安全</p>
<h3 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h3><p><code>GIGA</code>：超级工厂</p>
<p><code>2030</code>年，单年销量<code>2kw</code></p>
<p><code>model3</code>等等，在国内销量低于北美</p>
<h2 id="研发业务"><a href="#研发业务" class="headerlink" title="研发业务"></a>研发业务</h2><h3 id="特斯拉研发中心"><a href="#特斯拉研发中心" class="headerlink" title="特斯拉研发中心"></a>特斯拉研发中心</h3><p>上海，打造与北美同级别的设计中心</p>
<h3 id="车载软件"><a href="#车载软件" class="headerlink" title="车载软件"></a>车载软件</h3><h3 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h3><h1 id="实践总结——特斯拉与元宇宙"><a href="#实践总结——特斯拉与元宇宙" class="headerlink" title="实践总结——特斯拉与元宇宙"></a>实践总结——特斯拉与元宇宙</h1><p>元宇宙这个词第一次出现是在<code>1992</code>年，一部名为<code>snowcrash</code>雪崩的科幻小说第一次提出了这一概念。作者在小说内描绘了一个科技公司开发的完全虚拟的世界，只需带上虚拟现实眼镜，就可以进入到数字空间。虽然这一空间完全虚拟的，但是感官上与真实的世界一模一样，人们可以正常在里头社交生活，工作，甚至买房盖楼，交易等等等等，这就是小说里面第一次提出元宇宙这一概念。</p>
<p>但元宇宙仍然是个较为模糊的概念，没有一个特别标准的定义。只能笼统地认为，元宇宙是一个和现实紧密连接的虚拟世界。</p>
<p>而扎克伯格十月份在线上搞了一个非常隆重的发布会，一方面宣布<code>facebook</code>改名。另一方面也郑重宣布，<code>facebook</code>作为一个万亿市值的公司，要进军元宇宙。</p>
<p>在一般的商业逻辑下，如若某一公司的确创造了颠覆性的产品或者技术，一般会在时机较为成熟的时候再拿出来推向市场，一鸣惊人。诸如苹果、微软等公司就基本是如此的商业逻辑，但<code>facebook</code>的这些操作，显然是非常不符合商业逻辑的，背后自然有他自己的无奈和机遇。</p>
<p>首先，在机遇这点上，<code>20</code>年疫情爆发，人们居家的时间大幅提高。长期居家就会产生对线上或者虚拟世界社交的需求，而这与元宇宙不谋而合。而另一方面，当前元宇宙技术和各大巨头所描绘的元宇宙的愿景还相去甚远，可以做一个比喻，在元宇宙这场百米赛跑上，当前的巨头们只跑了十米。但是，就在这跑过的十米里，<code>facebook</code>在这里边是领先的，因为它有着巨大的用户群体的社区，还有自己的虚拟货币勒布尔，而剩下的路还有<code>90</code>米，充满不确定性。然而由于近年来，<code>facebook</code>陷入了诸多丑闻，长期处于不利状态，所以对于<code>facebook</code>，只能无奈先发制人来占领舆论的高地。最后，从舆论来看，元宇宙这个概念是彻底的火了，但是<code>facebook</code>的市场信心指数却并未明显提升。</p>
<p>而余下的巨头也只得无奈跟风。微软在原宇宙这一领域同样是领跑者，只不过微软自身可能之前都不知道所从事的领域就是元宇宙。对于微软来说，不能让扎克伯格一人占领舆论高地，于是四天之后，微软不得不宣布进军元宇宙，别的巨头也被迫陷入了这场元宇宙内卷。</p>
<p>而特斯拉，作为一家能源和汽车领域的革命公司，对于元宇宙的兴趣是不大的。或者说，特斯拉解决的更多偏向实际的能源减排，运输革命一类，而非在虚拟空间中进行革新——虚拟空间甚至还未建立，何谈革新？</p>
<p>特斯拉目前对于整个元宇宙仍然处于观望状态，不过特斯拉正在考虑加大对于虚拟驾驶的投入，一方面可能作为游戏单独出售，另一方面也希望为特斯拉车主提供更丰富的试驾体验。</p>
<h1 id="实践报告"><a href="#实践报告" class="headerlink" title="实践报告"></a>实践报告</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>元宇宙是整合多种新技术而产生的新型虚实相融的互联网应用和社会形态。在技术爆发与后疫情时代社交刚需的客观促进下，元宇宙得到了超乎寻常的发展紧迫性。</p>
<p>在此基础上，META metaverse 实践小组的同学在京沪地区调研了诸多相关互联网企业，并且总结了元宇宙的定义、发展驱动因素、分类、国内外元宇宙对比等内容，并且对元宇宙的商业价值进行了进一步探索。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自 2021 年以来，在资本寻找大风口，用户期待新的互联网形态与交互方式，以及VR技术更加成熟这三大条件的推动下，元宇宙概念火爆网络。而在对元宇宙的推动上，不同公司也采取了不同的策略，包括开放式与封闭式，渐进式与激进式等等。这些发展路径将带给用户不一样的体验。</p>
<p>每个公司对元宇宙的看法都不一样，这是对下一代互联网形态的探索，更是对下一代互联网的科幻想象。</p>
<p>基于如此认知，META metaverse 实践小组的同学开展了在京沪地区的元宇宙产业调研。</p>
<p>调研的企业包括但不限于字节跳动，腾讯，特斯拉等等。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>长达一周的实践结束后，实践组的同学们认识到每个公司对元宇宙的看法都不一样，这是对下一代互联网形态的探索，更是关于互联网未来的科幻想象。</p>
<p>元宇宙主要包括四个核心特征——<strong>元宇宙是持久可分享的世界，联通了现实与物理世界，指向了新的人类生活方式，需要整个行业共同参与</strong>。</p>
<p>就技术本质而言，元宇宙作为现实世界在数字世界的延伸与拓展，是一种让我们与所处环境更好相融的技术手段。根据业内预判，未来超过90%的日常活动，如科研、教育、娱乐、会议等，都可以在元宇宙中进行，因而元宇宙和互联网具有同等的重要性，将给经济社会带来巨大的发展机遇，并在宏观社会、中观产业和微观个体3个不同层面产生显著影响。</p>
<p>　　首先，元宇宙将推动社会生产方式和社会治理方式发生显著变革。一方面，元宇宙将有力增强技术创新，促进传统工作场景转型突破，推动形成超大规模的生产协作方式，切实提升社会生产效率和社会资源利用效率；另一方面，元宇宙将加速社会领域数字化、智能化转型，有力推动智慧城市建设，增强社会的公共服务能力和应急事件处理能力，全面提升社会治理效率和水平。</p>
<p>　　其次，元宇宙将推动产业技术变革和优化升级。与目前的互联网应用相比，未来元宇宙应用将更多体现在生产端。元宇宙的发展将加速不同产业可视化场景应用，数字孪生、混合现实等技术将在产业链上应用得更加广泛，进一步推动企业组织形态重构和商业模式突破创新，加快产业形态数字化和产业组织平台化，引发一场新的产业范式变迁。同时，元宇宙将和互联网发挥同样的作用，进一步重塑传统产业发展格局，培育壮大新兴产业，驱动产业格局加速变革。</p>
<p>　　最后，元宇宙将为个体创造新的生产生活空间。元宇宙场景是由技术进步与市场需求共同推进的，其发展将给个体带来系统性改变。伴随着元宇宙应用场景和应用范围的不断扩大，未来人们大量的工作和生活活动都将在元宇宙场景中发生，如购物、娱乐、社交、学习、办公等，元宇宙将成为人们日常不可或缺的一部分。未来，现实世界与以元宇宙为代表的数字世界将会走向深度融合，人们的观念、思维和习惯也将发生巨大变化。</p>
<p><code>to be continued...</code></p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
      </tags>
  </entry>
  <entry>
    <title>沙漠上的纽约城</title>
    <url>/2022/01/09/%E5%87%BA%E5%9B%BD/%E6%B2%99%E6%BC%A0%E9%87%8C%E7%9A%84%E7%BA%BD%E7%BA%A6%E5%9F%8E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3ae8a2440473d7932f557d6ea5ff1d69b4743561d08249182ec504bd93ac9db8">21efd21cd195fcd5d45879403bba0cf61685e769ef05e8dc0f420b2419c5eaf12d08e9ef12cc73ec1b605eea6f8ddbdc34caaa3b04bcdf101eca8b13b4d997957579ac7f155e41803d065a4fb2709d1d1bdcfadf6a62056e2eb09e29b276d5c297304b7b2cdb3719d271bd477658c4ee8b6ab26fcf636023eb8439121c85c3ea67cf49710bed3b4cf19517bce375101be36bca38d11bad2d004e5128ed449536920cf37667e533fe24ef0eea4d9d9344712f404f803cd4cfbc3d06d1fe1892ef6f27f1808c9263a45a502b1ee2d4db4ae12a0e84b37274fd254f83cda0f00da22151a08095f7606871ed3f29be2182f02e22d6f2ba6855378a30196c48b92dd14b3142dac118962b6385f78e3a29352a0389a5bdedffa5d98275598011eacbaf82281b8c3885c8065e1f2d2ac75b068b2acb6a2c3517387b20144f37ce604d8cfce1730823a5d687cda8bd72e82e185b9f189fd8f632119d45f510384c99ae126b4eb2bb153202f60427c1c4db67d96cf98de467a27a9e9b2005e8b75b38ad704e792b28eac1a0bacce7f72b5ece2a82add70b51c4fd0ace649ccef661829b9fbf41fe125ad8a6aa8a8beffb49d23b7cd9a4da3f2ec70b7696c586933a067fffb9d2cef45e89705d30b058b8ef93b3c0d276971363a2777dcdf71e55257711ca1ed75fbf203b04118fc4e6088a95e2fcfd34d9499883327daa8e4cf3ea4a42763afbb1cdf0fb3eae0398551ef7b0d4c8136916136e1952efac4b7bb363b67278e50a8da56c5838798be1f7138c09c22d19d13e1dba87dace0621bb4e43e51de69ce43f6372d9a691f8fb430edd01809eab5c9ec9e6444dabd16ad767d81f5b5e1143cc1b84f63b2212e89a5bd4f1a7442320fae005f0e68f5ebd5bbb3f4dde72d2ad2fbd6b3b5ae33054c3e5a2152e2ff201094cc7485cd59a2d6449e95fb0da9f780c4875ce040d63296c4e448398e41a4eee019bc4ab2975b530d3a0d56157940fb5132978c499683dc51f4bc769a215423de0e6472fd0105c7f93c78a09ceef2fc9e654815a2b0ea98faa21dcb7c1404955c1e0ac2f0cee6cfd5ae82ebc3ac9a9ffc5d5cde7b7d8b5a278560c21c2e3ffff0459f4e799a69a93712ba8c9cd05945ce7cee795ed595caa47b7a59ad83042e794a0d88e292ffccbe6c01a21b45c103c7ee70ad76fc4c002241b150f85af678e3ca420ed9dabaa745c978b888a6846a5f2cc0f5c6a9c71f06802de7869a2ec4fd648da49206c6643643d62d986d3aa651866c00ec6565fc44ecabf375109dd6423a002e5815d4640f5f09ac291107c756ef36441547dd4850f03839f86a96a2f6226f81f4ba40d4bebf99ebee66dc813321f47868a8bc6b4de0852ad13c8d4f6aec39c72ae2578e74ce396c733b89b261c8c897f970420584d1a9eca97931ddec1e8a982aa00ec46d985c1c6f5ead8f96f6206f1beaf340532a609dd4813e90f0f95c67a317043c1cb1bc620170107335bf8d2f4b5b904cc2b9749b4cf0e5b7e88a831e230dd196860c68cafa9e82a2402ffd9263c59db2876d999c0a0d70cef3f36c8f9311812f7d372161f44142fe2dabc72c614278152d6f09ea54b568ed47306e40fd60e777c71280d72d3e094ccdf3384c0e70fef604d6bc813b848e4cdf09d63b8a7cb6ed9ce73cc149bbc231d8fba9f5323394b521d39d8b1255626981b66233eb49df1bc54383dedc42cdc3ae525874a315c35f0d5869ab2fcdad6b332cc7be7c57a647bfa7b6ddba1376bcfa5e2a75980b84ccc85a571238083d1c53936101a3bbca4a5194d10f37f0406625d8c68edd2c1278a1ff71f809751929accd06f8c15ab36695e79b56ca176d27614eed384f819e3d42a59615155d56bfb44d6e2504f12a5c52f73e6c5a17a9b1fbc0479c1a85fe032197c362a6135393c11928858dab29ed589536aea07d78226c74b23c473dd3803dc0932c5e554d291e1067fe55b5fc0573ebae103b85e46cfbc976e0df425da328b25c9006fddadd6b327a2ff4f116a672169d26ea07095619485e7ecf4129db64ef0360c426dfcefecf54cf4adb222a1cc56464ba1629ae2de516399598b3bca0cccb05b03e3dfb9af6b302c9cdf82a8b230c0883bba34dd72d6858e380a04f061b29d219df56b32029d3f3a968a8214ad94b79b94028198b2ecbfcb77bddfe9046af8458f2e22f861fb46d942e5cf8166513524db7e389c95d96bb09dbd3d62828ed76ad134d2f9425c5739a9e2af5949e2283308aacbe2b2a8816c6384b7afb5740c7ec981b4d70f74010ce65b1b918e7ca010e62e8a7ee67fe9bae27ae03783518ce315c843ea1b093004df130993c8d491a95d15ca22d90c926062e63f06a36f50bf9ab0b2ff46c128b3b3934c11db64831e4a9bdaf941a13d487d665acfdf2bc3f7ead4130cae16101454dc51d4161d347d8e1a3da8892ca7e46f7a1bb268cb40da4294ed15c91e98a8c0dfaa46d862440380b3653f50c9b4e188e84d40445a262255c772de7a0b40f08928223f4dae8a5236143ddc79ced753096748aee4c5a91b8c8c50ae10c027e6ebaf8d5443f28a10379720d616fa01a7e18f281dde8574495707686afe35603ace85e66a614a227da64cf406bd7443deade74ad84d47f7e5e4304ade0e562c0471f6c0e5601dd04d0b9d9859671dfb0ccc0d35a5b150ce0f89a0625e6c87d0eef7a1cec6c3adc3d72b130b32f8416f0386dc51959e1d34290ec4f845146d8c1cbd07f3f143d9952ea5ebf8edc7ed423ca26feb966020d4bdd0c2bdefaeb94c7213008467a0e0aef9ae13264f257bf82ee3574f14fdbc0065c84a5457ff983c730f780947b068629a3960e11edc450900e18637956136b67b2d92cec8ce24a771d7e19c8d692ee6f15cc28b3283c316b26b1d7caec3829b640d657ef752db394f7866644dd7179f380f29d71b31ff7585695e917d44798ae6d376dc2586aaf18812490e2cfdee499943700e380598d3720aab5263bfedfa3a658e2aa1be434237387841e2426157590d6a4ada12338ca21c56d3db6efe2685b70ecf463777ab74deb1626e22f707f0c12c6b41ae46118046cb19ad0e1cac6f04df0a8370504162f234f54c1ed483462f8564c3648ff0f8cf7291c8a73c75bfb1aeffdb6dca5fb436eaf9de3e369cb4a7bc97efe133a8e9314d9dbc97cdea728b750d5449324811db05e4abaa8a1151937602b4f25835e4bb2dfbb7acb2677a6e6e79705017e5da979f233ff09adec72154ed432dfb4e59e8ab192cb8471a874a566565c893c6fdd11f27b9eee9bb845a8425cb8efd4d6b066c0d8c554ccce816c566ecfa475c2982b8865503d76df885ee7718edf38adff01b0283f8265ea2b335e630ebf495a3a64864f8d51f916ca41a552a0d6de27b84e5f12a64cd39e383a875ff66160336f96aa11192b60e305b5d660e2e612efbd98df59796933555f0837257cd67b8d3b17c1755b9b4704875c4c51b3d2e21c58226270bd2b31794d6978c2f00d2fd25a6d22c9cd39d3ecb87f4eb29a1a99ce2c732faabb98c1fdca934e408a7232d7efadcb46d005f45768f18e3ec58a656309dd0568ed4db9716c967c68451e072a77517cc5d749e64cac24970dcaf8950d00c03f611569f52981762ed021935e7ca7890986f43c5c96df42a8dd99f3e57d058b9a122b312bd018bb0baaad5772848ab54c8aa746cc981f013cd633e517c83699167238e58674f980414151014c8a0608140d61e4510e1af70265316583a94810579e03b9b485222fb389c38edd99d78e3490df55bba268bafffba9269440b04a0d59c204112149ede7e1d71cdd0c3b1e8f3945e30f6b5ee26f04a666733d9a892fee80cdb19048975a3a24004dd10be3adbf2a9da06b47b7f3b350f9e1fa18d2dc62ccbff5f7eae208c1fa8d0e24b9c1a99ec23a4df9f584bf49c961d0c0cd64923e03f5a4c8e1107b6a55b60cdf5f0fb20bc9af1beba8213ea91699c013c183f1355e921fb36f19d4d210d68d91e3c996e77c321aeb001d0ff79d8d5b9c8e7402f5fb56ec2675727f8676e4fbe79ac925fbbdf1457a5692aa5d933b1b53713636453d93e52ca5839293c8cc3cf785770dcc37f1ae2be367738c33719d6a43e1fbccdbbd92246148bacb4118f31997535f579b79a576f9fb496575d80e52469c2d84ce5ca73f1f08859ecf2d1fdd13ff8140647b7b9df687ec1280aad50bde1b8c8cf4af1be3282f69e942725b46c1918b50ec7d2376a84e649fbb265434db57a06e7c51c0c3b88d2a0084caab72a04d757870e9eacb9004a0276c8c2db7b11f0003c6071a32e11cc439e5abac6491d90cc531b44e1241247a27588cc11cef7e8f8a759e840a530a8afc10168ea524292faeb993d8df840a1b0b61c68cbb385cc32f7fe8ac5f3d3b39e089e96cc5ba4a4b911321ef6d0501519cd05b5a8d499343fb04a0d6945f428773c8db5ef1903419a5826027de765a776f419d2725590f298e1636f960f66942d1045fb6a6fd57f073a1dd9354558b94ed9cdcbc1ec55406780142ffb3b6799c3bb3b25a2a5a5bebd4bd97fce53767360c7ced1d6ef9aa0b65a7c765f4813ff700ae16c2b2ebcd5f0a23f242ce4d2c93c392d9cd4b9fcfd1c620f4859fe6f884719c40dd0da550f0668792c60ed6753b58abea5e41a809ecf0befe5c5464c69e53d323fa51dbb04a7d5eb4e90ae49b61507e2433031ae1b6841da4fbb26e8c41825f2aa4c6b1503972b87874946540beb36eaee1551f5af9865fdbf230c889d3f57f6c7d204878e41661b22cacf501510d6fed5431449fbecb48823f6ad953abd48805c15f8910ece24dbb4add37fb6a4de4ac2741191989c776e6b60952f82383e39ca4f668b517ffcf27769302a75c139c39f7cdff7cf1935b968e992e1ff07995b7ae969d2e651f64b5dd8ef60506ec2b12637f1df5e74e4126ba4064a7f1a9e372a572abf25efc2749987e00b8d2df383547257a3ffaab746c3e745821eaa0f2e7a1fbebe0615111d1e4504b9e0a8e6ccf56382274235df97225897508e53d7853f5dfd98541f507f6915cb9e3015f2cbade24b5518e8b8ab46b28926267fd8cf1c2f6789f218db16709932a529f7bb28df422a9713af2c34979b24648193c3199aabd8c8facbe8281ce0641c353bc4fd7598ff2aa18fa7d3043410c95f6535e5c7059b40d44f0fa1218e971c7a3e07378fc6c7a175fe26c20522c20c747def18be9c5a60ebc77fbab5a0926643f4828846b5d797e0b3432ee00715b280452797de8897ee12524f261aa122495e18ce1ec08242645b9258a4b61ef4376ceac1a2d08000f342dfc4373706cce60bf15ba56be9f377d0776f6e284f5a5b6958c3c17fe8d86a49e49986566f7283cc8dce3d548f0c786a0ae76b880ff7a8a0c7f5f0b549290b76a22a129d16f183472e1f201fe2979134b610d4879ca87ba8110104b7c9329ce71afb0cb327889c70fd5935527c3af454e7d06800387690e37f6c2beee3c9d1afcc7c3d6c49ef04ee2e1b54007651aec357e733d14ff4e7b6f3b0bdd9eee225f99315ae194ad36462ecc736766d6d0900f1d7b6a1c43d306745204bb66310413e0376d9f56983da00fcb7829e159a029cf99562c0057debffab16aa92b8f18d8d64b93761a6fc1cffa986cd0bc6614812f94ab98c53e7c1369545b65d3c08c7a55ecddd72473fa691451ae27f429b35d6c3563612adf496c7c20214717d76f832911f91dbb487a033e846e4096f6198fe5e745fd9d30ccf402963ca5f7b2bc5fb5279cedac9dc77994e3a986344e403ae6ab5673c9030fc0d036fe3b3fab90d36a99f34be325760bc3d6cc9a0b047480c693f85db36722044dc4ba7990dc39cdafae1f4f875b03422355a8d439a0a8283c7f81f4822a5fda96b65e461f185a486e3aa36137035ca9e9e60ffbe523d5375f432240123204dafe3fa67abbef124b14607fe2eae85b8c62a1474e63d2e5793c74408ce9cf99074dcce353938414469fb7b94dce8ff234305233f1565406f19daaeccc5c0e2491f2e5401e88b7e93f5fddc6efa26f97107876bed258a30184fad2c3a094a3be184e326bfa92e46ed3cfd1fa8fc91c9cf96917b2a356d6883b4782c5ee5f9cc206aac0f9d8db02468c491ee83b396e41c5597713802d3a48017d9ffbfdd7c724b58d7be1497335af6c0923a3d3e077593e5954c7e0fbab3c0d4f2bc5b640688e846e45fbe6f8a22e99d0bf2e1ded652b009e6b2836f2de6cdf543d956fbb3faf4e9ae8cc524f303616eabcfc751250537bf17e8a978f21914bb1dcb061261a13727861622e840403132db6a6defff617d1d958bfa76a934b40150d8cdfe6b79cf5716009f63a2bdcdfb26b0f7bac4d5022ec8f3e5768379f615624bf4d5cad421decd9c36cd9a7fc597ed3398fe111ed2f653c791fdfbcf15d361d4201a56bea0b7a38b6a60775bcbf56f01249902501cb36863ec51466bdb158d62f77dfd6edf5688d58e38d315f5d27396caeff9f823a805c8f3f70cefb47a210ca1cb9b85961205f48457b2547d1a942c4903a3380855acec64b3c2c196e0d5a9a927b078dd3ab9e9fba4a790475bf43407b6818fdac7e4603881b2487ec34eb39fd0e3abdd9b00735605e9bb17a38f1920747cbb92033413ea35b05a97cd6842c7f8f7ea14c472c1ad0ba5c6f62c8cfd61f1e6c0b8f2ab7dad6a68d89b979622ba1066b17cc40164a76bfc1e7a7734b2a91ece6e6af4004afd5c909a479d2aca9c928e52b72c69aaab30b4ed3503968a782728e62c39e0cab5d3ca9f77fe674e5e019201bc444ae4cc266988c97b50a2ecb1770676e794d37e8f4a7a9fc9735302776603e2a86f3020024316cee552b85b81543bd8435f3f4a9fa16513885cd424eeaaf607336baec8fd9e8bf1db4bcd40baf51f3bd2468c879d611781545a40145a269f76be375f5a64830d21176432d6989e03ad7a56032c13078b07b9a60d99372afc744f78f24eca6193f9cbb307d5ccc9fb8cda0876cd92990d445c73c405b4f59a9e8ac41c118ab370eb42248e3c74a50d4c3c97cf43c11f84b72909aae3c8e1afe48196d81f7997d7a098105ff41196a4e21498e14dac496b72e6e8350b23ce18ae133e7c2e3718aaad7e1b762c5af53c56417e0447364f7837ecb60b7200fed45aff8e0f08b572255b296b496e4ecbd14d0ec861287e40dc2c40ee96bf4a7902a66a7673eefee1943104bf1145aaec292da4affe9f1579f00e27bb6008a146c8cb2b08ddd1eee06db4e96acccbb2c4eed592071edf265758bbaeeb3d7fd730fbbb1fbe9a711a626a1862e8f5902ac8a92997e3ce23d5ec8acbfe6b048933930a0766e0097aedcf0612c645df4b3cfe3f30d21451b67eb1727df386a709c6266426840a57a9b1494b8c777b50042d9c6e88cd76e912d7579337cedfd8437d0c770f549332ea8ea4897ef357fff2f2950be3742a497e9c6223551b0958c0b0c4f04bb562c87fad4e317ad7dcd2635d7971282f1d19cc625c3cc652a8a39adaee2f4fede2a4efee9a4f2646a687cd4f98907acff12efa3e3378c38a7a8d5a3f7e9431e303de147c8444e51867d4bf64cec3b659590cb3f9a3cab8f90f6cac4fe8ef504c3a55117275378eb8d15acbdc63b7ed597aebfc0118b0fc714f417d5fa74dce9e89bb032b1e39258d53e83e27ff1b065f53aebd8ad6a93e70dabc8109ae4a079b1c87cd30e6ad345c1fe6df10f6ad2c1dd19f83124cbe025f2f4dadf1cb348d93e666dff3577492737534feb8bf9989291415c6455279408c042ba7f53978be37c8350996b073e6f75a1f60966af7570821006d5148e96482e47271eed43a15598bc3a5df0684118aa10e3cc408a2a98c1635ef80101edd94ccfd9bb9f7f51eb307a44cd49828b7f725e3530b33186ce0d194c8fddd3e84857fb41c0307a5b4d7b9fc47f06e1fcc125685f155f67a95883a6660841acf0bb463092e82fb12eaec5ff2211408a1852602ddb88d8adb307532066408d0f5526a603873859cb37303ec63f17defbd4ff3279dffdce46433561b284d9eb29a70a6cecbed7f76ea8f9f51f396e4ea3d5446ed5910ae582e81f9b7012331b352a5d6e4df260b396bb80116a358a90608297fa7ded192cb3a02ab64cd241b7ac27a6fe200e16f40cc940c921fcad05483e33f6a189258a8a4ab6fcb174da26b094c709486f2faba5ba1a96bcce785674dce09b3bda9a5854db190786eeec44cd9229fbe445811272178cc8e0a49fd6f343a7f6f7bc4729b3645e59173b90fb9b77234d41ab9e2a085e7ed7618f44356d79fb5629716ced7f324be6d438788213bb86ac17e69a710cc70a0e43c879693b7652cb6ca4031c54cf2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
  </entry>
  <entry>
    <title>Summary for 2021</title>
    <url>/2022/01/09/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/summary%202021/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6fbf0b80d3454bbd34d2e735278be1f874c0f3cb76010372d42def2245bb2966"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
  </entry>
  <entry>
    <title>typing</title>
    <url>/2022/01/09/CS/%E5%85%B6%E4%BB%96/typing/</url>
    <content><![CDATA[<h1 id="typing"><a href="#typing" class="headerlink" title="typing"></a>typing</h1><p><a href="https://blog.51cto.com/u_15069487/2581783">typing库：让你的代码阅读者再也不用猜猜猜【附源码】_mb5fe94cdd5807a_51CTO博客</a></p>
<h2 id="基本类型注释"><a href="#基本类型注释" class="headerlink" title="基本类型注释"></a>基本类型注释</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: age: <span class="built_in">int</span> = <span class="number">5</span></span><br><span class="line">In [<span class="number">2</span>]: <span class="built_in">print</span>(age)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystery_combine</span>(<span class="params">a: <span class="built_in">str</span>, b: <span class="built_in">str</span>, times: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (a + b) * times</span><br></pre></td></tr></table></figure>
<p>显示地给出类型虽然不会实质性地影响函数运行(仍然可以传入其他类型，且返回值仍然不必然是个<code>str</code>)但是显著地提高了代码的可读性。</p>
<h2 id="复杂类型注释"><a href="#复杂类型注释" class="headerlink" title="复杂类型注释"></a>复杂类型注释</h2><p><code>Python</code>的<code>typing</code>库。 可以描述任何变量的任何类型（类型注释）。 它预装了多种类型注释，如<code>Dict，Tuple，List，Set</code>等等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_names</span>(<span class="params">names: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> names:</span><br><span class="line"><span class="built_in">print</span>(student)</span><br><span class="line"><span class="comment">#这将告诉代码阅读者names参数应该是字符串列表，返回None。</span></span><br></pre></td></tr></table></figure>
<p>字典也以类似的方式工作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_name_and_grade</span>(<span class="params">grades: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>]</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line"><span class="keyword">for</span> student, grade <span class="keyword">in</span> grades.items():</span><br><span class="line"><span class="built_in">print</span>(student, grade)</span><br><span class="line"><span class="comment">#Dict[str，float]类型提示告诉我们，grades参数传入的应该是一个字典，其中键是字符串，值是浮点数</span></span><br></pre></td></tr></table></figure>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>如果要使用自定义类型名称，可以使用类型别名（Type Aliases）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明Point类型，该Point类实际上是[x, y]元组的别名</span></span><br><span class="line">Point = <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># points参数是很多个Point类组成的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_points</span>(<span class="params">points: <span class="type">List</span>[Point]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;X:&quot;</span>, point[<span class="number">0</span>], <span class="string">&quot;  Y:&quot;</span>, point[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h2 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: <span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Tuple</span></span><br><span class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">get</span>() -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span></span><br><span class="line">   ...:     a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">   ...:     <span class="keyword">return</span> a,b</span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">print</span>(get())</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">In [<span class="number">8</span>]: <span class="built_in">print</span>(get()[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line">In [<span class="number">9</span>]: <span class="built_in">print</span>(get()[<span class="number">1</span>])</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>上面的函数<code>get()</code>返回的形式上是两个<code>int</code>，实际上返回了一个<code>tuple</code>。通过使用<code>Tuple [int，int]</code>，我们向开发人员指出这个函数的返回类型。</p>
<h2 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h2><p>如果某个函数的参数可以是多种可选类型，则可以使用<code>typing.Optional</code>或<code>typing.Union</code>类型。</p>
<p>如果该参数可以是特定类型 ，也可以是<code>None</code> ，则使用<code>Optional</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_to_print</span>(<span class="params">some_num: <span class="type">Optional</span>[<span class="built_in">int</span>]</span>):</span></span><br><span class="line">	<span class="keyword">if</span> some_num:</span><br><span class="line">		<span class="built_in">print</span>(some_num)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&#x27;Value was None!&#x27;</span>)</span><br><span class="line"><span class="comment">#上面的函数try_to_print函数中的some_num参数可以是int也可以是None</span></span><br></pre></td></tr></table></figure>
<p>当参数采用更具体的类型提示时使用<code>Union</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_grade</span>(<span class="params">grade: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(grade, <span class="built_in">str</span>):</span><br><span class="line">        <span class="built_in">print</span>(grade + <span class="string">&#x27; percent&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(grade) + <span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Refine"><a href="#Refine" class="headerlink" title="Refine"></a>Refine</h1><p>typing 库的一次实践当中发现一些问题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_train_set</span>(<span class="params">num_inputs: <span class="built_in">int</span>, num_examples: <span class="built_in">int</span>, true_w: <span class="type">List</span>[torch.float64], true_b: torch.float64</span>) -&gt; <span class="type">List</span>[torch.tensor]:</span></span><br></pre></td></tr></table></figure>
<p>直接这么用会出 bug，不能直接用 torch.float64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_train_set</span>(<span class="params">num_inputs: <span class="built_in">int</span>, num_examples: <span class="built_in">int</span>, true_w: <span class="type">List</span>[<span class="built_in">float</span>], true_b: <span class="built_in">float</span></span>) -&gt; <span class="type">List</span>[torch.tensor]:</span></span><br></pre></td></tr></table></figure>
<p>另外，<code>torch.float64(3.2)</code> 不是构造函数，直接传进去貌似会自动转换</p>
]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>科研</tag>
        <tag>2022寒假</tag>
        <tag>Python</tag>
        <tag>编程规范</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情下的又一年</title>
    <url>/2022/01/09/%E5%87%BA%E5%9B%BD/%E7%96%AB%E6%83%85/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d5ae86f0fc8eebcab33e864b93eeae68cc1bb45757b5ed2165ca258a505d242e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
  </entry>
  <entry>
    <title>规则与气质</title>
    <url>/2022/01/08/%E5%87%BA%E5%9B%BD/%E8%A7%84%E5%88%99%E4%B8%8E%E6%B0%94%E8%B4%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fef2f8930e6ade2180597db7e36610b0be516fb85545b645b7421cc859994024"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>出国心路</category>
      </categories>
  </entry>
  <entry>
    <title>浪潮之巅——资本与科技的关系</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85_%E8%B5%84%E6%9C%AC/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/EKeH98zXIwPpbZi.jpg" alt=""></p>
<ul>
<li>任何一家公司的创办都离不开资金。如果要求创业者将全部积蓄倾囊而出进行创业，很多人可能会知难而退，更何况喜欢创业的年轻人，恰好是积蓄最少的群体。</li>
<li>在很多国家，几乎包括整个欧洲，很少能够见到新的公司兴起，原因就是没有人愿意提供创业的资金。</li>
<li>哲学家黑格尔讲：凡是现实的都是合理的，凡是合理的都是现实的。这句话在恩格斯的《反杜林论》中成为最有进步意义的话。任何事情都有他发生，存在和发展的理由，当然，如果这个理由不成立了，他终究会消亡。</li>
<li>风投是高风险的，自然要追求高回报，每当创业者向我们介绍他们的发明时，我问的第一个问题就是，你怎么保证把一块钱变成五十块？大部分人都会觉得这个收益过于不合理，但是风险投资失败的可能性太大了，它必须要求把回报率设的非常之高，才能收回整体投资成本。据我一位做风投的朋友讲，红杉资本当年投资Google的那一轮风险投资基金高达十几亿美元，只有Google一家投资成功了。如果Google的回报率在100以下，整轮基金就是亏损的。</li>
<li>资本还具有带动效应。例如国内的创新工厂培养了一大批勇于创业的年轻人，虽然他们第一次创业极有可能失败，但是获得了第一手的创业经验，将来自己第二次、第三次创业获得成功的概率会大大增加。同时客观上还会鼓励其他年轻人加入到创业大军中。第二，创新工厂的出现，使得整个中国的投资领域甚至整个社会开始关注天使投资。有了社会的关注和更多资本的引入，中国的天使投资和年轻人的创造力将以非常快的速度发展，这对于整个中国的科技进步大有裨益。</li>
<li><p>虽然风险投资的目的仍然是追求高利润，但是这些高利润是他们应该获得的报酬。我对风险投资家的敬意远远高于华尔街，因为风险投资对于整个社会有很大促进作用，而华尔街经常会起到负面作用。风险投资常常为创业者雪中送炭，不管创业成功与否，他们都在促进技术的进步和产业结构的更新。而华尔街许多时候只是将钱从一个口袋放入另一个口袋，同时攫取巨量利益。</p>
</li>
<li><p>若没有投资银行，科技公司很难在金融市场上融资，开展并购与分拆。</p>
</li>
<li>我们把投资银行比作吹鼓手，是因为他们可以通过吹捧一些科技公司，制造泡沫，这样有利于新产业的繁荣。吹鼓手显然不能算是褒义词，对于科技公司从捧杀到打压，变化只在一念之间。</li>
<li>风险投资和投资银行同样握有资本，但是对企业来讲性质完全不同。前者几乎全是正向的作用，是企业可以依赖的朋友。后者则是一把双刃剑，用好了会锦上添花，用不好则会玩火自焚，正所谓成也萧何败萧何。</li>
<li>在上市后，一家科技公司如果得到了华尔街投资银行和基金公司的青睐，他的发展无疑会顺利很多，反之则艰难很多。</li>
<li>华尔街对科技公司的追捧，还可以通过提高对科技公司的评级等无需成本的手段进行。由于很多投资人无法清楚的看见一家公司未来三五年里的发展前景，需要参考金融研究部门的研究报告和股票评级做出投资决定。如果一家著名的投资银行认定某家科技公司今后几年会有超出预期的发展，那么该公司的股票就会看涨。譬如2004年底，美国证监会在Google上市的三个月后，解禁了一批创始人和员工持有的股份，股票的流通量几乎翻了一番，股价相应的下调了15%。这时高盛公司发表研究报告立体Google比上调了Google的股价预期，在报告发表后的几小时内，Google的股价暴涨10%，顺利化解了因内部解禁而带来的卖压。借助股价的大幅上扬，Google在上市后短时间内吸引了大量的英才，迅速推出了多种服务，并一跃超过雅虎，成为第一大互联网公司。像Google这样话，而且演出的明星公司还有很多，包括微软，苹果，黑莓、以及十多年前的雅虎等等。百度在纳斯达克之所以能有一百倍的市盈率，也全靠投资银行托盘。</li>
<li>华尔街会为每个科技公司定下营业额与盈利的预期，如果一个科技公司能够连续多个季度超出盈利预期，华尔街就会拼命提升该公司的股价。由于科技公司员工的期权占员工收入的比例非常大，因此一家科技公司的股价能否稳定增长，决定了该公司员工的收入与士气高低。在2000年互联网网络泡沫时代，新兴的雅虎公司之所以能够阻击微软等IT巨人的进攻，很大程度上靠的是华尔街帮助他维持了高股价。</li>
<li>在整个经济活动中，金融业起着血液的作用。健康的金融环境和秩序有助于科技公司成长，但是由于金融业与巨大的利益联系在一起，因此贪婪，投机甚至非法的欺骗行为，是金融业永远也无法摆脱的阴影。一位银行家曾经说过，虽然我们的社会和商业跟一个世纪前有了本质的不同，但是华尔街和一个世纪前并没有什么两样，今后依然如此，因为这是人性贪婪所决定的。</li>
<li>从好的一方面理解华尔街对上市科技公司的追捧也好、打压也罢，从客观上推进了科技行业的优胜劣汰。一家真正管理的好并且有竞争力的公司，应该抵御的住多次金融危机或者投机者的恶意打压。他既要有长远的发展规划，要能够在短期内让投资人有信心，同时能够很好的与华尔街沟通。另一方面，一家科技公司又不能刻意迎合华尔街的短期期望，否则它的发展会很被动，这样的公司一旦有一两个季度盈利不及预期，就会被华尔街抛弃，结果被反噬。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>浪潮之巅</tag>
      </tags>
  </entry>
  <entry>
    <title>If I Die Young</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/if_i_die_young/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="59091512f7f2c97d12b49d404f44fb333cf94992ae886417e77e99a7729686bf"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
  </entry>
  <entry>
    <title>浪潮之巅	11.13</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E6%B5%AA%E6%BD%AE%E4%B9%8B%E5%B7%85_11_13/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/wjys2pLGdNCmiSf.jpg" alt=""></p>
<h1 id="AT-amp-T"><a href="#AT-amp-T" class="headerlink" title="AT&amp;T"></a>AT&amp;T</h1><ul>
<li>短线投资者发现最快的挣钱方式不是把一家企业搞好，而是包装和上市。</li>
<li>如果说终结AT&amp;T帝国的内因是华尔街和AT&amp;T自身的贪婪和短视，那么互联网的兴起则是从外部彻底击垮了这个帝国。</li>
<li>在工业史上，新技术替代旧技术是不以人的意志为转移的。人生最幸运的事情就是发现和顺应这个潮流。投资大师沃伦·巴菲特在谈论上个世纪初，他父亲失败的投资经历时讲，那时候有很多汽车公司，大家都不知道投资哪个好，但是有一点投资者应该注意到，那就是马车快完蛋了。巴菲特为他的父亲没有注意到这一点而深感遗憾。</li>
<li>如果让AT&amp;T重来一次，它犯的错误可能一样不会少，因为它到年纪了。没有人能活到200岁，也没有公司能辉煌200年，这是规律，很难超越。</li>
</ul>
<h1 id="IBM"><a href="#IBM" class="headerlink" title="IBM"></a>IBM</h1><ul>
<li>毫无疑问，保守让IBM失去了无数次发展的机会，但是也让他能够专注于做最重要的事情，并因此立于不败之地。</li>
<li>沃森父子对IBM的影响是巨大的。早起领导人的灵魂常常会永久地留在这家公司，即是他们已经离开。</li>
<li>包括日本在内的美国的敌人常常低估美国的军事工业潜力，但是连IBM这样的公司都可以改造武器，说明美国的军工潜力深不可测。</li>
<li>恩格斯说过，社会的需求对科技进步的作用要超过十所大学。</li>
<li>IBM的研究水平很高，还参与了很多规则的制定，因此他在商业竞争中，同时扮演者裁判员和运动员的双重角色，使之立于不败之地。</li>
<li>在硅谷，很多公司创业时因为资金有限，常常租用租金低廉的民房甚至车库来办公，这几乎是硅谷特有的现象，被称为车库文化，苹果起家也并不例外。然而后来的统计结果表明，硅谷诞生于车库的伟大公司并不多，更多的则是从原有公司和科研机构中直接分离出来。这样，诞生于车库的苹果公司几乎成了车库文化的唯一例证。</li>
<li>郭士纳在上台后做的第一件事情就是对IBM进行大规模改组。IBM长期处于计算机行业的垄断地位，从上到下都习惯了高福利的舒适环境。机构庞大，人浮于事的官僚主义滋生，内耗严重。</li>
<li>在IBM把一个纸箱从二楼搬到三楼需要多长时间？大概几个月。因为要搬动一个箱子，你要先打报告，然后经过层层审批；审批后，审批报告再层层向下传递，最后交给IBM签约的搬运公司。在搬运公司的任务单上，上个月的任务可能还没完成呢，现在提交的任务单一个月以后能完成就不错了。这样以来，搬动一个纸箱花费几个月时间一点也不奇怪。</li>
<li>从IBM和AT&amp;T的不同结果可以看出，一个远见的经营者和一群贪婪的短期投机者在管理方针和水平上的巨大区别。</li>
<li>IBM在经营上相当保守，它一致固守着自己的核心领域，很谨慎地开拓新的业务。从机械制表到大型计算机，到今天的Linux开源服务器，IBM始终牢牢地控制着美国政府部门、军队、大公司和银行的业务。</li>
<li>保守的好处是不容易出错，因为像IBM这样服务于美国乃至世界核心部门的公司，产品上出一点差错就会造成不可弥补的损失，要知道美国主要银行对计算机系统的要求是一年宕机时间不超过5分钟。IBM这种保守的做法让大客户们很放心，因此，即是他的产品和服务比别人贵，政府和企业还是很愿意，或者说不得不用IBM的产品和服务。</li>
<li>然而从技术上讲，IBM又是极富有创新精神的公司。</li>
<li>在美国，申请专利的目的一般是两种，第一种是保证自己不被别人告侵权，第二种是专门告别人侵权。IBM每年花费上亿美元，养了一支庞大的知识产权方面的律师队伍，专门去告那些可能侵犯IBM专利的公司，IBM每年在专利上能够获利十亿美元左右。</li>
<li>1993年，郭士纳上台后大量削减研究经费，许多人离开IBM后去了华尔街。其中很多人，主要是一些数学很强的科学家，去了后来最成功的的对冲基金文艺复兴公司，并撑起了半个公司。可以见得科学与金融是相同的。</li>
</ul>
<h1 id="八叛徒与硅谷"><a href="#八叛徒与硅谷" class="headerlink" title="八叛徒与硅谷"></a>八叛徒与硅谷</h1><ul>
<li>美国人对政治家其实不感冒，他们更敬重发明家。</li>
<li>$原有产业+集成电路=新产业$</li>
<li>俄罗斯、东欧与中东今天相对落后的原因，就是错过了这半个世纪以来围绕着半导体集成电路的信息革命。苏联解体和东欧剧变之前，根本没有半导体产业，甚至很少使用集成电路。今天，我们找不到任何信息时代的哪项重要的IT发明来自俄罗斯或者其他原苏联国家，这样的地区怎么可能不落后？</li>
<li>第二个方法有点匪夷所思，那就是测智商。肖克利的招聘广告是以代码的形式刊登在学术期刊上的，除了绝顶聪明的人，其他人根本不读懂他的广告。事实证明，他的广告非常有用，而像高盛、微软和Google这样的大公司将他们变通后仍然还在使用。</li>
<li>肖克利以及诺伊斯等八个人创造了“八叛徒”这个词。此后，“叛徒”这个词在硅谷的文化中成了褒义词，他代表着一种叛逆传统的创业精神。这种精神不仅缔造了硅谷的传奇，而且激励着硅谷的几代人不断挑战传统，用于开拓未来。</li>
<li>仙童对创始人和高管的出走、员工的跳槽开始变得习以为常，听之任之。这也创造了硅谷的另一种文化——从现在著名的公司中离职，直接创业。</li>
<li>AT&amp;A、IBM和后来的微软公司都具有共同的特点——他们的崛起通常也能带给一个地区繁荣，但是这种繁荣具有很强的依赖性和危险性，因为这些巨无霸在当地会压制新公司，特别是竞争对手的出现，另一方面也使得当地在产业转型时迅速落伍。而仙童公司以及后来的思科公司、雅虎公司、PayPal公司则属于后者，他们不断地派生出新的公司，甚至扶持自己的潜在竞争对手。这些公司都有希望成为垄断企业，但是他们选择了另一条道路，通过技术的传播，创造了一个地区的持续的繁荣。<strong>正是靠着叛逆和对叛逆的包容，在上个世纪60年代末，旧金山湾区成为了今天人尽所知的硅谷。</strong></li>
<li>信息时代的重要特征——一家公司很难，也没有必要像工业时代那样通过拥有生产资料来把大家组织到一起了，另立门户的成本非常低。</li>
</ul>
<h1 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h1><ul>
<li>一般的创业者到了三十岁还未必能够有自己的公司，乔布斯到了这个年纪已经被自己创办的公司开除了。</li>
<li>乔布斯是一个传奇的能干人物，但是绝对谈不上是什么好人。</li>
<li>乔布斯这些改变世界的发明绝非一时的灵感所致，而是数十年的深思熟虑和经验的积累。大多数产经理之所以做不出改变世界的产品，是应为他们只看见了成功者最后的临门一脚，而忽视了别人的长期思考。</li>
<li>如果用一个词来概括乔布斯，那就是魔术师，它有着化腐朽为传奇的本领。但是这个本领背后，是几十年的专注和努力，以及对于品质的绝对追求。</li>
<li>ipad3的优点不如大家想的明显，但是使用起来明显烫手，这个产品缺陷，乔布斯还在世的话是一定不会允许出现的。</li>
<li>乔布斯送给年轻人两句话——<strong>Stay hungry. Stay foolish.</strong></li>
</ul>
<h1 id="信息产业的生态链"><a href="#信息产业的生态链" class="headerlink" title="信息产业的生态链"></a>信息产业的生态链</h1><ul>
<li>比尔盖茨曾经说过，如果汽车能够向计算机领域一样发展，那么今天，买一辆汽车只需要二十五美元，一升汽油能跑四百公里。这句话足以说明计算机和整个IT行业的发展比传统工业要快很多。</li>
<li>每18个月，计算机等产品的性能会翻一番；或者说同样性能的产品价格会想下降一半。</li>
<li>当前世界前五大行业，即金融、IT、医药与制药、能源及日用消费品只有信息产业能够以持续翻倍的速度增长。</li>
<li>人们很多次怀疑摩尔定律还能使用多少年，然而事实上，从而二战结束后至今，IT领域的技术进步一直是每一到两年翻一番，至今看不到停下来的迹象。</li>
<li>制造IT产品所需的原料非常少，成本几乎是零。IT行业硬件的成本主要是制造设备的成本和研发成本。假如我们将生产线的成本与研发经费平摊到微软售出的一亿片酷睿芯片上，每片平均成本高到100美元。因此，英特尔公司的最新处理器上市之初，价格总是很贵；但是在收回生产线和研发的主要成本后，酷睿处理器的制造成本就变得很低，英特尔就有了大幅降价空间。</li>
<li>摩尔定律使得各个公司现在的研发都必须针对几年后的市场。在google内部，每一次基础架构(infrastructure)的升级，都是按照日前计算能力和存储量的十倍来设计的，因为达到那个水平，不过是三四年的时间，这在传统行业是无法想象的。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>浪潮之巅</tag>
      </tags>
  </entry>
  <entry>
    <title>蔡康永的说话之道	10.30</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E8%94%A1%E5%BA%B7%E6%B0%B8%E7%9A%84%E8%AF%B4%E8%AF%9D%E9%81%93_10_30/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/rxXq7IYj6inwgU3.jpg" alt=""></p>
<ul>
<li>即使是在最亲密、最如胶似漆的时候，很遗憾地，他们仍然各自活在自己的世界里。</li>
<li>这世界上的真相就是，每个人都活在自己的世界里。</li>
<li>如果不想交浅而言深，至少应该避开：第一，别人容易有苦衷，不方便对不熟的人说起的，比如财务状况、身体情况、感情状况、小孩的成绩。第二，对方容易有强硬立场的、谈起来容易起争执的，比方支持哪个政治人物、支持哪支球队、讨厌哪个明星、信哪个宗教。</li>
<li>数字都可以用更有趣的东西代替，比如描述出生年份：我出生那一年，迈克尔.杰克逊出了他那首著名的Beat It哦！又比如描述收入：如果去迪拜最贵的那家帆船旅店，大概只够住一个礼拜吧….</li>
<li>说话像机关枪而且洋洋得意的人，也许可以试试把机关枪换为弓箭，拉弓——射箭，拉弓——射箭，留一点空当，让听的人消化，只要你的话值得一听，不用担心，对方一样会见识到你的威力的。</li>
<li>为了节省时间而发明的电动洗牌麻将桌，才是本末倒置的错误发明。因为每打一局牌，中间错牌洗麻将的时间正好用来稍微谈一点正事。其实也就那一点点洗牌的时间，也只够随后探问下对方对于某件事情的态度或进度，但这对商人而言，已经够了。对他们而言，打牌的输赢不重要，而打牌的间隙才决定了更大的输赢。</li>
<li>你不必装作有深度，只要懂得欣赏别人的深度，已经是一种美德了。</li>
<li>所以说，线索其实很多，只待有心人去观察，观察清楚再出手，骂他或者赞他，都会让他刻骨铭心，对你刮目相看。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>蔡康永的说话之道</tag>
      </tags>
  </entry>
  <entry>
    <title>蔡康永的说话之道	10.29</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E8%94%A1%E5%BA%B7%E6%B0%B8%E7%9A%84%E8%AF%B4%E8%AF%9D%E9%81%93_10_29/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/E1u5q7eDSg9vo6j.jpg" alt=""></p>
<ul>
<li>可是，要怎么才知道说话的顺序，应该哪句话先，哪句话后呢？以这次的电话邀请为例，其实需要把握的态度只有很简单的一个，就是：别人并不是为了伺候你而存在的。</li>
<li>如果怕沉默带来的冷场，请不要给自己压力、不要逼迫自己随时找话题，请优先把事情交给音乐来处理。</li>
<li>或者，也可以学着享受沉默。看夜景的时候、两人散步的时候、三五好友一起下厨煮菜的时候，“正在做的事情”本身就很有趣，沉默反而比喋喋不休更丰富，更值得回味。</li>
<li>当你遇到了很强势、非逼你认输不可的人，如果认输不会损害你的原则，我就建议你一笑置之，把那个无谓的胜利让给对方。这会显得你度量很大，对方也会很乐意和你进一步合作。</li>
<li>一个人，如果能做到把对方”看在眼里。放在心里“的状态，哪怕只维持一顿饭的时间，也能让对方觉得”被重视“，如沐春风。</li>
<li>面对外文菜单，你可以嘲笑自己在外文上闹过什么笑话，让对方觉得你好亲切；也可以趁机讲一个自己去旅行时见到的小风俗，让对方觉得你见多识广。在这么做的时候，你当然要时不时看着对方，带着一点点观察，让对方充分感受到她在你眼中的存在。</li>
<li>遇上对方提出一个你完全不想接的话题，不必急着抵抗，而是轻巧地把对方热衷的话题连接到一个很生活的方向就行了。</li>
<li>问的问题越具体，回答的人越省力。回答的人越省力，他越有力气和你聊下去。</li>
<li>这是世界的真相，每个人都生活在自己的世界里。</li>
<li>和人聊天尽量别说出”我“字。</li>
<li>问出尖锐的问题应该回退几步。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>蔡康永的说话之道</tag>
      </tags>
  </entry>
  <entry>
    <title>蔡康永的说话之道</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E8%94%A1%E5%BA%B7%E6%B0%B8%E7%9A%84%E8%AF%B4%E8%AF%9D%E9%81%93_10_28/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/x7ui9ZLys4OKeQ5.jpg" alt=""></p>
<ul>
<li>再会辩论，也不必轻易评价别人。</li>
<li>如果我们养成动不动就评价别人的坏习惯就很容易错过重要的事情——评价自己。你的心力本来可以用在自己身上，我们却把它挥霍在一个跟我们毫不相干的人身上，多么可惜。</li>
<li>别人的评价是我无法改变的事情，不要妄想改变它。</li>
<li>以前听人讲，他不在乎别人的评价，会觉得这个人硬冲浩瀚，硬吞苦水，但是现在，我觉得“恰如其分地感受情绪”绝对是最值得的训练。</li>
<li>这个负面情绪一定要有，不能说别人骂我们，我们毫无反应，这样长久下去会出事情。</li>
<li>对于糟糕的评价，我不排斥。如果他骂的有道理，我会咬牙接受，反思自己为什么自己做的这么不好。如果很多人都骂我，我要知道改进，这是让我知道我有不足的最有效方式。</li>
<li>如果别人的谩骂没有道理，我理所当然会觉得不愉快。可是因为能想到别人所处的环境，我会知道，这是别人受到它自身所处的环境的影响的结果，他当时正处于想骂人的心情，所以他骂人了，而被骂的人呢，恰好是我罢了。我有进到我的功用——被人家骂一下，让他的情绪有个去处，那个情绪抵达到我这里，并且被我收到。至于它有没有影响我，影响到什么程度，那由我内心的强大程度决定。</li>
<li>比起我需要她，她其实更需要我。</li>
<li>我判断，那些被认为是“治疗别人的人”，当然也从别人身上得到很多东西，他没讲而已。</li>
<li>我喜欢看书，并不是因为看书是一件很高级的事情，而是因为能写出好书的人是都非常聪明的人，几乎是历史上各方面最聪明且最愿意分享的人，才会去写书。你在看书的时候，完全不用和那个人打交道，却能把他最聪明的部分都拿到手，变成一个能够推演出很多角度去看待事情的人。</li>
<li>人跟人聊天，不应该抱有很崇高的使命感，跟你聊天是打算治愈你，那是门诊，不叫聊天。你跟朋友一起鬼扯一个小时，他不会跟你鞠躬说谢谢你今天给我的启发，只会觉得心里好过多了。回去之后，他会察觉，自己跟别人在一起只是喝酒打麻将，跟你在一起，感觉心里舒服很多，他就会觉得跟你做朋友有意思。如果你也从他身上得到有趣的东西，你们就会变成朋友。</li>
<li>没有关系是建立在单方面的治疗上的，只要你能提供对方不具备的角度，你就能启发别人。</li>
<li>转手三四手的赞美，我也一定乐于转达的。因为这样做一定会让听到的人很高兴，气氛会很好，而且转述第三方的赞美，比你自己说一些空洞的赞美，要可信多了。</li>
<li>让本来已经很讨人喜欢的你，在未来更讨人喜欢而已。</li>
<li>很多人觉得，你说什么样的话，会透露出你是什么样的人。但我觉得不止于此，你说什么样的话，你就是什么样的人。</li>
<li>你嘴上爱抱怨，你就会成为怨女；你嘴上爱耍贱，你会回成为贱嘴。虽然，我们可能知道你骨子里不是这样的人。</li>
<li>你真的想变成给别人温暖的小太阳吗？那你就从说话开始，订出一些简单的、你真的做的到的事情，例如：规定自己每周三中午给朋友发一通短信，问候一位朋友。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>蔡康永的说话之道</tag>
      </tags>
  </entry>
  <entry>
    <title>你不得不知的人性	10.26</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84%E4%BA%BA%E6%80%A7_10_26/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/Ck4ILip1SJGcxj9.jpg" alt=""></p>
<h2 id="是的，我相当谅解他们"><a href="#是的，我相当谅解他们" class="headerlink" title="是的，我相当谅解他们"></a>是的，我相当谅解他们</h2><ul>
<li>你没了他会活不下去，真的没了他，你还是得活得下去且活的下去。</li>
<li>人们的心太大，也可以说人们的贪心往往是被引诱出来的。</li>
<li>施比受更有福，爱是施的，它绝大部分表现在付出上。你会因为付出爱，而越去爱，却不见得因为“越得到爱而越去爱”。</li>
<li>许多人对于冲突，都采取了拖的战略，他知道时间拉长了，对手疲了，气消了，冲突就容易解决。每个人都有视而不见，听而不闻的本领。</li>
<li>如果你人生已然过半，更该回头想想，那些你过去痛恨的人，是否真的值得恨？会不会因为你被人设计了而误会了他？如果你被设计、被排斥，后来却成功了，就不必去记恨任何人了。贵人未必是好人，贵人也可能是欺负你，逼你成功的人。既然他是你的贵人，又何必记恨呢？</li>
<li>这个家不能没有我，这个家也可以没有我。这个世界不能没有我，这个世界也可以没有我。当有一天，我不得不在，我希望我的家仍然快乐，希望这个世界仍然美丽。这是每个成熟的人都该有的认识。</li>
<li>中国人尤其有这种毛病，喜欢用自爆己短的方式来表现自己的谦虚。然而，当有人拿你那短处来质问你、攻击你，你能不承认，又能不受伤吗？</li>
<li>开车时躲避每一个小洞的人，绝对不是好的驾驶员，反而有很高的出事率。一个对每件不顺心事都立即反应，而不往长远着想的人，不太可能有大成功。</li>
<li>关系该怎么用，面子该怎么卖，这是人际关系的大学问。处理得好，左右逢源；一招失策，进退两难。</li>
<li>处世的艺术双向的：从正面想，你要避免别人见到你不光彩的时候；从另一个角度，应该避免在这个时候出门去敲别人的门。</li>
<li>这世上一切不合理的事情，都有个合理的解释：它越是不合理，你越该小心，因为其中必然有你不知道的反方向的作用。</li>
<li>喜欢怨天尤人的人，在遭遇挫折时，经常非但不知道自我反省，反而四处责难，造成对周遭人以及他自己的更大伤害。</li>
<li>夫妻，朋友之间都要经营。要用建设的技巧，而非破坏的手段；宁做正面的猜想，仵作负面的推敲。</li>
<li>即便你百分百确定，也不能在言谈或任何行动上表现出来，即使是“掩不住的喜色”也不可有。否则你可能空欢喜一场。</li>
<li>处事不难，你只要从对方的角度想想，就可以知道应该走的方向。</li>
<li>当他发现你做了大弊，可以立即将你绳之以法的时候，他都忍着，不吭声。为什么？放长线，钓大鱼。到那天，你过去的名誉、地位，你所拥有的财富、人脉，都成了他的利器。</li>
<li>人性是很奇妙的，基本上，对于负面的事情，我们都会假设：“即使我做的不够好，对方也可能看不见；就算看见了，也可能放一马。”</li>
<li>不要因为你有清誉就沾沾自喜，认为自己无欲则刚，认为谁也没法找你麻烦。要知道，你的刚恰好犯了某些人的忌。</li>
<li>你要以“老师盼望学生得状元”的心态去对待每个从你身旁出去的人。你也要想想，如果有一天你翅膀硬了，会不会也要飞？</li>
<li>当你爱一个人，对他付出，你只要去做，最好别一直提醒对方你付出是为了他，要他领这个情。因为那个情太重，他会受不了。</li>
<li>当自己遇上的对手，可能长久与你纠缠，拖垮你的元气，拖累你的时间，而且所争的又是“公说公有理婆说婆有理”的事情，你一定要认赔杀出。</li>
<li>这个世界不会以一时的成功论英雄，也不会以偶然的失误判定输赢。人若是没有长期持续的表现，往往很难被肯定；而被肯定的人，也难以在一时被推翻。</li>
<li>失败到绝望的时候，就自暴自弃，这是人的天性。不论做生意、带部属、交朋友，希望能有君子之交，就要时刻注意如何维护对方的自尊。</li>
<li>它们为理性的人而做成。理性时再坚硬无比的事物，到了不理性的时刻，都脆弱无比。</li>
<li>许多年轻时的抱负，人生的理想，都可能因为“明日复明日，明日何其多”而失去了冲力。许多子女的爱，都是因为想着以后再报答也不晚，于是拖了再拖，拖到有一天父母永远的离开了，才呼天抢地、捶胸顿足地悔恨。</li>
<li>这个世界上是没有一部分秘密的。人们似乎有个天性，只要知道一部分秘密，就会想挖出全部。所以当你泄露了自己或别人的一部分秘密时，也就泄露了全部。</li>
<li>聪明的人不会在两只手指上同时戴戒指，为的是避免彼此摩擦受损，而减少了钻石的光泽。睿智的领导者不会在一个单位安排两个具有同样能力又独断的部署。</li>
<li>聪明的演说家，不伸手看表，免得听众跟着看表；不流目场外，免得观众也随着左顾右盼；尽量避免咳嗽，免得听众也跟着清喉咙。因为这些动作足以分散观众的注意力，减弱演讲的力量。</li>
<li>当我们心神不宁的时候，找一件引发兴趣的事情去做，总比枯坐在屋里，更能产生安定的作用。</li>
<li>每个专业的人，都有他专业的良知。即是外行人无法察觉，也应自我审视。</li>
<li>“不痴不聋，不成姑公。”一个对于部署的每次告状都立即反应的人，绝不是好的领导者。</li>
<li>是的，我相当谅解他们。对每个害我的人，我总是在痛心疾首之后试着想：他们那样做，可能有不得已的苦衷。谅解使我能够从正面思考，使我能够从对方的角度想事情，也使我能够见到许多别人见不到的东西。但我不是烂好人，在谅解的同时，我也有责难。我不能只是姑息，没有行动；更不能只有道德，没有勇气。</li>
<li>一个精明的领导者，不只看你已经学会了多少，更看你未来能学到多少。</li>
<li>我们需要懂得”不可不知的人性”，要有“不能没有的谅解”，更要有“决不妥协”的坚持。这不是无情，而是有情。</li>
<li>明刑是为了弼教，打击是为了安定，所有的强势作为都可以化为温柔体贴。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>你不可不知的人性</tag>
      </tags>
  </entry>
  <entry>
    <title>我与地坛	10.23</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/76ztoiNpLOGsdU2.jpg" alt=""></p>
<ul>
<li>他等待我出生，然后又等待我活到最狂妄的年龄上忽地残废了双腿。</li>
<li>十五年前的一个下午，我摇着轮椅进入园中，他为一个失魂落魄的人把一切都准备好了。</li>
<li>记不清是在他的哪些角落里了，我一连几个小时专心致志地思考关于死的事，也以同样的耐心和方式想过我为什么要出生。</li>
<li>那时她的儿子还太年轻，还来不及为母亲着想，他被命运击昏了头脑，一心以为自己是世界上最不幸的一个，殊不知儿子的不幸在母亲那儿是要加倍的。</li>
<li>她心里太苦了。上帝看她受不住了，就召她回去了。</li>
<li>我不知道她已经找了多久还要找多久，我不知道为什么我决意不喊她——但这绝不是小时候的捉迷藏，这也许是出于长大了的男孩子的倔强或羞涩。但这倔强只给我痛悔，丝毫没有给我骄傲。我真想告诫所有长大了的男孩子，千万不要跟母亲来这套倔强，羞涩就更不必了，我已经懂了可我已经来不及了。</li>
<li>我甚至现在就能清楚地看见，一旦有一天我不得不长久地离开它，我会怎样想念它，我会怎样想念它并且梦见它，我会怎样因为不敢想念它也梦不见它。</li>
<li>地坛，你别以为我忘了，我什么也没忘。但是有的事只适合收藏，不能说也不能想，却又不能忘。他们不能变成语言，它们无法变成语言，一旦变成语言就不是他们了。它们是一片朦脓的温馨与寂寥，是一片成熟的希望与绝望，他们的领地只有两处：心与坟墓。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>我与地坛</tag>
      </tags>
  </entry>
  <entry>
    <title>你不可不知的人性	10.18</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84%E4%BA%BA%E6%80%A7_10_17_2/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/kfUvJWcs4KIn6dq.jpg" alt=""></p>
<h1 id="关关难过关关过，事事难熬事事熬"><a href="#关关难过关关过，事事难熬事事熬" class="headerlink" title="关关难过关关过，事事难熬事事熬"></a>关关难过关关过，事事难熬事事熬</h1><ul>
<li>一个人信什么、说什么，都不能成为神。但是，如果你什么都不信、什么都不说，却能做好事、做好人。就算你不能进天国，至少，你已经在这世间，以“向善”战胜了“向恶”。</li>
<li>中国人很妙，明明有实力，并且靠实力必定过关的事情，总觉得得再拖个人，打个招呼，事情会更有把握。岂知道，这招呼如果没有打好，明明可以赢，反而变成满盘皆输，而且输了都不知道怎么输的。</li>
<li>当你发现一个人对你说要淡泊名利的时候，你千万别以为他真的恬淡寡欲。越是矛盾的人，越要挣扎。越是不快乐的人，越说自己快乐。</li>
<li>许多伟大的人，都因为他们节制自己，集中力量在特定的事物上，而有杰出的成就。</li>
<li>与其因最好的棋盘造成最大的失望，不如用最坏的打算引来意外的惊喜。</li>
<li>以速度争取时间，再用这时间去享受宁静，而非拖泥带水，永远不得真正的空闲。</li>
<li>人最不能承受的重量，不是有形的重量，而是无形的“情”。</li>
<li>托错人足以坏事，有实力就不要靠关系。</li>
<li>施与人，但不要使对方有受施的感觉。帮助人，但给予对方最高的尊重。这是助人的艺术，也是仁爱的情操。</li>
<li>人不能长期处于平静之中，太平静、太没变化，会使得人不安，甚至发疯。懂得经营大企业的老板，绝对不会提前发布“今年年终奖发多少”的消息，反而是，你可以先放出消息，说今年不景气，怕发不出来，甚至可能裁员。</li>
<li>如果你做中间人，要忠实的传达，不可添油加醋。如果你做调解人，要不听丑话，只说笑言。只有这样，你才能被感激，而不是成为“最后的受害者”。</li>
<li>在维护自己尊严的前提下，一个普通人可以变的“不识好歹”，一个领导者可以变的“不受诺然”。</li>
<li>人人都有爱现的毛病，岂止你现的时候，也正是你暴露弱点的时刻。</li>
<li>你获胜时，既是最能施展抱负的时候，也是最能化敌为友的时候。人没有永远的敌人，最重要的是你有没有那份胸怀和智慧，在获胜之后先伸出友谊的手。</li>
<li>当你给孩子一个玩具时，他立刻高兴的收下。但是如果你交给他两个，只准他挑一个，就麻烦了。</li>
<li>你可以有先见之明，让人佩服，但是千万别在人家没听你劝告而出问题的时候得意的说：“看，谁让你不听我的话？”</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>你不可不知的人性</tag>
      </tags>
  </entry>
  <entry>
    <title>你不可不知的人性	10.17</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E4%B9%A6%E6%91%98/%E4%BD%A0%E4%B8%8D%E5%8F%AF%E4%B8%8D%E7%9F%A5%E7%9A%84%E4%BA%BA%E6%80%A7_10_17/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/rFa2LmQvynDeKR3.jpg" alt="Photo by Andy Holmes (SkI4K52ddb0).jpg" style="zoom:33%;" /></p>
<h1 id="交浅而言深，君子所忌，小人所薄"><a href="#交浅而言深，君子所忌，小人所薄" class="headerlink" title="交浅而言深，君子所忌，小人所薄"></a>交浅而言深，君子所忌，小人所薄</h1><ul>
<li>聪明人尤其需要避免爱出风头和快人快语的毛病。</li>
<li>共同意识——患难与共的意识。</li>
<li>自尊是最伤不起的，也是最抽象、最难捉摸的。</li>
<li>千万不要得罪闲人。</li>
<li>不是不能发表和主管相反的意见，只是发表前需要想想主管有没有接受指责的雅量。</li>
<li>选择正确的人千万别秀给那些选择错误的人。</li>
<li>武林高手常死于村妇下的一杯毒，江湖大哥常死于小弟伸出的一把刀。</li>
<li>能够用同样的心，想想别人的处境，忍耐自己的不便与不悦，非但不苛责，还主动减轻对方的心理负担，就是积德行善。</li>
<li>围师必阙，不要逼人至死路。</li>
<li>听的人沉默，不出声，有时候比辩论更给对方压力。</li>
<li>这个世界上最不露马脚的就是说实话。</li>
<li>一个失意人，能在一群得意人间谈笑风生、略无惭色，才是有骨气；一个得意人，能在一群失意的朋友间，让人想不到他的得意，才是会做人。</li>
<li>在公司里，当你的意见跟主管相左，你力争，仍然不被采纳后，你就要加倍努力，去配合主管的做法。你要比别人跑在前面，甚至死在前面。你千万别成了边缘人，躲在一边，冷眼看大伙拼命，让人猜测“你只盼着大家失败，证明自己是对的。”于是无论成败与否，你都是主管最痛恨的人。</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>2021秋季</tag>
        <tag>你不可不知的人性</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解音乐中的数理逻辑</title>
    <url>/2022/01/08/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/%E9%9F%B3%E4%B9%90%E4%B8%AD%E7%9A%84%E6%95%B0%E7%90%86%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/uDrcVCo7J6H8t2m.jpg" alt="Photo by Buzz Andersen (E4944K_4SvI).jpg" style="zoom:50%;" /></p>
<h1 id="Homework——如何理解音乐中的数理逻辑"><a href="#Homework——如何理解音乐中的数理逻辑" class="headerlink" title="Homework——如何理解音乐中的数理逻辑"></a>Homework——如何理解音乐中的数理逻辑</h1><p>听罗薇老师讲述十二平均律时，我的思绪挂念起另一门长期令我又爱又恨的课程——在清华园里赫赫有名的数据结构课程。</p>
<p>为什么会产生这样的联想，首先是因为我长期遭受着数据结构课程的摧残，每周在罗薇老师课堂上领略一番多元文化中的音乐现象算作是给予心灵的些许慰藉。然而更加深刻的原因在于，数据结构课程让我意识到了万物背后皆有其数理逻辑可言，美妙的乐理知识亦是如此。</p>
<p>于是在当天的多元文化与音乐课程上，十二平均律很快让我联想到了我的数据结构课堂。在数据结构课上，我学习了为数众多的的各式数据结构与算法，以及其背后的数理原理。概括而言，在算法层面，无外乎是各个算法的<code>best case</code>与<code>worst case</code>，以及每个算法的各种改进版本——计算机科学家们如何通过优化数理逻辑来避免某些<code>worst case</code>，或者在<code>best case</code>与<code>worst case</code>之中做出取舍。</p>
<p>带着这样数理逻辑的思想欣赏十二平均律，我恍然大悟。在某种意义上，十二平均律即是人们为了优化狼音程<code>(wolf interval)</code>而选择了牺牲绝大多数的<code>best case</code>(以往人们认为，频率比例直接线性的音律法则的大多数音都是悦耳的)，而选择了将<code>worst case</code>与<code>best case</code>平均化。音频率比例之间达到了协调，虽然没有最悦耳的音，也即不再存在best case，但是大家都不至于太差，同时也消除了<code>worst case</code>。</p>
<p>不偏不倚、而无过不及。想到这些，哪怕对乐理知识索然无知，我也不由得为这绝妙的十二平均律与其背后基于数理逻辑与算法的优化思想而深受震撼。</p>
<p>周五，我欣然将此想法在数据结构课前与邓俊辉老师交流，邓老师给我讲述了一些类似的例子。在许多场合下，一些算法并非竭力追求<code>best case</code>，而是恰恰需要稳定，譬如远程医疗，军事应用等等。简短地交流完后，他微微一笑，玩笑道：“下次讲稳定算法，我一定把十二平均律作为例子。”</p>
<p>周六，我把实验室工作时，将这想法分享给我的<code>mentor</code>，一旁的一位老师听罢，兴奋地说：“啊，其实十二平均律还有一个很有意思的解释。不单单是你说的在数理逻辑层面的稳定，其实还有生物学的解释。20世纪的时候，生物学界才发现由于人耳的涡旋结构，人耳对于声音频率的感知，实际上对指数线性敏感，而非直接的线性敏感。以往的主流观点认为十二平均律会让大多其他音律法里的<code>best case</code>变得<code>worse</code>，然而现代生物学却力证，十二平均律下的<code>best case</code>只会比其他的律法<code>better</code>。”</p>
<p>这样的想法是多么美妙呢！在十二平均律之前，人们认为频率直接线性的音律法构造了一个又一个局部的最优解，然而却会导致无法消除的局部最差解<code>(wolf interval)</code>。这似乎又关系到了在数理逻辑上经常讨论的问题，<strong>局部最优的累计不是全局最优。</strong></p>
<p><img src="https://s2.loli.net/2022/01/08/b8eCajrLIzRTqpm.png" alt="局部最优.png" style="zoom:50%;" /></p>
<p>然而，十二平均律做出了取舍，向着中庸的方向改进了音率比，通过将各个解的均衡化，达到了中庸的效果。传统观点认为牺牲了局部最优解而达到了全局最优解。然而现代生物学却可以支持，这不仅没有牺牲局部最优解，反而巧妙地将局部的最优解也进行了优化。</p>
<p>这何止是音律之美呢，从中能够一窥数理逻辑之美，算法设计之美，甚至是中庸思想之美。</p>
<p>姑且作一总结，十二平均律的思想，首先关乎于人耳的生物学构造与其中的数理逻辑——人类感知声音的能力是指数线性的，再往上串接着数据结构的思想——在算法的最优情况与最坏情况之间根据需求而做出取舍，再往顶端，还牵系着中国古典哲学的至简真理——中庸思想。</p>
<p><img src="https://s2.loli.net/2022/01/08/heQ6ImyU59W47lR.png" alt="十二平均律.png" style="zoom:50%;" /></p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript part 1</title>
    <url>/2022/01/08/CS/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91/javascript/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/08/dLY65WeRp4l2A9J.jpg" alt="Photo by Darrell Cassell (hoCXpPUMCoE).jpg" style="zoom:20%;" /></p>
<p>来自廖雪峰的博客：<a href="https://www.liaoxuefeng.com/wiki/1022910821149312">https://www.liaoxuefeng.com/wiki/1022910821149312</a></p>
<h1 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h1><p>包括数值，逻辑，字符串，null，undefined，对象和函数</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>JavaScript的字符串就是用<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的字符表示。</p>
<p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p>
<p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\\</code>来标识，比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;I\\&#x27;</span>m \\<span class="string">&quot;OK\\&quot;</span>!<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure>
<p>表示的字符串内容是：<code>I&#39;m &quot;OK&quot;!</code></p>
<p>转义字符<code>\\</code>可以转义很多字符，比如<code>\\n</code>表示换行，<code>\\t</code>表示制表符，字符<code>\\</code>本身也要转义，所以<code>\\\\</code>表示的字符就是<code>\\</code>。</p>
<p>ASCII字符可以以<code>\\x##</code>形式的十六进制表示，例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\\x41&#x27;</span>; <span class="comment">// 完全等同于 &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<p>还可以用<code>\\u####</code>表示一个Unicode字符：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;\\u4e2d\\u6587&#x27;</span>; <span class="comment">// 完全等同于 &#x27;中文&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>JS是大小写敏感的</p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">5</span>; <span class="comment">//false</span></span><br><span class="line"><span class="number">5</span> &gt;= <span class="number">2</span>; <span class="comment">//true</span></span><br><span class="line"><span class="number">7</span> == <span class="number">7</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>实际上，JavaScript允许对任意数据类型做比较：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>要特别注意相等运算符<code>==</code>。JavaScript在设计时，有两种比较运算符：</p>
<p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p>
<p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p>
<p>由于JavaScript这个设计缺陷，<em>不要</em>使用<code>==</code>比较，始终坚持使用<code>===</code>比较。</p>
<p>另一个例外是<code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NaN === NaN;// false</span><br></pre></td></tr></table></figure>
<p>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>最后要注意浮点数的相等比较：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> / <span class="number">3</span> === (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.abs(<span class="number">1</span> / <span class="number">3</span> - (<span class="number">1</span> - <span class="number">2</span> / <span class="number">3</span>)) &lt; <span class="number">0.0000001</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>],</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">    <span class="attr">hasCar</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">zipcode</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述<code>person</code>对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，<code>person</code>的<code>name</code>属性为<code>&#39;Bob&#39;</code>，<code>zipcode</code>属性为<code>null</code>。</p>
<p>要获取一个对象的属性，我们用<code>对象变量.属性名</code>的方式：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">person.name; <span class="comment">// &#x27;Bob&#x27;</span></span><br><span class="line">person.zipcode; <span class="comment">// null</span></span><br></pre></td></tr></table></figure>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、<code>$</code>和<code>_</code>的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如<code>if</code>、<code>while</code>等。申明一个变量用<code>var</code>语句，比如：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;<span class="comment">// 申明了变量a，此时a的值为undefinedvar </span></span><br><span class="line">$b = <span class="number">1</span>;<span class="comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span></span><br><span class="line"><span class="keyword">var</span> s_007 = <span class="string">&#x27;007&#x27;</span>;<span class="comment">// s_007是一个字符串</span></span><br></pre></td></tr></table></figure>
<h3 id="strict模式"><a href="#strict模式" class="headerlink" title="strict模式"></a>strict模式</h3><p>JavaScript在设计之初，为了方便初学者学习，并不强制要求用<code>var</code>申明变量。这个设计错误带来了严重的后果：如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">i = <span class="number">10</span>; <span class="comment">// i现在是全局变量</span></span><br></pre></td></tr></table></figure>
<p>在同一个页面的不同的JavaScript文件中，如果都不用<code>var</code>申明，恰好都使用了变量<code>i</code>，将造成变量<code>i</code>互相影响，产生难以调试的错误结果。</p>
<p>使用<code>var</code>申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。</p>
<p>为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。</p>
<p>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>这是一个字符串，不支持strict模式的浏览器会把它当做一个字符串语句执行，支持strict模式的浏览器将开启strict模式运行JavaScript。</p>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>要把多个字符串连接起来，可以用<code>+</code>号连接：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&#x27;你好, &#x27;</span> + name + <span class="string">&#x27;, 你今年&#x27;</span> + age + <span class="string">&#x27;岁了!&#x27;</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p>如果有很多变量需要连接，用<code>+</code>号就比较麻烦。ES6新增了一种模板字符串，表示方法和多行字符串一样(也即运用反引号``)，但是它会自动替换字符串中的变量：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> message = <span class="string">`你好, <span class="subst">$&#123;name&#125;</span>, 你今年<span class="subst">$&#123;age&#125;</span>岁了!`</span>;</span><br><span class="line">alert(message);</span><br></pre></td></tr></table></figure>
<p><em>需要特别注意的是</em>，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Test&#x27;</span>;</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">alert(s);<span class="comment">// s仍然为&#x27;Test&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase"></a>toUpperCase</h3><p><code>toUpperCase()</code>把一个字符串全部变为大写：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">s.toUpperCase();<span class="comment">// 返回&#x27;HELLO&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase"></a>toLowerCase</h3><p><code>toLowerCase()</code>把一个字符串全部变为小写：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lower = s.toLowerCase();<span class="comment">// 返回&#x27;hello&#x27;并赋值给变量lower</span></span><br><span class="line">lower;<span class="comment">// &#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p><code>indexOf()</code>会搜索指定字符串出现的位置：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello, world&#x27;</span>;</span><br><span class="line">s.indexOf(<span class="string">&#x27;world&#x27;</span>);<span class="comment">// 返回7</span></span><br><span class="line">s.indexOf(<span class="string">&#x27;World&#x27;</span>);<span class="comment">// 没有找到指定的子串，返回-1</span></span><br></pre></td></tr></table></figure>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><p><code>substring()</code>返回指定索引区间的子串：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hello, world&#x27;</span></span><br><span class="line">s.substring(<span class="number">0</span>, <span class="number">5</span>);<span class="comment">// 从索引0开始到5（不包括5），返回&#x27;hello&#x27;</span></span><br><span class="line">s.substring(<span class="number">7</span>);<span class="comment">// 从索引7开始到结束，返回&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>JavaScript的<code>Array</code>可以包含任意数据类型，并通过索引来访问每个元素。</p>
<p>要取得<code>Array</code>的长度，直接访问<code>length</code>属性：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3.14</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="literal">null</span>, <span class="literal">true</span>];</span><br><span class="line">arr.length;<span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，直接给<code>Array</code>的<code>length</code>赋一个新的值会导致<code>Array</code>大小的变化：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.length;<span class="comment">// 3</span></span><br><span class="line">arr.length = <span class="number">6</span>;</span><br><span class="line">arr;<span class="comment">// arr变为[1, 2, 3, undefined, undefined, undefined]</span></span><br><span class="line">arr.length = <span class="number">2</span>;</span><br><span class="line">arr;<span class="comment">// arr变为[1, 2]</span></span><br></pre></td></tr></table></figure>
<p><code>Array</code>可以通过索引把对应的元素修改为新的值，因此，对<code>Array</code>的索引进行赋值会直接修改这个<code>Array</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">arr;<span class="comment">// arr现在变为[&#x27;A&#x27;, 99, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，如果通过索引赋值时，索引超过了范围，同样会引起<code>Array</code>大小的变化：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">arr;<span class="comment">// arr变为[1, 2, 3, undefined, undefined, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>大多数其他编程语言不允许直接改变数组的大小，越界访问索引会报错。然而，JavaScript的<code>Array</code>却不会有任何错误。在编写代码时，不建议直接修改<code>Array</code>的大小，访问索引时要确保索引不会越界。</p>
<h3 id="push和pop"><a href="#push和pop" class="headerlink" title="push和pop"></a>push和pop</h3><p><code>push()</code>向<code>Array</code>的末尾添加若干元素，<code>pop()</code>则把<code>Array</code>的最后一个元素删除掉。</p>
<h3 id="unshift和shift"><a href="#unshift和shift" class="headerlink" title="unshift和shift"></a>unshift和shift</h3><p>如果要往<code>Array</code>的头部添加若干元素，使用<code>unshift()</code>方法，<code>shift()</code>方法则把<code>Array</code>的第一个元素删掉。</p>
<p>空数组继续pop不会报错，而是返回undefined</p>
<p>空数组继续shift不会报错，而是返回undefined</p>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p><code>sort()</code>可以对当前<code>Array</code>进行排序，它会直接修改当前<code>Array</code>的元素位置，直接调用时，按照默认顺序排序：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;A&#x27;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line">arr;<span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>当然，可以改变比较器。</p>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><p><code>reverse()</code>把整个<code>Array</code>的元素给调个个，也就是反转：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line">arr;<span class="comment">// [&#x27;three&#x27;, &#x27;two&#x27;, &#x27;one&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p><code>splice()</code>方法是修改<code>Array</code>的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;Microsoft&#x27;</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Yahoo&#x27;</span>, <span class="string">&#x27;AOL&#x27;</span>, <span class="string">&#x27;Excite&#x27;</span>, <span class="string">&#x27;Oracle&#x27;</span>];</span><br><span class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>);<span class="comment">// 返回删除的元素 [&#x27;Yahoo&#x27;, &#x27;AOL&#x27;, &#x27;Excite&#x27;]</span></span><br><span class="line">arr;<span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]// 只删除,不添加:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>);<span class="comment">// [&#x27;Google&#x27;, &#x27;Facebook&#x27;]</span></span><br><span class="line">arr;<span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Oracle&#x27;]// 只添加,不删除:</span></span><br><span class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>);<span class="comment">// 返回[],因为没有删除任何元素</span></span><br><span class="line">arr;<span class="comment">// [&#x27;Microsoft&#x27;, &#x27;Apple&#x27;, &#x27;Google&#x27;, &#x27;Facebook&#x27;, &#x27;Oracle&#x27;]</span></span><br></pre></td></tr></table></figure>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><code>concat()</code>方法把当前的<code>Array</code>和另一个<code>Array</code>连接起来，并返回一个新的<code>Array</code>：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">added;<span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3]</span></span><br><span class="line">arr;<span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure>
<p><em>请注意</em>，<code>concat()</code>方法并没有修改当前<code>Array</code>，而是返回了一个新的<code>Array</code>。</p>
<p>实际上，<code>concat()</code>方法可以接收任意个元素和<code>Array</code>，并且自动把<code>Array</code>拆开，然后全部添加到新的<code>Array</code>里：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">arr.concat(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]);<span class="comment">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><code>join()</code>方法是一个非常实用的方法，它把当前<code>Array</code>的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, 1, 2, 3];</span><br><span class="line">arr.join(&#x27;-&#x27;);// &#x27;A-B-C-1-2-3&#x27;</span><br></pre></td></tr></table></figure>
<p>如果<code>Array</code>的元素不是字符串，将自动转换为字符串后再连接。</p>
<h1 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h1><p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。</p>
<p>JavaScript的对象用于描述现实世界中的某个对象。例如，为了描述“小明”这个淘气的小朋友，我们可以用若干键值对来描述他：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;No.1 Middle School&#x27;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">1.70</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">65</span>,</span><br><span class="line">    <span class="attr">score</span>: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JavaScript用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了，有的浏览器（如低版本的IE）将报错。</p>
<p>上述对象申明了一个<code>name</code>属性，值是<code>&#39;小明&#39;</code>，<code>birth</code>属性，值是<code>1990</code>，以及其他一些属性。最后，把这个对象赋值给变量<code>xiaoming</code>后，就可以通过变量<code>xiaoming</code>来获取小明的属性了：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">xiaoming.name; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">xiaoming.birth; <span class="comment">// 1990</span></span><br></pre></td></tr></table></figure>
<p>访问属性是通过<code>.</code>操作符完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用<code>&#39;&#39;</code>括起来：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaohong = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;middle-school&#x27;</span>: <span class="string">&#x27;No.1 Middle School&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>&#39;&#39;</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>[&#39;xxx&#39;]</code>来访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xiaohong[&#x27;middle-school&#x27;]; // &#x27;No.1 Middle School&#x27;</span><br><span class="line">xiaohong[&#x27;name&#x27;]; // &#x27;小红&#x27;</span><br><span class="line">xiaohong.name; // &#x27;小红&#x27;</span><br></pre></td></tr></table></figure>
<p>也可以用<code>xiaohong[&#39;name&#39;]</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁。我们在编写<code>JavaScript</code>代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过<code>object.prop</code>的形式访问一个属性了。</p>
<p>实际上<code>JavaScript</code>对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p>
]]></content>
      <categories>
        <category>全栈开发</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>软工</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Memories of 2021</title>
    <url>/2022/01/06/%E9%9A%8F%E7%AC%94/%E5%BF%83%E5%BF%83%E5%BF%B5%E5%BF%B5/photo_2021/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/01/14/tE6sLjQeA1KpyRU.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2022/01/08/2nVgeuohC3Jzv1m.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2022/01/14/Hn4bShPyTzKpI38.jpg" alt=""></p>
<p><img src="https://s2.loli.net/2022/01/14/jXb6ku2YmaSQHV5.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14422ab3f51d911d44db.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14402ab3f51d911d4304.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed143f2ab3f51d911d4294.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed143b2ab3f51d911d3e40.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14342ab3f51d911d3688.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14322ab3f51d911d3466.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142e2ab3f51d911d2e34.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142d2ab3f51d911d2cdf.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142c2ab3f51d911d2c34.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142a2ab3f51d911d2a57.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142a2ab3f51d911d2a06.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142a2ab3f51d911d295d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed142a2ab3f51d911d295a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14292ab3f51d911d280f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14292ab3f51d911d27b8.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14282ab3f51d911d2736.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14282ab3f51d911d26fb.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61ed14282ab3f51d911d26d9.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc6f2ab3f51d91d71a65.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc682ab3f51d91d712d5.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc672ab3f51d91d71200.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc602ab3f51d91d70cc6.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc4f2ab3f51d91d6fcba.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc472ab3f51d91d6f5d1.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc372ab3f51d91d6e87d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc302ab3f51d91d6e2b1.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccc242ab3f51d91d6d7ab.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb6b2ab3f51d91d62fc2.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb672ab3f51d91d62c95.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb622ab3f51d91d62895.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb5c2ab3f51d91d6238c.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb4d2ab3f51d91d616f7.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb3f2ab3f51d91d60b7d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb382ab3f51d91d605ca.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb272ab3f51d91d5f874.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb202ab3f51d91d5f178.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61eccb1f2ab3f51d91d5f05b.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc612ab3f51d9172f960.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc612ab3f51d9172f963.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc612ab3f51d9172f968.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc612ab3f51d9172f96f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc662ab3f51d9172feda.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc662ab3f51d9172fee0.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc662ab3f51d9172fee7.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc662ab3f51d9172fef0.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc6b2ab3f51d917303f5.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc6b2ab3f51d917303f9.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc6b2ab3f51d91730400.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc6b2ab3f51d91730407.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc722ab3f51d91730c62.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc722ab3f51d91730c67.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc722ab3f51d91730c6c.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc722ab3f51d91730c74.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc772ab3f51d9173149a.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc772ab3f51d9173149e.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc772ab3f51d917314a4.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc772ab3f51d917314ae.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc802ab3f51d91731ef1.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc802ab3f51d91731ef4.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc802ab3f51d91731ef9.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc802ab3f51d91731f03.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc832ab3f51d9173223f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc832ab3f51d91732251.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc832ab3f51d91732257.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f0fc832ab3f51d91732247.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b92ab3f51d917b566f.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b92ab3f51d917b5668.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b92ab3f51d917b5662.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b92ab3f51d917b565d.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b42ab3f51d917b5221.jpg" alt=""></p>
<p><img src="https://pic.imgdb.cn/item/61f106b42ab3f51d917b5219.jpg" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
<p><img src="" alt=""></p>
]]></content>
      <categories>
        <category>心心念念</category>
      </categories>
      <tags>
        <tag>2022寒假</tag>
        <tag>照片墙</tag>
      </tags>
  </entry>
  <entry>
    <title>Sort</title>
    <url>/2022/01/04/CS/DSA/sort/</url>
    <content><![CDATA[<h1 id="PA3-7-Sort"><a href="#PA3-7-Sort" class="headerlink" title="PA3-7 Sort"></a>PA3-7 Sort</h1><h1 id="算法构思"><a href="#算法构思" class="headerlink" title="算法构思"></a>算法构思</h1><p>本题考虑使用归并排序。</p>
<p>从递归角度，假设我们能进行<code>k</code>路归并，那么以最后一个点为例，<code>k</code>路归并的递归式为：</p>
<p><code>T(n)=kT(n/k)+O(n)，T(K)=1</code>故而时间复杂度为：</p>
<script type="math/tex; mode=display">
T(n)=n*log_k(n)</script><p>对于三路归并，<code>T(n)=1.26*10^7</code>，已然超出了范围。</p>
<p>考虑四路归并，<code>T(n)=0.99*10^7</code>，恰好符合。</p>
<p>具体如何实现四路归并并且在均摊一次比较内完成：</p>
<p>假设我们现在已经有了四个分别有序的序列，记为<code>A,B,C,D</code>，则首先第一次比较<code>A[0]、B[0]、C[0]</code>，这三者能得到最大者和最小者，考虑到最大者一定大于次大者，不妨记除了最大者外的两者为<code>mid,min</code>，则下一次比较<code>mid,min,D[0]</code>，这样以来这次比较的最小者就已经是前四者中的最小者了。此时将最小者写入归并后队列，并且将指针向后移动。</p>
<p>如此以来，在中间每一步的归并当中，比较三者，将最小者写入归并后队列，然后将新的未知者和<code>mid</code>、上一轮未比较者进行新一轮比较。</p>
<p>如此以来实现了均摊一次的四路比较。</p>
<p>在这之后，四路归并会出现某一路归并完全的情况，情况退化为三路归并。三路归并完全后退化为二路归并。</p>
<h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p>参考上文分析，本次时间复杂度为<code>o(nlogn)</code></p>
<p>而为了归并排序，我们额外开辟了常数倍数的空间。另一方面，递归深度为<code>o(logn)</code>，其余空间消耗也为常数，故而总体的空间复杂度为<code>o(n)</code>。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Circuit</title>
    <url>/2022/01/04/CS/DSA/circuit/</url>
    <content><![CDATA[<h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>参考<a href="https://oi-wiki.org/string/trie/，考虑维护一棵字典树来实现查询。">https://oi-wiki.org/string/trie/，考虑维护一棵字典树来实现查询。</a></p>
<p>首先通过<code>500000</code>个<code>unsigned long long</code>来储存这些二进制字符串。然后不断地移动当前的查询位置，用<code>left</code>和<code>right</code>指针来指明当前在<code>trie</code>内的节点，超出区间的节点应该删去，新进入区间的节点添加进<code>trie</code>中。每次只在<code>trie</code>中维护当前节点区间内的串，这样所有的串不过<code>500000</code>个，也即由于叶节点最多为<code>500000</code>个点，字典树沿着藤蔓最多一个字符串占据<code>64</code>个节点，故而字典树的最大节点数为<code>32000000</code>，开辟对应大小的数组即可。</p>
<p>对于每个节点，由于其为<code>2</code>叉树，故而维护左右子节点，储存为两个<code>int</code>值。同时记录经过该节点的藤蔓个数，储存为<code>int cnt</code>。</p>
<p>为了解决输出最靠前序列的问题，此处采用后向扫描法。也即从后往前开始扫描序列，这样的好处在于二进制值相同的靠前的序列会覆盖靠后的序列，类似于画家算法。</p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p><code>insert(int index)</code></p>
<p>由于数组开的足够大，其实并不需要考虑删除之后的节点回收利用问题，只需要全局开辟一个计数器<code>child_pointer</code>用来储存下一个即将被利用的节点即可。</p>
<p>对于一个<code>ull</code>，通过按位与得出其从高到低位的二进制值，假定<code>0</code>对应左孩子，<code>1</code>对应右孩子。如果当前节点的左孩子不为空，则左孩子的<code>cnt++</code>，同时转至左孩子，继续读取（读取指针右移），右孩子不为空同理。</p>
<p>如果当前节点的对应孩子为空，则将其孩子记录为<code>child_pointer++</code>，随后初始化对应的孩子，即<code>cnt++</code>。</p>
<p>当到达叶节点时，叶节点的<code>cnt</code>实际上已经不用考虑，我们利用<code>cnt</code>储存对应序列的编号。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>delete(int index)</code></p>
<p>沿着藤蔓依次对着<code>cnt--</code>，倘若<code>cnt</code>减少到<code>0</code>后直接将父节点的孩子指针删除。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>尽量向着相反的方向走即可完成查询。</p>
<h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><p>每次插入、删除、查询的时间复杂度均为<code>o(1)</code>。</p>
<p>而每个串至多插入、删除、查询各一次，因此时间复杂度上限为<code>O(64n)</code>。</p>
<p>此处采用倒序插入方法，则时间复杂度即为 <code>O(64n)</code>。</p>
<p>插入的串至多产生<code>64n</code>个节点，而每个节点只维护了左节点、右节点、经过次数（叶节点单位值）这三个信息，因此空间复杂度为<code>O(64n)</code>，常数上限为<code>3</code>倍。</p>
<p>其他数组均为<code>500050</code>大小，相对花销较小。</p>
<p>计算可得大致占用空间为 $128 \, \mathrm{MB} \times 3 = 384 \, \mathrm{MB} &lt;&lt; 512 \, \mathrm{MB}$，满足要求。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Kth</title>
    <url>/2022/01/03/CS/DSA/kth/</url>
    <content><![CDATA[<h2 id="PA3-3-kth"><a href="#PA3-3-kth" class="headerlink" title="PA3-3 kth"></a>PA3-3 kth</h2><h3 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h3><p>首先我们通过固定另外两维度为<code>1</code>，先对三个数组分别进行快速排序。</p>
<p>快排完成后，我们试图维护一个最小堆，当这个最小堆恰好掉用了<code>k</code>次<code>delmin()</code>所得到的就是第<code>k</code>小的数。</p>
<p>也即先将最小的数<code>[1,1,1]</code>压入，然后每次删除堆顶后压入当前坐标恰好不小于堆顶的数。</p>
<p>对于这个三维的网格，坐标恰不小于<code>[x,y,z]</code>点的坐标只能是<code>[x+1,y,z]、[x,y+1,z]、[x,t,z+1]</code>。这三者加上已经在队里的数，必然含有恰不小于<code>[x,y,z]</code>的点。</p>
<p>另一方面，如果我们只是简单的将三个相邻的点都压入堆中，同一个点可能会被压入多次，这样不仅对维护堆序性产生阻碍，而且调用<code>k</code>次<code>delmin()</code>后得到的将不是第<code>k</code>小的数。因此我们需要对压入堆的元素做约定，使其恰好不重复不遗漏地压入堆内。</p>
<p>对此，我们如下约定：</p>
<ul>
<li><code>y=1,z=1</code>的节点压入<code>[x+1,y,z]、[x,y+1,z]、[x,y,z+1]</code></li>
<li>否则<code>z=1</code>的节点压入<code>[x,y+1,z]、[x,y,z+1]</code></li>
<li>其余时刻仅压入<code>[x,y,z+1]</code></li>
</ul>
<h3 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h3><p>快排用时<code>3*O(nlogn)</code>，维护堆的过程中，取出<code>k</code>个堆顶，插入至多<code>3k</code>个坐标，复杂度为<br><code>klog(k)</code>总体时间复杂度为<code>0(nlogn+klogk)</code>。</p>
<p>考虑空间复杂度，数组消耗的空间为<code>O(n)</code>，堆消耗的空间为<code>O(k)</code>。因此，程序的空间复杂度为<code>O(n + k)</code>。</p>
<h3 id="三、问题与解决"><a href="#三、问题与解决" class="headerlink" title="三、问题与解决"></a>三、问题与解决</h3><p> 一定要注意映射问题。</p>
<p>每次比较实际上比较的是全局数组<code>a,b,c</code>的表项值，而非三者的<code>index</code>值，故而应该在比较时应该映射到三个数组上再进行比较。</p>
<p>其次，每次插入应该检查边界，否则会导致非法插入而让<code>compare</code>函数报错。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Prefix</title>
    <url>/2022/01/03/CS/DSA/prefix/</url>
    <content><![CDATA[<h1 id="PA3-5-Prefix"><a href="#PA3-5-Prefix" class="headerlink" title="PA3-5 Prefix"></a>PA3-5 Prefix</h1><h2 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h2><p><code>KMP</code>算法中<code>next</code>数组的物理含义为：对于字符串<code>s[n],next[n] (i&gt;=1)</code>表示其前缀中有多少位能和后缀后缀完全匹配，也即是在本题中，<code>prefix[i]</code>的后缀能匹配的最长前缀为 <code>prefix[next[i]]</code>。</p>
<p>注意到如果将<code>next</code>表视为一个映射，则该映射非单射，难以从逆映射的角度推知每一个前缀在哪儿和哪些<code>prefix</code>匹配，进而难以实现递推求解。不过，从另一个角度思考，任何一个子串<code>prefix[i]</code>必然和<code>prefix[i], prefix[next[i]], prefix[next[next[i]]], prefix[next[next[next[i]]]]....</code>发生匹配。故而从前向后遍历，实现递归求解，每一个前缀被匹配到的次数恰好不重复且不遗漏的被统计完全。</p>
<p>更加精确地来讲，所有可能与<code>prefix[i]</code>后缀匹配的前缀即为<code>prefix[i], prefix[next[i]], prefix[next[next[i]]], prefix[next[next[next[i]]]]....</code>，直到其迭代为<code>-1</code>为止。</p>
<p>另外，根据定义，<code>prefix[i]</code>自身也和自身成功匹配，故而需要考虑<code>prefix[i]</code>本身，以及在递归式中将此作为递归基。</p>
<p>进而，设<code>sum[i]</code>表示与<code>prefix[i]</code>的某个后缀匹配的前缀数目。依照上述关系展开递归，递推式如下：</p>
<script type="math/tex; mode=display">
sum[i] = 
\begin{cases}
    sum[next[i]] + 1 & next[i] > 0 \\
    1 & next[i] \le 0
\end{cases}</script><p>随后求和$\sum\limits_{i = 1}^n sum[i]$ 即为所求的答案。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><p>参考讲义<code>13</code>讲,求取<code>next</code>数组的过程必然为线性。计算<code>sum</code>数组的过程虽然是递归求解，但是每步递归的深度都为<code>1</code>，故而求解<code>sum</code>也是线性的。综上，总体时间复杂度为<code>O(n)</code>。</p>
<p>空间复杂度上，仅仅需要两个数组即可，故而空间复杂度也是<code>O(n)</code>。</p>
<h2 id="三、问题与解决"><a href="#三、问题与解决" class="headerlink" title="三、问题与解决"></a>三、问题与解决</h2><h3 id="表格的存储方式"><a href="#表格的存储方式" class="headerlink" title="表格的存储方式"></a>表格的存储方式</h3><p>考虑到<code>1&lt;=n&lt;=20,000,000</code>，<code>next</code>表的最大值不过为<code>20_000_000</code>使用<code>int</code>存储即可。而<code>sum</code>表观察递归式可知，也不会超过<code>20_000_000</code>，理应同样使用<code>int</code>来存储。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="number">20_000_000</span>*(<span class="number">4</span>+<span class="number">4</span>)/<span class="number">1024</span>**<span class="number">2</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">152.587890625</span></span><br></pre></td></tr></table></figure>
<p>最糟糕的空间大小大致为<code>150MB</code>，能够通过<code>OJ</code>。</p>
<h3 id="字符串的存储方式"><a href="#字符串的存储方式" class="headerlink" title="字符串的存储方式"></a>字符串的存储方式</h3><p>考虑到<code>string</code>可能扩容带来额外未使用的空间，故而改用<code>char[]</code>来存储字符串。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>((c= <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; c != EOF)   str[length++]=c;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>HashFun实验报告</title>
    <url>/2021/12/18/CS/DSA/hashfunc/</url>
    <content><![CDATA[<h1 id="HashFun解题报告"><a href="#HashFun解题报告" class="headerlink" title="HashFun解题报告"></a><code>HashFun</code>解题报告</h1><h2 id="哈希策略"><a href="#哈希策略" class="headerlink" title="哈希策略"></a>哈希策略</h2><h3 id="hashing-strategy"><a href="#hashing-strategy" class="headerlink" title="hashing_strategy"></a><code>hashing_strategy</code></h3><h4 id="ascii-hashiing"><a href="#ascii-hashiing" class="headerlink" title="ascii_hashiing"></a><code>ascii_hashiing</code></h4><p>将<code>ascii</code>码转为<code>10</code>进制无符号整数，逐字符叠加后对哈希表大小取模。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> transformed=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="built_in">strlen</span>(str); i++)    </span><br><span class="line">	transformed = transformed*<span class="number">17</span>+str[i]*<span class="number">29</span>;</span><br><span class="line"><span class="keyword">return</span> transformed%N;</span><br></pre></td></tr></table></figure>
<h4 id="utf-hashing"><a href="#utf-hashing" class="headerlink" title="utf_hashing"></a><code>utf_hashing</code></h4><p><code>utf-8</code>码由首字节最高三位决定其总共有几个字节，因此将首字节转为<code>10</code>进制无符号整数、判定大小而后分类，从而将字符串按照单个<code>utf-8</code>字符处理，而非单个字节。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;;i&lt;<span class="built_in">strlen</span>(str);)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (str[i]&lt;=<span class="number">127</span>)<span class="comment">///单字节utf-8</span></span><br><span class="line">       &#123;</span><br><span class="line">           transformed = transformed*<span class="number">17</span> + str[i];</span><br><span class="line">           i+=<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (str[i]&lt;=<span class="number">223</span>) <span class="comment">///双字节utf-8</span></span><br><span class="line">       &#123;</span><br><span class="line">           transformed = transformed*<span class="number">17</span> + str[i]*<span class="number">131</span>+ str[i+<span class="number">1</span>]*<span class="number">13</span>;</span><br><span class="line">           i += <span class="number">2</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span><span class="comment">///三字节utf-8</span></span><br><span class="line">       &#123;</span><br><span class="line">           transformed = transformed*<span class="number">53</span> + str[i]*<span class="number">131</span>+ str[i+<span class="number">1</span>]*<span class="number">13</span>+ str[i+<span class="number">2</span>]*<span class="number">29</span>;</span><br><span class="line">           i += <span class="number">3</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="collision-strategy"><a href="#collision-strategy" class="headerlink" title="collision_strategy"></a><code>collision_strategy</code></h3><h4 id="Quadratic-probing"><a href="#Quadratic-probing" class="headerlink" title="Quadratic probing"></a><code>Quadratic probing</code></h4><p>数学定义：</p>
<p>$choice = [last_choice+(dis^2+1)/2*(-1)^{dis-1}]mod(table_size)$</p>
<p>代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(turn_left)</span><br><span class="line">    &#123;</span><br><span class="line">        turn_left = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = distance++;</span><br><span class="line">        <span class="keyword">int</span> offset = ((<span class="keyword">long</span> <span class="keyword">long</span>)(tmp * tmp) + <span class="number">1</span> &gt;&gt; <span class="number">1</span>) % table_size;</span><br><span class="line">        <span class="keyword">int</span> ret = las_choice-offset;</span><br><span class="line">        <span class="keyword">while</span>(ret&lt;<span class="number">0</span>)    ret += table_size;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        turn_left = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> tmp = distance++;</span><br><span class="line">        <span class="keyword">int</span> offset = ((<span class="keyword">long</span> <span class="keyword">long</span>)(tmp * tmp) + <span class="number">1</span> &gt;&gt; <span class="number">1</span>) % table_size;</span><br><span class="line">        <span class="keyword">int</span> ret = las_choice+offset;</span><br><span class="line">        <span class="keyword">while</span>(ret&gt;=table_size)  ret -= table_size;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Overflow-probing"><a href="#Overflow-probing" class="headerlink" title="Overflow probing"></a><code>Overflow probing</code></h4><p>检测到冲突策略为<code>overflow</code>后，将<code>table_size</code>缩小为<code>272761</code>，在这之后的部分为公共溢出区。</p>
<p>检查方法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">overflow_probe* probe = <span class="keyword">dynamic_cast</span>&lt;overflow_probe*&gt;(my_collision);</span><br><span class="line"><span class="keyword">if</span>(probe) table_size = <span class="number">272761</span>;</span><br></pre></td></tr></table></figure>
<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><h3 id="构造方式"><a href="#构造方式" class="headerlink" title="构造方式"></a>构造方式</h3><p>读取文件与命令行参数，决定是否以中文测例为主、是否随机化插入与查询、插入个数与查询个数</p>
<h4 id="随机化"><a href="#随机化" class="headerlink" title="随机化"></a>随机化</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">operations</span><span class="params">(insert_time+search_time)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;insert_time;i++)  operations[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=insert_time;i&lt;operations.<span class="built_in">size</span>();i++) operations[i] = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>如果需要随机化，则<code>random_shuffle(operations)</code>。</p>
<h4 id="中文为主"><a href="#中文为主" class="headerlink" title="中文为主"></a>中文为主</h4><p>利用函数<code>Chinese</code>判定是否含有中文</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Chinese</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;name.<span class="built_in">size</span>();k++) <span class="keyword">if</span>(name[k]&amp;(<span class="number">1</span>&lt;&lt;<span class="number">7</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li>只能有一次插入：利用<code>bitmap</code>标记是否已经插入。</li>
<li>数据具有随机性：将读入的数据存在<code>vector</code>中并将其<code>random_shuffle</code>。</li>
</ol>
<h3 id="数据说明"><a href="#数据说明" class="headerlink" title="数据说明"></a>数据说明</h3><p>六组数据分别为：</p>
<ol>
<li>随机插入，插入2e4，查找2e4，<code>poj</code></li>
<li>不随机插入，插入2e4，查找2e4，<code>poj</code></li>
<li>随机插入，插入2e4，查找2e4，中文为主，<code>hdu</code></li>
<li>不随机插入，插入2e4，查找2e5，<code>hdu</code></li>
<li>不随机插入，插入2e4，查找2e5，<code>poj</code></li>
<li>随机插入，插入2e4，查找2e5，中文为主，<code>hdu</code></li>
</ol>
<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><ol>
<li>效果略微变差。因为<code>utf-8</code>编码重叠部分较多，直接视为<code>ascii</code>编码会将重叠部分同样拼接起来，更容易导致<code>hash</code>聚集，增大了冲突可能。</li>
<li>双向平方试探占优。当冲突较多时(数据量较大或者使用<code>naive_hashing</code>)，双向平方试探能够更快地移动出冲突区域，效率更高。</li>
<li>开放散列占优。封闭散列更适合于处理装填因子较大的情况。</li>
<li>散列分布随机性降低，导致<code>hash</code>聚集更严重，冲突可能加大，更有利于<code>Quadratic probing</code></li>
<li>邓老师在字符串一节所讲述的<code>Trie</code>树可能比<code>hash_table</code>更为高效，其利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率更高。</li>
</ol>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>BBST实验报告</title>
    <url>/2021/12/13/CS/DSA/BBST/</url>
    <content><![CDATA[<h1 id="Lab3-BBST"><a href="#Lab3-BBST" class="headerlink" title="Lab3 BBST"></a>Lab3 BBST</h1><h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1-具体实现"><a href="#1-具体实现" class="headerlink" title="1. 具体实现"></a>1. 具体实现</h3><p>本次实现的数据结构为<code>AVL</code>树与<code>Splay</code>树，现就两个数据结构的核心功能和公共接口实现方法进行说明。</p>
<h4 id="1-1-Splay"><a href="#1-1-Splay" class="headerlink" title="1.1 Splay"></a>1.1 <code>Splay</code></h4><p>Splay 树的主要操作是 <code>splay()</code>，每次增删查都将 <code>_hot</code> 节点伸展至根。</p>
<p>参考邓老师的讲义，基于<code>Tarjan</code>的画龙点睛之笔，对于 $v$ 节点，其父亲 $p$，其祖父 $g$，如果 <code>v、p、g</code> 为之字形，则从父亲<code>p</code>出发逐层进行<code>zig</code>或者<code>zag</code>。而三者不为之字形时，则祖先<code>g</code>先进行旋转，随后再旋转父亲<code>p</code>。从而避免了逐层旋转可能出现的最坏情况。</p>
<p>如此往复，直到将<code>_hot</code>伸展至根为止。</p>
<h4 id="1-2-rotateAt与3-4重构"><a href="#1-2-rotateAt与3-4重构" class="headerlink" title="1.2 rotateAt与3+4重构"></a>1.2 <code>rotateAt</code>与<code>3+4</code>重构</h4><p><code>AVL</code>树的主要操作是通过<code>rotateAt</code>与<code>3+4</code>重构恢复平衡。为此在<code>rotateAt</code>中同样考察$v$ 节点，其父亲 $p$，其祖父 $g$，按三者的位置关系分为<code>zig-zig、zig-zag、zag-zig、zag-zag</code>，依照大小关系和左右子树的相应大小（实际上<code>zig</code>和<code>zag</code>表达的即是大小关系），调用公共接口<code>connect34</code>即可。</p>
<p>需要提出的是，<code>connect34</code>本身只能完成<code>v、p、g</code>之间父子关系的链接，因此需要在调用之前先将新的局部的根链接上之前局部子树的根的父节点。且在<code>connect34</code>中还需考虑判定子树是否为空，最后还需在函数体内维护高度，即对<code>v、p、g</code>都调用<code>updateHeight</code>。</p>
<h4 id="1-3-搜索"><a href="#1-3-搜索" class="headerlink" title="1.3 搜索"></a>1.3 搜索</h4><p>考虑到题目设计，实际上对<code>AVL</code>树与<code>Splay</code>树的搜索都可以基于<code>BST</code>的搜索算法直接模改得到。因为搜索返回的是不大于<code>key</code>的最大节点的值，故而在<code>tree</code>中设置<code>BinNodePosi&lt;T&gt; _max = nullptr;</code>用于辅助<code>search</code>功能。</p>
<p>在邓老师的示例代码<code>SearchIn</code>函数中添加逻辑，每当搜索到的节点当前节点的值大于<code>_max</code>的节点值时，将<code>_max</code>更新为当前节点。随后在主函数中根据<code>_max</code>是否存在，输出相应的值即可。</p>
<p>当然，<code>Splay</code>树对于搜索到的节点需要进行伸展，这仅仅需要在主函数中对<code>_hot</code>进行一次<code>Splay</code>即可。</p>
<h4 id="1-4-删除"><a href="#1-4-删除" class="headerlink" title="1.4 删除"></a>1.4 删除</h4><p>删除无非就是基于<code>BST</code>的删除接口进行改动。</p>
<p>对于<code>BST</code>而言，首先进行搜索，由于题目规定，搜索必然成功。如果搜索到的节点是叶节点，则删去叶节点随后更新高度即可。如果不是叶节点，则将其不断与中序遍历意义下的<code>succ</code>节点交换，直到交换到叶节点为止，随后删除。</p>
<p>对于<code>Splay</code>树，删除节点后将<code>_hot</code>节点伸展至根即可。不过注意到，不仅仅<code>search</code>会改变<code>_hot</code>，实际上在调用<code>succ</code>接口的时候也会改变<code>_hot</code>，故而这一语义约定是完备的。</p>
<p>对于<code>AVL</code>树，删除之后沿着<code>_hot</code>节点向上不断判定是否失衡，倘若失衡则调用<code>rotateAt</code>接口进行重构即可。不过需要留意的是，时刻牢记着维护节点间拓扑关系。</p>
<h4 id="1-5-插入"><a href="#1-5-插入" class="headerlink" title="1.5 插入"></a>1.5 插入</h4><p><code>Splay</code>树的插入先调用重写后的<code>search</code>接口，此时<code>_hot</code>已经被延展到树根，对此时的树根插入新的节点即可。</p>
<p><code>AVL</code>树的插入基于<code>BST</code>的插入实现拓扑关系连接后，从<code>_hot</code>开始逐层检测是否失衡。检测到第一次失衡后，将其复原即可退出循环。</p>
<h3 id="2-复杂度分析"><a href="#2-复杂度分析" class="headerlink" title="2. 复杂度分析"></a>2. 复杂度分析</h3><p>空间复杂度上，各平衡二叉树与向量无异，均是 $O(n)$，以下讨论时间复杂度。</p>
<h4 id="2-1-AVL-树"><a href="#2-1-AVL-树" class="headerlink" title="2.1. AVL 树"></a>2.1. AVL 树</h4><p>参考讲义P723页的分析示意图，设一个高度为$h$的<code>AVL</code>树至少有$S(h)$个节点，则：</p>
<script type="math/tex; mode=display">
S(h) = 1 + S(h - 1) + S(h - 2) \\
S(h) + 1 = (S(h - 1) + 1) + (S(h - 2) + 1)</script><p>可得高度为$h$的<code>AVL</code>平衡树至少有 $fib(h)$个节点，而$fib(h)$大约呈$\Phi^h$，指数式增长。故大小为$k$的<code>AVL</code>树的高度为 $O(\log k)$。</p>
<p>这正是<code>BBST</code>所达到的等效平衡所在，同时意味着<code>AVL</code>树的<code>search</code>复杂度为 $O(\log n)$。</p>
<p><code>P730</code>页指出，每次插入导致的失衡通过至多一次单旋或者双旋即可解决，故而修复的复杂度为 $O(1)$，最终插入的复杂度取决于向下搜索的高度，即 $O(\log n)$。</p>
<p><code>P734</code>页指出，每次删除导致的失衡可能会导致从删除节点处到根均需进行重构复衡操作，故而旋转次数至多为 $O(\log n)$，综合查询操作可知删除的总体复杂度仍为 $O(\log n)$。</p>
<p>综上所述，<code>AVL</code>树的增删查操作时间复杂度均为 $O(\log n)$，考虑到共计$n$次操作，总体的时间复杂度为 $O(n \log n)$。</p>
<h4 id="2-2-Splay-树"><a href="#2-2-Splay-树" class="headerlink" title="2.2. Splay 树"></a>2.2. Splay 树</h4><p>参考习题解析中对<code>Tarjan</code>原论文的解读，我们采用势能法分析<code>Splay</code>树的时间复杂度。</p>
<p>仿照物理学的思想和概念, 这里可假想式地认为, 每棵伸展树<code>S</code>都具有一定量(非负)的势 能 (potential), 记作$  \Phi(S)  $。于是, 若经过某一操作并相应地通过旋转完成伸展之后$S$演化为另一伸展树 ${ S}^{\prime}$ , 则对应的势能变化为: $\Delta \Phi=\Phi\left(S^{\prime}\right)-\Phi(S)$</p>
<p>推而广之, 考查对某伸展树 $S$连续实施$m \gg n$次操作的过程。将第$i$次操作后的伸展树记作$\mathrm{S}<em>{\mathrm{i}} $, 则有:$\Delta \Phi</em>{i}=\Phi\left(S<em>{i}\right)-\Phi\left(S</em>{i-1}\right), \quad 1 \leq i \leq m$</p>
<p>而从该过程的整体来看, 应有$\Delta \Phi=\sum<em>{i=1}^{m}\left[\Phi\left(S</em>{i}\right)-\Phi\left(S<em>{i-1}\right)\right]=\Phi\left(S</em>{m}\right)-\Phi\left(S_{\theta}\right)$</p>
<p>也就是说, 整体的势能变化量仅取决于最初和最终状态一一这与物理学中势能场的规律吻合。势能函数与物理学中势能的另一相似之处在于, 它也可以被看作是能量（计算成本）的一种 存在形式。比如, 当某一步计算实际所需的时间小于分摊复杂度时, 则可理解为通过势能的增加将提前支出的计算成本存储起来；反之，在前者大于后者时，则可从此前积累的势能中支取相应量用于支付超出的计算成本。</p>
<p>以下，若将第$i$次操作的分摊复杂度取作实际复杂度与势能变化量之和,即$A=T<em>{i}+\Delta \Phi</em>{i}$ 。则有$\sum<em>{\mathrm{i}=1}^{\mathrm{m}} \mathrm{A}</em>{\mathrm{i}}=\sum<em>{\mathrm{i}=1}^{\mathrm{m}} \mathrm{T}</em>{\mathrm{i}}+\left[\Phi\left(\mathrm{S}<em>{\mathrm{m}}\right)-\Phi\left(\mathrm{S}</em>{\theta}\right)\right]$</p>
<p>然而$m$状态和初始状态$0$的势能大小并不能确定，经过$m$次操作后，伸展树的势能可能上升也可能下降，故而并不能给出总体实际运行时间和总体分摊运行时间的绝对大小关系。只能够类似课件上所讲，当$m\gg n$时，能够通过分摊的方法确定$A_i$与$T_i$为同一数量级。</p>
<p>也即：</p>
<script type="math/tex; mode=display">
\sum_{i=1}^{m} A_{i}-\Phi\left(S_{m}\right)<\sum_{i=1}^{m} T_{i}<\sum_{i=1}^{m} A_{i}+\Phi\left(S_{0}\right)\\
 \sum_{i=1}^{m} A_{i}-O(nlog(n))<\sum_{i=1}^{m} T_{i}<\sum_{i=1}^{m} A_{i}+O(nlog(n))\\
 A_{i}-O(\frac{n}{m}log(n))<T_{i}<\sum_{i=1}^{m} A_{i}+O(\frac{n}{m}log(n))</script><p>从而得$A_i$与$T_i$为同一数量级，故而后者的均摊变化程度即为前者的均摊复杂度。</p>
<p><code>R.E.Tarjan</code>使用如下势能函数:$\Phi(S)=\sum_{v \in S} \log |v|$ , 其中 $|v|=$节点$v$的后代数目。 </p>
<p>基于此，我们证明伸展树单次操作的分推时间复杂度为$O(\operatorname{logn})$。为此, 以下将分三种情况(其余情况不过是它们的对称形式)证明:<br>在对节点  v  的伸展过程中，每一步调整所需时间均不超过  v  的势能变化的3倍，即:$3 \cdot\left[\Phi^{\prime}(v)-\Phi(v)\right]$ </p>
<p>情况A) <code>Zig</code><br>如教材第8.1.3节所述, 这种情况在伸展树的每次操作中至多发生一次, 而且只能是伸展调整过程的最后一步。作为单旋，这一步调整实际所需时间为$  T=O(1)  $。同时由教材207页图<code>8.5</code>, 这步调整过程中只有节点<code>v</code> 和<code>p</code>的势能有所变化, 且<code>v(p)</code>后代增加(减少)势能必上升(下降), 故对应的分推复杂度为:</p>
<p>$A=T+\Delta \Phi=1+\Delta \Phi(p)+\Delta \Phi(v) \leq 1+\left[\Phi^{\prime}(v)-\Phi(v)\right]$</p>
<p>情况B) <code>Zig-Zag</code><br>作为双旋的组合, 这一调整实际所需时间为$  T=O(2)  $。于是由教材<code>206</code>页图8.4可知:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A &=T+\Delta \Phi \\
&=2+\Delta \Phi(v)+\Delta \Phi(p)+\Delta \Phi(g) \\
&=2+\Phi^{\prime}(g)-\Phi(g)+\Phi^{\prime}(p)-\Phi(p)+\Phi^{\prime}(v)-\Phi(v) \\
&=2+\Phi^{\prime}(g)+\Phi^{\prime}(p)-\Phi(p)-\Phi(v)—————————————————\left(\because \Phi^{\prime}(v)=\Phi(g)\right) \\
& \leq 2+\Phi^{\prime}(g)+\Phi^{\prime}(p)-2 \cdot \Phi(v)——————————————————(\because \Phi(v)<\Phi(p)) \\
& \leq 2+2 \cdot \Phi^{\prime}(v)-2-2 \cdot \Phi(v)——————————————————\left(\because \Phi^{\prime}(g)+\Phi^{\prime}(p) \leq 2 \cdot \Phi^{\prime}(v)-2\right) \\
&=2 \cdot\left[\Phi^{\prime}(v)-\Phi(v)\right]
\end{aligned}</script><p>这里的最后一步放大, 需利用对数函数$ f(x)=\log _{2} x  $的性质, 即该函数属于凹函数(concave function), 因此必有:</p>
<script type="math/tex; mode=display">
\frac{\log _{2} a+\log _{2} b}{2} \leq \log _{2} \frac{a+b}{2}\\亦即：\log _{2} a+\log _{2} b \leq 2 \cdot \log _{2} \frac{a+b}{2}=2 \cdot\left[\log _{2}(a+b)-1\right]<2 \cdot\left(\log _{2} c-1\right)</script><p>㥔况C) <code>Zig-Zig</code><br>作为双旋的组合, 这一调整实际所需时间也为$  T=O(2)  $。于是由教材<code>206</code>页图8.3可知</p>
<script type="math/tex; mode=display">
\begin{aligned}
A &=T+\Delta \Phi \\
&=2+\Delta \Phi(v)+\Delta \Phi(p)+\Delta \Phi(g) \\
&=2+\Phi^{\prime}(g)-\Phi(g)+\Phi^{\prime}(p)-\Phi(p)+\Phi^{\prime}(v)-\Phi(v) \\
&=2+\Phi^{\prime}(g)+\Phi^{\prime}(p)-\Phi(p)-\Phi(v) ——————————————————\left(\because \Phi^{\prime}(v)=\Phi(g)\right) \\
& \leq 2+\Phi^{\prime}(g)+\Phi^{\prime}(p)-2 \cdot \Phi(v) ———————————————————(\because \Phi(v)<\Phi(p)) \\
&\left.\leq 2+\Phi^{\prime}(g)+\Phi^{\prime}(v)-2 \cdot \Phi(v)——————————————————(\because)+\Phi^{\prime}(p)<\Phi^{\prime}(v)\right) \\
&\left.\leq 3 \cdot\left[\Phi^{\prime}(v)-\Phi(v)\right]——————————————————————(g)+\Phi(v) \leq 2 \cdot \Phi^{\prime}(v)-2\right)
\end{aligned}</script><p>同样地, 其中最后一步放大也需利用对数函数的凹性。<br>综合以上各种情况可知, 无论具体过程如何, 伸展操作的每一步至多需要$3\times [ \Phi’ (v) -  \Phi(v)  ] $时间。因此, 若在对伸展树的某次操作中, 节点<code>v</code>经过一连串这样的调整上升成为根节点<code>r</code>, 则整趟伸展操作总体所需的分摊时间为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A & \leq 1+3 \cdot[\Phi(r)-\Phi(v)] \leq 1+3 \cdot \Phi(r) \\
&=O(1+\log n)=O(\log n)
\end{aligned}</script><p>综上所述，我们证明了对于<code>Splay</code>树的连续$m\gg n$次访问的均摊时间复杂度为<code>O(logn)</code>。</p>
<h2 id="二、效率测试"><a href="#二、效率测试" class="headerlink" title="二、效率测试"></a>二、效率测试</h2><h3 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h3><p>操作系统版本：<code>macOS Monterey 11.0.1</code>，基于<code>ARM</code>架构的<code>Apple M1</code>处理器。</p>
<p>编译器版本：<code>Apple clang version 13.0.0 (clang-1300.0.29.3)</code>。</p>
<h3 id="1-测例设计"><a href="#1-测例设计" class="headerlink" title="1.测例设计"></a>1.测例设计</h3><p>我设计了三类共计四种种测例。</p>
<ol>
<li>第一种测例假设用户会随机地进行增删查操作。其操作次数分别为<code>100</code>、<code>10000</code>、<code>1000000</code>、<code>5000000</code>、<code>10000000</code>次，同时每个数据进行三次重复试验。为此设计的生成为<code>rand.cpp</code>，同时编写的<code>shell</code>脚本为<code>rand.sh</code>。</li>
<li>第二种测例先插入随后删除。一共进行操作次数分别为<code>100</code>、<code>10000</code>、<code>1000000</code>次。对比试验又分为两组，第一组前<code>90%</code>次操作进行随机插入，之后<code>10%</code>操作进行随机删除操作，第二组前<code>60%</code>次操作进行随机插入，之后<code>40%</code>操作进行随机删除操作，同时每组数据进行三次重复试验。为此设计的生成为<code>gen_insert_and_del.cpp</code>，同时编写的<code>shell</code>脚本为<code>insert_and_del.sh</code>。</li>
<li>第三种测例为先插入再查询。一共进行操作次数分别为<code>100</code>、<code>10000</code>、<code>1000000</code>次。对比试验又分为三组，第一组前<code>60%</code>次操作进行随机插入，之后<code>40%</code>操作进行随机查询操作，第二组前<code>60%</code>次操作进行随机插入，之后<code>40%</code>操作进行局部查询操作，仅仅查询之前插入的所有节点的<code>10%</code>，且这<code>10%</code>的点的数值均在数据中位数$\pm 10$的范围内。最后一组为极端查询，前<code>60%</code>次操作进行随机插入，之后<code>40%</code>操作对同一个点进行疯狂查询操作。为此设计的生成为<code>search.cpp</code>，同时编写的<code>shell</code>脚本为<code>search_1.sh、search_2.sh、search_3.sh</code>。</li>
<li>第四种测例也为先插入再查询。一共进行操作次数分别为<code>100</code>、<code>10000</code>、<code>1000000</code>次。对比试验又分为三组，第一组前<code>10%</code>次操作进行随机插入，之后<code>90%</code>操作进行随机查询操作，第二组前<code>10%</code>次操作进行随机插入，之后<code>90%</code>操作进行局部查询操作，仅仅查询之前插入的所有节点的<code>10%</code>，且这<code>10%</code>的点的数值均在数据中位数$\pm 10$的范围内。最后一组为极端查询，前<code>10%</code>次操作进行随机插入，之后<code>90%</code>操作对同一个点进行疯狂查询操作。为此设计的生成为<code>search.cpp</code>，同时编写的<code>shell</code>脚本为<code>search_4.sh、search_5.sh、search_6.sh</code>。</li>
</ol>
<h3 id="2-测例生成器"><a href="#2-测例生成器" class="headerlink" title="2.测例生成器"></a>2.测例生成器</h3><p>测例生成思路基于利用<code>bitmap</code>来模拟一个<code>set</code>，如果<code>bitmap</code>某一位为<code>1</code>，则表示在集合内，可以进行删除但是不能进行插入。如果<code>bitmap</code>某一位为<code>0</code>，则表示在集合外，可以进行插入但是不能进行删除。</p>
<p>由于<code>bitmap</code>访存较慢，且生成器在删除逻辑中不得不从随机得到的位置开始遍历，故而复杂度较高。然而基于自己所学能够造出轮子的体验仍然十分美妙。</p>
<p>实际上，实际仅仅在<code>rand.sh</code>当中数据生成耗时较长，在<code>insert_and_del.sh</code>与一系列的<code>search.sh</code>中，实际上效率仍然可观。</p>
<p>另一方面，当数据规模较大后，实际上<code>IO</code>也会耗时严重。故而在生成器中采用了字符串储存输出数据的方式，程序结束后再进行一次<code>IO</code>即可。</p>
<p>最后，在本次测例生成器的调试过程中，经常出现<code>linux</code>终端无法运行生成器的问题。最后发现应该是生成器起初的数据读入是通过<code>cin</code>实现的，这可能导致读入受阻。故而采用了读取命令行参数的方式来运行程序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argv, <span class="keyword">char</span> *argc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">atoi</span>(argc[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> insert_time = n*<span class="built_in">atoi</span>(argc[<span class="number">2</span>])/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> search_time = n*<span class="built_in">atoi</span>(argc[<span class="number">3</span>])/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> model = <span class="built_in">atoi</span>(argc[<span class="number">4</span>]);</span><br><span class="line">  ·················</span><br></pre></td></tr></table></figure>
<h3 id="3-rand-sh测试数据"><a href="#3-rand-sh测试数据" class="headerlink" title="3.rand.sh测试数据"></a>3.<code>rand.sh</code>测试数据</h3><div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000541s</td>
<td>time:0.000552s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000354s</td>
<td>time:0.000343s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000152s</td>
<td>time:0.00013s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013448s</td>
<td>time:0.013548s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013103s</td>
<td>time:0.01426s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013132s</td>
<td>time:0.01429s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.55929s</td>
<td>time:1.58832s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.54717s</td>
<td>time:1.58465s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.54726s</td>
<td>time:1.56897s</td>
</tr>
</tbody>
</table>
</div>
<h3 id="4-insert-and-del-sh测试数据"><a href="#4-insert-and-del-sh测试数据" class="headerlink" title="4.insert_and_del.sh测试数据"></a>4.<code>insert_and_del.sh</code>测试数据</h3><div class="table-container">
<table>
<thead>
<tr>
<th>数据规模(插入比例)/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2(90)</td>
<td>time:0.000568s</td>
<td>time:0.000227s</td>
</tr>
<tr>
<td>1e2(90)</td>
<td>time:0.000363s</td>
<td>time:0.000224s</td>
</tr>
<tr>
<td>1e2(90)</td>
<td>time:0.000184s</td>
<td>time:0.000219s</td>
</tr>
<tr>
<td>1e4(90)</td>
<td>time:0.019172s</td>
<td>time:0.016815s</td>
</tr>
<tr>
<td>1e4(90)</td>
<td>time:0.015954s</td>
<td>time:0.015668s</td>
</tr>
<tr>
<td>1e4(90)</td>
<td>time:0.01882s</td>
<td>time:0.01541s</td>
</tr>
<tr>
<td>1e6(90)</td>
<td>time:2.01893s</td>
<td>time:2.33512s</td>
</tr>
<tr>
<td>1e6(90)</td>
<td>time:2.03421s</td>
<td>time:2.32607s</td>
</tr>
<tr>
<td>1e6(90)</td>
<td>time:2.01517s</td>
<td>time:2.35297s</td>
</tr>
<tr>
<td>1e2(60)</td>
<td>time:0.000127s</td>
<td>time:0.000133s</td>
</tr>
<tr>
<td>1e2(60)</td>
<td>time:0.000124s</td>
<td>time:0.00012s</td>
</tr>
<tr>
<td>1e2(60)</td>
<td>time:0.000125s</td>
<td>time:0.000125s</td>
</tr>
<tr>
<td>1e4(60)</td>
<td>time:0.013686s</td>
<td>time:0.014346s</td>
</tr>
<tr>
<td>1e4(60)</td>
<td>time:0.013499s</td>
<td>time:0.014604s</td>
</tr>
<tr>
<td>1e4(60)</td>
<td>time:0.013589s</td>
<td>time:0.014403s</td>
</tr>
<tr>
<td>1e6(60)</td>
<td>time:1.98859s</td>
<td>time:2.20867s</td>
</tr>
<tr>
<td>1e6(60)</td>
<td>time:1.97533s</td>
<td>time:2.1997s</td>
</tr>
<tr>
<td>1e6(60)</td>
<td>time:1.98779s</td>
<td>time:2.19264s</td>
</tr>
</tbody>
</table>
</div>
<h3 id="5-所有search测例的数据数据"><a href="#5-所有search测例的数据数据" class="headerlink" title="5.所有search测例的数据数据"></a>5.所有<code>search</code>测例的数据数据</h3><p><code>search_1.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000127s</td>
<td>time:0.000551s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.00012s</td>
<td>time:0.000353s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000129s</td>
<td>time:0.000125s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014449s</td>
<td>time:0.018263s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014061s</td>
<td>time:0.015861s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.021159s</td>
<td>time:0.014845s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.98545s</td>
<td>time:2.40377s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.97226s</td>
<td>time:2.36951s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.97932s</td>
<td>time:2.40277s</td>
</tr>
</tbody>
</table>
</div>
<p><code>search_2.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.00029s</td>
<td>time:0.000355s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000278s</td>
<td>time:0.000427s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000212s</td>
<td>time:0.000134s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014808s</td>
<td>time:0.014661s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.01398s</td>
<td>time:0.014646s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014164s</td>
<td>time:0.01428s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.76496s</td>
<td>time:1.94585s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.7533s</td>
<td>time:1.94399s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.76181s</td>
<td>time:1.93839s</td>
</tr>
</tbody>
</table>
</div>
<p><code>search_3.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000545s</td>
<td>time:0.000358s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000343s</td>
<td>time:0.000429s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000362s</td>
<td>time:0.000345s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014087s</td>
<td>time:0.0142s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014004s</td>
<td>time:0.016212s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013885s</td>
<td>time:0.014552s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.7407s</td>
<td>time:1.94346s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.73698s</td>
<td>time:1.96719s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.72518s</td>
<td>time:1.92923s</td>
</tr>
</tbody>
</table>
</div>
<p><code>search_4.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000118s</td>
<td>time:0.000139s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000113s</td>
<td>time:0.000131s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000111s</td>
<td>time:0.000132s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.014616s</td>
<td>time:0.014813s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.01392s</td>
<td>time:0.014797s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013829s</td>
<td>time:0.014919s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.7574s</td>
<td>time:1.89245s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.75384s</td>
<td>time:1.88271s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.75757s</td>
<td>time:1.89904s</td>
</tr>
</tbody>
</table>
</div>
<p><code>search_5.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000152s</td>
<td>time:0.000347s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000149s</td>
<td>time:0.000183s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000147s</td>
<td>time:0.000183s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.025978s</td>
<td>time:0.014267s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.019654s</td>
<td>time:0.013614s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.016305s</td>
<td>time:0.013643s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.53176s</td>
<td>time:1.53011s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.52486s</td>
<td>time:1.52437s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.53416s</td>
<td>time:1.51953s</td>
</tr>
</tbody>
</table>
</div>
<p><code>search_6.sh</code>测试数据</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数据规模/树种类</th>
<th>AVL</th>
<th>Splay</th>
</tr>
</thead>
<tbody>
<tr>
<td>1e2</td>
<td>time:0.000153s</td>
<td>time:0.000554s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000149s</td>
<td>time:0.000118s</td>
</tr>
<tr>
<td>1e2</td>
<td>time:0.000137s</td>
<td>time:0.000122s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013337s</td>
<td>time:0.017674s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013379s</td>
<td>time:0.014802s</td>
</tr>
<tr>
<td>1e4</td>
<td>time:0.013764s</td>
<td>time:0.013478s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.4918s</td>
<td>time:1.4908s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.50743s</td>
<td>time:1.48914s</td>
</tr>
<tr>
<td>1e6</td>
<td>time:1.50316s</td>
<td>time:1.4902s</td>
</tr>
</tbody>
</table>
</div>
<h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><h4 id="总体结论"><a href="#总体结论" class="headerlink" title="总体结论"></a>总体结论</h4><p>总体结果表明，<code>Splay</code>树的效率在我所生成的数据集合上大部分时候都落后于<code>AVL</code>树，而在少数有优势的情况下，优势之微弱几乎可以忽略不计。</p>
<h4 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h4><p><code>Splay</code>树的复原基于<code>splay()</code>操作，而<code>AVL</code>树的复原基于<code>connect34()</code>，虽然单次操作复杂度并未有太大差距，然而<code>Splay</code>树的无论插入，删除，还是查询，都需要对<code>_hot</code>节点多次旋转直到达到树根为止。然而<code>AVL</code>树至多在删除时可能需要沿着<code>_hot</code>向上一直旋转到树根。并且，由于<code>Splay</code>树节点的平均深度高于<code>AVL</code>树，沿着<code>_hot</code>旋转至树根所需的步数也更大。</p>
<p>综上所述，虽然二者单次操作的时间复杂度均为<code>O(logn)</code>，然而可见<code>Splay</code>树的常数会更大。</p>
<h4 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h4><ul>
<li>第一组数据<code>rand.sh</code>完全随机化生成数据。</li>
</ul>
<p>考虑到随机数据的存在几乎使得每次操作<code>Splay</code>树都需进行<code>log(n)</code>次的旋转，总体旋转次数多于<code>AVL</code>树，故而效率上不如<code>AVL</code>树，从<code>1e2</code>到<code>1e4</code>最后到<code>1e6</code>可见，随着数据规模的增大，这种劣势在逐渐扩大。</p>
<ul>
<li>第二组数据<code>insert_and_del.sh</code></li>
</ul>
<p>实际上，在插入算法上，<code>AVL</code>的效率高于<code>Splay</code>，虽然<code>AVL</code>的删除相对慢于插入，然而与<code>Splay</code>树的删除相比效率相当。由此预见，插入操作占比越大，<code>AVL</code>树的优势越大。事实也是如此，<code>AVL</code>树相较<code>Splay</code>树的优势在插入操作占比<code>90%</code>的情况体现的更为明显。</p>
<ul>
<li>第三组数据<code>search.sh</code></li>
</ul>
<p><code>Splay</code>树理想情况下的优势在于利用数据访问的局部性。故而我构造的数据逐步加大了数据访问的局部性，也即在保持插入的随机性不变的前提下，使得搜索的数据越发集中(从完全随机搜索到只搜索中位数$\pm 10$范围内的数据，到完全只搜索中位数)，且大幅降低插入的比例而提高搜索的比例，试图体现<code>AVL</code>树的优势。</p>
<p>然而这样的优势仍然很难体现出来，以至于大多数时候仍是劣势。</p>
<ol>
<li><p>在<code>search_1.sh、search_4.sh</code>中，完全随机搜索数据，使得<code>Splay</code>树几乎每次都需要旋转<code>log(n)</code>次。这一情况下，<code>Splay</code>树相对<code>AVL</code>劣势明显。从<code>search_1.sh</code>到<code>search_4.sh</code>，提升了搜索的比例。</p>
<p>由于二者的插入都基于先搜索再接入新的节点，故而插入操作相对搜索的常数更高，减少插入占比理论上能够减少总的运行时间。事实也是如此，从从<code>search_1.sh</code>到<code>search_4.sh</code>正体现了这一点。</p>
</li>
<li><p>在<code>search_2.sh、search_5.sh</code>中，我将搜索的范围集中到了中位数$\pm 10$范围内的数据，企图以此展示出<code>Splay</code>的优势，可惜这一优势任然未能得到充分体现。</p>
<p>总的而言，<code>Splay</code>树仍然由于插入的复杂度更高而没法完全展示其优势。在插入占比<code>60%</code>的测试中，<code>AVL</code>树仍然优于<code>Splay</code>树。降低插入占比到<code>10%</code>后，<code>Splay</code>树在中等数据规模<code>1e4</code>左右体现出了一定优势，然而数据规模增大到<code>1e6</code>后此种规模几乎消失殆尽。</p>
</li>
<li><p>最后，在<code>search_3.sh、search_6.sh</code>中，所有的搜索都集中在了中位数这一点上，期待的<code>Splay</code>树的大幅优势并未出现，反而事与愿违。在插入占比<code>60%</code>的<code>search_3.sh</code>中，<code>AVL</code>的性能优于<code>Splay</code>树，而插入占比<code>10%</code>后，<code>Splay</code>树终于在较大数据规模<code>1e6</code>上稳定地体现了微弱的优势。</p>
</li>
</ol>
<p>根据如上分析得出结论，总体上<code>AVL</code>树的性能优于<code>Splay</code>树。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Hacker</title>
    <url>/2021/11/27/CS/DSA/hacker/</url>
    <content><![CDATA[<h1 id="PA2-2-Hacker题解"><a href="#PA2-2-Hacker题解" class="headerlink" title="PA2-2  Hacker题解"></a>PA2-2  Hacker题解</h1><h3 id="题意解析："><a href="#题意解析：" class="headerlink" title="题意解析："></a>题意解析：</h3><p>题目给出，对于任意一个字符串，我们有：</p>
<script type="math/tex; mode=display">
\text{for }\forall d_{ki} \in D_k\\ 
密文：\text{int }M_{ki}=Hash(d_{ki})=CRC32(d_{ki}+salt)\\</script><p>取质数<code>10000019</code>为<code>T</code>,记录数据结构<code>Table[10000019]</code>为所需的哈希表，随后以线性试探法来处理哈希冲突。<code>table</code>为一个<code>pair</code>数组，每个<code>pair</code>储存$(M<em>{ki},d</em>{ki})$键值对，而$(M<em>{ki},d</em>{ki})$储存在<code>table[M_&#123;ki&#125;%T]</code>的位置上。</p>
<h3 id="接口设计："><a href="#接口设计：" class="headerlink" title="接口设计："></a>接口设计：</h3><h4 id="set"><a href="#set" class="headerlink" title="set"></a><code>set</code></h4><p>首先对于每个<code>pair</code>设计<code>set</code>函数，<code>set</code>的参数为<code>unsigned char*a,int length</code>。首先检测该位置是否已经有节点，如果没有则将<code>pair</code>存入该位置，反之已经产生了哈希冲突。不断向后<code>++</code>直到出现空，插入即可。</p>
<h4 id="search"><a href="#search" class="headerlink" title="search"></a><code>search</code></h4><p>每当传入一个<code>M</code>值，则计算出<code>M%T</code>，随后在<code>table</code>的相应位置开始查询。</p>
<p>对于每一个节点，倘若查询到其节点的<code>pair</code>值等于<code>M</code>，则意味着为查询成功。随后一直遍历到空，倘若这一过程中还发生了查询成功，则意味着<code>dupulicate</code>，否则查询成功，输出查询成功的字符串，同时将字符串的首字母存入队列中。在队列中进行一次<code>set</code>。</p>
<h4 id="队列与更新"><a href="#队列与更新" class="headerlink" title="队列与更新"></a>队列与更新</h4><p>考虑到题目中的更新需求，实际上利用一个队列结构来实现即可。每次成功输出时，将输出的首字母入队——这意味着，其实我们只需要将队列开为一个<code>100_0010</code>的<code>char</code>数组即可。长度超过<code>8</code>以后，每次将<code>head++,tail++</code>。而后从<code>tail</code>读取出长度为<code>6、7、8</code>的字符串，调用<code>set</code>即可。</p>
<h4 id="递归初始化"><a href="#递归初始化" class="headerlink" title="递归初始化"></a>递归初始化</h4><p>设计一个利用辅助栈的<code>DFS</code>算法，称为<code>init(int depth)</code>。在每一层中设置<code>stack[depth]=each_in_list</code>，而后<code>set</code>然后递归即可。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>枚举部分虽然采用了递归方式，但是其时间复杂度必然与迭代相同。故而复杂度为：</p>
<script type="math/tex; mode=display">
O\left(\sum\limits_{i = 1}^5 18^i \right) = O(18^5)=O(1)(虽然常系数很大)</script><p>每次询问会进行<code>O(1)</code>次散列的查询，随后可能会插入，而插入的复杂度为<code>O(1)</code>，因此平均插入时间与查找时间均为<code>O(1)</code>。窃听的次数为<code>n</code>，总体的时间复杂度为<code>O(n)</code>，综上所述，时间复杂度为<code>o(n)</code>。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>起初五位的字符共有<code>1889568</code>，随后进行<code>n</code>次查询，每次查询最大会插入<code>3</code>个新的字符串，故而空间复杂度为<code>O(n)</code>。</p>
<h2 id="三、相关问题"><a href="#三、相关问题" class="headerlink" title="三、相关问题"></a>三、相关问题</h2><p>在这次作业过程中，集中解决了如下问题。</p>
<h3 id="输入格式的处理"><a href="#输入格式的处理" class="headerlink" title="输入格式的处理"></a>输入格式的处理</h3><p>第一次编写程序时，我利用<code>scanf</code>处理字符串，在本地调试通过后上传至<code>oj</code>却始终无法通过。</p>
<p>随后改为了<code>cin</code>读取，成功通过了程序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> search_value;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d\n&quot;</span>,&amp;n);</span><br></pre></td></tr></table></figure>
<p>请教助教后，应该是我关闭了<code>sync_with_stdio</code>后，同时采用了<code>cin</code>与<code>scanf</code>，导致了发生未定义行为。</p>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>注意到查找范围是个集合，集合内没有重复元素。（之所以会<code>duplicate</code>是因为两个不同的明文对应了同一个暗纹，而非出现了相同明文）</p>
<p>因此在查找过程中的插入需要进行去重。具体而言，如果除余法得到的位置有元素，且当前元素的<code>str</code>不等于待插入的元素，则向后查询，否则直接退出。当查询到空位置时，插入即可。</p>
<h3 id="控制空间"><a href="#控制空间" class="headerlink" title="控制空间"></a>控制空间</h3><p>无论是设计为<code>class</code>还是<code>struct</code>，由于内存的对齐机制，都会浪费一部分空间。故而将<code>class</code>直接用数组模拟，节省了部分空间。</p>
<h4 id="const-char-的输出"><a href="#const-char-的输出" class="headerlink" title="const char[]的输出"></a><code>const char[]</code>的输出</h4><p>实际上通过<code>cout</code>输出一个字符数组，遇到了<code>‘\0’</code>则会停止输出。</p>
<p>在第一次编写程序时，我开辟的二维数组如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> crc_str_collection[<span class="number">7000003</span>][<span class="number">8</span>];</span><br></pre></td></tr></table></figure>
<p>然而，由于字符的储存在堆上是连续的，故而如果一个字符串有<code>8</code>位，则最后一位不再存在<code>‘\0’</code>。如果再利用<code>cout</code>输出，则会将接下来的字符串一并输出。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Build</title>
    <url>/2021/11/24/CS/DSA/build/</url>
    <content><![CDATA[<h1 id="PA2-1-Build题解"><a href="#PA2-1-Build题解" class="headerlink" title="PA2-1  Build题解"></a>PA2-1  Build题解</h1><h2 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h2><p>首先考虑如何模拟一棵多叉树的行为。参照讲义所讲，我们采取长子兄弟法来模拟这样的一棵树。每个节点需要储存的信息为直接前驱编号，直接后续编号，长子编号，幼子编号，父亲编号。并且规定倘若不存在某一关系节点，则编号为<code>0</code>。毕竟根节点的编号从<code>1</code>开始。</p>
<p>除关系节点之外，还需储存子树大小信息，子树高度信息，后缀节点最大高度。</p>
<p>如上<code>6</code>个信息采用<code>unsigned int</code>储存足矣。故而构造节点结构体，开辟足够大小空间即可。</p>
<p>接下来考虑改进递归实现的后序遍历算法来生成初始信息。</p>
<p>最初我考虑通过递归来实现这个功能：</p>
<p>标准的后续遍历为先遍历<code>lc</code>，随后遍历<code>rc</code>，最后<code>visit</code>节点本身。然而本题的后缀节点最大高度这一数据实际上需要依赖于某一节点所有的后续节点。故而需要从<code>last_child</code>反向遍历至<code>first_child</code>。这一操作实际上是反向的后序遍历。考虑以如下方式实现：</p>
<p>如果一个节点是叶子，则设计<code>size=1,height=0,subffix=0</code>，随后返回。</p>
<p>从幼子节点开始反向遍历，直到长子节点。</p>
<p>随后该节点的<code>size</code>等于所有自己子节点的<code>size</code>之和。<code>subffix</code>为长子节点和右邻居的最大值。<code>height</code>为长子节点的<code>subffix+1</code>。</p>
<p>然而实际上由于递归的空间开在函数栈上，而输入规模为<code>1000_000</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [3]: 1000_000*8/(1024**2)</span><br><span class="line">Out[3]: 7.62939453125</span><br></pre></td></tr></table></figure>
<p>如果一棵树完全退化为一维的线性数组，则很有可能因为不断递归进入幼子节点而爆栈。（如果有同学的代码用递归能过全集测试，我去试试能否用这个<code>worst case</code>卡掉他们），所以我们需要递归改为迭代。具体可以参见第三部分第一节。</p>
<p>接下来考虑动态操作。</p>
<h3 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h3><h4 id="int-readnode"><a href="#int-readnode" class="headerlink" title="int readnode()"></a><code>int readnode()</code></h4><p><code>readnode()</code>接口用于给出被表示的节点。起初我考虑通过一个<code>vector</code>将参数传入后再返回被表示的节点，然而并不需要如此操作，毕竟    <code>vector</code>在此处并不优化时间，反而浪费了空间。</p>
<p>考虑到实际上会读入非法路径，故而设计四个全局变量，用于实现<code>int readnode()</code>接口。</p>
<p><code>child_number</code>表示读入的子节点的编号，<code>length</code>表示读入的路径长度，<code>real_vertex</code>和<code>tmp_vertex</code>分别表示在树上，沿着路径深入时，真实的节点和临时的节点。注意到因为路径可能非法，故而我们将<code>tmp_vertex</code>设置为<code>0</code>以表示路径已然非法。且在函数开始时，将<code>tmp_vertex、real_vertex</code>初始化为<code>1</code>，表示必然会走到树根节点。</p>
<p>随后，读入<code>length</code>，然后开启循环。循环内部每次读入<code>child_number</code>，并调用<code>void search(child_number)</code>来设置<code>tmp_vertex、real_vertex</code>。循环结束后返回<code>real_vertex</code>并用<code>detach_vertex、attach_vertex</code>接收即可。</p>
<h4 id="void-search-int-child-number"><a href="#void-search-int-child-number" class="headerlink" title="void search(int child_number)"></a><code>void search(int child_number)</code></h4><p>如同<code>readnode</code>中叙述，<code>search</code>是在模拟在树上的行走过程。首先，如果<code>tmp_vertex</code>已然等于<code>0</code>，也即下行路线到达了叶节点，则直接返回。反之，我们从<code>real_vertex</code>节点的长子节点开始不断移动即可。</p>
<h4 id="void-detach-int-detach-vertex"><a href="#void-detach-int-detach-vertex" class="headerlink" title="void detach(int detach_vertex)"></a><code>void detach(int detach_vertex)</code></h4><p>模拟将一个节点从父亲的树中摘除。首先对于其左右节点，让左右邻居的邻居接口直接相互指向即可。同时特判被摘除节点是否为父节点的长子节点或者幼子节点，如果是则应该将长子节点或幼子节点移交。</p>
<p>其后考虑先更新所有受到影响的节点的信息。具体而言，需要更新的是<code>size、height、subffix</code>。</p>
<p>对于<code>size</code>的更新，只需沿着父节点不断向上，减去当前节点的<code>size</code>。</p>
<p>对于<code>height、subfix</code>，从被摘除节点的<code>parent</code>开始，通过一个<code>while</code>循环，如果有左邻居则向左，如果没有左邻居则向上。在每次循环内，对于左邻居，后缀树最大高度<code>subffix</code>为左邻居的高度与左邻居（新的）右邻居的<code>subffix</code>中的最大值，而高度不会发生改变。如果左邻居的左邻居仍然存在，则继续向左。如果不存在，则已经到达长子。在长子的循环内，父节点的高度等于长子的<code>subffix+1</code>。随后转入父节点的循环。</p>
<h4 id="void-attach-int-attach-number，int-rank"><a href="#void-attach-int-attach-number，int-rank" class="headerlink" title="void attach(int attach_number，int rank)"></a><code>void attach(int attach_number，int rank)</code></h4><p>约定<code>attach_number</code>为待插入位置的父节点。</p>
<p>考虑如何获得实际待插入的位置。类似于<code>search</code>接口的方法，我们通过两个全局变量<code>tmp_insert</code>和<code>real_insert</code>配合<code>rank</code>的<code>while</code>循环获得被<code>attach</code>的位置当前的节点(注意需要将两个全局变量在每次使用前设置为<code>-1</code>)。特别的，倘若<code>tmp_insert!=real_insert</code>，则意味着被插入的位置当前节点为幼子节点。</p>
<p>接着我们应该获得将待插入节点与父节点的儿子链条接起来。如果插入到链条中部，则将原来此处节点的左邻居的右邻居指针指向待插入节点，原来此处节点的左邻居指针指向待插入节点。如果是在长子或者幼子的位置，则注意更新父节点的长子或者幼子指针。</p>
<p>类似于<code>detach</code>，我们需要更新受影响的节点的信息。</p>
<p>对于<code>size</code>的更新，只需沿着父节点不断向上，加上当前节点的<code>size</code>。</p>
<p>对于<code>height</code>和<code>subffix</code>，被插入节点的<code>height</code>不变，而<code>subffix</code>为高度与右邻居的<code>subffix</code>的最大值。而后，从被插入节点的左邻居开始，在每次循环内，对于左邻居，后缀树最大高度<code>subffix</code>为左邻居的高度与左邻居（新的）右邻居的<code>subffix</code>中的最大值，而高度不会发生改变。如果左邻居的左邻居仍然存在，则继续向左。如果不存在，则已经到达长子。在长子的循环内，父节点的高度等于长子的<code>subffix+1</code>。随后转入父节点的循环。</p>
<h4 id="void-query-query-number"><a href="#void-query-query-number" class="headerlink" title="void query(query_number)"></a><code>void query(query_number)</code></h4><p>直接返回维护好的信息即可。</p>
<h4 id="更新信息"><a href="#更新信息" class="headerlink" title="更新信息"></a>更新信息</h4><p>由于摘除和添加节点都会对原来的树造成影响，需要更新全树。故而单独将此写为一个接口。且做语义约定：摘除时，在<code>detach</code>函数中将原来的树与被摘除子树完全脱离。被摘除节点的左右邻居的左右邻居指针应该互相指向（这里需要特判左右邻居是否为空，也就是<code>0</code>，因为尽量不应该更改点<code>0</code>的属性，也即不可让<code>0</code>节点的某一个邻居指针指向非<code>0</code>的节点），如果被摘除节点的左右邻居有节点<code>0</code>，则不应该修改左右邻居的邻居指针，且此时也即被摘除点是原本父节点的长子或者幼子，也应该将长子指针或者幼子指针更新。</p>
<p>以及，因为更新时，对于<code>size</code>的更新方式并不统一，故而将<code>size</code>的更新放置在<code>detach、attach</code>中，只需沿着<code>parent</code>指针做一<code>while</code>循环，不断加上或者减去<code>size</code>即可。</p>
<p>这样约定后，在摘除过程中，我们并没有改变被摘下节点的现在的指针位置，但是原本的树中已经完全没有了次节点。如此以来，对摘除过程进行更新。</p>
<p>注意到实际上受到影响的点是被摘除节点沿着向左向上的方向直到到达根节点的路径上的全部节点。</p>
<p>其次考虑更新<code>subffix、height</code>。先更新<code>subffix</code>再更新<code>height</code>。</p>
<p>做一<code>while</code>循环，沿着先向左的方式更新<code>subffix</code>，在向左的过程中<code>subbfix=max&#123;height,新的右邻居的subffix&#125;</code>。当到达最左侧后，试图向上。如果向上成功，则<code>height=长子的subffix+1</code>，且再次向左。这一过程即更新了所有受影响节点的<code>height</code>与<code>subffix</code>。</p>
<p>完成了全树的更新后，为了确保运行安全，将被摘除节点的<code>parent、left_sibling、right_sibling</code>指针清零以便于之后再使用。</p>
<p>对于插入的语义预定，我们在调用<code>update</code>之前将接口全部接上，也即如果被插入的位置现在有节点，则插入节点的<code>right_sibling</code>指向被插入位置原来的节点，如果被插入位置现在的节点的<code>left_sibling</code>不为空，则被插入位置在儿子链条的中部，相互回扣上链条即可。如果被插入位置现在的节点的<code>left_sibling</code>为空，则新插入节点为父节点的长子，需要回扣上相应的指针。如果被插入位置现在没有节点，则待插入节点为幼子，更改父节点的幼子指针，且判断此时待插入节点的父亲的长子是否为空。如果长子为空，则修改父亲的长子指针。如果长子不为空，则待插入位置原本的节点的<code>left_sibling</code>的右邻居指针和待插入节点进行回扣。</p>
<p>随后调用更新接口即可。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>构建树的拓扑结构的过程仅仅与节点数目有关系，故而时间复杂度为<code>o(n)</code>。</p>
<p>利用辅助栈实现信息初始化时，每一个节点必然且仅仅入栈、出栈各一次，故而整体的时间复杂度为<code>0(n)</code>。</p>
<p>子树移动过程，移动本身只设计了寻找节点的时间消耗，故而时间复杂度为<code>o(cost)</code>。</p>
<p>移动过程中维护大小时，只与节点深度有关，故而复杂度仍然是<code>o(cost)</code>。</p>
<p>移动过程中维护高度和<code>subffix</code>，实际上是逆向的查找过程，花费也是<code>o(cost)</code>。</p>
<p>综上所述，总体的时间复杂度为<code>o(cost+n)</code>，根据数据范围可知符合要求。</p>
<h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>每个节点，记录了大小，长子，幼子，左邻居，右邻居，高度，后缀，总体的空间消耗为<code>o(n)</code>。</p>
<p>为了利用辅助站完成迭代操作，开设的辅助栈也为<code>o(n)</code>。</p>
<p>为了完成对于辅助栈的标记，开设了<code>bitmap</code>，空间消耗也为<code>o(n)</code>。</p>
<p>综上所述，空间复杂度为<code>o(n)</code>。</p>
<h2 id="三、相关问题"><a href="#三、相关问题" class="headerlink" title="三、相关问题"></a>三、相关问题</h2><p>在这次作业过程中，集中解决了如下问题。</p>
<h4 id="递归改迭代"><a href="#递归改迭代" class="headerlink" title="递归改迭代"></a>递归改迭代</h4><p>在最开始我考虑子树信息的初始化时，采用了递归版本实现，但是正如前文所述，递归可能会被完全线性的序列卡掉，造成栈溢出。</p>
<p>故而参考了邓老师上课所讲的后续迭代算法，并与我的朋友刘明道、高焕昂讨论后，我利用辅助栈结合标记的方法将递归改为了迭代。</p>
<p>其中辅助栈利用数组模拟即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">///入栈</span></span><br><span class="line"><span class="keyword">if</span>(top_last_child)  stack_for_size[++top]=top_last_child;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">int</span> pop = stack_for_size[top];</span><br><span class="line">visited-&gt;<span class="built_in">clear</span>(top);</span><br><span class="line">top--;</span><br></pre></td></tr></table></figure>
<p>而标记数组，为了节省空间，这里利用<code>bitmap</code>来完成。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bitmap</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">///N的值并不是bitmap的元素个数,size才是</span></span><br><span class="line">    <span class="built_in">bitmap</span>(<span class="keyword">int</span> n = <span class="number">16777216</span>):<span class="built_in">size</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        m = <span class="keyword">new</span> <span class="keyword">char</span>[N =(n+<span class="number">7</span>)/<span class="number">8</span>];</span><br><span class="line">        <span class="built_in">memset</span>(m,<span class="number">0</span>,N);</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">bitmap</span>()&#123;<span class="keyword">delete</span> []m;m = <span class="literal">nullptr</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> size;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m[k&gt;&gt;<span class="number">3</span>]|=(<span class="number">0x80</span>&gt;&gt;(k&amp;<span class="number">0x07</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m[k&gt;&gt;<span class="number">3</span>]&amp;=~(<span class="number">0x80</span>&gt;&gt;(k&amp;<span class="number">0x07</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m[k&gt;&gt;<span class="number">3</span>]&amp;(<span class="number">0x80</span>&gt;&gt;(k&amp;<span class="number">0x07</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Kidds</title>
    <url>/2021/11/23/CS/DSA/kidds/</url>
    <content><![CDATA[<h1 id="PA2-2-KiDD题解"><a href="#PA2-2-KiDD题解" class="headerlink" title="PA2-2  KiDD题解"></a>PA2-2  KiDD题解</h1><h2 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h2><h3 id="模拟一棵线段树"><a href="#模拟一棵线段树" class="headerlink" title="模拟一棵线段树"></a>模拟一棵线段树</h3><p>工欲善其事必先利其器。<code>kidd</code>一题我将大量的时间用于设计和构思，而花费在<code>debug</code>上的时间显著的少。算是一次妙趣横生的编程体验。</p>
<p>本题考察的显然为线段树数据结构，然而考虑到给出的卡牌个数最大为$2^{31}$，如果建立一棵叶子节点规模如此巨大的线段树，无疑会超出内存限制，故而需要考虑将叶节点离散化。</p>
<p>具体而言，考虑到操作数最多为<code>200_000</code>，涉及到的端点最多为<code>400_000</code>个，这些端点(排序去重之后)假设为<code>k</code>个。能够将初始的卡牌拆分为<code>k+1</code>个区间，从而将这些区间进行整合，整合为新的叶节点，不妨称之为超节点。</p>
<p>对于每个超节点，似乎仅仅需要记录超节点的长度即可。然而，如此简单操作，会导致在边界出现极为复杂的特判情况非常糟糕。譬如，倘若去重排序后连续的三个节点为<code>20、30、49</code>如果我们先翻动<code>20、30</code>，不论是将增量<code>11</code>放在哪个端点上，都很难处理。</p>
<p>转换一种思路，假设端点排序去重后为数组<code>a</code>，倘若数组<code>a</code>为<code>20,30,33</code>，假想有一个假想的<code>b</code>数组，其实际的含义为区间<code>[20,20],[21,29],[30,30],[31,32],[33]</code>。也即我们加上虚拟的节点来表示原来<code>a</code>数组里的区间，而原本<code>a</code>数组里的值全部为单个点。这样以来，我们可以将每次操作都记录在区间节点上，不至于发生矛盾。对这一假想的区间数组构造线段树。</p>
<h3 id="函数功能设计"><a href="#函数功能设计" class="headerlink" title="函数功能设计"></a>函数功能设计</h3><h4 id="二分搜索"><a href="#二分搜索" class="headerlink" title="二分搜索"></a>二分搜索</h4><p>对于某次操作的端点<code>m</code>、<code>n</code>，首先在<code>a</code>数组中二分查找出两端点坐标(这次查找必然成功)，返回<code>k</code>，<code>t</code>。随后<code>k、t</code>乘二即为在<code>b</code>数组中坐标。此坐标将作为参数进行翻牌或者查询。</p>
<h4 id="pushdown"><a href="#pushdown" class="headerlink" title="pushdown"></a><code>pushdown</code></h4><p>每当翻牌或者查询需要向下递归时，均应该进行一次<code>pushdown</code>。左右子树的<code>tag</code>分别加上父节点的<code>tag</code>，而左右子树的<code>sum</code>也做相应的调整。</p>
<h4 id="翻牌"><a href="#翻牌" class="headerlink" title="翻牌"></a>翻牌</h4><p>已经通过二分搜索得到了查找的区间两端点，随后开始对全树进行递归搜索。约定如下参数：<code>i</code>当前树的编号，<code>tree_le</code>为当前搜索的树的左端，<code>tree_ri</code>为当前搜索树的右端，<code>le</code>为当前搜索的左端点，<code>ri</code>为当前搜索的右端点。分以下类别讨论：</p>
<ol>
<li><p><code>ri&lt;tree_le</code>，直接返回。</p>
</li>
<li><p><code>tree_ri&lt;le</code>，直接返回。注意多个<code>if</code>语句加上查询操作和翻牌操作都是左闭右闭的，很容易容易出现情况重叠。首先确定判定的顺序，且尽量使用<code>else</code>语句。</p>
</li>
<li><p>树并不涵盖在区间内 ，然而和区间有交集。首先如果本级的<code>tag!=0</code>，则将本级的<code>tag pushdown</code>，随后计算<code>mid</code>，左右分别递归向下递归，左子树的编号为<code>2*i</code>，右子树的编号为<code>2*i+1</code>，然后通过<code>mid</code>给出左右子树的范围。(可以见得左右子树的范围虽然固定，但是并未存下来，而是每次通过计算所得，这样牺牲时间换了空间)。最后还需要及时将线段和反馈给父节点。</p>
</li>
<li><p>树完全涵盖在区间内。结束递归，<code>sum[i]+=len</code>，<code>tag[i]+=1</code>，<code>tree_le</code>和<code>tree_ri</code>是<code>b</code>数组中的坐标，讨论其奇偶性。按照<code>int k = tree_le&amp;1+tree_ri&amp;1</code>对<code>len</code>做如下讨论：</p>
<ul>
<li><code>case 0</code>，<code>if(tree_le=tree_ri)</code>则<code>len=1</code>。反之，<code>if(tree_le=tree_ri)&amp;&amp;(tree_le&amp;1==1)</code>则<code>len= a[(tree_le&gt;&gt;1)+1]-a[tree_le&gt;&gt;1]</code>。如果<code>if(tree_le!=tree_ri)</code>则<code>len=a[tree_ri&gt;&gt;1]-a[tree_le&gt;&gt;1]+1</code></li>
<li><code>case 1</code>，<code>len=a[(tree_ri+1)&gt;&gt;1]-a[tree_le&gt;&gt;1]</code></li>
<li><code>case 2</code>，则不论<code>tree_le==tree_ri</code>，均有<code>len=a[(tree_ri+1)&gt;&gt;1]-a[tree_le&gt;&gt;1]-1</code></li>
</ul>
<p><strong>然而注意到以上接口的结果高度相似，实际上不用讨论奇偶性，利用位运算化简。</strong></p>
</li>
</ol>
<h4 id="len接口"><a href="#len接口" class="headerlink" title="len接口"></a><code>len</code>接口</h4><p>由于<code>len</code>接口出现较多，考虑单独写为一个接口。该接口的参数是<code>b</code>数组的坐标两端，实现基础为<code>4</code>，实际上可以写的较为简便。</p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>已经通过二分搜索得到了查找的区间两端点，随后开始对全树进行递归搜索。<code>i</code>当前树的编号，<code>tree_le</code>为当前搜索的树的左端，<code>tree_ri</code>为当前搜索树的右端，<code>le</code>为当前搜索的左端点，<code>ri</code>为当前搜索的右端点。分以下类别讨论：</p>
<ol>
<li><code>ri&lt;tree_le</code>，直接返回。</li>
<li><code>tree_ri&lt;le</code>，直接返回。</li>
<li>树并不涵盖在区间内 ，然而和区间有交集。，首先如果本级的<code>tag!=0</code>，则将本级的<code>tag pushdown</code>，随后计算<code>mid</code>，左右分别递归向下递归，左子树的编号为<code>2*i</code>，右子树的编号为<code>2*i+1</code>，最后返回<code>sum</code></li>
<li><code>le&lt;=tree_le&lt;=tree_ri&lt;=ri</code>，结束递归，返回<code>sum</code>。</li>
</ol>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>通过上述分析，实际上空间复杂度与<code>n</code>无关，而取决于<code>m</code>。首先我们使用了数组<code>a</code>存储初始的操作列表，随后复制一份<code>a</code>到了<code>sign</code>数组（因为<code>a</code>经过排序后已经打乱了顺序，不再能表示原本的操作）。然后我们对于假想的区间数组<code>b</code>开辟了线段树（通过<code>sum、tag</code>两个数组来模拟），考虑到线段树的大小在最坏情况下是为<code>b</code>数组的四倍，故而线段树加上起初存下的操作，排序后的操作，整体的空间复杂度仍然为为<code>o(m)</code>。进一步考虑最坏情况下，当<code>m=200_000</code>时，最大的空间占用不过：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: m = 200_000</span><br><span class="line">In [2]: (2*m*3*4+m+2*m*4*12)/(1024**2)</span><br><span class="line">Out[2]: 23.07891845703125</span><br></pre></td></tr></table></figure>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>接下来考虑时间复杂度，首先读入所有数据后，进行排序去重等操作。拷贝数组复杂度为<code>o(m)</code>，排序的时间复杂度为<code>o(mlog(m))</code>，随后进行去重，复杂度为<code>o(m)</code>，这一步复杂度为<code>o(mlog(m))</code>。</p>
<p>每一步翻牌操作和每一步查询操作实际上渐进时间复杂度相同。由于操作当中仅仅只是将空间扩大了一倍，并没有提升线段树的渐进复杂度，故而线段树的复杂度仍然为<code>o(mlog(m)）</code>。</p>
<p>综上，总体的时间复杂度为<code>o(mlog(m))</code>。</p>
<h2 id="三、相关问题"><a href="#三、相关问题" class="headerlink" title="三、相关问题"></a>三、相关问题</h2><p>在这次作业过程中，集中解决了如下问题。</p>
<h3 id="去重排序"><a href="#去重排序" class="headerlink" title="去重排序"></a>去重排序</h3><p>起初我考虑通过<code>bitmap</code>来实现去重。倘若仅用<code>bitmap</code>就能完成去重和排序的功能，实际上复杂度仅仅为<code>0(m)</code>，因为利用<code>bitmap</code>的排序类似于桶排序，会很大程度上优于快速排序。然而考虑到桶排序适合的是大规模，小范围排序，也即数据分布的范围较小，而数据的个数较多。此题恰恰相反，这是一个小规模，大范围的排序。开辟<code>2&lt;&lt;31</code>的<code>bitmap</code>在空间上已然被否决：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [4]: (2**31)*4/(32*1024**2)</span><br><span class="line">Out[4]: 256.0</span><br></pre></td></tr></table></figure>
<h4 id="利用位移与按位与"><a href="#利用位移与按位与" class="headerlink" title="利用位移与按位与"></a>利用位移与按位与</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (meta[(tree_right+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>]-meta[tree_left&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>-(tree_left&amp;<span class="number">1</span>)-(tree_right&amp;<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>实际上<code>&gt;&gt;1、&lt;&lt;1</code>能够极快的实现除二向下取整与乘二。而<code>&amp;1</code>实际上是对<code>2</code>取模。同时注意到位运算与加法运算的优先级是较为混乱的，故而尽量通过括号明确逻辑。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>*m+<span class="number">1</span>=M&lt;&lt;<span class="number">1</span>|<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="避免多个if语句的逻辑混乱"><a href="#避免多个if语句的逻辑混乱" class="headerlink" title="避免多个if语句的逻辑混乱"></a>避免多个<code>if</code>语句的逻辑混乱</h4><p>实际上多个<code>if</code>语句一起判定，容易出现的问题包括但不限于：</p>
<ol>
<li>如果判定逻辑之间有交集，则可能导致进入未曾设想的分支。譬如：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (right&lt;=tree_left)</span><br><span class="line"><span class="keyword">if</span> (tree_right&lt;=left) </span><br><span class="line"><span class="keyword">if</span>(left&lt;=tree_left&amp;&amp;tree_right&lt;=right)</span><br><span class="line"><span class="keyword">if</span> ((tree_left&lt;=right&amp;&amp;right&lt;=tree_right)||(tree_left&lt;=left&amp;&amp;left&lt;=tree_right))</span><br><span class="line"><span class="comment">//由于4与1、2在取等号时有逻辑交集，故而会先进入1或2，是否能进入4都难说</span></span><br><span class="line"><span class="comment">//故而修改如下：</span></span><br><span class="line"><span class="keyword">if</span>(right&lt;tree_left)</span><br><span class="line"><span class="keyword">if</span>(tree_right&lt;left)</span><br><span class="line"><span class="keyword">if</span>(left&lt;=tree_left&amp;&amp;tree_right&lt;=right)</span><br><span class="line"><span class="keyword">if</span>((tree_left&lt;=right&amp;&amp;right&lt;=tree_right)||(tree_left&lt;=left&amp;&amp;left&lt;=tree_right))</span><br></pre></td></tr></table></figure>
<h4 id="对单个字符的scanf"><a href="#对单个字符的scanf" class="headerlink" title="对单个字符的scanf"></a>对单个字符的<code>scanf</code></h4><p>由于<code>scanf(&quot;%f&quot;,&amp;operations[i]);</code>的底层逻辑是混乱的，倘若要读入字符，理应采用如下方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> operations[<span class="number">200010</span>][<span class="number">1</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,operations[i]);</span><br><span class="line"><span class="comment">///虽然希望读入的是仅是单一的字符，然而任然开辟字符串来储存</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Not Found</title>
    <url>/2021/11/21/CS/DSA/not%20found/</url>
    <content><![CDATA[<h1 id="PA2-2-Not-found题解"><a href="#PA2-2-Not-found题解" class="headerlink" title="PA2-2  Not found题解"></a>PA2-2  Not found题解</h1><h2 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h2><p>对于一个长度为$n$的$0/1$字符串，其共有$2^n$种可能。而$A$串的所有长度为$n$的子串共计$|A|-n+1$个。倘若$2^n&lt;|A|-n+1$，则意味着$A$串能够完全含有所有长度为$n$的子串。则长度小于等于$n$的子串必然不是问题的解。</p>
<p>考虑到$|A|\le 2^{24}$，当$n=24$时，$|A|-24+1$已然无法涵盖长度为$24$的所有子串。故而问题的解必然是长度不超过$24$的$0/1$字符串。</p>
<p>基于上述分析，考虑枚举长度$k$从$1\sim min(|A|,24)$的子串。对于长度为$k$的所有子串中的某一个$S_i$，考虑直接通过计算其二进制值将其储存。注意到同时记录长度$k$，否则类似$0111$和$111$这样的子串会由于前导零个数不同而无法区分。</p>
<p>最朴素的想法为，从$0$开始向长度递增方向开始遍历，这样搜索到最小的$k$，其对应的值域范围$0 \sim 2^k-1$当中有没有出现的值。将这个值对应的字符串输出即为所求。</p>
<p>然而这样遍历，在最坏情况下用时可能为$\sum_{k=1}^{24}O(2^k)=O(2^{25})$，看着还不至于特别糟糕。然而常数会相对糟糕，因为每一次遍历都涉及将二进制数转为十进制数，且将十进制数存入<code>bitmap</code>中，常系数相对较高。考虑到题目的时间要求，有待优化。</p>
<p>考虑到长度为$i$的子串$S<em>1, S_2, \cdots, S</em>{|A| - i + 1}$，假设我们已然求出了对应的十进制值，且合理的储存在了<code>bitmap</code>当中。对于长度为 $i - 1$ 的子串 $R<em>{1},R</em>{2}, …, R<em>{|A| - i + 1}, R</em>{|A| - i + 2}$，其中 $R<em>1,…, R</em>{|A| - i + 1}$ 为 $S<em>1, …, S</em>{|A| - i + 1}$ 减去最后一位字符。在十进制意义下，$(R<em>m)</em>{10}= \left \lfloor (\frac{S<em>m}{2})</em>{10} \right \rfloor(1\le m\le |A|-i+1)$。而最后的$R_{|A| - i + 2}$位于整个串的最右边，不由任何一个长度为$i$的串减去最后一位字符得来，故而需要单独特判。所幸$i$的范围相对很小，仅需要单独存下最后$24$位即可。</p>
<p>故而，倘若长度为$k$的串的十进制值为$m$，如果该串并不在最右边，则值$2m$</p>
<p>或者$2m+1$必然存在于长度为$k+1$的串对应的<code>bitmap</code>当中。换言之，对于长度为$k$的串，其对应值为$x$，则$\left \lfloor (\frac{X}{2}) \right \rfloor$必定在长度为$K$的串对应的<code>bitmap</code>当中。</p>
<p>如此以来，倘若从后向前遍历，我们可以省下二进制转为十进制的时间。当遍历到长度为$k$的串全部存在，而长度为$k+1$的串存在缺失时，将$k+1$串所缺失的十进制值对应的第一个子串输出即可。</p>
<p> 首先考虑输入字符串足够长，也即$24&lt;|A|$时。我们需要存下三个<code>bitmap</code>，一个用于记录长度为$k$的串对应的十进制值，另一个用于记录长度为$k-1$的串的十进制值，最后一个用于储存最边缘需要特判的字符串。对$k-1$的串进行遍历，倘若$k-1$串存在缺失，则删除长度为$k$的串的<code>bitmap</code>，进行下一轮循环，思路类似于滚动数组。对于初始的长度为$24$的子串集合，则必然遍历一遍所有长度为$24$的子串。同时注意到每次遍历都应把末尾$k$位字符串的贡献写入<code>bitmap</code>。</p>
<p>当$|A|\le24$时，从$|A|$开始遍历即可，综上所述，遍历的起点为$k=min(|A|,24)$，同时需要记录最右侧$k$位字符串。</p>
<p>故而在程序一开始，利用先用一个<code>bitmap</code>存下所有的字符串，计算出字符串长度和循环的初始值$k$。然后开始按照上述操作实现即可。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><p>考虑最坏情况的时空复杂度。</p>
<p>第一次读入整个串并且进行枚举所需要的时间为$O(|A|)$，而后对于长度为$k$的子串的特判需要$O(1)$时间，枚举需要$O(2^k)$时间，最坏情况遍历从$0\sim 23$，时间复杂度为$O(|A|+2^{24})$，且因为采用了倒序遍历的方法，常系数不至于太坏，足以符合要求。</p>
<p>考虑空间复杂度，由于采用了<code>bitmap</code>数据结构，实际上类似于压位思想。原长度为$2^{24}$的$0/1$字符串，实际上仅需$2^{18}$位的数组。而在内存的调用的最大时刻，所需空间为$8\mathrm{B} \times 2^{18} \times 2 = 4 \mathrm{MB}$，其余空间用于存下原字符串的末端$24$位等临时变量，小于题目限制。</p>
<h1 id="三、相关问题"><a href="#三、相关问题" class="headerlink" title="三、相关问题"></a>三、相关问题</h1><p>在这次作业过程中，集中解决了如下问题。</p>
<h2 id="3-1-整型数据选择"><a href="#3-1-整型数据选择" class="headerlink" title="3.1 整型数据选择"></a>3.1 整型数据选择</h2><p>在编写二进制转为十进制的函数时，需要考虑选择的整数类型。考虑到长度<code>k</code>不超过<code>24</code>，也即最大的十进制值不会超过$2^{24}$，故而使用<code>int</code>足矣。</p>
<h2 id="3-2-滚动bitmap的实现"><a href="#3-2-滚动bitmap的实现" class="headerlink" title="3.2 滚动bitmap的实现"></a>3.2 滚动<code>bitmap</code>的实现</h2><p>因为采取了类似于滚动数组的操作，故而需要很多次将<code>bitmap b</code>赋值给<code>bitmap a</code>，起初我担心可能会因为赋值操作而导致时间复杂度过高。然而注意到，在<code>main</code>中使用的均为<code>bitmap</code>的指针，故而先将<code>a</code>指针所指向内存空间释放，随后将<code>a</code>指针指向<code>b</code>指针指向的内存空间，再将<code>b</code>指针设为<code>nullptr</code>即可，时间复杂为<code>o(1)</code>。</p>
<h2 id="3-3-将bitmap中的值读取出"><a href="#3-3-将bitmap中的值读取出" class="headerlink" title="3.3 将bitmap中的值读取出"></a>3.3 将<code>bitmap</code>中的值读取出</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">trans</span><span class="params">(bitmap*a, <span class="keyword">int</span> initial, <span class="keyword">int</span> trans_len)</span></span></span><br><span class="line"><span class="function"><span class="comment">//注意函数的语义约定，initial是第一个转换位置，也是需要转换的，尤其需要考虑不可越界，也即当转换长度为24时</span></span></span><br><span class="line"><span class="function"><span class="comment">//最后一个initial是len-24</span></span></span><br><span class="line"><span class="function"><span class="comment">//正如report中所写，之所以能够优化常系数，正是因为在主循环当中只用在边界上调用一次trans</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = trans_len<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a-&gt;<span class="built_in">test</span>(initial+i))</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;posi is &quot;</span>&lt;&lt;initial+i&lt;&lt;endl;</span><br><span class="line">            tmp = (tmp &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tmp = tmp &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;tmp is &quot;</span>&lt;&lt;tmp&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果采用遇到<code>0</code>则左移一位，遇到<code>1</code>则左移一位加<code>1</code>的方法，显然应该从前向后遍历。从后向前遍历应该采用定义计算，即每一位乘对应的$2^k$。</p>
<h2 id="3-4-关于错误trap-253"><a href="#3-4-关于错误trap-253" class="headerlink" title="3.4 关于错误trap 253"></a>3.4 关于错误<code>trap 253</code></h2><p>之前也出现过<code>trap 253</code>的情况，总结而言，<code>trap 253</code>是内存相关问题，本次作业第一版本由于自己数组开设过小，导致了<code>trap 253</code>。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Risk</title>
    <url>/2021/10/27/CS/DSA/risk/</url>
    <content><![CDATA[<h1 id="一、题干分析"><a href="#一、题干分析" class="headerlink" title="一、题干分析"></a>一、题干分析</h1><p>题目实际上是通过一个动态的窗口来扫描整个数组，然后返回数组内的最大值即可。对于这样的扫描，首先用数组<code>a[i]</code>储存每日的确诊人数，考虑窗口内的两天<code>i、j</code>，倘若<code>a[i]&lt;=a[j]</code>同时<code>i&lt;j</code>，那么可以想见，当<code>i</code>还在窗口内时，<code>j</code>必然还在窗口内，那么<code>a[i]</code>必然不会对窗口内的最大值做出贡献。</p>
<p>换言之，按照这种理解，我们实际上构造了<code>Queap</code>这一数据结构，不过区别于课堂上所讲的<code>Queap</code>即单调队列这一结构，此处并不需要储存每个高度的元素的计数个数，也即是标注在讲义对应章节的柱上的数字。</p>
<p>考虑到窗口的左端实际上是单调的，故而左端元素出队以后，必然不再会入队。</p>
<h1 id="二、模拟Queap"><a href="#二、模拟Queap" class="headerlink" title="二、模拟Queap"></a>二、模拟<code>Queap</code></h1><h2 id="一个naive的想法："><a href="#一个naive的想法：" class="headerlink" title="一个naive的想法："></a>一个naive的想法：</h2><p>开辟四个等长的数组来存储每一天的信息，即当日确诊人数，当日的查询长度，当日的风险程度，以及这一天是否位于<code>Queap</code>内。</p>
<p>考虑中间过程，读入某一天的数据后，首先根据<code>m[i]</code>能够计算出窗口的范围。倘若之前对于<code>Queap</code>的维护合理，则此时取出<code>int ind</code>为窗口前端。从队列头部开始遍历，第一个还位于<code>Queap</code>内的元素则为当日的风险程度。</p>
<p>随后从尾部开始向前搜索，对于所有在<code>Queap</code>内，且比入队元素小的日子，都应该从<code>Queap</code>里面剔除掉，直到出现第一个在<code>Queap</code>内且比入队元素大的日子。</p>
<p>最后，尾部元素必定会进入<code>Queap</code>内，因为尾部元素一定比后缀所有元素都大。</p>
<p>可惜，这个想法naive的地方在于，如何确定一个元素是否在<code>Queap</code>里面呢，我一开始企图通过一个等长的数组来记录，如果在<code>Queap</code>里，就记为<code>1</code>，如果不在<code>Queap</code>里面，就记为<code>0</code>，然后每次遍历这个数组即可。</p>
<p>但是，考虑到这个题目给出的$m_i$的范围，这个想法必然在时间复杂度上炸裂。</p>
<h2 id="优化：如何确定一个元素是否在queap里面："><a href="#优化：如何确定一个元素是否在queap里面：" class="headerlink" title="优化：如何确定一个元素是否在queap里面："></a>优化：如何确定一个元素是否在queap里面：</h2><p>其实反过来一想，不如直接记录queap里有哪些元素。我们考虑通过一个队列来直接记录<code>Queap</code>里有哪些元素。而最简单的实现队列的方法，就是直接用一个数组来模拟。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> queue[<span class="number">1000001</span>];</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>；</span><br><span class="line"><span class="keyword">int</span> tail = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>出队即为<code>head++；</code>入队即为<code>queue[tail++]=入队元素；</code>随后从<code>head</code>遍历到<code>tail</code>即为所有的当前仍然在<code>Queap</code>里面的元素。这样并没有省下空间，但是显著的省下了查找某个元素是否在<code>Queap</code>内花费的时间。</p>
<h2 id="优化：如何查询："><a href="#优化：如何查询：" class="headerlink" title="优化：如何查询："></a>优化：如何查询：</h2><p>原本的思路是：通过上述方式，得出了某一天的风险系数后，对数组进行快排随后二分查找<code>p</code>和<code>q</code>既可以得出答案。</p>
<p>然而，快速排序需要处理复杂的边界情况，且考虑整个查询的复杂度。</p>
<p>快排的复杂度为$O(nlog(n))$，每次二分的复杂度为$O(log(n))$，总共查询次数为$10^5$次。对于所有的查询而言，复杂度已经高达$O(nlog(n))$，在$0.5s$内，可能会时间复杂度炸裂。</p>
<p>参考了《图解算法》一书137页所考虑的计数排序，对于查询过程进行优化。首先遍历每一天的风险程度，随后对计数所用的数组从第二项开始求出前缀和，目前，时间复杂度为$O(max(m_i)+n)$。之后每次查询，复杂度均为$O(1)$，考虑一共$K$次查询，则整体的复杂度为$O（max(m_i)+n+k)$。</p>
<h1 id="三、复杂度分析"><a href="#三、复杂度分析" class="headerlink" title="三、复杂度分析"></a>三、复杂度分析</h1><p>在计算$d[i]$的过程中，由于整个运算过程仅仅开辟了少数个等长的数组，故而空间复杂度为$O(n)$。</p>
<p>考虑时间复杂度。在整个运算过程中，对于每个元素，至多出队入队一次，且外层循环也为$1-n$，故而在计算$d[i]$时，整体的时间复杂度为$O(n)$。</p>
<p>在查询过程中，考虑到上方利用前缀和做出的优化，可以得知前缀和的空间复杂度为$O(n+max(m_i))$，时间复杂度为$O（max(m_i)+n+k)$。</p>
<p>最终整个算法的时间复杂度为$O(max(m_i)+n+k)$，空间复杂度为$O(n+max(m_i))$。</p>
<h1 id="四、问题解决"><a href="#四、问题解决" class="headerlink" title="四、问题解决"></a>四、问题解决</h1><h2 id="4-1-Scanf问题"><a href="#4-1-Scanf问题" class="headerlink" title="4.1 Scanf问题"></a>4.1 <code>Scanf</code>问题</h2><p>起初在<code>Scanf</code>内多次失误。首先，<code>Scanf</code>读入时，对于具体的实例一定要取地址，而<code>printf</code>写出时，并不需要取地址。</p>
<p>其次，<code>Scanf</code>参数敏感，读入<code>long long</code>应该用<code>Scanf(&quot;%lld&quot;,&amp;m[i])</code></p>
<p>且，对于栈上的数据去<code>memset</code>是好习惯，但是不要<code>memset</code>错对象了。</p>
<h2 id="4-2-数据范围"><a href="#4-2-数据范围" class="headerlink" title="4.2 数据范围"></a>4.2 数据范围</h2><p>月球人口并不能反应我想向前查询的天数，在$m_i$和$p、q$上应该用<code>long long</code>或者<code>unsigned</code>来存储。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>filename</title>
    <url>/2021/10/26/CS/DSA/filename/</url>
    <content><![CDATA[<h1 id="一、问题分析"><a href="#一、问题分析" class="headerlink" title="一、问题分析"></a>一、问题分析</h1><p>对于A的增加操作实际上等同于对于B的删除操作。A、B两串在向着共同的目标串进行转化，实际上目标串就是最长公共子序列。设A串长度为n，B串长度为m，最常公共子序列为LCS，则所花费的最低成本实际上为$n+m-2*LCS$。</p>
<p>但这显然会在时空复杂度上出很多问题。</p>
<p>首先考虑时间上，课堂上所讲的最基本算法为指数规模，通过记忆化存储后为$O(mn)$规模，而$m,n$取值为$500000$时，显著的超出了$1s$。</p>
<p>考虑到要求操作次数不多于$k$次，故而对于两个长度差大于$k$的子串，一定会不合法，故而我们只需要沿着对角线遍历，并且计算出对角线左右各$k$个元素即可。从而复杂度降低为$O(nk)$，考虑到$n、k$的范围，这一时间复杂度能够接受。</p>
<p>另一方面，如果沿着对角线与对角线左右各$k$个元素的方式填充搜索表格，并不一定能填上$(n,m)$这一位置。可以想见，此时是由于输入的字符串长度差自身即大于了$k$，直接返回$-1$即可。</p>
<p>再考虑空间复杂度，一般意义上，oj给出的空间大小是$256mb$。我们考虑$8\times10^7$个<code>int</code>的大小：</p>
<script type="math/tex; mode=display">
8\times10^7\times4\div(1024^2)=305mb</script><p>故而$256mb$也不过是$10^7$量级的<code>int</code>罢了，想要开辟一个$500000^2$的<code>int</code>数组实属异想天开。我们需要其他方式来降低空间复杂度。</p>
<p>参考如下<a href="https://www.cnblogs.com/RioTian/p/12397821.html">链接</a>所讲述的方法，考虑通过一个滚动数组来储存计算过程中调用的数据。有两种滚动数组的方式，第一种是存储相邻两行沿着对角线各自偏移$K$位，第二种是直接存储相邻的两行。前者虽然在空间上能够进一步压缩，但是考虑到边界情况需要特判，且数组下标繁琐，最后决定采取直接存储相邻两行的全部元素，同时应该将相邻两列中不合法的部分，即长度差超过$k$的位置全部设置为0。</p>
<h1 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h1><p>参考上文分析，算法的时间复杂度为$0(nk)$而空间复杂度为$O(n)$。</p>
<h1 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h1><h2 id="3-1-滚动数组的使用"><a href="#3-1-滚动数组的使用" class="headerlink" title="3.1 滚动数组的使用"></a>3.1 滚动数组的使用</h2><p>在滚动数组的使用中，由于需要将数组的下一行滚动到上一行，故而需要进行一次数组复制。然而起初我试图通过<code>memcopy</code>一整行来完成复制，这在时间复杂度上会炸裂。因为<code>memcopy</code>虽然比<code>for-loop</code>循环更为快速，但是仍然为$O(n)$复杂度，如果套上外层循环，算法再次退化为$O(n^2)$，显然失败了。故而只复制非0的有效部分即可，这样复制的复杂度为$O(k)$，整体的复杂度为$O(nk)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)</span><br><span class="line">&#123;</span><br><span class="line">    up[i]=down[i];</span><br><span class="line">&#125;</span><br><span class="line">ind++;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-两次特判"><a href="#3-2-两次特判" class="headerlink" title="3.2 两次特判"></a>3.2 两次特判</h2><p>在最初的程序里，我仅仅只在输入的时候特判了是否会超过$k$，然后决定是否会输出$-1$，然而实际上，$n+m-2*LCS$也可能超出$k$，所以需要在输出的时候再次特判。</p>
<h2 id="3-3-关于时间效率"><a href="#3-3-关于时间效率" class="headerlink" title="3.3 关于时间效率"></a>3.3 关于时间效率</h2><p>起初的程序全部空间均使用了<code>new</code>，然而这在时间效率上付出了重大代价，改为了堆上分配。</p>
<h2 id="3-4-某一次九成测出现了trap-253"><a href="#3-4-某一次九成测出现了trap-253" class="headerlink" title="3.4 某一次九成测出现了trap 253"></a>3.4 某一次九成测出现了trap 253</h2><p>然而我并没有使用断言，好奇是否是如下代码的问题，打算开放全集测试后再来查看。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setvbuf</span>(stdin, <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],_IOFBF,<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line"><span class="built_in">setvbuf</span>(stdout, <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],_IOFBF,<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>A+B</title>
    <url>/2021/10/19/CS/DSA/A+B/</url>
    <content><![CDATA[<h1 id="PA1-1-Α-Β-Problem题解"><a href="#PA1-1-Α-Β-Problem题解" class="headerlink" title="PA1-1 Α+Β Problem题解"></a>PA1-1 Α+Β Problem题解</h1><h2 id="一、算法分析"><a href="#一、算法分析" class="headerlink" title="一、算法分析"></a>一、算法分析</h2><p>本题所输入的数据范围较大，同时考虑到本题的精度要求，无论是用<code>double</code>甚至<code>long double</code>都无法同时满足精度需求，故而用<code>unsigned long long</code>来存储数据，且使用压位高精度算法，<strong>压位用于优化常系数。</strong></p>
<p>对于$k$位的十进制数，考虑到高精度算法的核心步骤：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i+j]+=x[i]*y[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ans[i+j]</code>可能的最大值接近于$(10^k-1)^2$，为使其小于$2^{64}$考虑取$K=8$，即对运算过程采用亿进制。</p>
<p>其次考虑到在竖式乘法中，如果采取<code>ans[i]</code>全部计算完成后进行进位的方式，在运算过程中，<code>ans[i]</code>可能会加上$(n-2)$次$10^8$量级的数字，其中$n$为将原本输入的数字以$10^8$为进制后的位数。</p>
<script type="math/tex; mode=display">
\frac{5000}{8}*99999999^2-2^{64}\le0</script><p>这样操作并不会导致<code>ans[i]</code>溢出，故而所有计算完成后，再统一进位。</p>
<p>此外，对于压位后每一位的输出，需要注意到除了最高位，均需要向前补齐前缀，这里可以通过简单的<code>while-do loop</code>来解决。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><p>本题所用的压位高精度算法时间复杂度为$O(n^2)$，式中的$n$为压位后两被乘数的最高位数。</p>
<p>而空间复杂度由运算过程中的<code>unsigned long long*ans=new unsigned long long[m+n-2];</code>决定，故而空间复杂度为$O(n)$。</p>
<h1 id="三、相关问题"><a href="#三、相关问题" class="headerlink" title="三、相关问题"></a>三、相关问题</h1><p>在这次作业过程中，集中解决了如下问题。</p>
<h2 id="3-1-输入输出优化"><a href="#3-1-输入输出优化" class="headerlink" title="3.1 输入输出优化"></a>3.1 输入输出优化</h2><p>起初试图最简单的<code>cin</code>与<code>cout</code>完成输入输出，计时后发现会$TLE$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>理论上可以通过这种方式优化<code>cin</code>与<code>cout</code>的速度，然而出于新手训练堂的大数据一题的启发，试图通过优化<code>scanf</code>与<code>printf</code>来优化问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setvbuf</span>(stdin, <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],_IOFBF,<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line"><span class="built_in">setvbuf</span>(stdout, <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],_IOFBF,<span class="number">1</span>&lt;&lt;<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>*a = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5010</span>];</span><br><span class="line"><span class="keyword">char</span>*b = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5010</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,a,b);</span><br><span class="line">string A = a;</span><br><span class="line">string B = b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,x.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans[index]);</span><br></pre></td></tr></table></figure>
<h2 id="3-2-计时器"><a href="#3-2-计时器" class="headerlink" title="3.2 计时器"></a>3.2 计时器</h2><p>利用 C++11 的计时器模板来测试是否会超出时间限制。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono;</span><br><span class="line">、、、、、、、、、</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> start = system_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line">、、、、、、、、、</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> end = system_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span> duration = duration_cast&lt;microseconds&gt;(end - start);</span><br><span class="line">    cout &lt;&lt;  <span class="string">&quot;time:&quot;</span></span><br><span class="line">         &lt;&lt; <span class="built_in"><span class="keyword">double</span></span>(duration.<span class="built_in">count</span>()) * microseconds::period::num / microseconds::period::den</span><br><span class="line">         &lt;&lt; <span class="string">&quot;s&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以及，同样的计时器在<code>filename</code>一题中，如果把输出部分套在<code>while-loop</code>里面会出<code>error</code>，故而应该把输出时间部分写在循环外。</p>
<h2 id="3-3-调试"><a href="#3-3-调试" class="headerlink" title="3.3 调试"></a>3.3 调试</h2><p>首先在基本的对拍上，由于经常性会出现python time out的问题，先手动修改b.py文件的timeout参数为100：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">run(sys.argv[<span class="number">1</span>], stdin=<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>), stdout=<span class="built_in">open</span>(<span class="string">&quot;output1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>),</span><br><span class="line">    timeout=<span class="number">100.</span>, shell=<span class="literal">True</span>).check_returncode()</span><br><span class="line"></span><br><span class="line">run(sys.argv[<span class="number">2</span>], stdin=<span class="built_in">open</span>(<span class="string">&quot;input.txt&quot;</span>), stdout=<span class="built_in">open</span>(<span class="string">&quot;output2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>),</span><br><span class="line">    timeout=<span class="number">100.</span>, shell=<span class="literal">True</span>).check_returncode()</span><br></pre></td></tr></table></figure>
<p>随后修改makedata.py可以提高数据强度：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">n = <span class="number">500</span></span><br><span class="line">hi = <span class="number">10</span> ** <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    a = random.randrange(<span class="number">10</span>**<span class="number">4995</span>, hi)  <span class="comment"># randrange 不包含 hi</span></span><br><span class="line">    b = random.randrange(<span class="number">10</span>**<span class="number">4995</span>, hi)</span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br></pre></td></tr></table></figure>
<p>注意到makedata.py其实完全可以用来手动生成测试数据，用来结合计时器调试。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python3 makedata.py &gt;1.in</span><br><span class="line">g++ time.cpp -O2 -o time.out</span><br><span class="line">./time.out &lt;1.in&gt; 1.out</span><br><span class="line">grep time 1.out</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Zuma实验报告</title>
    <url>/2021/10/13/CS/DSA/zuma/</url>
    <content><![CDATA[<h1 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h1><ol>
<li><p>最严重错误类型：Runtime Error</p>
</li>
<li><p>出现错误的原因：在play函数里，没有显式定义return的条件，导致函数可能会尾递归调用play(-1)，随后在<code>char color = a.at(rank);</code>这一行调用a(-1)，导致了访问越界，随即发生Runtime Error</p>
</li>
<li><p>构建思路：构建一个能够前向消除到rank=0位置的测例，然后导致程序直接调用play(-1)即可。</p>
</li>
<li><p>测例如下：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AABBAB</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> B</span><br></pre></td></tr></table></figure>
<h1 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h1><ol>
<li><p>最严重错误类型：Runtime Error</p>
</li>
<li><p>出现错误的原因：在play函数里，虽然显式定义return的条件，但是函数会尾递归调用play(0)，如果此时字符串已经为空，随后会在<code>char color = a.at(rank);</code>这一行调用a(0)，导致了访问越界，随即发生Runtime Error</p>
</li>
<li><p>构建思路：构建一个能够在运行过程中消除到空串的测例，然后导致程序在直接调用play(0)即可。</p>
</li>
<li><p>测例如下：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ACCBA</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> B</span><br><span class="line"><span class="number">0</span> A</span><br><span class="line"><span class="number">2</span> B</span><br><span class="line"><span class="number">4</span> C</span><br><span class="line"><span class="number">0</span> A</span><br></pre></td></tr></table></figure>
<h1 id="代码三"><a href="#代码三" class="headerlink" title="代码三"></a>代码三</h1><ol>
<li><p>最严重错误类型：Time Limit Exceeded</p>
</li>
<li><p>出现错误的原因：由于未采用分块的思路，当字符串格外长后，每次在特定位置插入会带着大量的字符移动，移动效率过低。当样例强度较大时，会导致超时。</p>
</li>
<li><p>构建思路：构建一个输入强度较高的测例，本身输入字符串长度接近500000，随后 499999次操作每次均只添加字符，不导致消除。</p>
</li>
</ol>
<h1 id="代码四"><a href="#代码四" class="headerlink" title="代码四"></a>代码四</h1><ol>
<li>最严重错误类型：Wrong Answer</li>
<li>出现错误的原因：在play函数里，left起始位置为rank，正确程序需要在<code>while (left &gt; 0 &amp;&amp; a.at(left) == color) --left;</code>语句结束后添加<code>left++;</code>但本段代码没有此语句。</li>
<li>构建思路：构建一个能够在运行过程中，插入的字符刚好与左侧或者右侧相同，且这两个字符位于字符串中部，例如向AABCCBA的B的左侧插入一个新的B，得AABBCCBA，导致程序在不该发生消除的时刻消除ABB成为ACCBA，从而导致Wrong Answer。</li>
<li>测例如下：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ACBA</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> C</span><br></pre></td></tr></table></figure>
<h1 id="代码五"><a href="#代码五" class="headerlink" title="代码五"></a>代码五</h1><ol>
<li>最严重错误类型：Wrong Answer</li>
<li>出现错误的原因：代码鲁棒性过低，由于读取字符串采用了cin，而cin无法读取空串。倘若初始字符串为空串，则会导致程序无法读取所有数据，导致Wrong answer。</li>
<li>构建思路：构建一个初始字符串为空串的样例即可。</li>
<li>测例如下：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span> C</span><br></pre></td></tr></table></figure>
<h1 id="代码六"><a href="#代码六" class="headerlink" title="代码六"></a>代码六</h1><ol>
<li><p>最严重错误类型：Wrong Answer</p>
</li>
<li><p>出现错误的原因：由于字符串采用了二维数组，当某个数组插入后达到了块的最大值后，如果不对块进行重组，则再插入会导致字符串向后移动后溢出，将会溢出到下一块中，覆盖下一块的字符，接下来继续操作则导致Wrong Answer</p>
</li>
<li><p>构建思路：构建一个向同一位置插入多次珠子，导致溢出到下一块的测例即可。</p>
</li>
</ol>
<h1 id="代码七"><a href="#代码七" class="headerlink" title="代码七"></a>代码七</h1><ol>
<li><p>最严重错误类型：Wrong Answer</p>
</li>
<li><p>出现错误的原因：在第96行，如下语句本意是用于处理跳转，即待消除的珠子位于不同的块中，则会左侧索引向前跳跃。但是左侧索引可能并不只跳跃一次，譬如XXXXA|A|BXXXX（用X代表其他非A字符，而|表示不同的块的分割），当我们向第三块开头插入一个A后，实际上需要连续跳跃两次，然而代码七只跳跃了一次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (l.second &lt; <span class="number">0</span> &amp;&amp; l.first &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    l.first--;</span><br><span class="line">    <span class="keyword">if</span> (l.first &gt;= <span class="number">0</span>)</span><br><span class="line">        l.second += plen[l.first];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建思路：构建经过多次消除后会转化为XXXXA|A|BXXXX的一个例子，随后向第三块开头插入一个A，则本该发生消除的地方没有发生消除，导致Wrong Answer。</p>
</li>
</ol>
<h1 id="代码八"><a href="#代码八" class="headerlink" title="代码八"></a>代码八</h1><ol>
<li>最严重错误类型：Wrong Answer</li>
<li>出现错误的原因：在第92行，由于缺失了其他代码所有的<code>while(1)</code>控制，导致代码八只会发生一次消除，而无法发生连续消除。</li>
<li>构建思路：构建任意一个会发生连续消除的测例即可。</li>
<li>测例如下：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AABBA</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> B</span><br></pre></td></tr></table></figure>
<h1 id="代码九"><a href="#代码九" class="headerlink" title="代码九"></a>代码九</h1><ol>
<li><p>最严重错误类型：Runtime Error</p>
</li>
<li><p>出现错误的原因：代码九没有考虑在同一块内部发生消除的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (l.first &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    plen[l.first] = l.second + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r.first &lt; pn) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = plen[r.first] - r.second;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">memmove</span>(&amp;p[r.first][<span class="number">0</span>], &amp;p[r.first][r.second], len);</span><br><span class="line">    &#125;</span><br><span class="line">    plen[r.first] = len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码中，倘若消除发生在同一块内，恰好消除三个珠子后，会直接导致len&lt;0，而plen数组存放的数据为unsigned int，直接导致某一块的长度溢出了最长长度，导致Runtime Error</p>
</li>
<li><p>构建思路：构建任意一个在同一块内部会发生消除的测例即可。</p>
<p>测例如下：</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">AABBD</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span> B</span><br></pre></td></tr></table></figure>
<h1 id="代码十"><a href="#代码十" class="headerlink" title="代码十"></a>代码十</h1><ol>
<li><p>最严重错误类型：Wrong Answer</p>
</li>
<li><p>出现错误的原因：代码十因为下方这一行代码，会导致left所在的块长度也被记为0，随后的在find()函数里导致查找到的位置出错，导致Wrong Answer。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l.first; i &lt; r.first; i++)</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建思路：只需在消除完成后，不断插入直到访问地址失败即可。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
  <entry>
    <title>Graphic</title>
    <url>/2020/09/07/CS/DSA/graphic/</url>
    <content><![CDATA[<h1 id="PA-1-2-Graphic"><a href="#PA-1-2-Graphic" class="headerlink" title="PA 1-2 Graphic"></a>PA 1-2 Graphic</h1><h2 id="一、算法思路"><a href="#一、算法思路" class="headerlink" title="一、算法思路"></a>一、算法思路</h2><p>取查询的点为$N(p,q)$考虑到每条线段与$x$轴，$y$轴正半轴构成的三角形是完全的包含关系，故而当$ON$与某条线段$A(x_0,0)B(0,y_0)$相交时，所有比$AB$更短的线段都会与$ON$相交，故而只需找出$N$点恰好夹在某两条线段之间，或者恰好落在某条线段上，则可以完成查询，即为二分查找。</p>
<p>二分查找建立在有序向量的基础上，故而我们先对输入的横纵坐标分别进行快速排序，形成$x$轴与$y$轴上的两个有序向量，通过一一组合，实际上形成了若干条线段的有序向量。</p>
<p>考虑$N$与$AB$的关系，由于$N$必然在第一象限，且$O$点必在$AB$左侧，故而仅需考虑$N$点到线段$AB$的有向距离。</p>
<p>点$(x_0,y_0)$到直线$Ax+By+C=0$的有向距离公式为：</p>
<script type="math/tex; mode=display">
\vec{D}=\frac{Ax_0+By_0+C}{\sqrt{A^2+B^2}}</script><p>而本题中，线段$AB$的直线方程为$y_0x+x_0y-x_0y_0=0$本题仅需要定性给出$N$在线段$AB$的左侧、右侧、还是恰好在线段上，故而仅仅构造函数$f(x,y)=y_0x+x_0y-x_0y_0$，可以根据此进行分类。</p>
<p>考虑到坐标范围上限为$2^{31}$故而需要采用<code>unsigned long long</code>或者<code>long long</code>，但是$f(x,y)$可能为负数，故而不能采用<code>unsigned long long</code>，且坐标相乘再相加，最高在$2^{62}$量级，故而<code>long long</code>足以完成计算过程。</p>
<h2 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h2><p>考虑到输入的随机性，几乎不会出现完全逆序的输入通过快速排序修改为顺序，故而并不会出现$O(n^2)$的$\text{worst case}$，从而快排的期望时间复杂度为$O(nlog(n))$，而每次二分查找，每次时间复杂度为$O(log(n)$)，判断相交的时间复杂度为$O(1)$，从而总共的时间复杂度为$O((m+n)log(n))$。</p>
<p>对于空间复杂度，整个算法过程除了储存坐标之外，并没有开辟其他同量级或者更高量级的空间，而二分查找实质上是一种就地算法，由于采用了非递归方式实现二分查找，二分查找的空间复杂度为$O(1)$，从而算法排除存储输入数据后的空间复杂度为$O(1)$，包含储存输入数据，则空间复杂度为$O(n)$。</p>
<h2 id="三、问题与解决"><a href="#三、问题与解决" class="headerlink" title="三、问题与解决"></a>三、问题与解决</h2><h3 id="3-1long-long使用"><a href="#3-1long-long使用" class="headerlink" title="3.1long long使用"></a>3.1long long使用</h3><p>前文论述过需要用long long即可，可是一开始我对这件事有误解。</p>
<p>起初我以为两个int直接相乘会转换为long long，但是从汇编角度而言，这完全是错的。但是将第一个参数强制转换为long long后，会对第二个乘数也进行自动转换。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> le = (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)a*y + (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)b*x;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> re = (<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>)x*y;</span><br><span class="line"><span class="keyword">if</span> (le&gt;re) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (le&lt;re) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-降低快排被-O-n-2-的概率"><a href="#3-2-降低快排被-O-n-2-的概率" class="headerlink" title="3.2 降低快排被$O(n^2)$的概率"></a>3.2 降低快排被$O(n^2)$的概率</h2><p>如果默认以起点作为快排的第一个轴点，快排可能被一组完全逆序的输入进行效率打击时间复杂度被破坏为$O(n^2)$，故而在快排前先将0号元素与mid元素swap。</p>
]]></content>
      <categories>
        <category>DSA</category>
      </categories>
  </entry>
</search>
